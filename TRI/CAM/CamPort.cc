// This Test Port skeleton source file was generated by the
// TTCN-3 Compiler of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for Lenard Nagy (elnrnag@elx1pjld12-hz) on Thu Oct 22 13:32:32 2015

// Copyright Ericsson Telecom AB 2000-2014

// You may modify this file. Complete the body of empty functions and
// add your member functions here.

#include "CamPort.hh"
#include <unistd.h>

namespace LibItsCam__TestSystem {

CamPort::CamPort(const char *par_port_name)
	: CamPort_BASE(par_port_name)
{

}

CamPort::~CamPort()
{

}

void CamPort::set_parameter(const char * parameter_name,
	const char * parameter_value)
{
  TRI_set_param(parameter_name,parameter_value,mp_data);
}

/*void CamPort::Handle_Fd_Event(int fd, boolean is_readable,
	boolean is_writable, boolean is_error) {}*/

void CamPort::Handle_Fd_Event_Error(int fd)
{
  Handle_Fd_Event_Readable(fd);
}

void CamPort::Handle_Fd_Event_Writable(int /*fd*/)
{

}

void CamPort::Handle_Fd_Event_Readable(int fd)
{
  int res=TRI__interface__Types::TRI_read_socket(fd,mp_data.buff);

  if(res<=0){
    TTCN_error("TRI_Mapper connection lost");
  }
  
  TRI__interface__Types::TRI__mapper__PDU pdu;
  
  while(TRI_get_message(mp_data.buff,pdu)){
    switch(pdu.msg().get_selection()){
      case TRI__interface__Types::Msg__union::ALT_enqueue__msg:{
/**** ****/
// put the decoder here
	LibItsCam__TestSystem::CamInd  data;
	data = CAM__Types::f__dec__CamInd(pdu.msg().enqueue__msg().data().encoded__data());



/**** ****/
          incoming_message(data);
        }
        break;
      case TRI__interface__Types::Msg__union::ALT_result:
        if(pdu.msg().result().result()==TRI__interface__Types::Result__value::TRI__error){
          TTCN_error("Unsucessfull send");
        }
        break;
      default:
        TTCN_error("Unexpected message");
        break;
    }
  }


}

/*void CamPort::Handle_Timeout(double time_since_last_call) {}*/

void CamPort::user_map(const char * system_port)
{
    TRI_map("CamPort",system_port,mp_data);
    Handler_Add_Fd_Read(mp_data.tri_socket);

}

void CamPort::user_unmap(const char * /*system_port*/)
{
  TRI_unmap(mp_data);
  Uninstall_Handler();
}

void CamPort::user_start()
{
  TRI_start("CamPort",get_name(),(component)self,COMPONENT::get_component_name(self),mp_data);
}

void CamPort::user_stop()
{
  TRI_stop(mp_data);
}

void CamPort::outgoing_send(const LibItsCam__TestSystem::CamReq& send_par)
{
  TRI__interface__Types::TRI__mapper__PDU pdu;

/**** ****/
// put the encoder here
   pdu.msg().sendmsg().data().encoded__data()=CAM__Types::f__enc__CamReq(send_par);
  /**** ****/

  pdu.msg().sendmsg().addr()=OMIT_VALUE;

  pdu.msg__id()=mp_data.msg_seq_num;
  mp_data.msg_seq_num++;
  
  TRI__interface__Types::TRI_send(mp_data.tri_socket,pdu);
}

} /* end of namespace */

