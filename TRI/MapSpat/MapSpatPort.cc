// This Test Port skeleton source file was generated by the
// TTCN-3 Compiler of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for Lenard Nagy (elnrnag@elx1pjld12-hz) on Fri Dec 11 09:24:36 2015

// Copyright Ericsson Telecom AB 2000-2014

// You may modify this file. Complete the body of empty functions and
// add your member functions here.

#include "MapSpatPort.hh"

namespace LibItsMapSpat__TestSystem {

  MapSpatPort::MapSpatPort(const char *par_port_name)
    : MapSpatPort_BASE(par_port_name)
  {
  
  }

  MapSpatPort::~MapSpatPort()
  {

  }

  void MapSpatPort::set_parameter(const char * parameter_name,
				  const char * parameter_value)
  {
    TRI_set_param(parameter_name,parameter_value,mp_data);
  }

  /*void MapSpatPort::Handle_Fd_Event(int fd, boolean is_readable,
    boolean is_writable, boolean is_error) {}*/

  void MapSpatPort::Handle_Fd_Event_Error(int fd)
  {
    Handle_Fd_Event_Readable(fd);
  }

  void MapSpatPort::Handle_Fd_Event_Writable(int /*fd*/)
  {

  }

  void MapSpatPort::Handle_Fd_Event_Readable(int fd)
  {
    int res=TRI__interface__Types::TRI_read_socket(fd,mp_data.buff);

    if(res<=0){
      TTCN_error("TRI_Mapper connection lost");
    }
  
    TRI__interface__Types::TRI__mapper__PDU pdu;
  
    while(TRI_get_message(mp_data.buff,pdu)){
      switch(pdu.msg().get_selection()){
      case TRI__interface__Types::Msg__union::ALT_enqueue__msg:{
	/**** ****/
	// put the decoder here
	TTCN__EncDec::MapSpatInd mapSpatInd;
	mapSpatInd = TTCN__EncDec::f__dec__MapSpatInd(pdu.msg().enqueue__msg().data().encoded__data());

	LibItsMapSpat__TestSystem::MapInd  mapData;
	LibItsMapSpat__TestSystem::SpatInd  spatData;
	
	switch(mapSpatInd.get_selection()) {
	{
	  case TTCN__EncDec::MapSpatInd::ALT_mapInd:
	    mapData = mapSpatInd.mapInd();
	    incoming_message(mapData);
	    break;
	  case TTCN__EncDec::MapSpatInd::ALT_spatInd:
	    spatData = mapSpatInd.spatInd();
	    incoming_message(spatData);
	    break;
	  default:
	    TTCN_error("Unexpected MAP/SPAT message");
	  break;
	}
	}
	/**** ****/
      }
        break;
      case TRI__interface__Types::Msg__union::ALT_result:
        if(pdu.msg().result().result()==TRI__interface__Types::Result__value::TRI__error){
          TTCN_error("Unsucessfull send");
        }
        break;
      default:
        TTCN_error("Unexpected message");
        break;
      }

    }
  }

  /*void MapSpatPort::Handle_Timeout(double time_since_last_call) {}*/

  void MapSpatPort::user_map(const char * system_port)
  {
    TRI_map("MapSpatPort",system_port,mp_data);
    Handler_Add_Fd_Read(mp_data.tri_socket);
  }

  void MapSpatPort::user_unmap(const char * /*system_port*/)
  {
    TRI_unmap(mp_data);
    Uninstall_Handler();
  }

  void MapSpatPort::user_start()
  {
    TRI_start("MapSpatPort",get_name(),(component)self,COMPONENT::get_component_name(self),mp_data);
  }

  void MapSpatPort::user_stop()
  {
    TRI_stop(mp_data);
  }

  void MapSpatPort::outgoing_send(const LibItsMapSpat__TestSystem::MapReq& send_par)
  {
    TRI__interface__Types::TRI__mapper__PDU pdu;

    /**** ****/
    // put the encoder here
    pdu.msg().sendmsg().data().encoded__data()=MAP__Types::f__enc__MapReq(send_par);
    /**** ****/

    pdu.msg().sendmsg().addr()=OMIT_VALUE;

    pdu.msg__id()=mp_data.msg_seq_num;
    mp_data.msg_seq_num++;
  
    TRI__interface__Types::TRI_send(mp_data.tri_socket,pdu);
  }

  void MapSpatPort::outgoing_send(const LibItsMapSpat__TestSystem::SpatReq& send_par)
  {
    TRI__interface__Types::TRI__mapper__PDU pdu;

    /**** ****/
    // put the encoder here
    pdu.msg().sendmsg().data().encoded__data()=SPAT__Types::f__enc__SpatReq(send_par);
    /**** ****/

    pdu.msg().sendmsg().addr()=OMIT_VALUE;

    pdu.msg__id()=mp_data.msg_seq_num;
    mp_data.msg_seq_num++;
  
    TRI__interface__Types::TRI_send(mp_data.tri_socket,pdu);
  }

} /* end of namespace */

