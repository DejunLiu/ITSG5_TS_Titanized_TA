// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsDenm_TypesAndValues.hh"

namespace LibItsDenm__TypesAndValues {

/* Prototypes of static functions */

static void pre_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x6a, 0xa1, 0x3b, 0x5f, 0xfb, 0x03, 0x33, 0x99, 0xfb, 0x34, 0x49, 0xef, 0x53, 0xfd, 0xb5, 0xb2 };

/* Global variable definitions */

const TTCN_RAWdescriptor_t Trigger_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for Trigger
const TTCN_Typedescriptor_t Trigger_descr_ = { "@LibItsDenm_TypesAndValues.Trigger", NULL, &Trigger_raw_, NULL, NULL, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t SituationContainerList_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for SituationContainerList
const TTCN_Typedescriptor_t SituationContainerList_descr_ = { "@LibItsDenm_TypesAndValues.SituationContainerList", NULL, &SituationContainerList_raw_, NULL, NULL, NULL, &DENM__PDU__Descriptions::SituationContainer_descr_, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t ActionIDList_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for ActionIDList
const TTCN_Typedescriptor_t ActionIDList_descr_ = { "@LibItsDenm_TypesAndValues.ActionIDList", NULL, &ActionIDList_raw_, NULL, NULL, NULL, &ITS__Container::ActionID_descr_, TTCN_Typedescriptor_t::DONTCARE };
static INTEGER const_c__protocolVersionDenm;
const INTEGER& c__protocolVersionDenm = const_c__protocolVersionDenm;
static INTEGER const_c__messageIdDenm;
const INTEGER& c__messageIdDenm = const_c__messageIdDenm;
static INTEGER const_c__duration__2sec;
const INTEGER& c__duration__2sec = const_c__duration__2sec;
static INTEGER const_c__duration__5sec;
const INTEGER& c__duration__5sec = const_c__duration__5sec;
static INTEGER const_c__duration__10sec;
const INTEGER& c__duration__10sec = const_c__duration__10sec;
static INTEGER const_c__interval__1sec;
const INTEGER& c__interval__1sec = const_c__interval__1sec;
static INTEGER const_c__interval__2sec;
const INTEGER& c__interval__2sec = const_c__interval__2sec;
static INTEGER const_c__interval__4sec;
const INTEGER& c__interval__4sec = const_c__interval__4sec;
static INTEGER const_c__interval__5sec;
const INTEGER& c__interval__5sec = const_c__interval__5sec;
static INTEGER const_c__interval__10sec;
const INTEGER& c__interval__10sec = const_c__interval__10sec;
const TTCN_RAWdescriptor_t UtDenmTrigger_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmTrigger
const TTCN_JSONdescriptor_t UtDenmTrigger_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtDenmTrigger_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmTrigger", NULL, &UtDenmTrigger_raw_, NULL, NULL, &UtDenmTrigger_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmTriggerResult_result_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtDenmTriggerResult_result_xer_ = { {"result>\n", "result>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtDenmTriggerResult_result_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmTriggerResult.result", &BOOLEAN_ber_, &UtDenmTriggerResult_result_raw_, &BOOLEAN_text_, &UtDenmTriggerResult_result_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmTriggerResult_actionId_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmTriggerResult_actionId
const TTCN_Typedescriptor_t UtDenmTriggerResult_actionId_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmTriggerResult.actionId", &SEQUENCE_ber_, &UtDenmTriggerResult_actionId_raw_, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmTriggerResult_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmTriggerResult
const TTCN_JSONdescriptor_t UtDenmTriggerResult_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtDenmTriggerResult_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmTriggerResult", NULL, &UtDenmTriggerResult_raw_, NULL, NULL, &UtDenmTriggerResult_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmUpdate_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmUpdate
const TTCN_JSONdescriptor_t UtDenmUpdate_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtDenmUpdate_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmUpdate", NULL, &UtDenmUpdate_raw_, NULL, NULL, &UtDenmUpdate_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmUpdateResult_result_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtDenmUpdateResult_result_xer_ = { {"result>\n", "result>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtDenmUpdateResult_result_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmUpdateResult.result", &BOOLEAN_ber_, &UtDenmUpdateResult_result_raw_, &BOOLEAN_text_, &UtDenmUpdateResult_result_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmUpdateResult_actionId_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmUpdateResult_actionId
const TTCN_Typedescriptor_t UtDenmUpdateResult_actionId_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmUpdateResult.actionId", &SEQUENCE_ber_, &UtDenmUpdateResult_actionId_raw_, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmUpdateResult_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmUpdateResult
const TTCN_JSONdescriptor_t UtDenmUpdateResult_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtDenmUpdateResult_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmUpdateResult", NULL, &UtDenmUpdateResult_raw_, NULL, NULL, &UtDenmUpdateResult_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmTermination_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmTermination
const TTCN_JSONdescriptor_t UtDenmTermination_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtDenmTermination_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmTermination", NULL, &UtDenmTermination_raw_, NULL, NULL, &UtDenmTermination_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmTerminationResult_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtDenmTerminationResult_xer_ = { {"UtDenmTerminationResult>\n", "UtDenmTerminationResult>\n"}, {25, 25}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtDenmTerminationResult_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmTerminationResult", &BOOLEAN_ber_, &UtDenmTerminationResult_raw_, &BOOLEAN_text_, &UtDenmTerminationResult_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmEventInd_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmEventInd
const TTCN_JSONdescriptor_t UtDenmEventInd_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtDenmEventInd_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmEventInd", NULL, &UtDenmEventInd_raw_, NULL, NULL, &UtDenmEventInd_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmEventIndList_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmEventIndList
const TTCN_Typedescriptor_t UtDenmEventIndList_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmEventIndList", NULL, &UtDenmEventIndList_raw_, NULL, NULL, NULL, &UtDenmEventInd_descr_, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtDenmActionIDList_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtDenmActionIDList
const TTCN_Typedescriptor_t UtDenmActionIDList_descr_ = { "@LibItsDenm_TypesAndValues.UtDenmActionIDList", NULL, &UtDenmActionIDList_raw_, NULL, NULL, NULL, &ITS__Container::ActionID_descr_, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsDenm_TypesAndValues", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

Trigger::Trigger()
{
enum_value = UNBOUND_VALUE;
}

Trigger::Trigger(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @LibItsDenm_TypesAndValues.Trigger with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Trigger::Trigger(enum_type other_value)
{
enum_value = other_value;
}

Trigger::Trigger(const Trigger& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
enum_value = other_value.enum_value;
}

Trigger& Trigger::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @LibItsDenm_TypesAndValues.Trigger.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Trigger& Trigger::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Trigger& Trigger::operator=(const Trigger& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
enum_value = other_value.enum_value;
return *this;
}

boolean Trigger::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value == other_value;
}

boolean Trigger::operator==(const Trigger& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value == other_value.enum_value;
}

boolean Trigger::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value < other_value;
}

boolean Trigger::operator<(const Trigger& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value < other_value.enum_value;
}

boolean Trigger::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value > other_value;
}

boolean Trigger::operator>(const Trigger& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value > other_value.enum_value;
}

const char *Trigger::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case e__ets: return "e_ets";
case e__iut: return "e_iut";
default: return "<unknown>";
}
}

Trigger::enum_type Trigger::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "e_ets")) return e__ets;
else if (!strcmp(str_par, "e_iut")) return e__iut;
else return UNKNOWN_VALUE;
}

boolean Trigger::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int Trigger::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @LibItsDenm_TypesAndValues.Trigger.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Trigger::enum2int(const Trigger& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @LibItsDenm_TypesAndValues.Trigger.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void Trigger::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @LibItsDenm_TypesAndValues.Trigger.", int_val);
enum_value = (enum_type)int_val;
}

Trigger::operator Trigger::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return enum_value;
}

void Trigger::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Trigger::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    char* enum_name = param.get_enumerated();
    enum_value = (enum_name != NULL) ? str_to_enum(enum_name) : UNKNOWN_VALUE;
    if (is_valid_enum(enum_value)) {
      return;
    }
    mp = param.get_referenced_param();
  }
  if (mp->get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@LibItsDenm_TypesAndValues.Trigger");
  enum_value = str_to_enum(mp->get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @LibItsDenm_TypesAndValues.Trigger.");
  }
}

Module_Param* Trigger::get_param(Module_Param_Name& /* param_name */) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  return new Module_Param_Enumerated(mcopystr(enum_to_str(enum_value)));
}

void Trigger::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
text_buf.push_int(enum_value);
}

void Trigger::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @LibItsDenm_TypesAndValues.Trigger.", enum_value);
}

void Trigger::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Trigger::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Trigger::RAW_decode(const TTCN_Typedescriptor_t& p_td,TTCN_Buffer& p_buf,int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{
  int decoded_value = 0;
  int decoded_length = RAW_decode_enum_type(p_td, p_buf, limit, top_bit_ord, decoded_value, 2, no_err);
  if (decoded_length < 0) return decoded_length;
  if (is_valid_enum(decoded_value)) enum_value = (enum_type)decoded_value;
  else {
    if(no_err){
     return -1;
    } else {
    TTCN_EncDec_ErrorContext::error
      (TTCN_EncDec::ET_ENC_ENUM, "Invalid enum value '%d' for '%s': ",decoded_value, p_td.name);
    enum_value = UNKNOWN_VALUE;
    }
  }
  return decoded_length;
}

int Trigger::RAW_encode(const TTCN_Typedescriptor_t& p_td, RAW_enc_tree& myleaf) const
{
  return RAW_encode_enum_type(p_td, myleaf, (int)enum_value, 2);
}

void Trigger_template::copy_template(const Trigger_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Trigger_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
}
}

Trigger_template::Trigger_template()
{
}

Trigger_template::Trigger_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Trigger_template::Trigger_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Trigger::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @LibItsDenm_TypesAndValues.Trigger with unknown numeric value %d.", other_value);
single_value = (Trigger::enum_type)other_value;
}

Trigger_template::Trigger_template(Trigger::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Trigger_template::Trigger_template(const Trigger& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Trigger::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
single_value = other_value.enum_value;
}

Trigger_template::Trigger_template(const OPTIONAL<Trigger>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Trigger::enum_type)(const Trigger&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @LibItsDenm_TypesAndValues.Trigger from an unbound optional field.");
}
}

Trigger_template::Trigger_template(const Trigger_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Trigger_template::~Trigger_template()
{
clean_up();
}

boolean Trigger_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Trigger_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Trigger::UNBOUND_VALUE;
}

void Trigger_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Trigger_template& Trigger_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Trigger_template& Trigger_template::operator=(int other_value)
{
if (!Trigger::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @LibItsDenm_TypesAndValues.Trigger.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Trigger::enum_type)other_value;
return *this;
}

Trigger_template& Trigger_template::operator=(Trigger::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Trigger_template& Trigger_template::operator=(const Trigger& other_value)
{
if (other_value.enum_value == Trigger::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @LibItsDenm_TypesAndValues.Trigger to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Trigger_template& Trigger_template::operator=(const OPTIONAL<Trigger>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Trigger::enum_type)(const Trigger&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
}
return *this;
}

Trigger_template& Trigger_template::operator=(const Trigger_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Trigger_template::match(Trigger::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
}
return FALSE;
}

boolean Trigger_template::match(const Trigger& other_value, boolean) const
{
if (other_value.enum_value == Trigger::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @LibItsDenm_TypesAndValues.Trigger with an unbound value.");
return match(other_value.enum_value);
}

Trigger::enum_type Trigger_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return single_value;
}

void Trigger_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Trigger_template[list_length];
}

Trigger_template& Trigger_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
return value_list.list_value[list_index];
}

void Trigger_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Trigger::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Trigger_template::log_match(const Trigger& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Trigger_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
}
}

void Trigger_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Trigger::enum_type)text_buf.pull_int().get_val();
if (!Trigger::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @LibItsDenm_TypesAndValues.Trigger.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Trigger_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @LibItsDenm_TypesAndValues.Trigger.");
}
}

boolean Trigger_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Trigger_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Trigger_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    char* enum_name = param.get_enumerated();
    Trigger::enum_type enum_val = (enum_name != NULL) ? Trigger::str_to_enum(enum_name) : Trigger::UNKNOWN_VALUE;
    if (Trigger::is_valid_enum(enum_val)) {
      *this = enum_val;
      is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
      return;
    }
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Trigger_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Enumerated: {
    Trigger::enum_type enum_val = Trigger::str_to_enum(mp->get_enumerated());
    if (!Trigger::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @LibItsDenm_TypesAndValues.Trigger.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@LibItsDenm_TypesAndValues.Trigger");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Trigger_template::get_param(Module_Param_Name& param_name) const
{
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE:
    mp = new Module_Param_Enumerated(mcopystr(Trigger::enum_to_str(single_value)));
    break;
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Trigger_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.Trigger");
}


const DENM__PDU__Descriptions::SituationContainer SituationContainerList::UNBOUND_ELEM;
SituationContainerList::SituationContainerList()
{
val_ptr = NULL;
}

SituationContainerList::SituationContainerList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

SituationContainerList::SituationContainerList(const SituationContainerList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

SituationContainerList::~SituationContainerList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void SituationContainerList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

SituationContainerList& SituationContainerList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

SituationContainerList& SituationContainerList::operator=(const SituationContainerList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean SituationContainerList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return val_ptr->n_elements == 0 ;
}

boolean SituationContainerList::operator==(const SituationContainerList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

DENM__PDU__Descriptions::SituationContainer& SituationContainerList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.SituationContainerList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (DENM__PDU__Descriptions::SituationContainer**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new DENM__PDU__Descriptions::SituationContainer;
}
return *val_ptr->value_elements[index_value];
}

DENM__PDU__Descriptions::SituationContainer& SituationContainerList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return (*this)[(int)index_value];
}

const DENM__PDU__Descriptions::SituationContainer& SituationContainerList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.SituationContainerList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @LibItsDenm_TypesAndValues.SituationContainerList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const DENM__PDU__Descriptions::SituationContainer& SituationContainerList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return (*this)[(int)index_value];
}

SituationContainerList SituationContainerList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

SituationContainerList SituationContainerList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

SituationContainerList SituationContainerList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

SituationContainerList SituationContainerList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
SituationContainerList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new DENM__PDU__Descriptions::SituationContainer(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

SituationContainerList SituationContainerList::operator+(const SituationContainerList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @LibItsDenm_TypesAndValues.SituationContainerList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
SituationContainerList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new DENM__PDU__Descriptions::SituationContainer(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new DENM__PDU__Descriptions::SituationContainer(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

SituationContainerList SituationContainerList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@LibItsDenm_TypesAndValues.SituationContainerList","element");
SituationContainerList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new DENM__PDU__Descriptions::SituationContainer(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

SituationContainerList SituationContainerList::replace(int index, int len, const SituationContainerList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@LibItsDenm_TypesAndValues.SituationContainerList","element");
SituationContainerList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new DENM__PDU__Descriptions::SituationContainer(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new DENM__PDU__Descriptions::SituationContainer(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new DENM__PDU__Descriptions::SituationContainer(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

SituationContainerList SituationContainerList::replace(int index, int len, const SituationContainerList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void SituationContainerList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (DENM__PDU__Descriptions::SituationContainer**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (DENM__PDU__Descriptions::SituationContainer**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @LibItsDenm_TypesAndValues.SituationContainerList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (DENM__PDU__Descriptions::SituationContainer**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean SituationContainerList::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int SituationContainerList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return val_ptr->n_elements;
}

int SituationContainerList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void SituationContainerList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void SituationContainerList::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@LibItsDenm_TypesAndValues.SituationContainerList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List:
      set_size(mp->get_size());
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.SituationContainerList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.SituationContainerList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

Module_Param* SituationContainerList::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of type `@LibItsDenm_TypesAndValues.SituationContainerList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Vector<Module_Param*> values;
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    values.push_back((*this)[i].get_param(param_name));
  }
  Module_Param_Value_List* mp = new Module_Param_Value_List();
  mp->add_list_with_implicit_ids(&values);
  values.clear();
  return mp;
}

void SituationContainerList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void SituationContainerList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void SituationContainerList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
val_ptr->value_elements = (DENM__PDU__Descriptions::SituationContainer**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void SituationContainerList::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void SituationContainerList::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int SituationContainerList::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean /*no_err*/, int sel_field, boolean first_call){
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  int decoded_length=0;
  int decoded_field_length=0;
  size_t start_of_field=0;
  if(first_call) {
    clean_up();
    val_ptr=new recordof_setof_struct;
    val_ptr->ref_count=1;
    val_ptr->n_elements=0;
    val_ptr->value_elements=NULL;
  }
  int start_field=val_ptr->n_elements;
  if(p_td.raw->fieldlength || sel_field!=-1){
    int a=0;
    if(sel_field==-1) sel_field=p_td.raw->fieldlength;
    for(a=0;a<sel_field;a++){
      decoded_field_length=(*this)[a+start_field].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0) return decoded_field_length;
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
    }
    if(a==0) val_ptr->n_elements=0;
  } else {
    int a=start_field;
    if(limit==0){
      if(!first_call) return -1;
      val_ptr->n_elements=0;
      return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
    }
    while(limit>0){
      start_of_field=p_buf.get_pos_bit();
      decoded_field_length=(*this)[a].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0){
        delete &(*this)[a];
        val_ptr->n_elements--;
        p_buf.set_pos_bit(start_of_field);
        if(a>start_field){
        return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
        } else return -1;
      }
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
      a++;
    }
  }
 return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
}

int SituationContainerList::RAW_encode(const TTCN_Typedescriptor_t& p_td,RAW_enc_tree& myleaf) const{
  int encoded_length=0;
  int encoded_num_of_records=p_td.raw->fieldlength?smaller(val_ptr->n_elements, p_td.raw->fieldlength):val_ptr->n_elements;
  myleaf.isleaf=FALSE;
  myleaf.rec_of=TRUE;
  myleaf.body.node.num_of_nodes=encoded_num_of_records;
  myleaf.body.node.nodes=init_nodes_of_enc_tree(encoded_num_of_records);
  for(int a=0;a<encoded_num_of_records;a++){
    myleaf.body.node.nodes[a]=new RAW_enc_tree(TRUE,&myleaf,&(myleaf.curr_pos),a,p_td.oftype_descr->raw);
    encoded_length+=(*this)[a].RAW_encode(*p_td.oftype_descr,*myleaf.body.node.nodes[a]);
  }
 return myleaf.length=encoded_length;
}

void SituationContainerList_template::copy_value(const SituationContainerList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @LibItsDenm_TypesAndValues.SituationContainerList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (DENM__PDU__Descriptions::SituationContainer_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void SituationContainerList_template::copy_template(const SituationContainerList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (DENM__PDU__Descriptions::SituationContainer_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new SituationContainerList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
break;
}
set_selection(other_value);
}

boolean SituationContainerList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const SituationContainerList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const SituationContainerList*)value_ptr)[value_index], legacy);
else return ((const SituationContainerList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

SituationContainerList_template::SituationContainerList_template()
{
}

SituationContainerList_template::SituationContainerList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

SituationContainerList_template::SituationContainerList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

SituationContainerList_template::SituationContainerList_template(const SituationContainerList& other_value)
{
copy_value(other_value);
}

SituationContainerList_template::SituationContainerList_template(const OPTIONAL<SituationContainerList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const SituationContainerList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.SituationContainerList from an unbound optional field.");
}
}

SituationContainerList_template::SituationContainerList_template(const SituationContainerList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

SituationContainerList_template::~SituationContainerList_template()
{
clean_up();
}

void SituationContainerList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

SituationContainerList_template& SituationContainerList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

SituationContainerList_template& SituationContainerList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

SituationContainerList_template& SituationContainerList_template::operator=(const SituationContainerList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

SituationContainerList_template& SituationContainerList_template::operator=(const OPTIONAL<SituationContainerList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const SituationContainerList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
}
return *this;
}

SituationContainerList_template& SituationContainerList_template::operator=(const SituationContainerList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

DENM__PDU__Descriptions::SituationContainer_template& SituationContainerList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.SituationContainerList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.SituationContainerList.");
    break;
}
return *single_value.value_elements[index_value];
}

DENM__PDU__Descriptions::SituationContainer_template& SituationContainerList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return (*this)[(int)index_value];
}

const DENM__PDU__Descriptions::SituationContainer_template& SituationContainerList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.SituationContainerList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @LibItsDenm_TypesAndValues.SituationContainerList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const DENM__PDU__Descriptions::SituationContainer_template& SituationContainerList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return (*this)[(int)index_value];
}

void SituationContainerList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (DENM__PDU__Descriptions::SituationContainer_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (DENM__PDU__Descriptions::SituationContainer_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int SituationContainerList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int SituationContainerList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.SituationContainerList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.SituationContainerList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.SituationContainerList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.SituationContainerList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.SituationContainerList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.SituationContainerList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.SituationContainerList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @LibItsDenm_TypesAndValues.SituationContainerList");
}

boolean SituationContainerList_template::match(const SituationContainerList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
}
return FALSE;
}

boolean SituationContainerList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

SituationContainerList SituationContainerList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
SituationContainerList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

SituationContainerList SituationContainerList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

SituationContainerList SituationContainerList_template::replace(int index, int len, const SituationContainerList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

SituationContainerList SituationContainerList_template::replace(int index, int len, const SituationContainerList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void SituationContainerList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new SituationContainerList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
}
set_selection(template_type);
}

SituationContainerList_template& SituationContainerList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return value_list.list_value[list_index];
}

void SituationContainerList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void SituationContainerList_template::log_match(const SituationContainerList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void SituationContainerList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
}
}

void SituationContainerList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
single_value.value_elements = (DENM__PDU__Descriptions::SituationContainer_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new DENM__PDU__Descriptions::SituationContainer_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new SituationContainerList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @LibItsDenm_TypesAndValues.SituationContainerList.");
}
}

boolean SituationContainerList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean SituationContainerList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void SituationContainerList_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@LibItsDenm_TypesAndValues.SituationContainerList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    SituationContainerList_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      (*this)[(int)(mp->get_elem(p_i)->get_id()->get_index())].set_param(*mp->get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(mp->get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      switch (mp->get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<mp->get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(mp->get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*mp->get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@LibItsDenm_TypesAndValues.SituationContainerList");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
  if (param.get_length_restriction() != NULL) {
    set_length_range(param);
  }
  else {
    set_length_range(*mp);
  };
}

Module_Param* SituationContainerList_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of template type `@LibItsDenm_TypesAndValues.SituationContainerList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Vector<Module_Param*> values;
    for (int i = 0; i < single_value.n_elements; ++i) {
      values.push_back((*this)[i].get_param(param_name));
    }
    mp = new Module_Param_Value_List();
    mp->add_list_with_implicit_ids(&values);
    values.clear();
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  mp->set_length_restriction(get_length_range());
  return mp;
}

void SituationContainerList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.SituationContainerList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.SituationContainerList");
}


const ITS__Container::ActionID ActionIDList::UNBOUND_ELEM;
ActionIDList::ActionIDList()
{
val_ptr = NULL;
}

ActionIDList::ActionIDList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

ActionIDList::ActionIDList(const ActionIDList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

ActionIDList::~ActionIDList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void ActionIDList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

ActionIDList& ActionIDList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

ActionIDList& ActionIDList::operator=(const ActionIDList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean ActionIDList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
return val_ptr->n_elements == 0 ;
}

boolean ActionIDList::operator==(const ActionIDList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

ITS__Container::ActionID& ActionIDList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.ActionIDList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (ITS__Container::ActionID**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ITS__Container::ActionID(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new ITS__Container::ActionID;
}
return *val_ptr->value_elements[index_value];
}

ITS__Container::ActionID& ActionIDList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.ActionIDList.");
return (*this)[(int)index_value];
}

const ITS__Container::ActionID& ActionIDList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.ActionIDList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @LibItsDenm_TypesAndValues.ActionIDList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const ITS__Container::ActionID& ActionIDList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.ActionIDList.");
return (*this)[(int)index_value];
}

ActionIDList ActionIDList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

ActionIDList ActionIDList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

ActionIDList ActionIDList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

ActionIDList ActionIDList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
ActionIDList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new ITS__Container::ActionID(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

ActionIDList ActionIDList::operator+(const ActionIDList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @LibItsDenm_TypesAndValues.ActionIDList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
ActionIDList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ITS__Container::ActionID(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new ITS__Container::ActionID(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

ActionIDList ActionIDList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@LibItsDenm_TypesAndValues.ActionIDList","element");
ActionIDList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new ITS__Container::ActionID(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

ActionIDList ActionIDList::replace(int index, int len, const ActionIDList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@LibItsDenm_TypesAndValues.ActionIDList","element");
ActionIDList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ITS__Container::ActionID(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new ITS__Container::ActionID(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new ITS__Container::ActionID(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

ActionIDList ActionIDList::replace(int index, int len, const ActionIDList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void ActionIDList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (ITS__Container::ActionID**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ITS__Container::ActionID(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (ITS__Container::ActionID**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @LibItsDenm_TypesAndValues.ActionIDList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (ITS__Container::ActionID**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean ActionIDList::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int ActionIDList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
return val_ptr->n_elements;
}

int ActionIDList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void ActionIDList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void ActionIDList::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@LibItsDenm_TypesAndValues.ActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List:
      set_size(mp->get_size());
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.ActionIDList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.ActionIDList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

Module_Param* ActionIDList::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of type `@LibItsDenm_TypesAndValues.ActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Vector<Module_Param*> values;
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    values.push_back((*this)[i].get_param(param_name));
  }
  Module_Param_Value_List* mp = new Module_Param_Value_List();
  mp->add_list_with_implicit_ids(&values);
  values.clear();
  return mp;
}

void ActionIDList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void ActionIDList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void ActionIDList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @LibItsDenm_TypesAndValues.ActionIDList.");
val_ptr->value_elements = (ITS__Container::ActionID**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new ITS__Container::ActionID;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void ActionIDList::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void ActionIDList::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int ActionIDList::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean /*no_err*/, int sel_field, boolean first_call){
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  int decoded_length=0;
  int decoded_field_length=0;
  size_t start_of_field=0;
  if(first_call) {
    clean_up();
    val_ptr=new recordof_setof_struct;
    val_ptr->ref_count=1;
    val_ptr->n_elements=0;
    val_ptr->value_elements=NULL;
  }
  int start_field=val_ptr->n_elements;
  if(p_td.raw->fieldlength || sel_field!=-1){
    int a=0;
    if(sel_field==-1) sel_field=p_td.raw->fieldlength;
    for(a=0;a<sel_field;a++){
      decoded_field_length=(*this)[a+start_field].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0) return decoded_field_length;
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
    }
    if(a==0) val_ptr->n_elements=0;
  } else {
    int a=start_field;
    if(limit==0){
      if(!first_call) return -1;
      val_ptr->n_elements=0;
      return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
    }
    while(limit>0){
      start_of_field=p_buf.get_pos_bit();
      decoded_field_length=(*this)[a].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0){
        delete &(*this)[a];
        val_ptr->n_elements--;
        p_buf.set_pos_bit(start_of_field);
        if(a>start_field){
        return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
        } else return -1;
      }
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
      a++;
    }
  }
 return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
}

int ActionIDList::RAW_encode(const TTCN_Typedescriptor_t& p_td,RAW_enc_tree& myleaf) const{
  int encoded_length=0;
  int encoded_num_of_records=p_td.raw->fieldlength?smaller(val_ptr->n_elements, p_td.raw->fieldlength):val_ptr->n_elements;
  myleaf.isleaf=FALSE;
  myleaf.rec_of=TRUE;
  myleaf.body.node.num_of_nodes=encoded_num_of_records;
  myleaf.body.node.nodes=init_nodes_of_enc_tree(encoded_num_of_records);
  for(int a=0;a<encoded_num_of_records;a++){
    myleaf.body.node.nodes[a]=new RAW_enc_tree(TRUE,&myleaf,&(myleaf.curr_pos),a,p_td.oftype_descr->raw);
    encoded_length+=(*this)[a].RAW_encode(*p_td.oftype_descr,*myleaf.body.node.nodes[a]);
  }
 return myleaf.length=encoded_length;
}

void ActionIDList_template::copy_value(const ActionIDList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @LibItsDenm_TypesAndValues.ActionIDList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (ITS__Container::ActionID_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void ActionIDList_template::copy_template(const ActionIDList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (ITS__Container::ActionID_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ActionIDList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.ActionIDList.");
break;
}
set_selection(other_value);
}

boolean ActionIDList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const ActionIDList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const ActionIDList*)value_ptr)[value_index], legacy);
else return ((const ActionIDList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

ActionIDList_template::ActionIDList_template()
{
}

ActionIDList_template::ActionIDList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

ActionIDList_template::ActionIDList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

ActionIDList_template::ActionIDList_template(const ActionIDList& other_value)
{
copy_value(other_value);
}

ActionIDList_template::ActionIDList_template(const OPTIONAL<ActionIDList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ActionIDList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.ActionIDList from an unbound optional field.");
}
}

ActionIDList_template::ActionIDList_template(const ActionIDList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

ActionIDList_template::~ActionIDList_template()
{
clean_up();
}

void ActionIDList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ActionIDList_template& ActionIDList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ActionIDList_template& ActionIDList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

ActionIDList_template& ActionIDList_template::operator=(const ActionIDList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ActionIDList_template& ActionIDList_template::operator=(const OPTIONAL<ActionIDList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ActionIDList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
}
return *this;
}

ActionIDList_template& ActionIDList_template::operator=(const ActionIDList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

ITS__Container::ActionID_template& ActionIDList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.ActionIDList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.ActionIDList.");
    break;
}
return *single_value.value_elements[index_value];
}

ITS__Container::ActionID_template& ActionIDList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
return (*this)[(int)index_value];
}

const ITS__Container::ActionID_template& ActionIDList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.ActionIDList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.ActionIDList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @LibItsDenm_TypesAndValues.ActionIDList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const ITS__Container::ActionID_template& ActionIDList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
return (*this)[(int)index_value];
}

void ActionIDList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (ITS__Container::ActionID_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (ITS__Container::ActionID_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int ActionIDList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int ActionIDList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.ActionIDList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.ActionIDList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.ActionIDList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.ActionIDList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.ActionIDList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.ActionIDList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.ActionIDList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @LibItsDenm_TypesAndValues.ActionIDList");
}

boolean ActionIDList_template::match(const ActionIDList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.ActionIDList.");
}
return FALSE;
}

boolean ActionIDList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

ActionIDList ActionIDList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.ActionIDList.");
ActionIDList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

ActionIDList ActionIDList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

ActionIDList ActionIDList_template::replace(int index, int len, const ActionIDList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

ActionIDList ActionIDList_template::replace(int index, int len, const ActionIDList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void ActionIDList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new ActionIDList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
}
set_selection(template_type);
}

ActionIDList_template& ActionIDList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.ActionIDList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @LibItsDenm_TypesAndValues.ActionIDList.");
return value_list.list_value[list_index];
}

void ActionIDList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void ActionIDList_template::log_match(const ActionIDList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ActionIDList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.ActionIDList.");
}
}

void ActionIDList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
single_value.value_elements = (ITS__Container::ActionID_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ActionIDList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @LibItsDenm_TypesAndValues.ActionIDList.");
}
}

boolean ActionIDList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean ActionIDList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void ActionIDList_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@LibItsDenm_TypesAndValues.ActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    ActionIDList_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      (*this)[(int)(mp->get_elem(p_i)->get_id()->get_index())].set_param(*mp->get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(mp->get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      switch (mp->get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<mp->get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(mp->get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*mp->get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@LibItsDenm_TypesAndValues.ActionIDList");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
  if (param.get_length_restriction() != NULL) {
    set_length_range(param);
  }
  else {
    set_length_range(*mp);
  };
}

Module_Param* ActionIDList_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of template type `@LibItsDenm_TypesAndValues.ActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Vector<Module_Param*> values;
    for (int i = 0; i < single_value.n_elements; ++i) {
      values.push_back((*this)[i].get_param(param_name));
    }
    mp = new Module_Param_Value_List();
    mp->add_list_with_implicit_ids(&values);
    values.clear();
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  mp->set_length_restriction(get_length_range());
  return mp;
}

void ActionIDList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.ActionIDList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.ActionIDList");
}

UtDenmTrigger::UtDenmTrigger()
{
  bound_flag = FALSE;
}

UtDenmTrigger::UtDenmTrigger(const INTEGER& par_detectionTime,
    const OPTIONAL<INTEGER>& par_validityDuration,
    const OPTIONAL<INTEGER>& par_repetitionDuration,
    const DENM__PDU__Descriptions::SituationContainer& par_situation,
    const ITS__Container::RelevanceDistance& par_relevanceDistance,
    const ITS__Container::RelevanceTrafficDirection& par_relevanceTrafficDirection,
    const OPTIONAL<INTEGER>& par_transmissionInterval,
    const OPTIONAL<INTEGER>& par_repetitionInterval,
    const OPTIONAL<DENM__PDU__Descriptions::AlacarteContainer>& par_alacarte)
  :   field_detectionTime(par_detectionTime),
  field_validityDuration(par_validityDuration),
  field_repetitionDuration(par_repetitionDuration),
  field_situation(par_situation),
  field_relevanceDistance(par_relevanceDistance),
  field_relevanceTrafficDirection(par_relevanceTrafficDirection),
  field_transmissionInterval(par_transmissionInterval),
  field_repetitionInterval(par_repetitionInterval),
  field_alacarte(par_alacarte)
{
  bound_flag = TRUE;
}

UtDenmTrigger::UtDenmTrigger(const UtDenmTrigger& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
bound_flag = TRUE;
if (other_value.detectionTime().is_bound()) field_detectionTime = other_value.detectionTime();
else field_detectionTime.clean_up();
if (other_value.validityDuration().is_bound()) field_validityDuration = other_value.validityDuration();
else field_validityDuration.clean_up();
if (other_value.repetitionDuration().is_bound()) field_repetitionDuration = other_value.repetitionDuration();
else field_repetitionDuration.clean_up();
if (other_value.situation().is_bound()) field_situation = other_value.situation();
else field_situation.clean_up();
if (other_value.relevanceDistance().is_bound()) field_relevanceDistance = other_value.relevanceDistance();
else field_relevanceDistance.clean_up();
if (other_value.relevanceTrafficDirection().is_bound()) field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
else field_relevanceTrafficDirection.clean_up();
if (other_value.transmissionInterval().is_bound()) field_transmissionInterval = other_value.transmissionInterval();
else field_transmissionInterval.clean_up();
if (other_value.repetitionInterval().is_bound()) field_repetitionInterval = other_value.repetitionInterval();
else field_repetitionInterval.clean_up();
if (other_value.alacarte().is_bound()) field_alacarte = other_value.alacarte();
else field_alacarte.clean_up();
}

void UtDenmTrigger::clean_up()
{
field_detectionTime.clean_up();
field_validityDuration.clean_up();
field_repetitionDuration.clean_up();
field_situation.clean_up();
field_relevanceDistance.clean_up();
field_relevanceTrafficDirection.clean_up();
field_transmissionInterval.clean_up();
field_repetitionInterval.clean_up();
field_alacarte.clean_up();
bound_flag = FALSE;
}

UtDenmTrigger& UtDenmTrigger::operator=(const UtDenmTrigger& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
  bound_flag = TRUE;
  if (other_value.detectionTime().is_bound()) field_detectionTime = other_value.detectionTime();
  else field_detectionTime.clean_up();
  if (other_value.validityDuration().is_bound()) field_validityDuration = other_value.validityDuration();
  else field_validityDuration.clean_up();
  if (other_value.repetitionDuration().is_bound()) field_repetitionDuration = other_value.repetitionDuration();
  else field_repetitionDuration.clean_up();
  if (other_value.situation().is_bound()) field_situation = other_value.situation();
  else field_situation.clean_up();
  if (other_value.relevanceDistance().is_bound()) field_relevanceDistance = other_value.relevanceDistance();
  else field_relevanceDistance.clean_up();
  if (other_value.relevanceTrafficDirection().is_bound()) field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
  else field_relevanceTrafficDirection.clean_up();
  if (other_value.transmissionInterval().is_bound()) field_transmissionInterval = other_value.transmissionInterval();
  else field_transmissionInterval.clean_up();
  if (other_value.repetitionInterval().is_bound()) field_repetitionInterval = other_value.repetitionInterval();
  else field_repetitionInterval.clean_up();
  if (other_value.alacarte().is_bound()) field_alacarte = other_value.alacarte();
  else field_alacarte.clean_up();
}
return *this;
}

boolean UtDenmTrigger::operator==(const UtDenmTrigger& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_detectionTime==other_value.field_detectionTime
  && field_validityDuration==other_value.field_validityDuration
  && field_repetitionDuration==other_value.field_repetitionDuration
  && field_situation==other_value.field_situation
  && field_relevanceDistance==other_value.field_relevanceDistance
  && field_relevanceTrafficDirection==other_value.field_relevanceTrafficDirection
  && field_transmissionInterval==other_value.field_transmissionInterval
  && field_repetitionInterval==other_value.field_repetitionInterval
  && field_alacarte==other_value.field_alacarte;
}

boolean UtDenmTrigger::is_bound() const
{
if (bound_flag) return TRUE;
if(field_detectionTime.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_validityDuration.get_selection() || field_validityDuration.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_repetitionDuration.get_selection() || field_repetitionDuration.is_bound()) return TRUE;
if(field_situation.is_bound()) return TRUE;
if(field_relevanceDistance.is_bound()) return TRUE;
if(field_relevanceTrafficDirection.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_transmissionInterval.get_selection() || field_transmissionInterval.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_repetitionInterval.get_selection() || field_repetitionInterval.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_alacarte.get_selection() || field_alacarte.is_bound()) return TRUE;
return FALSE;
}
boolean UtDenmTrigger::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_detectionTime.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_validityDuration.get_selection() && !field_validityDuration.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_repetitionDuration.get_selection() && !field_repetitionDuration.is_value()) return FALSE;
if(!field_situation.is_value()) return FALSE;
if(!field_relevanceDistance.is_value()) return FALSE;
if(!field_relevanceTrafficDirection.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_transmissionInterval.get_selection() && !field_transmissionInterval.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_repetitionInterval.get_selection() && !field_repetitionInterval.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_alacarte.get_selection() && !field_alacarte.is_value()) return FALSE;
return TRUE;
}
int UtDenmTrigger::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmTrigger");
  int ret_val = 4;
  if (field_validityDuration.ispresent()) ret_val++;
  if (field_repetitionDuration.ispresent()) ret_val++;
  if (field_transmissionInterval.ispresent()) ret_val++;
  if (field_repetitionInterval.ispresent()) ret_val++;
  if (field_alacarte.ispresent()) ret_val++;
  return ret_val;
}

void UtDenmTrigger::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ detectionTime := ");
field_detectionTime.log();
TTCN_Logger::log_event_str(", validityDuration := ");
field_validityDuration.log();
TTCN_Logger::log_event_str(", repetitionDuration := ");
field_repetitionDuration.log();
TTCN_Logger::log_event_str(", situation := ");
field_situation.log();
TTCN_Logger::log_event_str(", relevanceDistance := ");
field_relevanceDistance.log();
TTCN_Logger::log_event_str(", relevanceTrafficDirection := ");
field_relevanceTrafficDirection.log();
TTCN_Logger::log_event_str(", transmissionInterval := ");
field_transmissionInterval.log();
TTCN_Logger::log_event_str(", repetitionInterval := ");
field_repetitionInterval.log();
TTCN_Logger::log_event_str(", alacarte := ");
field_alacarte.log();
TTCN_Logger::log_event_str(" }");
}

void UtDenmTrigger::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsDenm_TypesAndValues.UtDenmTrigger'");
    }
    if (strcmp("detectionTime", param_field) == 0) {
      detectionTime().set_param(param);
      return;
    } else if (strcmp("validityDuration", param_field) == 0) {
      validityDuration().set_param(param);
      return;
    } else if (strcmp("repetitionDuration", param_field) == 0) {
      repetitionDuration().set_param(param);
      return;
    } else if (strcmp("situation", param_field) == 0) {
      situation().set_param(param);
      return;
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      relevanceDistance().set_param(param);
      return;
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      relevanceTrafficDirection().set_param(param);
      return;
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      transmissionInterval().set_param(param);
      return;
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      repetitionInterval().set_param(param);
      return;
    } else if (strcmp("alacarte", param_field) == 0) {
      alacarte().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTrigger'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (9<mp->get_size()) {
      param.error("record value of type @LibItsDenm_TypesAndValues.UtDenmTrigger has 9 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) detectionTime().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) validityDuration().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) repetitionDuration().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) situation().set_param(*mp->get_elem(3));
    if (mp->get_size()>4 && mp->get_elem(4)->get_type()!=Module_Param::MP_NotUsed) relevanceDistance().set_param(*mp->get_elem(4));
    if (mp->get_size()>5 && mp->get_elem(5)->get_type()!=Module_Param::MP_NotUsed) relevanceTrafficDirection().set_param(*mp->get_elem(5));
    if (mp->get_size()>6 && mp->get_elem(6)->get_type()!=Module_Param::MP_NotUsed) transmissionInterval().set_param(*mp->get_elem(6));
    if (mp->get_size()>7 && mp->get_elem(7)->get_type()!=Module_Param::MP_NotUsed) repetitionInterval().set_param(*mp->get_elem(7));
    if (mp->get_size()>8 && mp->get_elem(8)->get_type()!=Module_Param::MP_NotUsed) alacarte().set_param(*mp->get_elem(8));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "detectionTime")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          detectionTime().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "validityDuration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          validityDuration().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitionDuration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitionDuration().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "situation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          situation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceDistance")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceDistance().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceTrafficDirection")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceTrafficDirection().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "transmissionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          transmissionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "alacarte")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          alacarte().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmTrigger: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsDenm_TypesAndValues.UtDenmTrigger");
  }
}

Module_Param* UtDenmTrigger::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsDenm_TypesAndValues.UtDenmTrigger'");
    }
    if (strcmp("detectionTime", param_field) == 0) {
      return detectionTime().get_param(param_name);
    } else if (strcmp("validityDuration", param_field) == 0) {
      return validityDuration().get_param(param_name);
    } else if (strcmp("repetitionDuration", param_field) == 0) {
      return repetitionDuration().get_param(param_name);
    } else if (strcmp("situation", param_field) == 0) {
      return situation().get_param(param_name);
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      return relevanceDistance().get_param(param_name);
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      return relevanceTrafficDirection().get_param(param_name);
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      return transmissionInterval().get_param(param_name);
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      return repetitionInterval().get_param(param_name);
    } else if (strcmp("alacarte", param_field) == 0) {
      return alacarte().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTrigger'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_detectionTime = field_detectionTime.get_param(param_name);
  mp_field_detectionTime->set_id(new Module_Param_FieldName(mcopystr("detectionTime")));
  mp->add_elem(mp_field_detectionTime);
  Module_Param* mp_field_validityDuration = field_validityDuration.get_param(param_name);
  mp_field_validityDuration->set_id(new Module_Param_FieldName(mcopystr("validityDuration")));
  mp->add_elem(mp_field_validityDuration);
  Module_Param* mp_field_repetitionDuration = field_repetitionDuration.get_param(param_name);
  mp_field_repetitionDuration->set_id(new Module_Param_FieldName(mcopystr("repetitionDuration")));
  mp->add_elem(mp_field_repetitionDuration);
  Module_Param* mp_field_situation = field_situation.get_param(param_name);
  mp_field_situation->set_id(new Module_Param_FieldName(mcopystr("situation")));
  mp->add_elem(mp_field_situation);
  Module_Param* mp_field_relevanceDistance = field_relevanceDistance.get_param(param_name);
  mp_field_relevanceDistance->set_id(new Module_Param_FieldName(mcopystr("relevanceDistance")));
  mp->add_elem(mp_field_relevanceDistance);
  Module_Param* mp_field_relevanceTrafficDirection = field_relevanceTrafficDirection.get_param(param_name);
  mp_field_relevanceTrafficDirection->set_id(new Module_Param_FieldName(mcopystr("relevanceTrafficDirection")));
  mp->add_elem(mp_field_relevanceTrafficDirection);
  Module_Param* mp_field_transmissionInterval = field_transmissionInterval.get_param(param_name);
  mp_field_transmissionInterval->set_id(new Module_Param_FieldName(mcopystr("transmissionInterval")));
  mp->add_elem(mp_field_transmissionInterval);
  Module_Param* mp_field_repetitionInterval = field_repetitionInterval.get_param(param_name);
  mp_field_repetitionInterval->set_id(new Module_Param_FieldName(mcopystr("repetitionInterval")));
  mp->add_elem(mp_field_repetitionInterval);
  Module_Param* mp_field_alacarte = field_alacarte.get_param(param_name);
  mp_field_alacarte->set_id(new Module_Param_FieldName(mcopystr("alacarte")));
  mp->add_elem(mp_field_alacarte);
  return mp;
  }

void UtDenmTrigger::set_implicit_omit()
{
if (detectionTime().is_bound()) detectionTime().set_implicit_omit();
if (!validityDuration().is_bound()) validityDuration() = OMIT_VALUE;
else validityDuration().set_implicit_omit();
if (!repetitionDuration().is_bound()) repetitionDuration() = OMIT_VALUE;
else repetitionDuration().set_implicit_omit();
if (situation().is_bound()) situation().set_implicit_omit();
if (relevanceDistance().is_bound()) relevanceDistance().set_implicit_omit();
if (relevanceTrafficDirection().is_bound()) relevanceTrafficDirection().set_implicit_omit();
if (!transmissionInterval().is_bound()) transmissionInterval() = OMIT_VALUE;
else transmissionInterval().set_implicit_omit();
if (!repetitionInterval().is_bound()) repetitionInterval() = OMIT_VALUE;
else repetitionInterval().set_implicit_omit();
if (!alacarte().is_bound()) alacarte() = OMIT_VALUE;
else alacarte().set_implicit_omit();
}

void UtDenmTrigger::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
field_detectionTime.encode_text(text_buf);
field_validityDuration.encode_text(text_buf);
field_repetitionDuration.encode_text(text_buf);
field_situation.encode_text(text_buf);
field_relevanceDistance.encode_text(text_buf);
field_relevanceTrafficDirection.encode_text(text_buf);
field_transmissionInterval.encode_text(text_buf);
field_repetitionInterval.encode_text(text_buf);
field_alacarte.encode_text(text_buf);
}

void UtDenmTrigger::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_detectionTime.decode_text(text_buf);
field_validityDuration.decode_text(text_buf);
field_repetitionDuration.decode_text(text_buf);
field_situation.decode_text(text_buf);
field_relevanceDistance.decode_text(text_buf);
field_relevanceTrafficDirection.decode_text(text_buf);
field_transmissionInterval.decode_text(text_buf);
field_repetitionInterval.decode_text(text_buf);
field_alacarte.decode_text(text_buf);
}

void UtDenmTrigger::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmTrigger::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmTrigger::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_detectionTime.RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_validityDuration().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_validityDuration = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_validityDuration=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_repetitionDuration().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_repetitionDuration = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_repetitionDuration=OMIT_VALUE;
  decoded_field_length = field_situation.RAW_decode(DENM__PDU__Descriptions::SituationContainer_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_relevanceDistance.RAW_decode(ITS__Container::RelevanceDistance_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_relevanceTrafficDirection.RAW_decode(ITS__Container::RelevanceTrafficDirection_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_transmissionInterval().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_transmissionInterval = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_transmissionInterval=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_repetitionInterval().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_repetitionInterval = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_repetitionInterval=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_alacarte().RAW_decode(DENM__PDU__Descriptions::AlacarteContainer_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_alacarte = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_alacarte=OMIT_VALUE;
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtDenmTrigger::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 9;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(9);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, INTEGER_descr_.raw);
  if (field_validityDuration.ispresent()) {
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[1] = NULL;
  if (field_repetitionDuration.ispresent()) {
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[2] = NULL;
  myleaf.body.node.nodes[3] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 3, DENM__PDU__Descriptions::SituationContainer_descr_.raw);
  myleaf.body.node.nodes[4] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 4, ITS__Container::RelevanceDistance_descr_.raw);
  myleaf.body.node.nodes[5] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 5, ITS__Container::RelevanceTrafficDirection_descr_.raw);
  if (field_transmissionInterval.ispresent()) {
  myleaf.body.node.nodes[6] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 6, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[6] = NULL;
  if (field_repetitionInterval.ispresent()) {
  myleaf.body.node.nodes[7] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 7, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[7] = NULL;
  if (field_alacarte.ispresent()) {
  myleaf.body.node.nodes[8] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 8, DENM__PDU__Descriptions::AlacarteContainer_descr_.raw);
  }
  else myleaf.body.node.nodes[8] = NULL;
  encoded_length += field_detectionTime.RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[0]);
  if (field_validityDuration.ispresent()) {
  encoded_length += field_validityDuration().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[1]);
  }
  if (field_repetitionDuration.ispresent()) {
  encoded_length += field_repetitionDuration().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[2]);
  }
  encoded_length += field_situation.RAW_encode(DENM__PDU__Descriptions::SituationContainer_descr_, *myleaf.body.node.nodes[3]);
  encoded_length += field_relevanceDistance.RAW_encode(ITS__Container::RelevanceDistance_descr_, *myleaf.body.node.nodes[4]);
  encoded_length += field_relevanceTrafficDirection.RAW_encode(ITS__Container::RelevanceTrafficDirection_descr_, *myleaf.body.node.nodes[5]);
  if (field_transmissionInterval.ispresent()) {
  encoded_length += field_transmissionInterval().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[6]);
  }
  if (field_repetitionInterval.ispresent()) {
  encoded_length += field_repetitionInterval().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[7]);
  }
  if (field_alacarte.ispresent()) {
  encoded_length += field_alacarte().RAW_encode(DENM__PDU__Descriptions::AlacarteContainer_descr_, *myleaf.body.node.nodes[8]);
  }
  return myleaf.length = encoded_length;
}

int UtDenmTrigger::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "detectionTime");
    enc_len += field_detectionTime.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_validityDuration.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "validityDuration");
    enc_len += field_validityDuration.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_repetitionDuration.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "repetitionDuration");
    enc_len += field_repetitionDuration.JSON_encode(INTEGER_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "situation");
    enc_len += field_situation.JSON_encode(DENM__PDU__Descriptions::SituationContainer_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "relevanceDistance");
    enc_len += field_relevanceDistance.JSON_encode(ITS__Container::RelevanceDistance_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "relevanceTrafficDirection");
    enc_len += field_relevanceTrafficDirection.JSON_encode(ITS__Container::RelevanceTrafficDirection_descr_, p_tok);
  }

  if (field_transmissionInterval.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "transmissionInterval");
    enc_len += field_transmissionInterval.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_repetitionInterval.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "repetitionInterval");
    enc_len += field_repetitionInterval.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_alacarte.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "alacarte");
    enc_len += field_alacarte.JSON_encode(DENM__PDU__Descriptions::AlacarteContainer_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtDenmTrigger::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (13 == name_len && 0 == strncmp(fld_name, "detectionTime", name_len)) {
         int ret_val = field_detectionTime.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "detectionTime");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (16 == name_len && 0 == strncmp(fld_name, "validityDuration", name_len)) {
         int ret_val = field_validityDuration.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "validityDuration");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (18 == name_len && 0 == strncmp(fld_name, "repetitionDuration", name_len)) {
         int ret_val = field_repetitionDuration.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "repetitionDuration");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "situation", name_len)) {
         int ret_val = field_situation.JSON_decode(DENM__PDU__Descriptions::SituationContainer_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "situation");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (17 == name_len && 0 == strncmp(fld_name, "relevanceDistance", name_len)) {
         int ret_val = field_relevanceDistance.JSON_decode(ITS__Container::RelevanceDistance_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "relevanceDistance");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (25 == name_len && 0 == strncmp(fld_name, "relevanceTrafficDirection", name_len)) {
         int ret_val = field_relevanceTrafficDirection.JSON_decode(ITS__Container::RelevanceTrafficDirection_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "relevanceTrafficDirection");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (20 == name_len && 0 == strncmp(fld_name, "transmissionInterval", name_len)) {
         int ret_val = field_transmissionInterval.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "transmissionInterval");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (18 == name_len && 0 == strncmp(fld_name, "repetitionInterval", name_len)) {
         int ret_val = field_repetitionInterval.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "repetitionInterval");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (8 == name_len && 0 == strncmp(fld_name, "alacarte", name_len)) {
         int ret_val = field_alacarte.JSON_decode(DENM__PDU__Descriptions::AlacarteContainer_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "alacarte");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_detectionTime.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "detectionTime");
    return JSON_ERROR_FATAL;
  }
if (!field_validityDuration.is_bound()) {
    field_validityDuration = OMIT_VALUE;
  }
if (!field_repetitionDuration.is_bound()) {
    field_repetitionDuration = OMIT_VALUE;
  }
if (!field_situation.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "situation");
    return JSON_ERROR_FATAL;
  }
if (!field_relevanceDistance.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "relevanceDistance");
    return JSON_ERROR_FATAL;
  }
if (!field_relevanceTrafficDirection.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "relevanceTrafficDirection");
    return JSON_ERROR_FATAL;
  }
if (!field_transmissionInterval.is_bound()) {
    field_transmissionInterval = OMIT_VALUE;
  }
if (!field_repetitionInterval.is_bound()) {
    field_repetitionInterval = OMIT_VALUE;
  }
if (!field_alacarte.is_bound()) {
    field_alacarte = OMIT_VALUE;
  }

  return dec_len;
}

struct UtDenmTrigger_template::single_value_struct {
INTEGER_template field_detectionTime;
INTEGER_template field_validityDuration;
INTEGER_template field_repetitionDuration;
DENM__PDU__Descriptions::SituationContainer_template field_situation;
ITS__Container::RelevanceDistance_template field_relevanceDistance;
ITS__Container::RelevanceTrafficDirection_template field_relevanceTrafficDirection;
INTEGER_template field_transmissionInterval;
INTEGER_template field_repetitionInterval;
DENM__PDU__Descriptions::AlacarteContainer_template field_alacarte;
};

void UtDenmTrigger_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_detectionTime = ANY_VALUE;
single_value->field_validityDuration = ANY_OR_OMIT;
single_value->field_repetitionDuration = ANY_OR_OMIT;
single_value->field_situation = ANY_VALUE;
single_value->field_relevanceDistance = ANY_VALUE;
single_value->field_relevanceTrafficDirection = ANY_VALUE;
single_value->field_transmissionInterval = ANY_OR_OMIT;
single_value->field_repetitionInterval = ANY_OR_OMIT;
single_value->field_alacarte = ANY_OR_OMIT;
}
}
}

void UtDenmTrigger_template::copy_value(const UtDenmTrigger& other_value)
{
single_value = new single_value_struct;
if (other_value.detectionTime().is_bound()) {
  single_value->field_detectionTime = other_value.detectionTime();
} else {
  single_value->field_detectionTime.clean_up();
}
if (other_value.validityDuration().is_bound()) {
  if (other_value.validityDuration().ispresent()) single_value->field_validityDuration = other_value.validityDuration()();
  else single_value->field_validityDuration = OMIT_VALUE;
} else {
  single_value->field_validityDuration.clean_up();
}
if (other_value.repetitionDuration().is_bound()) {
  if (other_value.repetitionDuration().ispresent()) single_value->field_repetitionDuration = other_value.repetitionDuration()();
  else single_value->field_repetitionDuration = OMIT_VALUE;
} else {
  single_value->field_repetitionDuration.clean_up();
}
if (other_value.situation().is_bound()) {
  single_value->field_situation = other_value.situation();
} else {
  single_value->field_situation.clean_up();
}
if (other_value.relevanceDistance().is_bound()) {
  single_value->field_relevanceDistance = other_value.relevanceDistance();
} else {
  single_value->field_relevanceDistance.clean_up();
}
if (other_value.relevanceTrafficDirection().is_bound()) {
  single_value->field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
} else {
  single_value->field_relevanceTrafficDirection.clean_up();
}
if (other_value.transmissionInterval().is_bound()) {
  if (other_value.transmissionInterval().ispresent()) single_value->field_transmissionInterval = other_value.transmissionInterval()();
  else single_value->field_transmissionInterval = OMIT_VALUE;
} else {
  single_value->field_transmissionInterval.clean_up();
}
if (other_value.repetitionInterval().is_bound()) {
  if (other_value.repetitionInterval().ispresent()) single_value->field_repetitionInterval = other_value.repetitionInterval()();
  else single_value->field_repetitionInterval = OMIT_VALUE;
} else {
  single_value->field_repetitionInterval.clean_up();
}
if (other_value.alacarte().is_bound()) {
  if (other_value.alacarte().ispresent()) single_value->field_alacarte = other_value.alacarte()();
  else single_value->field_alacarte = OMIT_VALUE;
} else {
  single_value->field_alacarte.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmTrigger_template::copy_template(const UtDenmTrigger_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.detectionTime().get_selection()) {
single_value->field_detectionTime = other_value.detectionTime();
} else {
single_value->field_detectionTime.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.validityDuration().get_selection()) {
single_value->field_validityDuration = other_value.validityDuration();
} else {
single_value->field_validityDuration.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.repetitionDuration().get_selection()) {
single_value->field_repetitionDuration = other_value.repetitionDuration();
} else {
single_value->field_repetitionDuration.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.situation().get_selection()) {
single_value->field_situation = other_value.situation();
} else {
single_value->field_situation.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.relevanceDistance().get_selection()) {
single_value->field_relevanceDistance = other_value.relevanceDistance();
} else {
single_value->field_relevanceDistance.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.relevanceTrafficDirection().get_selection()) {
single_value->field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
} else {
single_value->field_relevanceTrafficDirection.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.transmissionInterval().get_selection()) {
single_value->field_transmissionInterval = other_value.transmissionInterval();
} else {
single_value->field_transmissionInterval.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.repetitionInterval().get_selection()) {
single_value->field_repetitionInterval = other_value.repetitionInterval();
} else {
single_value->field_repetitionInterval.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.alacarte().get_selection()) {
single_value->field_alacarte = other_value.alacarte();
} else {
single_value->field_alacarte.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmTrigger_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
break;
}
set_selection(other_value);
}

UtDenmTrigger_template::UtDenmTrigger_template()
{
}

UtDenmTrigger_template::UtDenmTrigger_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmTrigger_template::UtDenmTrigger_template(const UtDenmTrigger& other_value)
{
copy_value(other_value);
}

UtDenmTrigger_template::UtDenmTrigger_template(const OPTIONAL<UtDenmTrigger>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmTrigger&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger from an unbound optional field.");
}
}

UtDenmTrigger_template::UtDenmTrigger_template(const UtDenmTrigger_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtDenmTrigger_template::~UtDenmTrigger_template()
{
clean_up();
}

UtDenmTrigger_template& UtDenmTrigger_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmTrigger_template& UtDenmTrigger_template::operator=(const UtDenmTrigger& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmTrigger_template& UtDenmTrigger_template::operator=(const OPTIONAL<UtDenmTrigger>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmTrigger&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
}
return *this;
}

UtDenmTrigger_template& UtDenmTrigger_template::operator=(const UtDenmTrigger_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtDenmTrigger_template::match(const UtDenmTrigger& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.detectionTime().is_bound()) return FALSE;
if(!single_value->field_detectionTime.match(other_value.detectionTime(), legacy))return FALSE;
if(!other_value.validityDuration().is_bound()) return FALSE;
if((other_value.validityDuration().ispresent() ? !single_value->field_validityDuration.match((const INTEGER&)other_value.validityDuration(), legacy) : !single_value->field_validityDuration.match_omit(legacy)))return FALSE;
if(!other_value.repetitionDuration().is_bound()) return FALSE;
if((other_value.repetitionDuration().ispresent() ? !single_value->field_repetitionDuration.match((const INTEGER&)other_value.repetitionDuration(), legacy) : !single_value->field_repetitionDuration.match_omit(legacy)))return FALSE;
if(!other_value.situation().is_bound()) return FALSE;
if(!single_value->field_situation.match(other_value.situation(), legacy))return FALSE;
if(!other_value.relevanceDistance().is_bound()) return FALSE;
if(!single_value->field_relevanceDistance.match(other_value.relevanceDistance(), legacy))return FALSE;
if(!other_value.relevanceTrafficDirection().is_bound()) return FALSE;
if(!single_value->field_relevanceTrafficDirection.match(other_value.relevanceTrafficDirection(), legacy))return FALSE;
if(!other_value.transmissionInterval().is_bound()) return FALSE;
if((other_value.transmissionInterval().ispresent() ? !single_value->field_transmissionInterval.match((const INTEGER&)other_value.transmissionInterval(), legacy) : !single_value->field_transmissionInterval.match_omit(legacy)))return FALSE;
if(!other_value.repetitionInterval().is_bound()) return FALSE;
if((other_value.repetitionInterval().ispresent() ? !single_value->field_repetitionInterval.match((const INTEGER&)other_value.repetitionInterval(), legacy) : !single_value->field_repetitionInterval.match_omit(legacy)))return FALSE;
if(!other_value.alacarte().is_bound()) return FALSE;
if((other_value.alacarte().ispresent() ? !single_value->field_alacarte.match((const DENM__PDU__Descriptions::AlacarteContainer&)other_value.alacarte(), legacy) : !single_value->field_alacarte.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
}
return FALSE;
}

boolean UtDenmTrigger_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_detectionTime.is_bound()) return TRUE;
if (single_value->field_validityDuration.is_omit() || single_value->field_validityDuration.is_bound()) return TRUE;
if (single_value->field_repetitionDuration.is_omit() || single_value->field_repetitionDuration.is_bound()) return TRUE;
if (single_value->field_situation.is_bound()) return TRUE;
if (single_value->field_relevanceDistance.is_bound()) return TRUE;
if (single_value->field_relevanceTrafficDirection.is_bound()) return TRUE;
if (single_value->field_transmissionInterval.is_omit() || single_value->field_transmissionInterval.is_bound()) return TRUE;
if (single_value->field_repetitionInterval.is_omit() || single_value->field_repetitionInterval.is_bound()) return TRUE;
if (single_value->field_alacarte.is_omit() || single_value->field_alacarte.is_bound()) return TRUE;
return FALSE;
}

boolean UtDenmTrigger_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_detectionTime.is_value()) return FALSE;
if (!single_value->field_validityDuration.is_omit() && !single_value->field_validityDuration.is_value()) return FALSE;
if (!single_value->field_repetitionDuration.is_omit() && !single_value->field_repetitionDuration.is_value()) return FALSE;
if (!single_value->field_situation.is_value()) return FALSE;
if (!single_value->field_relevanceDistance.is_value()) return FALSE;
if (!single_value->field_relevanceTrafficDirection.is_value()) return FALSE;
if (!single_value->field_transmissionInterval.is_omit() && !single_value->field_transmissionInterval.is_value()) return FALSE;
if (!single_value->field_repetitionInterval.is_omit() && !single_value->field_repetitionInterval.is_value()) return FALSE;
if (!single_value->field_alacarte.is_omit() && !single_value->field_alacarte.is_value()) return FALSE;
return TRUE;
}

void UtDenmTrigger_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmTrigger UtDenmTrigger_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
UtDenmTrigger ret_val;
if (single_value->field_detectionTime.is_bound()) {
ret_val.detectionTime() = single_value->field_detectionTime.valueof();
}
if (single_value->field_validityDuration.is_omit()) ret_val.validityDuration() = OMIT_VALUE;
else if (single_value->field_validityDuration.is_bound()) {
ret_val.validityDuration() = single_value->field_validityDuration.valueof();
}
if (single_value->field_repetitionDuration.is_omit()) ret_val.repetitionDuration() = OMIT_VALUE;
else if (single_value->field_repetitionDuration.is_bound()) {
ret_val.repetitionDuration() = single_value->field_repetitionDuration.valueof();
}
if (single_value->field_situation.is_bound()) {
ret_val.situation() = single_value->field_situation.valueof();
}
if (single_value->field_relevanceDistance.is_bound()) {
ret_val.relevanceDistance() = single_value->field_relevanceDistance.valueof();
}
if (single_value->field_relevanceTrafficDirection.is_bound()) {
ret_val.relevanceTrafficDirection() = single_value->field_relevanceTrafficDirection.valueof();
}
if (single_value->field_transmissionInterval.is_omit()) ret_val.transmissionInterval() = OMIT_VALUE;
else if (single_value->field_transmissionInterval.is_bound()) {
ret_val.transmissionInterval() = single_value->field_transmissionInterval.valueof();
}
if (single_value->field_repetitionInterval.is_omit()) ret_val.repetitionInterval() = OMIT_VALUE;
else if (single_value->field_repetitionInterval.is_bound()) {
ret_val.repetitionInterval() = single_value->field_repetitionInterval.valueof();
}
if (single_value->field_alacarte.is_omit()) ret_val.alacarte() = OMIT_VALUE;
else if (single_value->field_alacarte.is_bound()) {
ret_val.alacarte() = single_value->field_alacarte.valueof();
}
return ret_val;
}

void UtDenmTrigger_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtDenmTrigger_template[list_length];
}

UtDenmTrigger_template& UtDenmTrigger_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return value_list.list_value[list_index];
}

INTEGER_template& UtDenmTrigger_template::detectionTime()
{
set_specific();
return single_value->field_detectionTime;
}

const INTEGER_template& UtDenmTrigger_template::detectionTime() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field detectionTime of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_detectionTime;
}

INTEGER_template& UtDenmTrigger_template::validityDuration()
{
set_specific();
return single_value->field_validityDuration;
}

const INTEGER_template& UtDenmTrigger_template::validityDuration() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field validityDuration of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_validityDuration;
}

INTEGER_template& UtDenmTrigger_template::repetitionDuration()
{
set_specific();
return single_value->field_repetitionDuration;
}

const INTEGER_template& UtDenmTrigger_template::repetitionDuration() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field repetitionDuration of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_repetitionDuration;
}

DENM__PDU__Descriptions::SituationContainer_template& UtDenmTrigger_template::situation()
{
set_specific();
return single_value->field_situation;
}

const DENM__PDU__Descriptions::SituationContainer_template& UtDenmTrigger_template::situation() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field situation of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_situation;
}

ITS__Container::RelevanceDistance_template& UtDenmTrigger_template::relevanceDistance()
{
set_specific();
return single_value->field_relevanceDistance;
}

const ITS__Container::RelevanceDistance_template& UtDenmTrigger_template::relevanceDistance() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field relevanceDistance of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_relevanceDistance;
}

ITS__Container::RelevanceTrafficDirection_template& UtDenmTrigger_template::relevanceTrafficDirection()
{
set_specific();
return single_value->field_relevanceTrafficDirection;
}

const ITS__Container::RelevanceTrafficDirection_template& UtDenmTrigger_template::relevanceTrafficDirection() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field relevanceTrafficDirection of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_relevanceTrafficDirection;
}

INTEGER_template& UtDenmTrigger_template::transmissionInterval()
{
set_specific();
return single_value->field_transmissionInterval;
}

const INTEGER_template& UtDenmTrigger_template::transmissionInterval() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field transmissionInterval of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_transmissionInterval;
}

INTEGER_template& UtDenmTrigger_template::repetitionInterval()
{
set_specific();
return single_value->field_repetitionInterval;
}

const INTEGER_template& UtDenmTrigger_template::repetitionInterval() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field repetitionInterval of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_repetitionInterval;
}

DENM__PDU__Descriptions::AlacarteContainer_template& UtDenmTrigger_template::alacarte()
{
set_specific();
return single_value->field_alacarte;
}

const DENM__PDU__Descriptions::AlacarteContainer_template& UtDenmTrigger_template::alacarte() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field alacarte of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
return single_value->field_alacarte;
}

int UtDenmTrigger_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 4;
      if (single_value->field_validityDuration.is_present()) ret_val++;
      if (single_value->field_repetitionDuration.is_present()) ret_val++;
      if (single_value->field_transmissionInterval.is_present()) ret_val++;
      if (single_value->field_repetitionInterval.is_present()) ret_val++;
      if (single_value->field_alacarte.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
  }
  return 0;
}

void UtDenmTrigger_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ detectionTime := ");
single_value->field_detectionTime.log();
TTCN_Logger::log_event_str(", validityDuration := ");
single_value->field_validityDuration.log();
TTCN_Logger::log_event_str(", repetitionDuration := ");
single_value->field_repetitionDuration.log();
TTCN_Logger::log_event_str(", situation := ");
single_value->field_situation.log();
TTCN_Logger::log_event_str(", relevanceDistance := ");
single_value->field_relevanceDistance.log();
TTCN_Logger::log_event_str(", relevanceTrafficDirection := ");
single_value->field_relevanceTrafficDirection.log();
TTCN_Logger::log_event_str(", transmissionInterval := ");
single_value->field_transmissionInterval.log();
TTCN_Logger::log_event_str(", repetitionInterval := ");
single_value->field_repetitionInterval.log();
TTCN_Logger::log_event_str(", alacarte := ");
single_value->field_alacarte.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtDenmTrigger_template::log_match(const UtDenmTrigger& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_detectionTime.match(match_value.detectionTime(), legacy)){
TTCN_Logger::log_logmatch_info(".detectionTime");
single_value->field_detectionTime.log_match(match_value.detectionTime(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.validityDuration().ispresent()){
if(!single_value->field_validityDuration.match(match_value.validityDuration(), legacy)){
TTCN_Logger::log_logmatch_info(".validityDuration");
single_value->field_validityDuration.log_match(match_value.validityDuration(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_validityDuration.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".validityDuration := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_validityDuration.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.repetitionDuration().ispresent()){
if(!single_value->field_repetitionDuration.match(match_value.repetitionDuration(), legacy)){
TTCN_Logger::log_logmatch_info(".repetitionDuration");
single_value->field_repetitionDuration.log_match(match_value.repetitionDuration(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_repetitionDuration.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".repetitionDuration := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_repetitionDuration.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_situation.match(match_value.situation(), legacy)){
TTCN_Logger::log_logmatch_info(".situation");
single_value->field_situation.log_match(match_value.situation(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_relevanceDistance.match(match_value.relevanceDistance(), legacy)){
TTCN_Logger::log_logmatch_info(".relevanceDistance");
single_value->field_relevanceDistance.log_match(match_value.relevanceDistance(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_relevanceTrafficDirection.match(match_value.relevanceTrafficDirection(), legacy)){
TTCN_Logger::log_logmatch_info(".relevanceTrafficDirection");
single_value->field_relevanceTrafficDirection.log_match(match_value.relevanceTrafficDirection(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.transmissionInterval().ispresent()){
if(!single_value->field_transmissionInterval.match(match_value.transmissionInterval(), legacy)){
TTCN_Logger::log_logmatch_info(".transmissionInterval");
single_value->field_transmissionInterval.log_match(match_value.transmissionInterval(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_transmissionInterval.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".transmissionInterval := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_transmissionInterval.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.repetitionInterval().ispresent()){
if(!single_value->field_repetitionInterval.match(match_value.repetitionInterval(), legacy)){
TTCN_Logger::log_logmatch_info(".repetitionInterval");
single_value->field_repetitionInterval.log_match(match_value.repetitionInterval(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_repetitionInterval.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".repetitionInterval := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_repetitionInterval.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.alacarte().ispresent()){
if(!single_value->field_alacarte.match(match_value.alacarte(), legacy)){
TTCN_Logger::log_logmatch_info(".alacarte");
single_value->field_alacarte.log_match(match_value.alacarte(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_alacarte.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".alacarte := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_alacarte.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ detectionTime := ");
single_value->field_detectionTime.log_match(match_value.detectionTime(), legacy);
TTCN_Logger::log_event_str(", validityDuration := ");
if (match_value.validityDuration().ispresent()) single_value->field_validityDuration.log_match(match_value.validityDuration(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_validityDuration.log();
if (single_value->field_validityDuration.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", repetitionDuration := ");
if (match_value.repetitionDuration().ispresent()) single_value->field_repetitionDuration.log_match(match_value.repetitionDuration(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_repetitionDuration.log();
if (single_value->field_repetitionDuration.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", situation := ");
single_value->field_situation.log_match(match_value.situation(), legacy);
TTCN_Logger::log_event_str(", relevanceDistance := ");
single_value->field_relevanceDistance.log_match(match_value.relevanceDistance(), legacy);
TTCN_Logger::log_event_str(", relevanceTrafficDirection := ");
single_value->field_relevanceTrafficDirection.log_match(match_value.relevanceTrafficDirection(), legacy);
TTCN_Logger::log_event_str(", transmissionInterval := ");
if (match_value.transmissionInterval().ispresent()) single_value->field_transmissionInterval.log_match(match_value.transmissionInterval(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_transmissionInterval.log();
if (single_value->field_transmissionInterval.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", repetitionInterval := ");
if (match_value.repetitionInterval().ispresent()) single_value->field_repetitionInterval.log_match(match_value.repetitionInterval(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_repetitionInterval.log();
if (single_value->field_repetitionInterval.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", alacarte := ");
if (match_value.alacarte().ispresent()) single_value->field_alacarte.log_match(match_value.alacarte(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_alacarte.log();
if (single_value->field_alacarte.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmTrigger_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_detectionTime.encode_text(text_buf);
single_value->field_validityDuration.encode_text(text_buf);
single_value->field_repetitionDuration.encode_text(text_buf);
single_value->field_situation.encode_text(text_buf);
single_value->field_relevanceDistance.encode_text(text_buf);
single_value->field_relevanceTrafficDirection.encode_text(text_buf);
single_value->field_transmissionInterval.encode_text(text_buf);
single_value->field_repetitionInterval.encode_text(text_buf);
single_value->field_alacarte.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
}
}

void UtDenmTrigger_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_detectionTime.decode_text(text_buf);
single_value->field_validityDuration.decode_text(text_buf);
single_value->field_repetitionDuration.decode_text(text_buf);
single_value->field_situation.decode_text(text_buf);
single_value->field_relevanceDistance.decode_text(text_buf);
single_value->field_relevanceTrafficDirection.decode_text(text_buf);
single_value->field_transmissionInterval.decode_text(text_buf);
single_value->field_repetitionInterval.decode_text(text_buf);
single_value->field_alacarte.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmTrigger_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsDenm_TypesAndValues.UtDenmTrigger.");
}
}

void UtDenmTrigger_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsDenm_TypesAndValues.UtDenmTrigger'");
    }
    if (strcmp("detectionTime", param_field) == 0) {
      detectionTime().set_param(param);
      return;
    } else if (strcmp("validityDuration", param_field) == 0) {
      validityDuration().set_param(param);
      return;
    } else if (strcmp("repetitionDuration", param_field) == 0) {
      repetitionDuration().set_param(param);
      return;
    } else if (strcmp("situation", param_field) == 0) {
      situation().set_param(param);
      return;
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      relevanceDistance().set_param(param);
      return;
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      relevanceTrafficDirection().set_param(param);
      return;
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      transmissionInterval().set_param(param);
      return;
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      repetitionInterval().set_param(param);
      return;
    } else if (strcmp("alacarte", param_field) == 0) {
      alacarte().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsDenm_TypesAndValues.UtDenmTrigger'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmTrigger_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (9<mp->get_size()) {
      param.error("record template of type @LibItsDenm_TypesAndValues.UtDenmTrigger has 9 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) detectionTime().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) validityDuration().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) repetitionDuration().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) situation().set_param(*mp->get_elem(3));
    if (mp->get_size()>4 && mp->get_elem(4)->get_type()!=Module_Param::MP_NotUsed) relevanceDistance().set_param(*mp->get_elem(4));
    if (mp->get_size()>5 && mp->get_elem(5)->get_type()!=Module_Param::MP_NotUsed) relevanceTrafficDirection().set_param(*mp->get_elem(5));
    if (mp->get_size()>6 && mp->get_elem(6)->get_type()!=Module_Param::MP_NotUsed) transmissionInterval().set_param(*mp->get_elem(6));
    if (mp->get_size()>7 && mp->get_elem(7)->get_type()!=Module_Param::MP_NotUsed) repetitionInterval().set_param(*mp->get_elem(7));
    if (mp->get_size()>8 && mp->get_elem(8)->get_type()!=Module_Param::MP_NotUsed) alacarte().set_param(*mp->get_elem(8));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "detectionTime")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          detectionTime().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "validityDuration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          validityDuration().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitionDuration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitionDuration().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "situation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          situation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceDistance")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceDistance().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceTrafficDirection")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceTrafficDirection().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "transmissionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          transmissionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "alacarte")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          alacarte().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmTrigger: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsDenm_TypesAndValues.UtDenmTrigger");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtDenmTrigger_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsDenm_TypesAndValues.UtDenmTrigger'");
    }
    if (strcmp("detectionTime", param_field) == 0) {
      return detectionTime().get_param(param_name);
    } else if (strcmp("validityDuration", param_field) == 0) {
      return validityDuration().get_param(param_name);
    } else if (strcmp("repetitionDuration", param_field) == 0) {
      return repetitionDuration().get_param(param_name);
    } else if (strcmp("situation", param_field) == 0) {
      return situation().get_param(param_name);
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      return relevanceDistance().get_param(param_name);
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      return relevanceTrafficDirection().get_param(param_name);
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      return transmissionInterval().get_param(param_name);
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      return repetitionInterval().get_param(param_name);
    } else if (strcmp("alacarte", param_field) == 0) {
      return alacarte().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTrigger'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_detectionTime = single_value->field_detectionTime.get_param(param_name);
    mp_field_detectionTime->set_id(new Module_Param_FieldName(mcopystr("detectionTime")));
    mp->add_elem(mp_field_detectionTime);
    Module_Param* mp_field_validityDuration = single_value->field_validityDuration.get_param(param_name);
    mp_field_validityDuration->set_id(new Module_Param_FieldName(mcopystr("validityDuration")));
    mp->add_elem(mp_field_validityDuration);
    Module_Param* mp_field_repetitionDuration = single_value->field_repetitionDuration.get_param(param_name);
    mp_field_repetitionDuration->set_id(new Module_Param_FieldName(mcopystr("repetitionDuration")));
    mp->add_elem(mp_field_repetitionDuration);
    Module_Param* mp_field_situation = single_value->field_situation.get_param(param_name);
    mp_field_situation->set_id(new Module_Param_FieldName(mcopystr("situation")));
    mp->add_elem(mp_field_situation);
    Module_Param* mp_field_relevanceDistance = single_value->field_relevanceDistance.get_param(param_name);
    mp_field_relevanceDistance->set_id(new Module_Param_FieldName(mcopystr("relevanceDistance")));
    mp->add_elem(mp_field_relevanceDistance);
    Module_Param* mp_field_relevanceTrafficDirection = single_value->field_relevanceTrafficDirection.get_param(param_name);
    mp_field_relevanceTrafficDirection->set_id(new Module_Param_FieldName(mcopystr("relevanceTrafficDirection")));
    mp->add_elem(mp_field_relevanceTrafficDirection);
    Module_Param* mp_field_transmissionInterval = single_value->field_transmissionInterval.get_param(param_name);
    mp_field_transmissionInterval->set_id(new Module_Param_FieldName(mcopystr("transmissionInterval")));
    mp->add_elem(mp_field_transmissionInterval);
    Module_Param* mp_field_repetitionInterval = single_value->field_repetitionInterval.get_param(param_name);
    mp_field_repetitionInterval->set_id(new Module_Param_FieldName(mcopystr("repetitionInterval")));
    mp->add_elem(mp_field_repetitionInterval);
    Module_Param* mp_field_alacarte = single_value->field_alacarte.get_param(param_name);
    mp_field_alacarte->set_id(new Module_Param_FieldName(mcopystr("alacarte")));
    mp->add_elem(mp_field_alacarte);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtDenmTrigger_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_detectionTime.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_validityDuration.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_repetitionDuration.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_situation.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_relevanceDistance.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_relevanceTrafficDirection.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_transmissionInterval.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_repetitionInterval.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
single_value->field_alacarte.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTrigger");
}

boolean UtDenmTrigger_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmTrigger_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtDenmTriggerResult::UtDenmTriggerResult()
{
  bound_flag = FALSE;
}

UtDenmTriggerResult::UtDenmTriggerResult(const BOOLEAN& par_result,
    const ITS__Container::ActionID& par_actionId)
  :   field_result(par_result),
  field_actionId(par_actionId)
{
  bound_flag = TRUE;
}

UtDenmTriggerResult::UtDenmTriggerResult(const UtDenmTriggerResult& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
bound_flag = TRUE;
if (other_value.result().is_bound()) field_result = other_value.result();
else field_result.clean_up();
if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
else field_actionId.clean_up();
}

void UtDenmTriggerResult::clean_up()
{
field_result.clean_up();
field_actionId.clean_up();
bound_flag = FALSE;
}

UtDenmTriggerResult& UtDenmTriggerResult::operator=(const UtDenmTriggerResult& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
  bound_flag = TRUE;
  if (other_value.result().is_bound()) field_result = other_value.result();
  else field_result.clean_up();
  if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
  else field_actionId.clean_up();
}
return *this;
}

boolean UtDenmTriggerResult::operator==(const UtDenmTriggerResult& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_result==other_value.field_result
  && field_actionId==other_value.field_actionId;
}

boolean UtDenmTriggerResult::is_bound() const
{
if (bound_flag) return TRUE;
if(field_result.is_bound()) return TRUE;
if(field_actionId.is_bound()) return TRUE;
return FALSE;
}
boolean UtDenmTriggerResult::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_result.is_value()) return FALSE;
if(!field_actionId.is_value()) return FALSE;
return TRUE;
}
int UtDenmTriggerResult::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult");
  return 2;
}

void UtDenmTriggerResult::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ result := ");
field_result.log();
TTCN_Logger::log_event_str(", actionId := ");
field_actionId.log();
TTCN_Logger::log_event_str(" }");
}

void UtDenmTriggerResult::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) result().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmTriggerResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsDenm_TypesAndValues.UtDenmTriggerResult");
  }
}

Module_Param* UtDenmTriggerResult::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_result = field_result.get_param(param_name);
  mp_field_result->set_id(new Module_Param_FieldName(mcopystr("result")));
  mp->add_elem(mp_field_result);
  Module_Param* mp_field_actionId = field_actionId.get_param(param_name);
  mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
  mp->add_elem(mp_field_actionId);
  return mp;
  }

void UtDenmTriggerResult::set_implicit_omit()
{
if (result().is_bound()) result().set_implicit_omit();
if (actionId().is_bound()) actionId().set_implicit_omit();
}

void UtDenmTriggerResult::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
field_result.encode_text(text_buf);
field_actionId.encode_text(text_buf);
}

void UtDenmTriggerResult::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_result.decode_text(text_buf);
field_actionId.decode_text(text_buf);
}

void UtDenmTriggerResult::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmTriggerResult::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmTriggerResult::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_result.RAW_decode(UtDenmTriggerResult_result_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_actionId.RAW_decode(UtDenmTriggerResult_actionId_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtDenmTriggerResult::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 2;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(2);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, UtDenmTriggerResult_result_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, UtDenmTriggerResult_actionId_descr_.raw);
  encoded_length += field_result.RAW_encode(UtDenmTriggerResult_result_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_actionId.RAW_encode(UtDenmTriggerResult_actionId_descr_, *myleaf.body.node.nodes[1]);
  return myleaf.length = encoded_length;
}

int UtDenmTriggerResult::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "result");
    enc_len += field_result.JSON_encode(UtDenmTriggerResult_result_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "actionId");
    enc_len += field_actionId.JSON_encode(UtDenmTriggerResult_actionId_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtDenmTriggerResult::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "result", name_len)) {
         int ret_val = field_result.JSON_decode(UtDenmTriggerResult_result_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "result");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (8 == name_len && 0 == strncmp(fld_name, "actionId", name_len)) {
         int ret_val = field_actionId.JSON_decode(UtDenmTriggerResult_actionId_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "actionId");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_result.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "result");
    return JSON_ERROR_FATAL;
  }
if (!field_actionId.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "actionId");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtDenmTriggerResult_template::single_value_struct {
BOOLEAN_template field_result;
ITS__Container::ActionID_template field_actionId;
};

void UtDenmTriggerResult_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_result = ANY_VALUE;
single_value->field_actionId = ANY_VALUE;
}
}
}

void UtDenmTriggerResult_template::copy_value(const UtDenmTriggerResult& other_value)
{
single_value = new single_value_struct;
if (other_value.result().is_bound()) {
  single_value->field_result = other_value.result();
} else {
  single_value->field_result.clean_up();
}
if (other_value.actionId().is_bound()) {
  single_value->field_actionId = other_value.actionId();
} else {
  single_value->field_actionId.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmTriggerResult_template::copy_template(const UtDenmTriggerResult_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.result().get_selection()) {
single_value->field_result = other_value.result();
} else {
single_value->field_result.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.actionId().get_selection()) {
single_value->field_actionId = other_value.actionId();
} else {
single_value->field_actionId.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmTriggerResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
break;
}
set_selection(other_value);
}

UtDenmTriggerResult_template::UtDenmTriggerResult_template()
{
}

UtDenmTriggerResult_template::UtDenmTriggerResult_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmTriggerResult_template::UtDenmTriggerResult_template(const UtDenmTriggerResult& other_value)
{
copy_value(other_value);
}

UtDenmTriggerResult_template::UtDenmTriggerResult_template(const OPTIONAL<UtDenmTriggerResult>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmTriggerResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult from an unbound optional field.");
}
}

UtDenmTriggerResult_template::UtDenmTriggerResult_template(const UtDenmTriggerResult_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtDenmTriggerResult_template::~UtDenmTriggerResult_template()
{
clean_up();
}

UtDenmTriggerResult_template& UtDenmTriggerResult_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmTriggerResult_template& UtDenmTriggerResult_template::operator=(const UtDenmTriggerResult& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmTriggerResult_template& UtDenmTriggerResult_template::operator=(const OPTIONAL<UtDenmTriggerResult>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmTriggerResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
}
return *this;
}

UtDenmTriggerResult_template& UtDenmTriggerResult_template::operator=(const UtDenmTriggerResult_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtDenmTriggerResult_template::match(const UtDenmTriggerResult& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.result().is_bound()) return FALSE;
if(!single_value->field_result.match(other_value.result(), legacy))return FALSE;
if(!other_value.actionId().is_bound()) return FALSE;
if(!single_value->field_actionId.match(other_value.actionId(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
}
return FALSE;
}

boolean UtDenmTriggerResult_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_result.is_bound()) return TRUE;
if (single_value->field_actionId.is_bound()) return TRUE;
return FALSE;
}

boolean UtDenmTriggerResult_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_result.is_value()) return FALSE;
if (!single_value->field_actionId.is_value()) return FALSE;
return TRUE;
}

void UtDenmTriggerResult_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmTriggerResult UtDenmTriggerResult_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
UtDenmTriggerResult ret_val;
if (single_value->field_result.is_bound()) {
ret_val.result() = single_value->field_result.valueof();
}
if (single_value->field_actionId.is_bound()) {
ret_val.actionId() = single_value->field_actionId.valueof();
}
return ret_val;
}

void UtDenmTriggerResult_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtDenmTriggerResult_template[list_length];
}

UtDenmTriggerResult_template& UtDenmTriggerResult_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
return value_list.list_value[list_index];
}

BOOLEAN_template& UtDenmTriggerResult_template::result()
{
set_specific();
return single_value->field_result;
}

const BOOLEAN_template& UtDenmTriggerResult_template::result() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field result of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
return single_value->field_result;
}

ITS__Container::ActionID_template& UtDenmTriggerResult_template::actionId()
{
set_specific();
return single_value->field_actionId;
}

const ITS__Container::ActionID_template& UtDenmTriggerResult_template::actionId() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field actionId of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
return single_value->field_actionId;
}

int UtDenmTriggerResult_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
  }
  return 0;
}

void UtDenmTriggerResult_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ result := ");
single_value->field_result.log();
TTCN_Logger::log_event_str(", actionId := ");
single_value->field_actionId.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtDenmTriggerResult_template::log_match(const UtDenmTriggerResult& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_result.match(match_value.result(), legacy)){
TTCN_Logger::log_logmatch_info(".result");
single_value->field_result.log_match(match_value.result(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_actionId.match(match_value.actionId(), legacy)){
TTCN_Logger::log_logmatch_info(".actionId");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ result := ");
single_value->field_result.log_match(match_value.result(), legacy);
TTCN_Logger::log_event_str(", actionId := ");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmTriggerResult_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_result.encode_text(text_buf);
single_value->field_actionId.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
}
}

void UtDenmTriggerResult_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_result.decode_text(text_buf);
single_value->field_actionId.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmTriggerResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult.");
}
}

void UtDenmTriggerResult_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmTriggerResult_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @LibItsDenm_TypesAndValues.UtDenmTriggerResult has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) result().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmTriggerResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsDenm_TypesAndValues.UtDenmTriggerResult");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtDenmTriggerResult_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTriggerResult'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_result = single_value->field_result.get_param(param_name);
    mp_field_result->set_id(new Module_Param_FieldName(mcopystr("result")));
    mp->add_elem(mp_field_result);
    Module_Param* mp_field_actionId = single_value->field_actionId.get_param(param_name);
    mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
    mp->add_elem(mp_field_actionId);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtDenmTriggerResult_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_result.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTriggerResult");
single_value->field_actionId.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTriggerResult");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTriggerResult");
}

boolean UtDenmTriggerResult_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmTriggerResult_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtDenmUpdate::UtDenmUpdate()
{
  bound_flag = FALSE;
}

UtDenmUpdate::UtDenmUpdate(const ITS__Container::ActionID& par_actionId,
    const INTEGER& par_detectionTime,
    const OPTIONAL<INTEGER>& par_validityDuration,
    const OPTIONAL<DENM__PDU__Descriptions::SituationContainer>& par_situation,
    const OPTIONAL<DENM__PDU__Descriptions::LocationContainer>& par_location,
    const OPTIONAL<ITS__Container::RelevanceDistance>& par_relevanceDistance,
    const OPTIONAL<ITS__Container::RelevanceTrafficDirection>& par_relevanceTrafficDirection,
    const OPTIONAL<INTEGER>& par_transmissionInterval,
    const OPTIONAL<INTEGER>& par_repetitionInterval,
    const OPTIONAL<DENM__PDU__Descriptions::AlacarteContainer>& par_alacarte)
  :   field_actionId(par_actionId),
  field_detectionTime(par_detectionTime),
  field_validityDuration(par_validityDuration),
  field_situation(par_situation),
  field_location(par_location),
  field_relevanceDistance(par_relevanceDistance),
  field_relevanceTrafficDirection(par_relevanceTrafficDirection),
  field_transmissionInterval(par_transmissionInterval),
  field_repetitionInterval(par_repetitionInterval),
  field_alacarte(par_alacarte)
{
  bound_flag = TRUE;
}

UtDenmUpdate::UtDenmUpdate(const UtDenmUpdate& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
bound_flag = TRUE;
if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
else field_actionId.clean_up();
if (other_value.detectionTime().is_bound()) field_detectionTime = other_value.detectionTime();
else field_detectionTime.clean_up();
if (other_value.validityDuration().is_bound()) field_validityDuration = other_value.validityDuration();
else field_validityDuration.clean_up();
if (other_value.situation().is_bound()) field_situation = other_value.situation();
else field_situation.clean_up();
if (other_value.location().is_bound()) field_location = other_value.location();
else field_location.clean_up();
if (other_value.relevanceDistance().is_bound()) field_relevanceDistance = other_value.relevanceDistance();
else field_relevanceDistance.clean_up();
if (other_value.relevanceTrafficDirection().is_bound()) field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
else field_relevanceTrafficDirection.clean_up();
if (other_value.transmissionInterval().is_bound()) field_transmissionInterval = other_value.transmissionInterval();
else field_transmissionInterval.clean_up();
if (other_value.repetitionInterval().is_bound()) field_repetitionInterval = other_value.repetitionInterval();
else field_repetitionInterval.clean_up();
if (other_value.alacarte().is_bound()) field_alacarte = other_value.alacarte();
else field_alacarte.clean_up();
}

void UtDenmUpdate::clean_up()
{
field_actionId.clean_up();
field_detectionTime.clean_up();
field_validityDuration.clean_up();
field_situation.clean_up();
field_location.clean_up();
field_relevanceDistance.clean_up();
field_relevanceTrafficDirection.clean_up();
field_transmissionInterval.clean_up();
field_repetitionInterval.clean_up();
field_alacarte.clean_up();
bound_flag = FALSE;
}

UtDenmUpdate& UtDenmUpdate::operator=(const UtDenmUpdate& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
  bound_flag = TRUE;
  if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
  else field_actionId.clean_up();
  if (other_value.detectionTime().is_bound()) field_detectionTime = other_value.detectionTime();
  else field_detectionTime.clean_up();
  if (other_value.validityDuration().is_bound()) field_validityDuration = other_value.validityDuration();
  else field_validityDuration.clean_up();
  if (other_value.situation().is_bound()) field_situation = other_value.situation();
  else field_situation.clean_up();
  if (other_value.location().is_bound()) field_location = other_value.location();
  else field_location.clean_up();
  if (other_value.relevanceDistance().is_bound()) field_relevanceDistance = other_value.relevanceDistance();
  else field_relevanceDistance.clean_up();
  if (other_value.relevanceTrafficDirection().is_bound()) field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
  else field_relevanceTrafficDirection.clean_up();
  if (other_value.transmissionInterval().is_bound()) field_transmissionInterval = other_value.transmissionInterval();
  else field_transmissionInterval.clean_up();
  if (other_value.repetitionInterval().is_bound()) field_repetitionInterval = other_value.repetitionInterval();
  else field_repetitionInterval.clean_up();
  if (other_value.alacarte().is_bound()) field_alacarte = other_value.alacarte();
  else field_alacarte.clean_up();
}
return *this;
}

boolean UtDenmUpdate::operator==(const UtDenmUpdate& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_actionId==other_value.field_actionId
  && field_detectionTime==other_value.field_detectionTime
  && field_validityDuration==other_value.field_validityDuration
  && field_situation==other_value.field_situation
  && field_location==other_value.field_location
  && field_relevanceDistance==other_value.field_relevanceDistance
  && field_relevanceTrafficDirection==other_value.field_relevanceTrafficDirection
  && field_transmissionInterval==other_value.field_transmissionInterval
  && field_repetitionInterval==other_value.field_repetitionInterval
  && field_alacarte==other_value.field_alacarte;
}

boolean UtDenmUpdate::is_bound() const
{
if (bound_flag) return TRUE;
if(field_actionId.is_bound()) return TRUE;
if(field_detectionTime.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_validityDuration.get_selection() || field_validityDuration.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_situation.get_selection() || field_situation.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_location.get_selection() || field_location.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_relevanceDistance.get_selection() || field_relevanceDistance.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_relevanceTrafficDirection.get_selection() || field_relevanceTrafficDirection.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_transmissionInterval.get_selection() || field_transmissionInterval.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_repetitionInterval.get_selection() || field_repetitionInterval.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_alacarte.get_selection() || field_alacarte.is_bound()) return TRUE;
return FALSE;
}
boolean UtDenmUpdate::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_actionId.is_value()) return FALSE;
if(!field_detectionTime.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_validityDuration.get_selection() && !field_validityDuration.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_situation.get_selection() && !field_situation.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_location.get_selection() && !field_location.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_relevanceDistance.get_selection() && !field_relevanceDistance.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_relevanceTrafficDirection.get_selection() && !field_relevanceTrafficDirection.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_transmissionInterval.get_selection() && !field_transmissionInterval.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_repetitionInterval.get_selection() && !field_repetitionInterval.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_alacarte.get_selection() && !field_alacarte.is_value()) return FALSE;
return TRUE;
}
int UtDenmUpdate::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmUpdate");
  int ret_val = 2;
  if (field_validityDuration.ispresent()) ret_val++;
  if (field_situation.ispresent()) ret_val++;
  if (field_location.ispresent()) ret_val++;
  if (field_relevanceDistance.ispresent()) ret_val++;
  if (field_relevanceTrafficDirection.ispresent()) ret_val++;
  if (field_transmissionInterval.ispresent()) ret_val++;
  if (field_repetitionInterval.ispresent()) ret_val++;
  if (field_alacarte.ispresent()) ret_val++;
  return ret_val;
}

void UtDenmUpdate::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ actionId := ");
field_actionId.log();
TTCN_Logger::log_event_str(", detectionTime := ");
field_detectionTime.log();
TTCN_Logger::log_event_str(", validityDuration := ");
field_validityDuration.log();
TTCN_Logger::log_event_str(", situation := ");
field_situation.log();
TTCN_Logger::log_event_str(", location := ");
field_location.log();
TTCN_Logger::log_event_str(", relevanceDistance := ");
field_relevanceDistance.log();
TTCN_Logger::log_event_str(", relevanceTrafficDirection := ");
field_relevanceTrafficDirection.log();
TTCN_Logger::log_event_str(", transmissionInterval := ");
field_transmissionInterval.log();
TTCN_Logger::log_event_str(", repetitionInterval := ");
field_repetitionInterval.log();
TTCN_Logger::log_event_str(", alacarte := ");
field_alacarte.log();
TTCN_Logger::log_event_str(" }");
}

void UtDenmUpdate::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsDenm_TypesAndValues.UtDenmUpdate'");
    }
    if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else if (strcmp("detectionTime", param_field) == 0) {
      detectionTime().set_param(param);
      return;
    } else if (strcmp("validityDuration", param_field) == 0) {
      validityDuration().set_param(param);
      return;
    } else if (strcmp("situation", param_field) == 0) {
      situation().set_param(param);
      return;
    } else if (strcmp("location", param_field) == 0) {
      location().set_param(param);
      return;
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      relevanceDistance().set_param(param);
      return;
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      relevanceTrafficDirection().set_param(param);
      return;
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      transmissionInterval().set_param(param);
      return;
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      repetitionInterval().set_param(param);
      return;
    } else if (strcmp("alacarte", param_field) == 0) {
      alacarte().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmUpdate'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (10<mp->get_size()) {
      param.error("record value of type @LibItsDenm_TypesAndValues.UtDenmUpdate has 10 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) detectionTime().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) validityDuration().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) situation().set_param(*mp->get_elem(3));
    if (mp->get_size()>4 && mp->get_elem(4)->get_type()!=Module_Param::MP_NotUsed) location().set_param(*mp->get_elem(4));
    if (mp->get_size()>5 && mp->get_elem(5)->get_type()!=Module_Param::MP_NotUsed) relevanceDistance().set_param(*mp->get_elem(5));
    if (mp->get_size()>6 && mp->get_elem(6)->get_type()!=Module_Param::MP_NotUsed) relevanceTrafficDirection().set_param(*mp->get_elem(6));
    if (mp->get_size()>7 && mp->get_elem(7)->get_type()!=Module_Param::MP_NotUsed) transmissionInterval().set_param(*mp->get_elem(7));
    if (mp->get_size()>8 && mp->get_elem(8)->get_type()!=Module_Param::MP_NotUsed) repetitionInterval().set_param(*mp->get_elem(8));
    if (mp->get_size()>9 && mp->get_elem(9)->get_type()!=Module_Param::MP_NotUsed) alacarte().set_param(*mp->get_elem(9));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "detectionTime")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          detectionTime().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "validityDuration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          validityDuration().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "situation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          situation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "location")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          location().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceDistance")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceDistance().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceTrafficDirection")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceTrafficDirection().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "transmissionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          transmissionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "alacarte")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          alacarte().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmUpdate: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsDenm_TypesAndValues.UtDenmUpdate");
  }
}

Module_Param* UtDenmUpdate::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsDenm_TypesAndValues.UtDenmUpdate'");
    }
    if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else if (strcmp("detectionTime", param_field) == 0) {
      return detectionTime().get_param(param_name);
    } else if (strcmp("validityDuration", param_field) == 0) {
      return validityDuration().get_param(param_name);
    } else if (strcmp("situation", param_field) == 0) {
      return situation().get_param(param_name);
    } else if (strcmp("location", param_field) == 0) {
      return location().get_param(param_name);
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      return relevanceDistance().get_param(param_name);
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      return relevanceTrafficDirection().get_param(param_name);
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      return transmissionInterval().get_param(param_name);
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      return repetitionInterval().get_param(param_name);
    } else if (strcmp("alacarte", param_field) == 0) {
      return alacarte().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmUpdate'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_actionId = field_actionId.get_param(param_name);
  mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
  mp->add_elem(mp_field_actionId);
  Module_Param* mp_field_detectionTime = field_detectionTime.get_param(param_name);
  mp_field_detectionTime->set_id(new Module_Param_FieldName(mcopystr("detectionTime")));
  mp->add_elem(mp_field_detectionTime);
  Module_Param* mp_field_validityDuration = field_validityDuration.get_param(param_name);
  mp_field_validityDuration->set_id(new Module_Param_FieldName(mcopystr("validityDuration")));
  mp->add_elem(mp_field_validityDuration);
  Module_Param* mp_field_situation = field_situation.get_param(param_name);
  mp_field_situation->set_id(new Module_Param_FieldName(mcopystr("situation")));
  mp->add_elem(mp_field_situation);
  Module_Param* mp_field_location = field_location.get_param(param_name);
  mp_field_location->set_id(new Module_Param_FieldName(mcopystr("location")));
  mp->add_elem(mp_field_location);
  Module_Param* mp_field_relevanceDistance = field_relevanceDistance.get_param(param_name);
  mp_field_relevanceDistance->set_id(new Module_Param_FieldName(mcopystr("relevanceDistance")));
  mp->add_elem(mp_field_relevanceDistance);
  Module_Param* mp_field_relevanceTrafficDirection = field_relevanceTrafficDirection.get_param(param_name);
  mp_field_relevanceTrafficDirection->set_id(new Module_Param_FieldName(mcopystr("relevanceTrafficDirection")));
  mp->add_elem(mp_field_relevanceTrafficDirection);
  Module_Param* mp_field_transmissionInterval = field_transmissionInterval.get_param(param_name);
  mp_field_transmissionInterval->set_id(new Module_Param_FieldName(mcopystr("transmissionInterval")));
  mp->add_elem(mp_field_transmissionInterval);
  Module_Param* mp_field_repetitionInterval = field_repetitionInterval.get_param(param_name);
  mp_field_repetitionInterval->set_id(new Module_Param_FieldName(mcopystr("repetitionInterval")));
  mp->add_elem(mp_field_repetitionInterval);
  Module_Param* mp_field_alacarte = field_alacarte.get_param(param_name);
  mp_field_alacarte->set_id(new Module_Param_FieldName(mcopystr("alacarte")));
  mp->add_elem(mp_field_alacarte);
  return mp;
  }

void UtDenmUpdate::set_implicit_omit()
{
if (actionId().is_bound()) actionId().set_implicit_omit();
if (detectionTime().is_bound()) detectionTime().set_implicit_omit();
if (!validityDuration().is_bound()) validityDuration() = OMIT_VALUE;
else validityDuration().set_implicit_omit();
if (!situation().is_bound()) situation() = OMIT_VALUE;
else situation().set_implicit_omit();
if (!location().is_bound()) location() = OMIT_VALUE;
else location().set_implicit_omit();
if (!relevanceDistance().is_bound()) relevanceDistance() = OMIT_VALUE;
else relevanceDistance().set_implicit_omit();
if (!relevanceTrafficDirection().is_bound()) relevanceTrafficDirection() = OMIT_VALUE;
else relevanceTrafficDirection().set_implicit_omit();
if (!transmissionInterval().is_bound()) transmissionInterval() = OMIT_VALUE;
else transmissionInterval().set_implicit_omit();
if (!repetitionInterval().is_bound()) repetitionInterval() = OMIT_VALUE;
else repetitionInterval().set_implicit_omit();
if (!alacarte().is_bound()) alacarte() = OMIT_VALUE;
else alacarte().set_implicit_omit();
}

void UtDenmUpdate::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
field_actionId.encode_text(text_buf);
field_detectionTime.encode_text(text_buf);
field_validityDuration.encode_text(text_buf);
field_situation.encode_text(text_buf);
field_location.encode_text(text_buf);
field_relevanceDistance.encode_text(text_buf);
field_relevanceTrafficDirection.encode_text(text_buf);
field_transmissionInterval.encode_text(text_buf);
field_repetitionInterval.encode_text(text_buf);
field_alacarte.encode_text(text_buf);
}

void UtDenmUpdate::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_actionId.decode_text(text_buf);
field_detectionTime.decode_text(text_buf);
field_validityDuration.decode_text(text_buf);
field_situation.decode_text(text_buf);
field_location.decode_text(text_buf);
field_relevanceDistance.decode_text(text_buf);
field_relevanceTrafficDirection.decode_text(text_buf);
field_transmissionInterval.decode_text(text_buf);
field_repetitionInterval.decode_text(text_buf);
field_alacarte.decode_text(text_buf);
}

void UtDenmUpdate::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmUpdate::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmUpdate::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_actionId.RAW_decode(ITS__Container::ActionID_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_detectionTime.RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_validityDuration().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_validityDuration = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_validityDuration=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_situation().RAW_decode(DENM__PDU__Descriptions::SituationContainer_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_situation = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_situation=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_location().RAW_decode(DENM__PDU__Descriptions::LocationContainer_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_location = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_location=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_relevanceDistance().RAW_decode(ITS__Container::RelevanceDistance_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_relevanceDistance = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_relevanceDistance=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_relevanceTrafficDirection().RAW_decode(ITS__Container::RelevanceTrafficDirection_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_relevanceTrafficDirection = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_relevanceTrafficDirection=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_transmissionInterval().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_transmissionInterval = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_transmissionInterval=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_repetitionInterval().RAW_decode(INTEGER_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_repetitionInterval = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_repetitionInterval=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_alacarte().RAW_decode(DENM__PDU__Descriptions::AlacarteContainer_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_alacarte = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_alacarte=OMIT_VALUE;
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtDenmUpdate::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 10;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(10);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, ITS__Container::ActionID_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, INTEGER_descr_.raw);
  if (field_validityDuration.ispresent()) {
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[2] = NULL;
  if (field_situation.ispresent()) {
  myleaf.body.node.nodes[3] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 3, DENM__PDU__Descriptions::SituationContainer_descr_.raw);
  }
  else myleaf.body.node.nodes[3] = NULL;
  if (field_location.ispresent()) {
  myleaf.body.node.nodes[4] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 4, DENM__PDU__Descriptions::LocationContainer_descr_.raw);
  }
  else myleaf.body.node.nodes[4] = NULL;
  if (field_relevanceDistance.ispresent()) {
  myleaf.body.node.nodes[5] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 5, ITS__Container::RelevanceDistance_descr_.raw);
  }
  else myleaf.body.node.nodes[5] = NULL;
  if (field_relevanceTrafficDirection.ispresent()) {
  myleaf.body.node.nodes[6] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 6, ITS__Container::RelevanceTrafficDirection_descr_.raw);
  }
  else myleaf.body.node.nodes[6] = NULL;
  if (field_transmissionInterval.ispresent()) {
  myleaf.body.node.nodes[7] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 7, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[7] = NULL;
  if (field_repetitionInterval.ispresent()) {
  myleaf.body.node.nodes[8] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 8, INTEGER_descr_.raw);
  }
  else myleaf.body.node.nodes[8] = NULL;
  if (field_alacarte.ispresent()) {
  myleaf.body.node.nodes[9] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 9, DENM__PDU__Descriptions::AlacarteContainer_descr_.raw);
  }
  else myleaf.body.node.nodes[9] = NULL;
  encoded_length += field_actionId.RAW_encode(ITS__Container::ActionID_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_detectionTime.RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[1]);
  if (field_validityDuration.ispresent()) {
  encoded_length += field_validityDuration().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[2]);
  }
  if (field_situation.ispresent()) {
  encoded_length += field_situation().RAW_encode(DENM__PDU__Descriptions::SituationContainer_descr_, *myleaf.body.node.nodes[3]);
  }
  if (field_location.ispresent()) {
  encoded_length += field_location().RAW_encode(DENM__PDU__Descriptions::LocationContainer_descr_, *myleaf.body.node.nodes[4]);
  }
  if (field_relevanceDistance.ispresent()) {
  encoded_length += field_relevanceDistance().RAW_encode(ITS__Container::RelevanceDistance_descr_, *myleaf.body.node.nodes[5]);
  }
  if (field_relevanceTrafficDirection.ispresent()) {
  encoded_length += field_relevanceTrafficDirection().RAW_encode(ITS__Container::RelevanceTrafficDirection_descr_, *myleaf.body.node.nodes[6]);
  }
  if (field_transmissionInterval.ispresent()) {
  encoded_length += field_transmissionInterval().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[7]);
  }
  if (field_repetitionInterval.ispresent()) {
  encoded_length += field_repetitionInterval().RAW_encode(INTEGER_descr_, *myleaf.body.node.nodes[8]);
  }
  if (field_alacarte.ispresent()) {
  encoded_length += field_alacarte().RAW_encode(DENM__PDU__Descriptions::AlacarteContainer_descr_, *myleaf.body.node.nodes[9]);
  }
  return myleaf.length = encoded_length;
}

int UtDenmUpdate::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "actionId");
    enc_len += field_actionId.JSON_encode(ITS__Container::ActionID_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "detectionTime");
    enc_len += field_detectionTime.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_validityDuration.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "validityDuration");
    enc_len += field_validityDuration.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_situation.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "situation");
    enc_len += field_situation.JSON_encode(DENM__PDU__Descriptions::SituationContainer_descr_, p_tok);
  }

  if (field_location.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "location");
    enc_len += field_location.JSON_encode(DENM__PDU__Descriptions::LocationContainer_descr_, p_tok);
  }

  if (field_relevanceDistance.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "relevanceDistance");
    enc_len += field_relevanceDistance.JSON_encode(ITS__Container::RelevanceDistance_descr_, p_tok);
  }

  if (field_relevanceTrafficDirection.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "relevanceTrafficDirection");
    enc_len += field_relevanceTrafficDirection.JSON_encode(ITS__Container::RelevanceTrafficDirection_descr_, p_tok);
  }

  if (field_transmissionInterval.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "transmissionInterval");
    enc_len += field_transmissionInterval.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_repetitionInterval.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "repetitionInterval");
    enc_len += field_repetitionInterval.JSON_encode(INTEGER_descr_, p_tok);
  }

  if (field_alacarte.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "alacarte");
    enc_len += field_alacarte.JSON_encode(DENM__PDU__Descriptions::AlacarteContainer_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtDenmUpdate::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "actionId", name_len)) {
         int ret_val = field_actionId.JSON_decode(ITS__Container::ActionID_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "actionId");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (13 == name_len && 0 == strncmp(fld_name, "detectionTime", name_len)) {
         int ret_val = field_detectionTime.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "detectionTime");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (16 == name_len && 0 == strncmp(fld_name, "validityDuration", name_len)) {
         int ret_val = field_validityDuration.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "validityDuration");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "situation", name_len)) {
         int ret_val = field_situation.JSON_decode(DENM__PDU__Descriptions::SituationContainer_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "situation");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (8 == name_len && 0 == strncmp(fld_name, "location", name_len)) {
         int ret_val = field_location.JSON_decode(DENM__PDU__Descriptions::LocationContainer_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "location");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (17 == name_len && 0 == strncmp(fld_name, "relevanceDistance", name_len)) {
         int ret_val = field_relevanceDistance.JSON_decode(ITS__Container::RelevanceDistance_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "relevanceDistance");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (25 == name_len && 0 == strncmp(fld_name, "relevanceTrafficDirection", name_len)) {
         int ret_val = field_relevanceTrafficDirection.JSON_decode(ITS__Container::RelevanceTrafficDirection_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "relevanceTrafficDirection");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (20 == name_len && 0 == strncmp(fld_name, "transmissionInterval", name_len)) {
         int ret_val = field_transmissionInterval.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "transmissionInterval");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (18 == name_len && 0 == strncmp(fld_name, "repetitionInterval", name_len)) {
         int ret_val = field_repetitionInterval.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "repetitionInterval");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (8 == name_len && 0 == strncmp(fld_name, "alacarte", name_len)) {
         int ret_val = field_alacarte.JSON_decode(DENM__PDU__Descriptions::AlacarteContainer_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "alacarte");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_actionId.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "actionId");
    return JSON_ERROR_FATAL;
  }
if (!field_detectionTime.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "detectionTime");
    return JSON_ERROR_FATAL;
  }
if (!field_validityDuration.is_bound()) {
    field_validityDuration = OMIT_VALUE;
  }
if (!field_situation.is_bound()) {
    field_situation = OMIT_VALUE;
  }
if (!field_location.is_bound()) {
    field_location = OMIT_VALUE;
  }
if (!field_relevanceDistance.is_bound()) {
    field_relevanceDistance = OMIT_VALUE;
  }
if (!field_relevanceTrafficDirection.is_bound()) {
    field_relevanceTrafficDirection = OMIT_VALUE;
  }
if (!field_transmissionInterval.is_bound()) {
    field_transmissionInterval = OMIT_VALUE;
  }
if (!field_repetitionInterval.is_bound()) {
    field_repetitionInterval = OMIT_VALUE;
  }
if (!field_alacarte.is_bound()) {
    field_alacarte = OMIT_VALUE;
  }

  return dec_len;
}

struct UtDenmUpdate_template::single_value_struct {
ITS__Container::ActionID_template field_actionId;
INTEGER_template field_detectionTime;
INTEGER_template field_validityDuration;
DENM__PDU__Descriptions::SituationContainer_template field_situation;
DENM__PDU__Descriptions::LocationContainer_template field_location;
ITS__Container::RelevanceDistance_template field_relevanceDistance;
ITS__Container::RelevanceTrafficDirection_template field_relevanceTrafficDirection;
INTEGER_template field_transmissionInterval;
INTEGER_template field_repetitionInterval;
DENM__PDU__Descriptions::AlacarteContainer_template field_alacarte;
};

void UtDenmUpdate_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_actionId = ANY_VALUE;
single_value->field_detectionTime = ANY_VALUE;
single_value->field_validityDuration = ANY_OR_OMIT;
single_value->field_situation = ANY_OR_OMIT;
single_value->field_location = ANY_OR_OMIT;
single_value->field_relevanceDistance = ANY_OR_OMIT;
single_value->field_relevanceTrafficDirection = ANY_OR_OMIT;
single_value->field_transmissionInterval = ANY_OR_OMIT;
single_value->field_repetitionInterval = ANY_OR_OMIT;
single_value->field_alacarte = ANY_OR_OMIT;
}
}
}

void UtDenmUpdate_template::copy_value(const UtDenmUpdate& other_value)
{
single_value = new single_value_struct;
if (other_value.actionId().is_bound()) {
  single_value->field_actionId = other_value.actionId();
} else {
  single_value->field_actionId.clean_up();
}
if (other_value.detectionTime().is_bound()) {
  single_value->field_detectionTime = other_value.detectionTime();
} else {
  single_value->field_detectionTime.clean_up();
}
if (other_value.validityDuration().is_bound()) {
  if (other_value.validityDuration().ispresent()) single_value->field_validityDuration = other_value.validityDuration()();
  else single_value->field_validityDuration = OMIT_VALUE;
} else {
  single_value->field_validityDuration.clean_up();
}
if (other_value.situation().is_bound()) {
  if (other_value.situation().ispresent()) single_value->field_situation = other_value.situation()();
  else single_value->field_situation = OMIT_VALUE;
} else {
  single_value->field_situation.clean_up();
}
if (other_value.location().is_bound()) {
  if (other_value.location().ispresent()) single_value->field_location = other_value.location()();
  else single_value->field_location = OMIT_VALUE;
} else {
  single_value->field_location.clean_up();
}
if (other_value.relevanceDistance().is_bound()) {
  if (other_value.relevanceDistance().ispresent()) single_value->field_relevanceDistance = other_value.relevanceDistance()();
  else single_value->field_relevanceDistance = OMIT_VALUE;
} else {
  single_value->field_relevanceDistance.clean_up();
}
if (other_value.relevanceTrafficDirection().is_bound()) {
  if (other_value.relevanceTrafficDirection().ispresent()) single_value->field_relevanceTrafficDirection = other_value.relevanceTrafficDirection()();
  else single_value->field_relevanceTrafficDirection = OMIT_VALUE;
} else {
  single_value->field_relevanceTrafficDirection.clean_up();
}
if (other_value.transmissionInterval().is_bound()) {
  if (other_value.transmissionInterval().ispresent()) single_value->field_transmissionInterval = other_value.transmissionInterval()();
  else single_value->field_transmissionInterval = OMIT_VALUE;
} else {
  single_value->field_transmissionInterval.clean_up();
}
if (other_value.repetitionInterval().is_bound()) {
  if (other_value.repetitionInterval().ispresent()) single_value->field_repetitionInterval = other_value.repetitionInterval()();
  else single_value->field_repetitionInterval = OMIT_VALUE;
} else {
  single_value->field_repetitionInterval.clean_up();
}
if (other_value.alacarte().is_bound()) {
  if (other_value.alacarte().ispresent()) single_value->field_alacarte = other_value.alacarte()();
  else single_value->field_alacarte = OMIT_VALUE;
} else {
  single_value->field_alacarte.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmUpdate_template::copy_template(const UtDenmUpdate_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.actionId().get_selection()) {
single_value->field_actionId = other_value.actionId();
} else {
single_value->field_actionId.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.detectionTime().get_selection()) {
single_value->field_detectionTime = other_value.detectionTime();
} else {
single_value->field_detectionTime.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.validityDuration().get_selection()) {
single_value->field_validityDuration = other_value.validityDuration();
} else {
single_value->field_validityDuration.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.situation().get_selection()) {
single_value->field_situation = other_value.situation();
} else {
single_value->field_situation.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.location().get_selection()) {
single_value->field_location = other_value.location();
} else {
single_value->field_location.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.relevanceDistance().get_selection()) {
single_value->field_relevanceDistance = other_value.relevanceDistance();
} else {
single_value->field_relevanceDistance.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.relevanceTrafficDirection().get_selection()) {
single_value->field_relevanceTrafficDirection = other_value.relevanceTrafficDirection();
} else {
single_value->field_relevanceTrafficDirection.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.transmissionInterval().get_selection()) {
single_value->field_transmissionInterval = other_value.transmissionInterval();
} else {
single_value->field_transmissionInterval.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.repetitionInterval().get_selection()) {
single_value->field_repetitionInterval = other_value.repetitionInterval();
} else {
single_value->field_repetitionInterval.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.alacarte().get_selection()) {
single_value->field_alacarte = other_value.alacarte();
} else {
single_value->field_alacarte.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmUpdate_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
break;
}
set_selection(other_value);
}

UtDenmUpdate_template::UtDenmUpdate_template()
{
}

UtDenmUpdate_template::UtDenmUpdate_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmUpdate_template::UtDenmUpdate_template(const UtDenmUpdate& other_value)
{
copy_value(other_value);
}

UtDenmUpdate_template::UtDenmUpdate_template(const OPTIONAL<UtDenmUpdate>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmUpdate&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate from an unbound optional field.");
}
}

UtDenmUpdate_template::UtDenmUpdate_template(const UtDenmUpdate_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtDenmUpdate_template::~UtDenmUpdate_template()
{
clean_up();
}

UtDenmUpdate_template& UtDenmUpdate_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmUpdate_template& UtDenmUpdate_template::operator=(const UtDenmUpdate& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmUpdate_template& UtDenmUpdate_template::operator=(const OPTIONAL<UtDenmUpdate>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmUpdate&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
}
return *this;
}

UtDenmUpdate_template& UtDenmUpdate_template::operator=(const UtDenmUpdate_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtDenmUpdate_template::match(const UtDenmUpdate& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.actionId().is_bound()) return FALSE;
if(!single_value->field_actionId.match(other_value.actionId(), legacy))return FALSE;
if(!other_value.detectionTime().is_bound()) return FALSE;
if(!single_value->field_detectionTime.match(other_value.detectionTime(), legacy))return FALSE;
if(!other_value.validityDuration().is_bound()) return FALSE;
if((other_value.validityDuration().ispresent() ? !single_value->field_validityDuration.match((const INTEGER&)other_value.validityDuration(), legacy) : !single_value->field_validityDuration.match_omit(legacy)))return FALSE;
if(!other_value.situation().is_bound()) return FALSE;
if((other_value.situation().ispresent() ? !single_value->field_situation.match((const DENM__PDU__Descriptions::SituationContainer&)other_value.situation(), legacy) : !single_value->field_situation.match_omit(legacy)))return FALSE;
if(!other_value.location().is_bound()) return FALSE;
if((other_value.location().ispresent() ? !single_value->field_location.match((const DENM__PDU__Descriptions::LocationContainer&)other_value.location(), legacy) : !single_value->field_location.match_omit(legacy)))return FALSE;
if(!other_value.relevanceDistance().is_bound()) return FALSE;
if((other_value.relevanceDistance().ispresent() ? !single_value->field_relevanceDistance.match((const ITS__Container::RelevanceDistance&)other_value.relevanceDistance(), legacy) : !single_value->field_relevanceDistance.match_omit(legacy)))return FALSE;
if(!other_value.relevanceTrafficDirection().is_bound()) return FALSE;
if((other_value.relevanceTrafficDirection().ispresent() ? !single_value->field_relevanceTrafficDirection.match((const ITS__Container::RelevanceTrafficDirection&)other_value.relevanceTrafficDirection(), legacy) : !single_value->field_relevanceTrafficDirection.match_omit(legacy)))return FALSE;
if(!other_value.transmissionInterval().is_bound()) return FALSE;
if((other_value.transmissionInterval().ispresent() ? !single_value->field_transmissionInterval.match((const INTEGER&)other_value.transmissionInterval(), legacy) : !single_value->field_transmissionInterval.match_omit(legacy)))return FALSE;
if(!other_value.repetitionInterval().is_bound()) return FALSE;
if((other_value.repetitionInterval().ispresent() ? !single_value->field_repetitionInterval.match((const INTEGER&)other_value.repetitionInterval(), legacy) : !single_value->field_repetitionInterval.match_omit(legacy)))return FALSE;
if(!other_value.alacarte().is_bound()) return FALSE;
if((other_value.alacarte().ispresent() ? !single_value->field_alacarte.match((const DENM__PDU__Descriptions::AlacarteContainer&)other_value.alacarte(), legacy) : !single_value->field_alacarte.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
}
return FALSE;
}

boolean UtDenmUpdate_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_actionId.is_bound()) return TRUE;
if (single_value->field_detectionTime.is_bound()) return TRUE;
if (single_value->field_validityDuration.is_omit() || single_value->field_validityDuration.is_bound()) return TRUE;
if (single_value->field_situation.is_omit() || single_value->field_situation.is_bound()) return TRUE;
if (single_value->field_location.is_omit() || single_value->field_location.is_bound()) return TRUE;
if (single_value->field_relevanceDistance.is_omit() || single_value->field_relevanceDistance.is_bound()) return TRUE;
if (single_value->field_relevanceTrafficDirection.is_omit() || single_value->field_relevanceTrafficDirection.is_bound()) return TRUE;
if (single_value->field_transmissionInterval.is_omit() || single_value->field_transmissionInterval.is_bound()) return TRUE;
if (single_value->field_repetitionInterval.is_omit() || single_value->field_repetitionInterval.is_bound()) return TRUE;
if (single_value->field_alacarte.is_omit() || single_value->field_alacarte.is_bound()) return TRUE;
return FALSE;
}

boolean UtDenmUpdate_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_actionId.is_value()) return FALSE;
if (!single_value->field_detectionTime.is_value()) return FALSE;
if (!single_value->field_validityDuration.is_omit() && !single_value->field_validityDuration.is_value()) return FALSE;
if (!single_value->field_situation.is_omit() && !single_value->field_situation.is_value()) return FALSE;
if (!single_value->field_location.is_omit() && !single_value->field_location.is_value()) return FALSE;
if (!single_value->field_relevanceDistance.is_omit() && !single_value->field_relevanceDistance.is_value()) return FALSE;
if (!single_value->field_relevanceTrafficDirection.is_omit() && !single_value->field_relevanceTrafficDirection.is_value()) return FALSE;
if (!single_value->field_transmissionInterval.is_omit() && !single_value->field_transmissionInterval.is_value()) return FALSE;
if (!single_value->field_repetitionInterval.is_omit() && !single_value->field_repetitionInterval.is_value()) return FALSE;
if (!single_value->field_alacarte.is_omit() && !single_value->field_alacarte.is_value()) return FALSE;
return TRUE;
}

void UtDenmUpdate_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmUpdate UtDenmUpdate_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
UtDenmUpdate ret_val;
if (single_value->field_actionId.is_bound()) {
ret_val.actionId() = single_value->field_actionId.valueof();
}
if (single_value->field_detectionTime.is_bound()) {
ret_val.detectionTime() = single_value->field_detectionTime.valueof();
}
if (single_value->field_validityDuration.is_omit()) ret_val.validityDuration() = OMIT_VALUE;
else if (single_value->field_validityDuration.is_bound()) {
ret_val.validityDuration() = single_value->field_validityDuration.valueof();
}
if (single_value->field_situation.is_omit()) ret_val.situation() = OMIT_VALUE;
else if (single_value->field_situation.is_bound()) {
ret_val.situation() = single_value->field_situation.valueof();
}
if (single_value->field_location.is_omit()) ret_val.location() = OMIT_VALUE;
else if (single_value->field_location.is_bound()) {
ret_val.location() = single_value->field_location.valueof();
}
if (single_value->field_relevanceDistance.is_omit()) ret_val.relevanceDistance() = OMIT_VALUE;
else if (single_value->field_relevanceDistance.is_bound()) {
ret_val.relevanceDistance() = single_value->field_relevanceDistance.valueof();
}
if (single_value->field_relevanceTrafficDirection.is_omit()) ret_val.relevanceTrafficDirection() = OMIT_VALUE;
else if (single_value->field_relevanceTrafficDirection.is_bound()) {
ret_val.relevanceTrafficDirection() = single_value->field_relevanceTrafficDirection.valueof();
}
if (single_value->field_transmissionInterval.is_omit()) ret_val.transmissionInterval() = OMIT_VALUE;
else if (single_value->field_transmissionInterval.is_bound()) {
ret_val.transmissionInterval() = single_value->field_transmissionInterval.valueof();
}
if (single_value->field_repetitionInterval.is_omit()) ret_val.repetitionInterval() = OMIT_VALUE;
else if (single_value->field_repetitionInterval.is_bound()) {
ret_val.repetitionInterval() = single_value->field_repetitionInterval.valueof();
}
if (single_value->field_alacarte.is_omit()) ret_val.alacarte() = OMIT_VALUE;
else if (single_value->field_alacarte.is_bound()) {
ret_val.alacarte() = single_value->field_alacarte.valueof();
}
return ret_val;
}

void UtDenmUpdate_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtDenmUpdate_template[list_length];
}

UtDenmUpdate_template& UtDenmUpdate_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return value_list.list_value[list_index];
}

ITS__Container::ActionID_template& UtDenmUpdate_template::actionId()
{
set_specific();
return single_value->field_actionId;
}

const ITS__Container::ActionID_template& UtDenmUpdate_template::actionId() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field actionId of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_actionId;
}

INTEGER_template& UtDenmUpdate_template::detectionTime()
{
set_specific();
return single_value->field_detectionTime;
}

const INTEGER_template& UtDenmUpdate_template::detectionTime() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field detectionTime of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_detectionTime;
}

INTEGER_template& UtDenmUpdate_template::validityDuration()
{
set_specific();
return single_value->field_validityDuration;
}

const INTEGER_template& UtDenmUpdate_template::validityDuration() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field validityDuration of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_validityDuration;
}

DENM__PDU__Descriptions::SituationContainer_template& UtDenmUpdate_template::situation()
{
set_specific();
return single_value->field_situation;
}

const DENM__PDU__Descriptions::SituationContainer_template& UtDenmUpdate_template::situation() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field situation of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_situation;
}

DENM__PDU__Descriptions::LocationContainer_template& UtDenmUpdate_template::location()
{
set_specific();
return single_value->field_location;
}

const DENM__PDU__Descriptions::LocationContainer_template& UtDenmUpdate_template::location() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field location of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_location;
}

ITS__Container::RelevanceDistance_template& UtDenmUpdate_template::relevanceDistance()
{
set_specific();
return single_value->field_relevanceDistance;
}

const ITS__Container::RelevanceDistance_template& UtDenmUpdate_template::relevanceDistance() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field relevanceDistance of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_relevanceDistance;
}

ITS__Container::RelevanceTrafficDirection_template& UtDenmUpdate_template::relevanceTrafficDirection()
{
set_specific();
return single_value->field_relevanceTrafficDirection;
}

const ITS__Container::RelevanceTrafficDirection_template& UtDenmUpdate_template::relevanceTrafficDirection() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field relevanceTrafficDirection of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_relevanceTrafficDirection;
}

INTEGER_template& UtDenmUpdate_template::transmissionInterval()
{
set_specific();
return single_value->field_transmissionInterval;
}

const INTEGER_template& UtDenmUpdate_template::transmissionInterval() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field transmissionInterval of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_transmissionInterval;
}

INTEGER_template& UtDenmUpdate_template::repetitionInterval()
{
set_specific();
return single_value->field_repetitionInterval;
}

const INTEGER_template& UtDenmUpdate_template::repetitionInterval() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field repetitionInterval of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_repetitionInterval;
}

DENM__PDU__Descriptions::AlacarteContainer_template& UtDenmUpdate_template::alacarte()
{
set_specific();
return single_value->field_alacarte;
}

const DENM__PDU__Descriptions::AlacarteContainer_template& UtDenmUpdate_template::alacarte() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field alacarte of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
return single_value->field_alacarte;
}

int UtDenmUpdate_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_validityDuration.is_present()) ret_val++;
      if (single_value->field_situation.is_present()) ret_val++;
      if (single_value->field_location.is_present()) ret_val++;
      if (single_value->field_relevanceDistance.is_present()) ret_val++;
      if (single_value->field_relevanceTrafficDirection.is_present()) ret_val++;
      if (single_value->field_transmissionInterval.is_present()) ret_val++;
      if (single_value->field_repetitionInterval.is_present()) ret_val++;
      if (single_value->field_alacarte.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
  }
  return 0;
}

void UtDenmUpdate_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ actionId := ");
single_value->field_actionId.log();
TTCN_Logger::log_event_str(", detectionTime := ");
single_value->field_detectionTime.log();
TTCN_Logger::log_event_str(", validityDuration := ");
single_value->field_validityDuration.log();
TTCN_Logger::log_event_str(", situation := ");
single_value->field_situation.log();
TTCN_Logger::log_event_str(", location := ");
single_value->field_location.log();
TTCN_Logger::log_event_str(", relevanceDistance := ");
single_value->field_relevanceDistance.log();
TTCN_Logger::log_event_str(", relevanceTrafficDirection := ");
single_value->field_relevanceTrafficDirection.log();
TTCN_Logger::log_event_str(", transmissionInterval := ");
single_value->field_transmissionInterval.log();
TTCN_Logger::log_event_str(", repetitionInterval := ");
single_value->field_repetitionInterval.log();
TTCN_Logger::log_event_str(", alacarte := ");
single_value->field_alacarte.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtDenmUpdate_template::log_match(const UtDenmUpdate& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_actionId.match(match_value.actionId(), legacy)){
TTCN_Logger::log_logmatch_info(".actionId");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_detectionTime.match(match_value.detectionTime(), legacy)){
TTCN_Logger::log_logmatch_info(".detectionTime");
single_value->field_detectionTime.log_match(match_value.detectionTime(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.validityDuration().ispresent()){
if(!single_value->field_validityDuration.match(match_value.validityDuration(), legacy)){
TTCN_Logger::log_logmatch_info(".validityDuration");
single_value->field_validityDuration.log_match(match_value.validityDuration(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_validityDuration.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".validityDuration := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_validityDuration.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.situation().ispresent()){
if(!single_value->field_situation.match(match_value.situation(), legacy)){
TTCN_Logger::log_logmatch_info(".situation");
single_value->field_situation.log_match(match_value.situation(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_situation.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".situation := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_situation.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.location().ispresent()){
if(!single_value->field_location.match(match_value.location(), legacy)){
TTCN_Logger::log_logmatch_info(".location");
single_value->field_location.log_match(match_value.location(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_location.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".location := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_location.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.relevanceDistance().ispresent()){
if(!single_value->field_relevanceDistance.match(match_value.relevanceDistance(), legacy)){
TTCN_Logger::log_logmatch_info(".relevanceDistance");
single_value->field_relevanceDistance.log_match(match_value.relevanceDistance(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_relevanceDistance.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".relevanceDistance := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_relevanceDistance.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.relevanceTrafficDirection().ispresent()){
if(!single_value->field_relevanceTrafficDirection.match(match_value.relevanceTrafficDirection(), legacy)){
TTCN_Logger::log_logmatch_info(".relevanceTrafficDirection");
single_value->field_relevanceTrafficDirection.log_match(match_value.relevanceTrafficDirection(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_relevanceTrafficDirection.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".relevanceTrafficDirection := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_relevanceTrafficDirection.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.transmissionInterval().ispresent()){
if(!single_value->field_transmissionInterval.match(match_value.transmissionInterval(), legacy)){
TTCN_Logger::log_logmatch_info(".transmissionInterval");
single_value->field_transmissionInterval.log_match(match_value.transmissionInterval(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_transmissionInterval.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".transmissionInterval := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_transmissionInterval.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.repetitionInterval().ispresent()){
if(!single_value->field_repetitionInterval.match(match_value.repetitionInterval(), legacy)){
TTCN_Logger::log_logmatch_info(".repetitionInterval");
single_value->field_repetitionInterval.log_match(match_value.repetitionInterval(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_repetitionInterval.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".repetitionInterval := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_repetitionInterval.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.alacarte().ispresent()){
if(!single_value->field_alacarte.match(match_value.alacarte(), legacy)){
TTCN_Logger::log_logmatch_info(".alacarte");
single_value->field_alacarte.log_match(match_value.alacarte(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_alacarte.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".alacarte := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_alacarte.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ actionId := ");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::log_event_str(", detectionTime := ");
single_value->field_detectionTime.log_match(match_value.detectionTime(), legacy);
TTCN_Logger::log_event_str(", validityDuration := ");
if (match_value.validityDuration().ispresent()) single_value->field_validityDuration.log_match(match_value.validityDuration(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_validityDuration.log();
if (single_value->field_validityDuration.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", situation := ");
if (match_value.situation().ispresent()) single_value->field_situation.log_match(match_value.situation(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_situation.log();
if (single_value->field_situation.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", location := ");
if (match_value.location().ispresent()) single_value->field_location.log_match(match_value.location(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_location.log();
if (single_value->field_location.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", relevanceDistance := ");
if (match_value.relevanceDistance().ispresent()) single_value->field_relevanceDistance.log_match(match_value.relevanceDistance(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_relevanceDistance.log();
if (single_value->field_relevanceDistance.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", relevanceTrafficDirection := ");
if (match_value.relevanceTrafficDirection().ispresent()) single_value->field_relevanceTrafficDirection.log_match(match_value.relevanceTrafficDirection(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_relevanceTrafficDirection.log();
if (single_value->field_relevanceTrafficDirection.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", transmissionInterval := ");
if (match_value.transmissionInterval().ispresent()) single_value->field_transmissionInterval.log_match(match_value.transmissionInterval(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_transmissionInterval.log();
if (single_value->field_transmissionInterval.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", repetitionInterval := ");
if (match_value.repetitionInterval().ispresent()) single_value->field_repetitionInterval.log_match(match_value.repetitionInterval(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_repetitionInterval.log();
if (single_value->field_repetitionInterval.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", alacarte := ");
if (match_value.alacarte().ispresent()) single_value->field_alacarte.log_match(match_value.alacarte(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_alacarte.log();
if (single_value->field_alacarte.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmUpdate_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_actionId.encode_text(text_buf);
single_value->field_detectionTime.encode_text(text_buf);
single_value->field_validityDuration.encode_text(text_buf);
single_value->field_situation.encode_text(text_buf);
single_value->field_location.encode_text(text_buf);
single_value->field_relevanceDistance.encode_text(text_buf);
single_value->field_relevanceTrafficDirection.encode_text(text_buf);
single_value->field_transmissionInterval.encode_text(text_buf);
single_value->field_repetitionInterval.encode_text(text_buf);
single_value->field_alacarte.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
}
}

void UtDenmUpdate_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_actionId.decode_text(text_buf);
single_value->field_detectionTime.decode_text(text_buf);
single_value->field_validityDuration.decode_text(text_buf);
single_value->field_situation.decode_text(text_buf);
single_value->field_location.decode_text(text_buf);
single_value->field_relevanceDistance.decode_text(text_buf);
single_value->field_relevanceTrafficDirection.decode_text(text_buf);
single_value->field_transmissionInterval.decode_text(text_buf);
single_value->field_repetitionInterval.decode_text(text_buf);
single_value->field_alacarte.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmUpdate_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsDenm_TypesAndValues.UtDenmUpdate.");
}
}

void UtDenmUpdate_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsDenm_TypesAndValues.UtDenmUpdate'");
    }
    if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else if (strcmp("detectionTime", param_field) == 0) {
      detectionTime().set_param(param);
      return;
    } else if (strcmp("validityDuration", param_field) == 0) {
      validityDuration().set_param(param);
      return;
    } else if (strcmp("situation", param_field) == 0) {
      situation().set_param(param);
      return;
    } else if (strcmp("location", param_field) == 0) {
      location().set_param(param);
      return;
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      relevanceDistance().set_param(param);
      return;
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      relevanceTrafficDirection().set_param(param);
      return;
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      transmissionInterval().set_param(param);
      return;
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      repetitionInterval().set_param(param);
      return;
    } else if (strcmp("alacarte", param_field) == 0) {
      alacarte().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsDenm_TypesAndValues.UtDenmUpdate'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmUpdate_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (10<mp->get_size()) {
      param.error("record template of type @LibItsDenm_TypesAndValues.UtDenmUpdate has 10 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) detectionTime().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) validityDuration().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) situation().set_param(*mp->get_elem(3));
    if (mp->get_size()>4 && mp->get_elem(4)->get_type()!=Module_Param::MP_NotUsed) location().set_param(*mp->get_elem(4));
    if (mp->get_size()>5 && mp->get_elem(5)->get_type()!=Module_Param::MP_NotUsed) relevanceDistance().set_param(*mp->get_elem(5));
    if (mp->get_size()>6 && mp->get_elem(6)->get_type()!=Module_Param::MP_NotUsed) relevanceTrafficDirection().set_param(*mp->get_elem(6));
    if (mp->get_size()>7 && mp->get_elem(7)->get_type()!=Module_Param::MP_NotUsed) transmissionInterval().set_param(*mp->get_elem(7));
    if (mp->get_size()>8 && mp->get_elem(8)->get_type()!=Module_Param::MP_NotUsed) repetitionInterval().set_param(*mp->get_elem(8));
    if (mp->get_size()>9 && mp->get_elem(9)->get_type()!=Module_Param::MP_NotUsed) alacarte().set_param(*mp->get_elem(9));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "detectionTime")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          detectionTime().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "validityDuration")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          validityDuration().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "situation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          situation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "location")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          location().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceDistance")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceDistance().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "relevanceTrafficDirection")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          relevanceTrafficDirection().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "transmissionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          transmissionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "repetitionInterval")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          repetitionInterval().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "alacarte")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          alacarte().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmUpdate: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsDenm_TypesAndValues.UtDenmUpdate");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtDenmUpdate_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsDenm_TypesAndValues.UtDenmUpdate'");
    }
    if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else if (strcmp("detectionTime", param_field) == 0) {
      return detectionTime().get_param(param_name);
    } else if (strcmp("validityDuration", param_field) == 0) {
      return validityDuration().get_param(param_name);
    } else if (strcmp("situation", param_field) == 0) {
      return situation().get_param(param_name);
    } else if (strcmp("location", param_field) == 0) {
      return location().get_param(param_name);
    } else if (strcmp("relevanceDistance", param_field) == 0) {
      return relevanceDistance().get_param(param_name);
    } else if (strcmp("relevanceTrafficDirection", param_field) == 0) {
      return relevanceTrafficDirection().get_param(param_name);
    } else if (strcmp("transmissionInterval", param_field) == 0) {
      return transmissionInterval().get_param(param_name);
    } else if (strcmp("repetitionInterval", param_field) == 0) {
      return repetitionInterval().get_param(param_name);
    } else if (strcmp("alacarte", param_field) == 0) {
      return alacarte().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmUpdate'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_actionId = single_value->field_actionId.get_param(param_name);
    mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
    mp->add_elem(mp_field_actionId);
    Module_Param* mp_field_detectionTime = single_value->field_detectionTime.get_param(param_name);
    mp_field_detectionTime->set_id(new Module_Param_FieldName(mcopystr("detectionTime")));
    mp->add_elem(mp_field_detectionTime);
    Module_Param* mp_field_validityDuration = single_value->field_validityDuration.get_param(param_name);
    mp_field_validityDuration->set_id(new Module_Param_FieldName(mcopystr("validityDuration")));
    mp->add_elem(mp_field_validityDuration);
    Module_Param* mp_field_situation = single_value->field_situation.get_param(param_name);
    mp_field_situation->set_id(new Module_Param_FieldName(mcopystr("situation")));
    mp->add_elem(mp_field_situation);
    Module_Param* mp_field_location = single_value->field_location.get_param(param_name);
    mp_field_location->set_id(new Module_Param_FieldName(mcopystr("location")));
    mp->add_elem(mp_field_location);
    Module_Param* mp_field_relevanceDistance = single_value->field_relevanceDistance.get_param(param_name);
    mp_field_relevanceDistance->set_id(new Module_Param_FieldName(mcopystr("relevanceDistance")));
    mp->add_elem(mp_field_relevanceDistance);
    Module_Param* mp_field_relevanceTrafficDirection = single_value->field_relevanceTrafficDirection.get_param(param_name);
    mp_field_relevanceTrafficDirection->set_id(new Module_Param_FieldName(mcopystr("relevanceTrafficDirection")));
    mp->add_elem(mp_field_relevanceTrafficDirection);
    Module_Param* mp_field_transmissionInterval = single_value->field_transmissionInterval.get_param(param_name);
    mp_field_transmissionInterval->set_id(new Module_Param_FieldName(mcopystr("transmissionInterval")));
    mp->add_elem(mp_field_transmissionInterval);
    Module_Param* mp_field_repetitionInterval = single_value->field_repetitionInterval.get_param(param_name);
    mp_field_repetitionInterval->set_id(new Module_Param_FieldName(mcopystr("repetitionInterval")));
    mp->add_elem(mp_field_repetitionInterval);
    Module_Param* mp_field_alacarte = single_value->field_alacarte.get_param(param_name);
    mp_field_alacarte->set_id(new Module_Param_FieldName(mcopystr("alacarte")));
    mp->add_elem(mp_field_alacarte);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtDenmUpdate_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_actionId.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_detectionTime.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_validityDuration.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_situation.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_location.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_relevanceDistance.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_relevanceTrafficDirection.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_transmissionInterval.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_repetitionInterval.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
single_value->field_alacarte.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdate");
}

boolean UtDenmUpdate_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmUpdate_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtDenmUpdateResult::UtDenmUpdateResult()
{
  bound_flag = FALSE;
}

UtDenmUpdateResult::UtDenmUpdateResult(const BOOLEAN& par_result,
    const ITS__Container::ActionID& par_actionId)
  :   field_result(par_result),
  field_actionId(par_actionId)
{
  bound_flag = TRUE;
}

UtDenmUpdateResult::UtDenmUpdateResult(const UtDenmUpdateResult& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
bound_flag = TRUE;
if (other_value.result().is_bound()) field_result = other_value.result();
else field_result.clean_up();
if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
else field_actionId.clean_up();
}

void UtDenmUpdateResult::clean_up()
{
field_result.clean_up();
field_actionId.clean_up();
bound_flag = FALSE;
}

UtDenmUpdateResult& UtDenmUpdateResult::operator=(const UtDenmUpdateResult& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
  bound_flag = TRUE;
  if (other_value.result().is_bound()) field_result = other_value.result();
  else field_result.clean_up();
  if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
  else field_actionId.clean_up();
}
return *this;
}

boolean UtDenmUpdateResult::operator==(const UtDenmUpdateResult& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_result==other_value.field_result
  && field_actionId==other_value.field_actionId;
}

boolean UtDenmUpdateResult::is_bound() const
{
if (bound_flag) return TRUE;
if(field_result.is_bound()) return TRUE;
if(field_actionId.is_bound()) return TRUE;
return FALSE;
}
boolean UtDenmUpdateResult::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_result.is_value()) return FALSE;
if(!field_actionId.is_value()) return FALSE;
return TRUE;
}
int UtDenmUpdateResult::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult");
  return 2;
}

void UtDenmUpdateResult::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ result := ");
field_result.log();
TTCN_Logger::log_event_str(", actionId := ");
field_actionId.log();
TTCN_Logger::log_event_str(" }");
}

void UtDenmUpdateResult::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) result().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmUpdateResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsDenm_TypesAndValues.UtDenmUpdateResult");
  }
}

Module_Param* UtDenmUpdateResult::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_result = field_result.get_param(param_name);
  mp_field_result->set_id(new Module_Param_FieldName(mcopystr("result")));
  mp->add_elem(mp_field_result);
  Module_Param* mp_field_actionId = field_actionId.get_param(param_name);
  mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
  mp->add_elem(mp_field_actionId);
  return mp;
  }

void UtDenmUpdateResult::set_implicit_omit()
{
if (result().is_bound()) result().set_implicit_omit();
if (actionId().is_bound()) actionId().set_implicit_omit();
}

void UtDenmUpdateResult::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
field_result.encode_text(text_buf);
field_actionId.encode_text(text_buf);
}

void UtDenmUpdateResult::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_result.decode_text(text_buf);
field_actionId.decode_text(text_buf);
}

void UtDenmUpdateResult::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmUpdateResult::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmUpdateResult::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_result.RAW_decode(UtDenmUpdateResult_result_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_actionId.RAW_decode(UtDenmUpdateResult_actionId_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtDenmUpdateResult::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 2;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(2);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, UtDenmUpdateResult_result_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, UtDenmUpdateResult_actionId_descr_.raw);
  encoded_length += field_result.RAW_encode(UtDenmUpdateResult_result_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_actionId.RAW_encode(UtDenmUpdateResult_actionId_descr_, *myleaf.body.node.nodes[1]);
  return myleaf.length = encoded_length;
}

int UtDenmUpdateResult::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "result");
    enc_len += field_result.JSON_encode(UtDenmUpdateResult_result_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "actionId");
    enc_len += field_actionId.JSON_encode(UtDenmUpdateResult_actionId_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtDenmUpdateResult::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "result", name_len)) {
         int ret_val = field_result.JSON_decode(UtDenmUpdateResult_result_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "result");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (8 == name_len && 0 == strncmp(fld_name, "actionId", name_len)) {
         int ret_val = field_actionId.JSON_decode(UtDenmUpdateResult_actionId_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "actionId");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_result.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "result");
    return JSON_ERROR_FATAL;
  }
if (!field_actionId.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "actionId");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtDenmUpdateResult_template::single_value_struct {
BOOLEAN_template field_result;
ITS__Container::ActionID_template field_actionId;
};

void UtDenmUpdateResult_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_result = ANY_VALUE;
single_value->field_actionId = ANY_VALUE;
}
}
}

void UtDenmUpdateResult_template::copy_value(const UtDenmUpdateResult& other_value)
{
single_value = new single_value_struct;
if (other_value.result().is_bound()) {
  single_value->field_result = other_value.result();
} else {
  single_value->field_result.clean_up();
}
if (other_value.actionId().is_bound()) {
  single_value->field_actionId = other_value.actionId();
} else {
  single_value->field_actionId.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmUpdateResult_template::copy_template(const UtDenmUpdateResult_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.result().get_selection()) {
single_value->field_result = other_value.result();
} else {
single_value->field_result.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.actionId().get_selection()) {
single_value->field_actionId = other_value.actionId();
} else {
single_value->field_actionId.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmUpdateResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
break;
}
set_selection(other_value);
}

UtDenmUpdateResult_template::UtDenmUpdateResult_template()
{
}

UtDenmUpdateResult_template::UtDenmUpdateResult_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmUpdateResult_template::UtDenmUpdateResult_template(const UtDenmUpdateResult& other_value)
{
copy_value(other_value);
}

UtDenmUpdateResult_template::UtDenmUpdateResult_template(const OPTIONAL<UtDenmUpdateResult>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmUpdateResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult from an unbound optional field.");
}
}

UtDenmUpdateResult_template::UtDenmUpdateResult_template(const UtDenmUpdateResult_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtDenmUpdateResult_template::~UtDenmUpdateResult_template()
{
clean_up();
}

UtDenmUpdateResult_template& UtDenmUpdateResult_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmUpdateResult_template& UtDenmUpdateResult_template::operator=(const UtDenmUpdateResult& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmUpdateResult_template& UtDenmUpdateResult_template::operator=(const OPTIONAL<UtDenmUpdateResult>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmUpdateResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
}
return *this;
}

UtDenmUpdateResult_template& UtDenmUpdateResult_template::operator=(const UtDenmUpdateResult_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtDenmUpdateResult_template::match(const UtDenmUpdateResult& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.result().is_bound()) return FALSE;
if(!single_value->field_result.match(other_value.result(), legacy))return FALSE;
if(!other_value.actionId().is_bound()) return FALSE;
if(!single_value->field_actionId.match(other_value.actionId(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
}
return FALSE;
}

boolean UtDenmUpdateResult_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_result.is_bound()) return TRUE;
if (single_value->field_actionId.is_bound()) return TRUE;
return FALSE;
}

boolean UtDenmUpdateResult_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_result.is_value()) return FALSE;
if (!single_value->field_actionId.is_value()) return FALSE;
return TRUE;
}

void UtDenmUpdateResult_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmUpdateResult UtDenmUpdateResult_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
UtDenmUpdateResult ret_val;
if (single_value->field_result.is_bound()) {
ret_val.result() = single_value->field_result.valueof();
}
if (single_value->field_actionId.is_bound()) {
ret_val.actionId() = single_value->field_actionId.valueof();
}
return ret_val;
}

void UtDenmUpdateResult_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtDenmUpdateResult_template[list_length];
}

UtDenmUpdateResult_template& UtDenmUpdateResult_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
return value_list.list_value[list_index];
}

BOOLEAN_template& UtDenmUpdateResult_template::result()
{
set_specific();
return single_value->field_result;
}

const BOOLEAN_template& UtDenmUpdateResult_template::result() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field result of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
return single_value->field_result;
}

ITS__Container::ActionID_template& UtDenmUpdateResult_template::actionId()
{
set_specific();
return single_value->field_actionId;
}

const ITS__Container::ActionID_template& UtDenmUpdateResult_template::actionId() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field actionId of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
return single_value->field_actionId;
}

int UtDenmUpdateResult_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
  }
  return 0;
}

void UtDenmUpdateResult_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ result := ");
single_value->field_result.log();
TTCN_Logger::log_event_str(", actionId := ");
single_value->field_actionId.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtDenmUpdateResult_template::log_match(const UtDenmUpdateResult& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_result.match(match_value.result(), legacy)){
TTCN_Logger::log_logmatch_info(".result");
single_value->field_result.log_match(match_value.result(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_actionId.match(match_value.actionId(), legacy)){
TTCN_Logger::log_logmatch_info(".actionId");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ result := ");
single_value->field_result.log_match(match_value.result(), legacy);
TTCN_Logger::log_event_str(", actionId := ");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmUpdateResult_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_result.encode_text(text_buf);
single_value->field_actionId.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
}
}

void UtDenmUpdateResult_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_result.decode_text(text_buf);
single_value->field_actionId.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmUpdateResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult.");
}
}

void UtDenmUpdateResult_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmUpdateResult_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @LibItsDenm_TypesAndValues.UtDenmUpdateResult has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) result().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmUpdateResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsDenm_TypesAndValues.UtDenmUpdateResult");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtDenmUpdateResult_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmUpdateResult'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_result = single_value->field_result.get_param(param_name);
    mp_field_result->set_id(new Module_Param_FieldName(mcopystr("result")));
    mp->add_elem(mp_field_result);
    Module_Param* mp_field_actionId = single_value->field_actionId.get_param(param_name);
    mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
    mp->add_elem(mp_field_actionId);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtDenmUpdateResult_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_result.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdateResult");
single_value->field_actionId.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdateResult");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmUpdateResult");
}

boolean UtDenmUpdateResult_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmUpdateResult_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtDenmTermination::UtDenmTermination()
{
  bound_flag = FALSE;
}

UtDenmTermination::UtDenmTermination(const ITS__Container::ActionID& par_actionId)
  :   field_actionId(par_actionId)
{
  bound_flag = TRUE;
}

UtDenmTermination::UtDenmTermination(const UtDenmTermination& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
bound_flag = TRUE;
if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
else field_actionId.clean_up();
}

void UtDenmTermination::clean_up()
{
field_actionId.clean_up();
bound_flag = FALSE;
}

UtDenmTermination& UtDenmTermination::operator=(const UtDenmTermination& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
  bound_flag = TRUE;
  if (other_value.actionId().is_bound()) field_actionId = other_value.actionId();
  else field_actionId.clean_up();
}
return *this;
}

boolean UtDenmTermination::operator==(const UtDenmTermination& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_actionId==other_value.field_actionId;
}

boolean UtDenmTermination::is_bound() const
{
if (bound_flag) return TRUE;
if(field_actionId.is_bound()) return TRUE;
return FALSE;
}
boolean UtDenmTermination::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_actionId.is_value()) return FALSE;
return TRUE;
}
int UtDenmTermination::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmTermination");
  return 1;
}

void UtDenmTermination::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ actionId := ");
field_actionId.log();
TTCN_Logger::log_event_str(" }");
}

void UtDenmTermination::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsDenm_TypesAndValues.UtDenmTermination'");
    }
    if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTermination'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @LibItsDenm_TypesAndValues.UtDenmTermination has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmTermination: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsDenm_TypesAndValues.UtDenmTermination");
  }
}

Module_Param* UtDenmTermination::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsDenm_TypesAndValues.UtDenmTermination'");
    }
    if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTermination'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_actionId = field_actionId.get_param(param_name);
  mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
  mp->add_elem(mp_field_actionId);
  return mp;
  }

void UtDenmTermination::set_implicit_omit()
{
if (actionId().is_bound()) actionId().set_implicit_omit();
}

void UtDenmTermination::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
field_actionId.encode_text(text_buf);
}

void UtDenmTermination::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_actionId.decode_text(text_buf);
}

void UtDenmTermination::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmTermination::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmTermination::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_actionId.RAW_decode(ITS__Container::ActionID_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtDenmTermination::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 1;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(1);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, ITS__Container::ActionID_descr_.raw);
  encoded_length += field_actionId.RAW_encode(ITS__Container::ActionID_descr_, *myleaf.body.node.nodes[0]);
  return myleaf.length = encoded_length;
}

int UtDenmTermination::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "actionId");
    enc_len += field_actionId.JSON_encode(ITS__Container::ActionID_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtDenmTermination::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "actionId", name_len)) {
         int ret_val = field_actionId.JSON_decode(ITS__Container::ActionID_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "actionId");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_actionId.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "actionId");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtDenmTermination_template::single_value_struct {
ITS__Container::ActionID_template field_actionId;
};

void UtDenmTermination_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_actionId = ANY_VALUE;
}
}
}

void UtDenmTermination_template::copy_value(const UtDenmTermination& other_value)
{
single_value = new single_value_struct;
if (other_value.actionId().is_bound()) {
  single_value->field_actionId = other_value.actionId();
} else {
  single_value->field_actionId.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmTermination_template::copy_template(const UtDenmTermination_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.actionId().get_selection()) {
single_value->field_actionId = other_value.actionId();
} else {
single_value->field_actionId.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmTermination_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
break;
}
set_selection(other_value);
}

UtDenmTermination_template::UtDenmTermination_template()
{
}

UtDenmTermination_template::UtDenmTermination_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmTermination_template::UtDenmTermination_template(const UtDenmTermination& other_value)
{
copy_value(other_value);
}

UtDenmTermination_template::UtDenmTermination_template(const OPTIONAL<UtDenmTermination>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmTermination&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmTermination from an unbound optional field.");
}
}

UtDenmTermination_template::UtDenmTermination_template(const UtDenmTermination_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtDenmTermination_template::~UtDenmTermination_template()
{
clean_up();
}

UtDenmTermination_template& UtDenmTermination_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmTermination_template& UtDenmTermination_template::operator=(const UtDenmTermination& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmTermination_template& UtDenmTermination_template::operator=(const OPTIONAL<UtDenmTermination>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmTermination&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
}
return *this;
}

UtDenmTermination_template& UtDenmTermination_template::operator=(const UtDenmTermination_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtDenmTermination_template::match(const UtDenmTermination& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.actionId().is_bound()) return FALSE;
if(!single_value->field_actionId.match(other_value.actionId(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
}
return FALSE;
}

boolean UtDenmTermination_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_actionId.is_bound()) return TRUE;
return FALSE;
}

boolean UtDenmTermination_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_actionId.is_value()) return FALSE;
return TRUE;
}

void UtDenmTermination_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmTermination UtDenmTermination_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
UtDenmTermination ret_val;
if (single_value->field_actionId.is_bound()) {
ret_val.actionId() = single_value->field_actionId.valueof();
}
return ret_val;
}

void UtDenmTermination_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtDenmTermination_template[list_length];
}

UtDenmTermination_template& UtDenmTermination_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
return value_list.list_value[list_index];
}

ITS__Container::ActionID_template& UtDenmTermination_template::actionId()
{
set_specific();
return single_value->field_actionId;
}

const ITS__Container::ActionID_template& UtDenmTermination_template::actionId() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field actionId of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
return single_value->field_actionId;
}

int UtDenmTermination_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTermination which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTermination containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTermination containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTermination containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTermination containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmTermination containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
  }
  return 0;
}

void UtDenmTermination_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ actionId := ");
single_value->field_actionId.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtDenmTermination_template::log_match(const UtDenmTermination& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_actionId.match(match_value.actionId(), legacy)){
TTCN_Logger::log_logmatch_info(".actionId");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ actionId := ");
single_value->field_actionId.log_match(match_value.actionId(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmTermination_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_actionId.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
}
}

void UtDenmTermination_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_actionId.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmTermination_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsDenm_TypesAndValues.UtDenmTermination.");
}
}

void UtDenmTermination_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsDenm_TypesAndValues.UtDenmTermination'");
    }
    if (strcmp("actionId", param_field) == 0) {
      actionId().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsDenm_TypesAndValues.UtDenmTermination'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmTermination_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @LibItsDenm_TypesAndValues.UtDenmTermination has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) actionId().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "actionId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          actionId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmTermination: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsDenm_TypesAndValues.UtDenmTermination");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtDenmTermination_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsDenm_TypesAndValues.UtDenmTermination'");
    }
    if (strcmp("actionId", param_field) == 0) {
      return actionId().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmTermination'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_actionId = single_value->field_actionId.get_param(param_name);
    mp_field_actionId->set_id(new Module_Param_FieldName(mcopystr("actionId")));
    mp->add_elem(mp_field_actionId);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtDenmTermination_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_actionId.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTermination");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmTermination");
}

boolean UtDenmTermination_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmTermination_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtDenmEventInd::UtDenmEventInd()
{
  bound_flag = FALSE;
}

UtDenmEventInd::UtDenmEventInd(const DENM__PDU__Descriptions::DENM& par_denMsg)
  :   field_denMsg(par_denMsg)
{
  bound_flag = TRUE;
}

UtDenmEventInd::UtDenmEventInd(const UtDenmEventInd& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
bound_flag = TRUE;
if (other_value.denMsg().is_bound()) field_denMsg = other_value.denMsg();
else field_denMsg.clean_up();
}

void UtDenmEventInd::clean_up()
{
field_denMsg.clean_up();
bound_flag = FALSE;
}

UtDenmEventInd& UtDenmEventInd::operator=(const UtDenmEventInd& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
  bound_flag = TRUE;
  if (other_value.denMsg().is_bound()) field_denMsg = other_value.denMsg();
  else field_denMsg.clean_up();
}
return *this;
}

boolean UtDenmEventInd::operator==(const UtDenmEventInd& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_denMsg==other_value.field_denMsg;
}

boolean UtDenmEventInd::is_bound() const
{
if (bound_flag) return TRUE;
if(field_denMsg.is_bound()) return TRUE;
return FALSE;
}
boolean UtDenmEventInd::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_denMsg.is_value()) return FALSE;
return TRUE;
}
int UtDenmEventInd::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmEventInd");
  return 1;
}

void UtDenmEventInd::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ denMsg := ");
field_denMsg.log();
TTCN_Logger::log_event_str(" }");
}

void UtDenmEventInd::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsDenm_TypesAndValues.UtDenmEventInd'");
    }
    if (strcmp("denMsg", param_field) == 0) {
      denMsg().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmEventInd'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @LibItsDenm_TypesAndValues.UtDenmEventInd has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) denMsg().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "denMsg")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          denMsg().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmEventInd: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsDenm_TypesAndValues.UtDenmEventInd");
  }
}

Module_Param* UtDenmEventInd::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsDenm_TypesAndValues.UtDenmEventInd'");
    }
    if (strcmp("denMsg", param_field) == 0) {
      return denMsg().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmEventInd'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_denMsg = field_denMsg.get_param(param_name);
  mp_field_denMsg->set_id(new Module_Param_FieldName(mcopystr("denMsg")));
  mp->add_elem(mp_field_denMsg);
  return mp;
  }

void UtDenmEventInd::set_implicit_omit()
{
if (denMsg().is_bound()) denMsg().set_implicit_omit();
}

void UtDenmEventInd::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
field_denMsg.encode_text(text_buf);
}

void UtDenmEventInd::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_denMsg.decode_text(text_buf);
}

void UtDenmEventInd::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmEventInd::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmEventInd::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_denMsg.RAW_decode(DENM__PDU__Descriptions::DENM_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtDenmEventInd::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 1;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(1);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, DENM__PDU__Descriptions::DENM_descr_.raw);
  encoded_length += field_denMsg.RAW_encode(DENM__PDU__Descriptions::DENM_descr_, *myleaf.body.node.nodes[0]);
  return myleaf.length = encoded_length;
}

int UtDenmEventInd::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "denMsg");
    enc_len += field_denMsg.JSON_encode(DENM__PDU__Descriptions::DENM_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtDenmEventInd::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "denMsg", name_len)) {
         int ret_val = field_denMsg.JSON_decode(DENM__PDU__Descriptions::DENM_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "denMsg");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_denMsg.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "denMsg");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtDenmEventInd_template::single_value_struct {
DENM__PDU__Descriptions::DENM_template field_denMsg;
};

void UtDenmEventInd_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_denMsg = ANY_VALUE;
}
}
}

void UtDenmEventInd_template::copy_value(const UtDenmEventInd& other_value)
{
single_value = new single_value_struct;
if (other_value.denMsg().is_bound()) {
  single_value->field_denMsg = other_value.denMsg();
} else {
  single_value->field_denMsg.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmEventInd_template::copy_template(const UtDenmEventInd_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.denMsg().get_selection()) {
single_value->field_denMsg = other_value.denMsg();
} else {
single_value->field_denMsg.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmEventInd_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
break;
}
set_selection(other_value);
}

UtDenmEventInd_template::UtDenmEventInd_template()
{
}

UtDenmEventInd_template::UtDenmEventInd_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmEventInd_template::UtDenmEventInd_template(const UtDenmEventInd& other_value)
{
copy_value(other_value);
}

UtDenmEventInd_template::UtDenmEventInd_template(const OPTIONAL<UtDenmEventInd>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmEventInd&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd from an unbound optional field.");
}
}

UtDenmEventInd_template::UtDenmEventInd_template(const UtDenmEventInd_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtDenmEventInd_template::~UtDenmEventInd_template()
{
clean_up();
}

UtDenmEventInd_template& UtDenmEventInd_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmEventInd_template& UtDenmEventInd_template::operator=(const UtDenmEventInd& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmEventInd_template& UtDenmEventInd_template::operator=(const OPTIONAL<UtDenmEventInd>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmEventInd&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
}
return *this;
}

UtDenmEventInd_template& UtDenmEventInd_template::operator=(const UtDenmEventInd_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtDenmEventInd_template::match(const UtDenmEventInd& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.denMsg().is_bound()) return FALSE;
if(!single_value->field_denMsg.match(other_value.denMsg(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
}
return FALSE;
}

boolean UtDenmEventInd_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_denMsg.is_bound()) return TRUE;
return FALSE;
}

boolean UtDenmEventInd_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_denMsg.is_value()) return FALSE;
return TRUE;
}

void UtDenmEventInd_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmEventInd UtDenmEventInd_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
UtDenmEventInd ret_val;
if (single_value->field_denMsg.is_bound()) {
ret_val.denMsg() = single_value->field_denMsg.valueof();
}
return ret_val;
}

void UtDenmEventInd_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtDenmEventInd_template[list_length];
}

UtDenmEventInd_template& UtDenmEventInd_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
return value_list.list_value[list_index];
}

DENM__PDU__Descriptions::DENM_template& UtDenmEventInd_template::denMsg()
{
set_specific();
return single_value->field_denMsg;
}

const DENM__PDU__Descriptions::DENM_template& UtDenmEventInd_template::denMsg() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field denMsg of a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
return single_value->field_denMsg;
}

int UtDenmEventInd_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
  }
  return 0;
}

void UtDenmEventInd_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ denMsg := ");
single_value->field_denMsg.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtDenmEventInd_template::log_match(const UtDenmEventInd& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_denMsg.match(match_value.denMsg(), legacy)){
TTCN_Logger::log_logmatch_info(".denMsg");
single_value->field_denMsg.log_match(match_value.denMsg(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ denMsg := ");
single_value->field_denMsg.log_match(match_value.denMsg(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmEventInd_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_denMsg.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
}
}

void UtDenmEventInd_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_denMsg.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmEventInd_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsDenm_TypesAndValues.UtDenmEventInd.");
}
}

void UtDenmEventInd_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsDenm_TypesAndValues.UtDenmEventInd'");
    }
    if (strcmp("denMsg", param_field) == 0) {
      denMsg().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsDenm_TypesAndValues.UtDenmEventInd'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmEventInd_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @LibItsDenm_TypesAndValues.UtDenmEventInd has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) denMsg().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "denMsg")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          denMsg().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsDenm_TypesAndValues.UtDenmEventInd: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsDenm_TypesAndValues.UtDenmEventInd");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtDenmEventInd_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsDenm_TypesAndValues.UtDenmEventInd'");
    }
    if (strcmp("denMsg", param_field) == 0) {
      return denMsg().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsDenm_TypesAndValues.UtDenmEventInd'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_denMsg = single_value->field_denMsg.get_param(param_name);
    mp_field_denMsg->set_id(new Module_Param_FieldName(mcopystr("denMsg")));
    mp->add_elem(mp_field_denMsg);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtDenmEventInd_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_denMsg.check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmEventInd");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmEventInd");
}

boolean UtDenmEventInd_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmEventInd_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


const UtDenmEventInd UtDenmEventIndList::UNBOUND_ELEM;
UtDenmEventIndList::UtDenmEventIndList()
{
val_ptr = NULL;
}

UtDenmEventIndList::UtDenmEventIndList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

UtDenmEventIndList::UtDenmEventIndList(const UtDenmEventIndList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

UtDenmEventIndList::~UtDenmEventIndList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void UtDenmEventIndList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

UtDenmEventIndList& UtDenmEventIndList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

UtDenmEventIndList& UtDenmEventIndList::operator=(const UtDenmEventIndList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean UtDenmEventIndList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return val_ptr->n_elements == 0 ;
}

boolean UtDenmEventIndList::operator==(const UtDenmEventIndList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

UtDenmEventInd& UtDenmEventIndList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.UtDenmEventIndList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (UtDenmEventInd**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UtDenmEventInd(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new UtDenmEventInd;
}
return *val_ptr->value_elements[index_value];
}

UtDenmEventInd& UtDenmEventIndList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return (*this)[(int)index_value];
}

const UtDenmEventInd& UtDenmEventIndList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.UtDenmEventIndList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const UtDenmEventInd& UtDenmEventIndList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return (*this)[(int)index_value];
}

UtDenmEventIndList UtDenmEventIndList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

UtDenmEventIndList UtDenmEventIndList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

UtDenmEventIndList UtDenmEventIndList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

UtDenmEventIndList UtDenmEventIndList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
UtDenmEventIndList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new UtDenmEventInd(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

UtDenmEventIndList UtDenmEventIndList::operator+(const UtDenmEventIndList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @LibItsDenm_TypesAndValues.UtDenmEventIndList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
UtDenmEventIndList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UtDenmEventInd(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new UtDenmEventInd(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

UtDenmEventIndList UtDenmEventIndList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@LibItsDenm_TypesAndValues.UtDenmEventIndList","element");
UtDenmEventIndList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new UtDenmEventInd(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

UtDenmEventIndList UtDenmEventIndList::replace(int index, int len, const UtDenmEventIndList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@LibItsDenm_TypesAndValues.UtDenmEventIndList","element");
UtDenmEventIndList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UtDenmEventInd(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new UtDenmEventInd(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new UtDenmEventInd(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

UtDenmEventIndList UtDenmEventIndList::replace(int index, int len, const UtDenmEventIndList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void UtDenmEventIndList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (UtDenmEventInd**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UtDenmEventInd(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (UtDenmEventInd**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @LibItsDenm_TypesAndValues.UtDenmEventIndList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (UtDenmEventInd**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean UtDenmEventIndList::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int UtDenmEventIndList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return val_ptr->n_elements;
}

int UtDenmEventIndList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void UtDenmEventIndList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void UtDenmEventIndList::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@LibItsDenm_TypesAndValues.UtDenmEventIndList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List:
      set_size(mp->get_size());
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.UtDenmEventIndList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.UtDenmEventIndList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

Module_Param* UtDenmEventIndList::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of type `@LibItsDenm_TypesAndValues.UtDenmEventIndList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Vector<Module_Param*> values;
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    values.push_back((*this)[i].get_param(param_name));
  }
  Module_Param_Value_List* mp = new Module_Param_Value_List();
  mp->add_list_with_implicit_ids(&values);
  values.clear();
  return mp;
}

void UtDenmEventIndList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void UtDenmEventIndList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void UtDenmEventIndList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
val_ptr->value_elements = (UtDenmEventInd**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new UtDenmEventInd;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void UtDenmEventIndList::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmEventIndList::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmEventIndList::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean /*no_err*/, int sel_field, boolean first_call){
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  int decoded_length=0;
  int decoded_field_length=0;
  size_t start_of_field=0;
  if(first_call) {
    clean_up();
    val_ptr=new recordof_setof_struct;
    val_ptr->ref_count=1;
    val_ptr->n_elements=0;
    val_ptr->value_elements=NULL;
  }
  int start_field=val_ptr->n_elements;
  if(p_td.raw->fieldlength || sel_field!=-1){
    int a=0;
    if(sel_field==-1) sel_field=p_td.raw->fieldlength;
    for(a=0;a<sel_field;a++){
      decoded_field_length=(*this)[a+start_field].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0) return decoded_field_length;
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
    }
    if(a==0) val_ptr->n_elements=0;
  } else {
    int a=start_field;
    if(limit==0){
      if(!first_call) return -1;
      val_ptr->n_elements=0;
      return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
    }
    while(limit>0){
      start_of_field=p_buf.get_pos_bit();
      decoded_field_length=(*this)[a].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0){
        delete &(*this)[a];
        val_ptr->n_elements--;
        p_buf.set_pos_bit(start_of_field);
        if(a>start_field){
        return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
        } else return -1;
      }
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
      a++;
    }
  }
 return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
}

int UtDenmEventIndList::RAW_encode(const TTCN_Typedescriptor_t& p_td,RAW_enc_tree& myleaf) const{
  int encoded_length=0;
  int encoded_num_of_records=p_td.raw->fieldlength?smaller(val_ptr->n_elements, p_td.raw->fieldlength):val_ptr->n_elements;
  myleaf.isleaf=FALSE;
  myleaf.rec_of=TRUE;
  myleaf.body.node.num_of_nodes=encoded_num_of_records;
  myleaf.body.node.nodes=init_nodes_of_enc_tree(encoded_num_of_records);
  for(int a=0;a<encoded_num_of_records;a++){
    myleaf.body.node.nodes[a]=new RAW_enc_tree(TRUE,&myleaf,&(myleaf.curr_pos),a,p_td.oftype_descr->raw);
    encoded_length+=(*this)[a].RAW_encode(*p_td.oftype_descr,*myleaf.body.node.nodes[a]);
  }
 return myleaf.length=encoded_length;
}

void UtDenmEventIndList_template::copy_value(const UtDenmEventIndList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (UtDenmEventInd_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new UtDenmEventInd_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new UtDenmEventInd_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmEventIndList_template::copy_template(const UtDenmEventIndList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (UtDenmEventInd_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new UtDenmEventInd_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new UtDenmEventInd_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmEventIndList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
break;
}
set_selection(other_value);
}

boolean UtDenmEventIndList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const UtDenmEventIndList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const UtDenmEventIndList*)value_ptr)[value_index], legacy);
else return ((const UtDenmEventIndList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

UtDenmEventIndList_template::UtDenmEventIndList_template()
{
}

UtDenmEventIndList_template::UtDenmEventIndList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmEventIndList_template::UtDenmEventIndList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

UtDenmEventIndList_template::UtDenmEventIndList_template(const UtDenmEventIndList& other_value)
{
copy_value(other_value);
}

UtDenmEventIndList_template::UtDenmEventIndList_template(const OPTIONAL<UtDenmEventIndList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmEventIndList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList from an unbound optional field.");
}
}

UtDenmEventIndList_template::UtDenmEventIndList_template(const UtDenmEventIndList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

UtDenmEventIndList_template::~UtDenmEventIndList_template()
{
clean_up();
}

void UtDenmEventIndList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmEventIndList_template& UtDenmEventIndList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmEventIndList_template& UtDenmEventIndList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

UtDenmEventIndList_template& UtDenmEventIndList_template::operator=(const UtDenmEventIndList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmEventIndList_template& UtDenmEventIndList_template::operator=(const OPTIONAL<UtDenmEventIndList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmEventIndList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
}
return *this;
}

UtDenmEventIndList_template& UtDenmEventIndList_template::operator=(const UtDenmEventIndList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

UtDenmEventInd_template& UtDenmEventIndList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.UtDenmEventIndList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
    break;
}
return *single_value.value_elements[index_value];
}

UtDenmEventInd_template& UtDenmEventIndList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return (*this)[(int)index_value];
}

const UtDenmEventInd_template& UtDenmEventIndList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.UtDenmEventIndList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const UtDenmEventInd_template& UtDenmEventIndList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return (*this)[(int)index_value];
}

void UtDenmEventIndList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (UtDenmEventInd_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UtDenmEventInd_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UtDenmEventInd_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (UtDenmEventInd_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int UtDenmEventIndList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int UtDenmEventIndList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList");
}

boolean UtDenmEventIndList_template::match(const UtDenmEventIndList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
}
return FALSE;
}

boolean UtDenmEventIndList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

UtDenmEventIndList UtDenmEventIndList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
UtDenmEventIndList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

UtDenmEventIndList UtDenmEventIndList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

UtDenmEventIndList UtDenmEventIndList_template::replace(int index, int len, const UtDenmEventIndList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

UtDenmEventIndList UtDenmEventIndList_template::replace(int index, int len, const UtDenmEventIndList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void UtDenmEventIndList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new UtDenmEventIndList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
}
set_selection(template_type);
}

UtDenmEventIndList_template& UtDenmEventIndList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return value_list.list_value[list_index];
}

void UtDenmEventIndList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void UtDenmEventIndList_template::log_match(const UtDenmEventIndList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmEventIndList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
}
}

void UtDenmEventIndList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
single_value.value_elements = (UtDenmEventInd_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new UtDenmEventInd_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmEventIndList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
}
}

boolean UtDenmEventIndList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmEventIndList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void UtDenmEventIndList_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@LibItsDenm_TypesAndValues.UtDenmEventIndList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmEventIndList_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      (*this)[(int)(mp->get_elem(p_i)->get_id()->get_index())].set_param(*mp->get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(mp->get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      switch (mp->get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<mp->get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(mp->get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*mp->get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@LibItsDenm_TypesAndValues.UtDenmEventIndList");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
  if (param.get_length_restriction() != NULL) {
    set_length_range(param);
  }
  else {
    set_length_range(*mp);
  };
}

Module_Param* UtDenmEventIndList_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of template type `@LibItsDenm_TypesAndValues.UtDenmEventIndList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Vector<Module_Param*> values;
    for (int i = 0; i < single_value.n_elements; ++i) {
      values.push_back((*this)[i].get_param(param_name));
    }
    mp = new Module_Param_Value_List();
    mp->add_list_with_implicit_ids(&values);
    values.clear();
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  mp->set_length_restriction(get_length_range());
  return mp;
}

void UtDenmEventIndList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmEventIndList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmEventIndList");
}


const ITS__Container::ActionID UtDenmActionIDList::UNBOUND_ELEM;
UtDenmActionIDList::UtDenmActionIDList()
{
val_ptr = NULL;
}

UtDenmActionIDList::UtDenmActionIDList(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

UtDenmActionIDList::UtDenmActionIDList(const UtDenmActionIDList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

UtDenmActionIDList::~UtDenmActionIDList()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void UtDenmActionIDList::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

UtDenmActionIDList& UtDenmActionIDList::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

UtDenmActionIDList& UtDenmActionIDList::operator=(const UtDenmActionIDList& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean UtDenmActionIDList::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return val_ptr->n_elements == 0 ;
}

boolean UtDenmActionIDList::operator==(const UtDenmActionIDList& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

ITS__Container::ActionID& UtDenmActionIDList::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.UtDenmActionIDList using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (ITS__Container::ActionID**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ITS__Container::ActionID(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new ITS__Container::ActionID;
}
return *val_ptr->value_elements[index_value];
}

ITS__Container::ActionID& UtDenmActionIDList::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return (*this)[(int)index_value];
}

const ITS__Container::ActionID& UtDenmActionIDList::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (index_value < 0) TTCN_error("Accessing an element of type @LibItsDenm_TypesAndValues.UtDenmActionIDList using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const ITS__Container::ActionID& UtDenmActionIDList::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return (*this)[(int)index_value];
}

UtDenmActionIDList UtDenmActionIDList::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

UtDenmActionIDList UtDenmActionIDList::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

UtDenmActionIDList UtDenmActionIDList::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

UtDenmActionIDList UtDenmActionIDList::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
UtDenmActionIDList ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new ITS__Container::ActionID(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

UtDenmActionIDList UtDenmActionIDList::operator+(const UtDenmActionIDList& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @LibItsDenm_TypesAndValues.UtDenmActionIDList concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
UtDenmActionIDList ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ITS__Container::ActionID(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new ITS__Container::ActionID(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

UtDenmActionIDList UtDenmActionIDList::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@LibItsDenm_TypesAndValues.UtDenmActionIDList","element");
UtDenmActionIDList ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new ITS__Container::ActionID(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

UtDenmActionIDList UtDenmActionIDList::replace(int index, int len, const UtDenmActionIDList& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
check_replace_arguments(val_ptr->n_elements, index, len, "@LibItsDenm_TypesAndValues.UtDenmActionIDList","element");
UtDenmActionIDList ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ITS__Container::ActionID(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new ITS__Container::ActionID(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new ITS__Container::ActionID(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

UtDenmActionIDList UtDenmActionIDList::replace(int index, int len, const UtDenmActionIDList_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void UtDenmActionIDList::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (ITS__Container::ActionID**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ITS__Container::ActionID(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (ITS__Container::ActionID**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @LibItsDenm_TypesAndValues.UtDenmActionIDList: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (ITS__Container::ActionID**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean UtDenmActionIDList::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int UtDenmActionIDList::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return val_ptr->n_elements;
}

int UtDenmActionIDList::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void UtDenmActionIDList::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void UtDenmActionIDList::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@LibItsDenm_TypesAndValues.UtDenmActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List:
      set_size(mp->get_size());
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.UtDenmActionIDList");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@LibItsDenm_TypesAndValues.UtDenmActionIDList");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

Module_Param* UtDenmActionIDList::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of type `@LibItsDenm_TypesAndValues.UtDenmActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Vector<Module_Param*> values;
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    values.push_back((*this)[i].get_param(param_name));
  }
  Module_Param_Value_List* mp = new Module_Param_Value_List();
  mp->add_list_with_implicit_ids(&values);
  values.clear();
  return mp;
}

void UtDenmActionIDList::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void UtDenmActionIDList::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void UtDenmActionIDList::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
val_ptr->value_elements = (ITS__Container::ActionID**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new ITS__Container::ActionID;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void UtDenmActionIDList::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtDenmActionIDList::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtDenmActionIDList::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean /*no_err*/, int sel_field, boolean first_call){
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  int decoded_length=0;
  int decoded_field_length=0;
  size_t start_of_field=0;
  if(first_call) {
    clean_up();
    val_ptr=new recordof_setof_struct;
    val_ptr->ref_count=1;
    val_ptr->n_elements=0;
    val_ptr->value_elements=NULL;
  }
  int start_field=val_ptr->n_elements;
  if(p_td.raw->fieldlength || sel_field!=-1){
    int a=0;
    if(sel_field==-1) sel_field=p_td.raw->fieldlength;
    for(a=0;a<sel_field;a++){
      decoded_field_length=(*this)[a+start_field].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0) return decoded_field_length;
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
    }
    if(a==0) val_ptr->n_elements=0;
  } else {
    int a=start_field;
    if(limit==0){
      if(!first_call) return -1;
      val_ptr->n_elements=0;
      return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
    }
    while(limit>0){
      start_of_field=p_buf.get_pos_bit();
      decoded_field_length=(*this)[a].RAW_decode(*p_td.oftype_descr,p_buf,limit,top_bit_ord,TRUE);
      if(decoded_field_length < 0){
        delete &(*this)[a];
        val_ptr->n_elements--;
        p_buf.set_pos_bit(start_of_field);
        if(a>start_field){
        return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
        } else return -1;
      }
      decoded_length+=decoded_field_length;
      limit-=decoded_field_length;
      a++;
    }
  }
 return decoded_length+p_buf.increase_pos_padd(p_td.raw->padding)+prepaddlength;
}

int UtDenmActionIDList::RAW_encode(const TTCN_Typedescriptor_t& p_td,RAW_enc_tree& myleaf) const{
  int encoded_length=0;
  int encoded_num_of_records=p_td.raw->fieldlength?smaller(val_ptr->n_elements, p_td.raw->fieldlength):val_ptr->n_elements;
  myleaf.isleaf=FALSE;
  myleaf.rec_of=TRUE;
  myleaf.body.node.num_of_nodes=encoded_num_of_records;
  myleaf.body.node.nodes=init_nodes_of_enc_tree(encoded_num_of_records);
  for(int a=0;a<encoded_num_of_records;a++){
    myleaf.body.node.nodes[a]=new RAW_enc_tree(TRUE,&myleaf,&(myleaf.curr_pos),a,p_td.oftype_descr->raw);
    encoded_length+=(*this)[a].RAW_encode(*p_td.oftype_descr,*myleaf.body.node.nodes[a]);
  }
 return myleaf.length=encoded_length;
}

void UtDenmActionIDList_template::copy_value(const UtDenmActionIDList& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (ITS__Container::ActionID_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void UtDenmActionIDList_template::copy_template(const UtDenmActionIDList_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (ITS__Container::ActionID_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtDenmActionIDList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
break;
}
set_selection(other_value);
}

boolean UtDenmActionIDList_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const UtDenmActionIDList_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const UtDenmActionIDList*)value_ptr)[value_index], legacy);
else return ((const UtDenmActionIDList_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

UtDenmActionIDList_template::UtDenmActionIDList_template()
{
}

UtDenmActionIDList_template::UtDenmActionIDList_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

UtDenmActionIDList_template::UtDenmActionIDList_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

UtDenmActionIDList_template::UtDenmActionIDList_template(const UtDenmActionIDList& other_value)
{
copy_value(other_value);
}

UtDenmActionIDList_template::UtDenmActionIDList_template(const OPTIONAL<UtDenmActionIDList>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmActionIDList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList from an unbound optional field.");
}
}

UtDenmActionIDList_template::UtDenmActionIDList_template(const UtDenmActionIDList_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

UtDenmActionIDList_template::~UtDenmActionIDList_template()
{
clean_up();
}

void UtDenmActionIDList_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtDenmActionIDList_template& UtDenmActionIDList_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtDenmActionIDList_template& UtDenmActionIDList_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

UtDenmActionIDList_template& UtDenmActionIDList_template::operator=(const UtDenmActionIDList& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtDenmActionIDList_template& UtDenmActionIDList_template::operator=(const OPTIONAL<UtDenmActionIDList>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtDenmActionIDList&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
}
return *this;
}

UtDenmActionIDList_template& UtDenmActionIDList_template::operator=(const UtDenmActionIDList_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

ITS__Container::ActionID_template& UtDenmActionIDList_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.UtDenmActionIDList using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
    break;
}
return *single_value.value_elements[index_value];
}

ITS__Container::ActionID_template& UtDenmActionIDList_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return (*this)[(int)index_value];
}

const ITS__Container::ActionID_template& UtDenmActionIDList_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @LibItsDenm_TypesAndValues.UtDenmActionIDList using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const ITS__Container::ActionID_template& UtDenmActionIDList_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return (*this)[(int)index_value];
}

void UtDenmActionIDList_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (ITS__Container::ActionID_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (ITS__Container::ActionID_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int UtDenmActionIDList_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int UtDenmActionIDList_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList");
}

boolean UtDenmActionIDList_template::match(const UtDenmActionIDList& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
}
return FALSE;
}

boolean UtDenmActionIDList_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

UtDenmActionIDList UtDenmActionIDList_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
UtDenmActionIDList ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

UtDenmActionIDList UtDenmActionIDList_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

UtDenmActionIDList UtDenmActionIDList_template::replace(int index, int len, const UtDenmActionIDList_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

UtDenmActionIDList UtDenmActionIDList_template::replace(int index, int len, const UtDenmActionIDList& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void UtDenmActionIDList_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new UtDenmActionIDList_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
}
set_selection(template_type);
}

UtDenmActionIDList_template& UtDenmActionIDList_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return value_list.list_value[list_index];
}

void UtDenmActionIDList_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void UtDenmActionIDList_template::log_match(const UtDenmActionIDList& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtDenmActionIDList_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
}
}

void UtDenmActionIDList_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
single_value.value_elements = (ITS__Container::ActionID_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new ITS__Container::ActionID_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtDenmActionIDList_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
}
}

boolean UtDenmActionIDList_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtDenmActionIDList_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void UtDenmActionIDList_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@LibItsDenm_TypesAndValues.UtDenmActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtDenmActionIDList_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      (*this)[(int)(mp->get_elem(p_i)->get_id()->get_index())].set_param(*mp->get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(mp->get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      switch (mp->get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<mp->get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(mp->get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*mp->get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@LibItsDenm_TypesAndValues.UtDenmActionIDList");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
  if (param.get_length_restriction() != NULL) {
    set_length_range(param);
  }
  else {
    set_length_range(*mp);
  };
}

Module_Param* UtDenmActionIDList_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of template type `@LibItsDenm_TypesAndValues.UtDenmActionIDList'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Vector<Module_Param*> values;
    for (int i = 0; i < single_value.n_elements; ++i) {
      values.push_back((*this)[i].get_param(param_name));
    }
    mp = new Module_Param_Value_List();
    mp->add_list_with_implicit_ids(&values);
    values.clear();
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  mp->set_length_restriction(get_length_range());
  return mp;
}

void UtDenmActionIDList_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmActionIDList");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsDenm_TypesAndValues.UtDenmActionIDList");
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const SituationContainerList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.SituationContainerList.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const ActionIDList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.ActionIDList.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const UtDenmEventIndList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmEventIndList.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const UtDenmActionIDList& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @LibItsDenm_TypesAndValues.UtDenmActionIDList.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsDenm_TypesAndValues.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsDenm_TypesAndValues");
DENM__PDU__Descriptions::module_object.pre_init_module();
current_location.update_lineno(44);
/* LibItsDenm_TypesAndValues.ttcn, line 44 */
const_c__protocolVersionDenm = 1;
current_location.update_lineno(45);
/* LibItsDenm_TypesAndValues.ttcn, line 45 */
const_c__messageIdDenm = 1;
current_location.update_lineno(47);
/* LibItsDenm_TypesAndValues.ttcn, line 47 */
const_c__duration__2sec = 2;
current_location.update_lineno(48);
/* LibItsDenm_TypesAndValues.ttcn, line 48 */
const_c__duration__5sec = 5;
current_location.update_lineno(49);
/* LibItsDenm_TypesAndValues.ttcn, line 49 */
const_c__duration__10sec = 10;
current_location.update_lineno(51);
/* LibItsDenm_TypesAndValues.ttcn, line 51 */
const_c__interval__1sec = 1000;
current_location.update_lineno(52);
/* LibItsDenm_TypesAndValues.ttcn, line 52 */
const_c__interval__2sec = 2000;
current_location.update_lineno(53);
/* LibItsDenm_TypesAndValues.ttcn, line 53 */
const_c__interval__4sec = 4000;
current_location.update_lineno(54);
/* LibItsDenm_TypesAndValues.ttcn, line 54 */
const_c__interval__5sec = 5000;
current_location.update_lineno(55);
/* LibItsDenm_TypesAndValues.ttcn, line 55 */
const_c__interval__10sec = 10000;
}


} /* end of namespace */
