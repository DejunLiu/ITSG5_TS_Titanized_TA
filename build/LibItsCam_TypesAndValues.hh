// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsCam__TypesAndValues_HH
#define LibItsCam__TypesAndValues_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibCommon_BasicTypesAndValues.hh"
#include "LibCommon_DataStrings.hh"
#include "CAM_PDU_Descriptions.hh"
#include "DENM_PDU_Descriptions.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LibItsCam__TypesAndValues_HH
#endif

namespace LibItsCam__TypesAndValues {

/* Forward declarations of classes */

class UtCamTrigger;
class UtCamTrigger_template;
class UtCamTriggerResult;
class UtCamTriggerResult_template;
class UtCamEventInd;
class UtCamEventInd_template;
class UtCamEventIndList;
class UtCamEventIndList_template;

} /* end of namespace */

#ifndef LibItsCam__TypesAndValues_HH
#define LibItsCam__TypesAndValues_HH

namespace LibItsCam__TypesAndValues {

/* Class definitions */

class UtCamTrigger : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_changeCurvature = 1, ALT_changeSpeed = 2, ALT_setAccelerationControlStatus = 3, ALT_setExteriorLightsStatus = 4, ALT_changeHeading = 5, ALT_setDriveDirection = 6, ALT_changeYawRate = 7, ALT_setStationType = 8, ALT_setVehicleRole = 9, ALT_setEmbarkationStatus = 10, ALT_setPtActivation = 11, ALT_setDangerousGoods = 12, ALT_setLightBarSirene = 13 };
private:
union_selection_type union_selection;
union {
INTEGER *field_changeCurvature;
INTEGER *field_changeSpeed;
BITSTRING *field_setAccelerationControlStatus;
BITSTRING *field_setExteriorLightsStatus;
INTEGER *field_changeHeading;
ITS__Container::DriveDirection *field_setDriveDirection;
INTEGER *field_changeYawRate;
INTEGER *field_setStationType;
ITS__Container::VehicleRole *field_setVehicleRole;
BOOLEAN *field_setEmbarkationStatus;
ITS__Container::PtActivation *field_setPtActivation;
ITS__Container::DangerousGoodsBasic *field_setDangerousGoods;
BITSTRING *field_setLightBarSirene;
};
void copy_value(const UtCamTrigger& other_value);

public:
UtCamTrigger();
UtCamTrigger(const UtCamTrigger& other_value);
~UtCamTrigger();
UtCamTrigger& operator=(const UtCamTrigger& other_value);
boolean operator==(const UtCamTrigger& other_value) const;
inline boolean operator!=(const UtCamTrigger& other_value) const { return !(*this == other_value); }
INTEGER& changeCurvature();
const INTEGER& changeCurvature() const;
INTEGER& changeSpeed();
const INTEGER& changeSpeed() const;
BITSTRING& setAccelerationControlStatus();
const BITSTRING& setAccelerationControlStatus() const;
BITSTRING& setExteriorLightsStatus();
const BITSTRING& setExteriorLightsStatus() const;
INTEGER& changeHeading();
const INTEGER& changeHeading() const;
ITS__Container::DriveDirection& setDriveDirection();
const ITS__Container::DriveDirection& setDriveDirection() const;
INTEGER& changeYawRate();
const INTEGER& changeYawRate() const;
INTEGER& setStationType();
const INTEGER& setStationType() const;
ITS__Container::VehicleRole& setVehicleRole();
const ITS__Container::VehicleRole& setVehicleRole() const;
BOOLEAN& setEmbarkationStatus();
const BOOLEAN& setEmbarkationStatus() const;
ITS__Container::PtActivation& setPtActivation();
const ITS__Container::PtActivation& setPtActivation() const;
ITS__Container::DangerousGoodsBasic& setDangerousGoods();
const ITS__Container::DangerousGoodsBasic& setDangerousGoods() const;
BITSTRING& setLightBarSirene();
const BITSTRING& setLightBarSirene() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class UtCamTrigger_template : public Base_Template {
union {
struct {
UtCamTrigger::union_selection_type union_selection;
union {
INTEGER_template *field_changeCurvature;
INTEGER_template *field_changeSpeed;
BITSTRING_template *field_setAccelerationControlStatus;
BITSTRING_template *field_setExteriorLightsStatus;
INTEGER_template *field_changeHeading;
ITS__Container::DriveDirection_template *field_setDriveDirection;
INTEGER_template *field_changeYawRate;
INTEGER_template *field_setStationType;
ITS__Container::VehicleRole_template *field_setVehicleRole;
BOOLEAN_template *field_setEmbarkationStatus;
ITS__Container::PtActivation_template *field_setPtActivation;
ITS__Container::DangerousGoodsBasic_template *field_setDangerousGoods;
BITSTRING_template *field_setLightBarSirene;
};
} single_value;
struct {
unsigned int n_values;
UtCamTrigger_template *list_value;
} value_list;
};
void copy_value(const UtCamTrigger& other_value);

void copy_template(const UtCamTrigger_template& other_value);

public:
UtCamTrigger_template();
UtCamTrigger_template(template_sel other_value);
UtCamTrigger_template(const UtCamTrigger& other_value);
UtCamTrigger_template(const OPTIONAL<UtCamTrigger>& other_value);
UtCamTrigger_template(const UtCamTrigger_template& other_value);
~UtCamTrigger_template();
void clean_up();
UtCamTrigger_template& operator=(template_sel other_value);
UtCamTrigger_template& operator=(const UtCamTrigger& other_value);
UtCamTrigger_template& operator=(const OPTIONAL<UtCamTrigger>& other_value);
UtCamTrigger_template& operator=(const UtCamTrigger_template& other_value);
boolean match(const UtCamTrigger& other_value, boolean legacy = FALSE) const;
boolean is_value() const;UtCamTrigger valueof() const;
UtCamTrigger_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
INTEGER_template& changeCurvature();
const INTEGER_template& changeCurvature() const;
INTEGER_template& changeSpeed();
const INTEGER_template& changeSpeed() const;
BITSTRING_template& setAccelerationControlStatus();
const BITSTRING_template& setAccelerationControlStatus() const;
BITSTRING_template& setExteriorLightsStatus();
const BITSTRING_template& setExteriorLightsStatus() const;
INTEGER_template& changeHeading();
const INTEGER_template& changeHeading() const;
ITS__Container::DriveDirection_template& setDriveDirection();
const ITS__Container::DriveDirection_template& setDriveDirection() const;
INTEGER_template& changeYawRate();
const INTEGER_template& changeYawRate() const;
INTEGER_template& setStationType();
const INTEGER_template& setStationType() const;
ITS__Container::VehicleRole_template& setVehicleRole();
const ITS__Container::VehicleRole_template& setVehicleRole() const;
BOOLEAN_template& setEmbarkationStatus();
const BOOLEAN_template& setEmbarkationStatus() const;
ITS__Container::PtActivation_template& setPtActivation();
const ITS__Container::PtActivation_template& setPtActivation() const;
ITS__Container::DangerousGoodsBasic_template& setDangerousGoods();
const ITS__Container::DangerousGoodsBasic_template& setDangerousGoods() const;
BITSTRING_template& setLightBarSirene();
const BITSTRING_template& setLightBarSirene() const;
boolean ischosen(UtCamTrigger::union_selection_type checked_selection) const;
void log() const;
void log_match(const UtCamTrigger& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class UtCamTriggerResult : public Base_Type {
  BOOLEAN field_utCamTriggerResult;
  boolean bound_flag;
public:
  UtCamTriggerResult();
  UtCamTriggerResult(const BOOLEAN& par_utCamTriggerResult);
  UtCamTriggerResult(const UtCamTriggerResult& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  UtCamTriggerResult& operator=(const UtCamTriggerResult& other_value);
  boolean operator==(const UtCamTriggerResult& other_value) const;
  inline boolean operator!=(const UtCamTriggerResult& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BOOLEAN& utCamTriggerResult()
    {return field_utCamTriggerResult;}
  inline const BOOLEAN& utCamTriggerResult() const
    {return field_utCamTriggerResult;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class UtCamTriggerResult_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
UtCamTriggerResult_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const UtCamTriggerResult& other_value);
void copy_template(const UtCamTriggerResult_template& other_value);

public:
UtCamTriggerResult_template();
UtCamTriggerResult_template(template_sel other_value);
UtCamTriggerResult_template(const UtCamTriggerResult& other_value);
UtCamTriggerResult_template(const OPTIONAL<UtCamTriggerResult>& other_value);
UtCamTriggerResult_template(const UtCamTriggerResult_template& other_value);
~UtCamTriggerResult_template();
UtCamTriggerResult_template& operator=(template_sel other_value);
UtCamTriggerResult_template& operator=(const UtCamTriggerResult& other_value);
UtCamTriggerResult_template& operator=(const OPTIONAL<UtCamTriggerResult>& other_value);
UtCamTriggerResult_template& operator=(const UtCamTriggerResult_template& other_value);
boolean match(const UtCamTriggerResult& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
UtCamTriggerResult valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
UtCamTriggerResult_template& list_item(unsigned int list_index) const;
BOOLEAN_template& utCamTriggerResult();
const BOOLEAN_template& utCamTriggerResult() const;
int size_of() const;
void log() const;
void log_match(const UtCamTriggerResult& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class UtCamEventInd : public Base_Type {
  CAM__PDU__Descriptions::CAM field_camMsg;
  boolean bound_flag;
public:
  UtCamEventInd();
  UtCamEventInd(const CAM__PDU__Descriptions::CAM& par_camMsg);
  UtCamEventInd(const UtCamEventInd& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  UtCamEventInd& operator=(const UtCamEventInd& other_value);
  boolean operator==(const UtCamEventInd& other_value) const;
  inline boolean operator!=(const UtCamEventInd& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CAM__PDU__Descriptions::CAM& camMsg()
    {return field_camMsg;}
  inline const CAM__PDU__Descriptions::CAM& camMsg() const
    {return field_camMsg;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class UtCamEventInd_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
UtCamEventInd_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const UtCamEventInd& other_value);
void copy_template(const UtCamEventInd_template& other_value);

public:
UtCamEventInd_template();
UtCamEventInd_template(template_sel other_value);
UtCamEventInd_template(const UtCamEventInd& other_value);
UtCamEventInd_template(const OPTIONAL<UtCamEventInd>& other_value);
UtCamEventInd_template(const UtCamEventInd_template& other_value);
~UtCamEventInd_template();
UtCamEventInd_template& operator=(template_sel other_value);
UtCamEventInd_template& operator=(const UtCamEventInd& other_value);
UtCamEventInd_template& operator=(const OPTIONAL<UtCamEventInd>& other_value);
UtCamEventInd_template& operator=(const UtCamEventInd_template& other_value);
boolean match(const UtCamEventInd& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
UtCamEventInd valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
UtCamEventInd_template& list_item(unsigned int list_index) const;
CAM__PDU__Descriptions::CAM_template& camMsg();
const CAM__PDU__Descriptions::CAM_template& camMsg() const;
int size_of() const;
void log() const;
void log_match(const UtCamEventInd& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class UtCamEventIndList : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
UtCamEventInd **value_elements;
} *val_ptr;

static const UtCamEventInd UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const UtCamEventIndList& other_value);

public:
  typedef UtCamEventInd of_type;
UtCamEventIndList();
UtCamEventIndList(null_type other_value);
UtCamEventIndList(const UtCamEventIndList& other_value);
~UtCamEventIndList();

void clean_up();
UtCamEventIndList& operator=(null_type other_value);
UtCamEventIndList& operator=(const UtCamEventIndList& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const UtCamEventIndList& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const UtCamEventIndList& other_value) const { return !(*this == other_value); }

UtCamEventInd& operator[](int index_value);
UtCamEventInd& operator[](const INTEGER& index_value);
const UtCamEventInd& operator[](int index_value) const;
const UtCamEventInd& operator[](const INTEGER& index_value) const;

UtCamEventIndList operator<<=(int rotate_count) const;
UtCamEventIndList operator<<=(const INTEGER& rotate_count) const;
UtCamEventIndList operator>>=(int rotate_count) const;
UtCamEventIndList operator>>=(const INTEGER& rotate_count) const;

UtCamEventIndList operator+(const UtCamEventIndList& other_value) const;

UtCamEventIndList substr(int index, int returncount) const;

UtCamEventIndList replace(int index, int len, const UtCamEventIndList& repl) const;

UtCamEventIndList replace(int index, int len, const UtCamEventIndList_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
};

class UtCamEventIndList_template : public Record_Of_Template {
union {
struct {
int n_elements;
UtCamEventInd_template **value_elements;
} single_value;
struct {
unsigned int n_values;
UtCamEventIndList_template *list_value;
} value_list;
};
void copy_value(const UtCamEventIndList& other_value);
void copy_template(const UtCamEventIndList_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
UtCamEventIndList_template();
UtCamEventIndList_template(template_sel other_value);
UtCamEventIndList_template(null_type other_value);
UtCamEventIndList_template(const UtCamEventIndList& other_value);
UtCamEventIndList_template(const OPTIONAL<UtCamEventIndList>& other_value);
UtCamEventIndList_template(const UtCamEventIndList_template& other_value);
~UtCamEventIndList_template();

void clean_up();
UtCamEventIndList_template& operator=(template_sel other_value);
UtCamEventIndList_template& operator=(null_type other_value);
UtCamEventIndList_template& operator=(const UtCamEventIndList& other_value);
UtCamEventIndList_template& operator=(const OPTIONAL<UtCamEventIndList>& other_value);
UtCamEventIndList_template& operator=(const UtCamEventIndList_template& other_value);

UtCamEventInd_template& operator[](int index_value);
UtCamEventInd_template& operator[](const INTEGER& index_value);
const UtCamEventInd_template& operator[](int index_value) const;
const UtCamEventInd_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const UtCamEventIndList& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
UtCamEventIndList valueof() const;
UtCamEventIndList substr(int index, int returncount) const;

UtCamEventIndList replace(int index, int len, const UtCamEventIndList_template& repl) const;

UtCamEventIndList replace(int index, int len, const UtCamEventIndList& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
UtCamEventIndList_template& list_item(unsigned int list_index);
void log() const;
void log_match(const UtCamEventIndList& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const UtCamEventIndList& other_value);
inline boolean operator!=(null_type null_value, const UtCamEventIndList& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const INTEGER& c__protocolVersionCam;
extern const INTEGER& c__messageIdCam;
extern const FLOAT& c__lowFrequencyGenerationTime;
extern const FLOAT& c__specialVehicleGenerationTime;
extern const BITSTRING& c__accCtrlIdle;
extern const BITSTRING& c__brakePedalEngaged;
extern const BITSTRING& c__gasPedalEngaged;
extern const BITSTRING& c__emergencyBrakeEngaged;
extern const BITSTRING& c__collisionWarningEngaged;
extern const BITSTRING& c__accEngaged;
extern const BITSTRING& c__cruiseControlEngaged;
extern const BITSTRING& c__speedLimiterEngaged;
extern const BITSTRING& c__elAllLightsOff;
extern const BITSTRING& c__lowBeamHeadlightsOn;
extern const BITSTRING& c__highBeamHeadlightsOn;
extern const BITSTRING& c__leftTurnSignalOn;
extern const BITSTRING& c__rightTurnSignalOn;
extern const BITSTRING& c__daytimeRunningLightsOn;
extern const BITSTRING& c__reverseLightOn;
extern const BITSTRING& c__fogLightOn;
extern const BITSTRING& c__parkingLightsOn;
extern const ITS__Container::VehicleRole& c__vehicleRole__publicTransport;
extern const ITS__Container::VehicleRole& c__vehicleRole__specialTransport;
extern const ITS__Container::VehicleRole& c__vehicleRole__dangerousGoods;
extern const ITS__Container::VehicleRole& c__vehicleRole__roadWork;
extern const ITS__Container::VehicleRole& c__vehicleRole__rescue;
extern const ITS__Container::VehicleRole& c__vehicleRole__emergency;
extern const ITS__Container::VehicleRole& c__vehicleRole__safetyCar;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__explosives1;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__explosives2;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__explosives3;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__explosives4;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__explosives5;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__explosives6;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__flammableGases;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__nonFlammableGases;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__toxicGases;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__flammableLiquids;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__flammableSolids;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__substancesLiableToSpontaneousCombustion;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__substancesEmittingFlammableGasesUponContactWithWater;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__oxidizingSubstances;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__organicPeroxides;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__toxicSubstances;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__infectiousSubstances;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__radioactiveMaterial;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__corrosiveSubstances;
extern const ITS__Container::DangerousGoodsBasic& c__dangerousGoodsBasic__miscellaneousDangerousSubstances;
extern const TTCN_RAWdescriptor_t UtCamTrigger_raw_;
extern const TTCN_JSONdescriptor_t UtCamTrigger_json_;
extern const TTCN_Typedescriptor_t UtCamTrigger_descr_;
extern const XERdescriptor_t UtCamTrigger_changeSpeed_xer_;
extern const TTCN_Typedescriptor_t UtCamTrigger_changeSpeed_descr_;
extern const TTCN_RAWdescriptor_t UtCamTriggerResult_utCamTriggerResult_raw_;
extern const XERdescriptor_t UtCamTriggerResult_utCamTriggerResult_xer_;
extern const TTCN_Typedescriptor_t UtCamTriggerResult_utCamTriggerResult_descr_;
extern const TTCN_RAWdescriptor_t UtCamTriggerResult_raw_;
extern const TTCN_JSONdescriptor_t UtCamTriggerResult_json_;
extern const TTCN_Typedescriptor_t UtCamTriggerResult_descr_;
extern const TTCN_RAWdescriptor_t UtCamEventInd_raw_;
extern const TTCN_JSONdescriptor_t UtCamEventInd_json_;
extern const TTCN_Typedescriptor_t UtCamEventInd_descr_;
extern const TTCN_RAWdescriptor_t UtCamEventIndList_raw_;
extern const TTCN_Typedescriptor_t UtCamEventIndList_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
