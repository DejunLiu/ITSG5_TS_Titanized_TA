// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsGeoNetworking__Functions_HH
#define LibItsGeoNetworking__Functions_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibItsCommon_Functions.hh"
#include "LibItsSecurity_Templates.hh"
#include "LibItsGeoNetworking_Templates.hh"
#include "LibItsGeoNetworking_Pics.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

namespace LibItsGeoNetworking__Functions {

/* Function prototypes */

extern void f__utInitializeIut(const LibItsCommon__TypesAndValues::UtInitialize_template& p__init);
extern void start_f__utInitializeIut(const COMPONENT& component_reference, const LibItsCommon__TypesAndValues::UtInitialize_template& p__init);
extern void f__utChangePosition();
extern void start_f__utChangePosition(const COMPONENT& component_reference);
extern BOOLEAN f__utTriggerEvent(const LibItsGeoNetworking__TypesAndValues::UtGnTrigger_template& p__event);
extern void start_f__utTriggerEvent(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::UtGnTrigger_template& p__event);
extern void f__cf01Up();
extern void start_f__cf01Up(const COMPONENT& component_reference);
extern void f__cf01Down();
extern void start_f__cf01Down(const COMPONENT& component_reference);
extern void f__cf02Up(const CHARSTRING& p__mainUtComponent);
extern void start_f__cf02Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent);
extern void f__cf02Down();
extern void start_f__cf02Down(const COMPONENT& component_reference);
extern void f__cf03Up(const CHARSTRING& p__mainUtComponent);
extern void start_f__cf03Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent);
extern void f__cf03Down();
extern void start_f__cf03Down(const COMPONENT& component_reference);
extern void f__cf04Up(const CHARSTRING& p__mainUtComponent);
extern void start_f__cf04Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent);
extern void f__cf04Down();
extern void start_f__cf04Down(const COMPONENT& component_reference);
extern void f__cf05Up(const CHARSTRING& p__mainUtComponent);
extern void start_f__cf05Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent);
extern void f__cf05Down();
extern void start_f__cf05Down(const COMPONENT& component_reference);
extern void f__cf06Up(const CHARSTRING& p__mainUtComponent);
extern void start_f__cf06Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent);
extern void f__cf06Down();
extern void start_f__cf06Down(const COMPONENT& component_reference);
extern void f__cf07Up(const CHARSTRING& p__mainUtComponent);
extern void start_f__cf07Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent);
extern void f__cf07Down();
extern void start_f__cf07Down(const COMPONENT& component_reference);
extern void f__initialiseComponent(const LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, const LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable, const CHARSTRING& p__componentName);
extern void start_f__initialiseComponent(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, const LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable, const CHARSTRING& p__componentName);
extern void f__startBeingNeighbour();
extern void start_f__startBeingNeighbour(const COMPONENT& component_reference);
extern void f__stopBeingNeighbour();
extern void start_f__stopBeingNeighbour(const COMPONENT& component_reference);
extern void f__initialiseSecuredMode();
extern void start_f__initialiseSecuredMode(const COMPONENT& component_reference);
extern void f__uninitialiseSecuredMode();
extern void start_f__uninitialiseSecuredMode(const COMPONENT& component_reference);
extern COMPONENT f__getComponent(const CHARSTRING& p__componentName);
extern void start_f__getComponent(const COMPONENT& component_reference, const CHARSTRING& p__componentName);
extern void f__preparePositionsAndAreas(LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable);
extern void start_f__preparePositionsAndAreas(const COMPONENT& component_reference, LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable);
extern void f__addPosition(LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, const CHARSTRING& p__positionKey, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__positionValue);
extern LibItsGeoNetworking__TypesAndValues::LongPosVector f__getPosition(const CHARSTRING& p__positionKey);
extern void start_f__getPosition(const COMPONENT& component_reference, const CHARSTRING& p__positionKey);
extern void f__changePositon(const CHARSTRING& p__compNode, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__longPosVector);
extern void start_f__changePositon(const COMPONENT& component_reference, const CHARSTRING& p__compNode, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__longPosVector);
extern LibItsGeoNetworking__TypesAndValues::LongPosVector f__computePosition(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__refPosition, const INTEGER& p__longitudeFactor, const INTEGER& p__latitudeFactor);
extern void f__addArea(LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__geoAreaTable, const CHARSTRING& p__areaKey, const LibItsGeoNetworking__TypesAndValues::GeoArea& p__geoArea);
extern LibItsGeoNetworking__TypesAndValues::GeoArea f__getArea(const CHARSTRING& p__areaName);
extern void start_f__getArea(const COMPONENT& component_reference, const CHARSTRING& p__areaName);
extern LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea f__getGeoBroadcastArea(const CHARSTRING& p__areaName);
extern void start_f__getGeoBroadcastArea(const COMPONENT& component_reference, const CHARSTRING& p__areaName);
extern LibItsGeoNetworking__TypesAndValues::GeoAnycastArea f__getGeoAnycastArea(const CHARSTRING& p__areaName);
extern void start_f__getGeoAnycastArea(const COMPONENT& component_reference, const CHARSTRING& p__areaName);
extern LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea f__geoArea2GeoBroadcastArea(const LibItsGeoNetworking__TypesAndValues::GeoArea& p__area);
extern LibItsGeoNetworking__TypesAndValues::GeoAnycastArea f__geoArea2GeoAnycastArea(const LibItsGeoNetworking__TypesAndValues::GeoArea& p__area);
extern LibItsGeoNetworking__TypesAndValues::GeoArea f__computeSquareArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__centerLongPosVector, const INTEGER& p__distanceA);
extern LibItsGeoNetworking__TypesAndValues::GeoArea f__computeCircularArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__centerLongPosVector, const INTEGER& p__distanceA);
extern FLOAT f__radiusFromCircularArea(const FLOAT& p__squareMeters);
extern FLOAT f__distance(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__pointA, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__pointB);
extern alt_status a__default_instance();
extern void a__default();
extern Default_Base *activate_a__default();
extern alt_status a__neighbourDefault_instance();
extern void a__neighbourDefault();
extern Default_Base *activate_a__neighbourDefault();
extern alt_status a__utDefault_instance();
extern void a__utDefault();
extern Default_Base *activate_a__utDefault();
extern alt_status a__cf01Down_instance();
extern void a__cf01Down();
extern Default_Base *activate_a__cf01Down();
extern alt_status a__cf02Down_instance();
extern void a__cf02Down();
extern Default_Base *activate_a__cf02Down();
extern alt_status a__cf03Down_instance();
extern void a__cf03Down();
extern Default_Base *activate_a__cf03Down();
extern alt_status a__cf04Down_instance();
extern void a__cf04Down();
extern Default_Base *activate_a__cf04Down();
extern alt_status a__cf05Down_instance();
extern void a__cf05Down();
extern Default_Base *activate_a__cf05Down();
extern alt_status a__cf06Down_instance();
extern void a__cf06Down();
extern Default_Base *activate_a__cf06Down();
extern alt_status a__cf07Down_instance();
extern void a__cf07Down();
extern Default_Base *activate_a__cf07Down();
extern alt_status a__receiveGeoUnicast_instance(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber);
extern void a__receiveGeoUnicast(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber);
extern Default_Base *activate_a__receiveGeoUnicast(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber);
extern alt_status a__receiveGeoUnicastWithDestination_instance(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec);
extern void a__receiveGeoUnicastWithDestination(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec);
extern Default_Base *activate_a__receiveGeoUnicastWithDestination(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec);
extern alt_status a__receiveAnyGeoUnicast_instance();
extern void a__receiveAnyGeoUnicast();
extern Default_Base *activate_a__receiveAnyGeoUnicast();
extern alt_status a__receiveGeoBroadcast_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber);
extern void a__receiveGeoBroadcast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber);
extern Default_Base *activate_a__receiveGeoBroadcast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber);
extern alt_status a__receiveGeoBroadcastWithAreaWithHopLimit_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit);
extern void a__receiveGeoBroadcastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit);
extern Default_Base *activate_a__receiveGeoBroadcastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit);
extern alt_status a__receiveGeoBroadcastWithArea_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea);
extern void a__receiveGeoBroadcastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea);
extern Default_Base *activate_a__receiveGeoBroadcastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea);
extern alt_status a__receiveGeoAnycast_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber);
extern void a__receiveGeoAnycast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber);
extern Default_Base *activate_a__receiveGeoAnycast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber);
extern alt_status a__receiveGeoAnycastWithAreaWithHopLimit_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit);
extern void a__receiveGeoAnycastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit);
extern Default_Base *activate_a__receiveGeoAnycastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit);
extern alt_status a__receiveGeoAnycastWithArea_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea);
extern void a__receiveGeoAnycastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea);
extern Default_Base *activate_a__receiveGeoAnycastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea);
extern alt_status a__receiveLsRequest_instance(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector);
extern void a__receiveLsRequest(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector);
extern Default_Base *activate_a__receiveLsRequest(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector);
extern alt_status a__receiveAnyLsRequest_instance();
extern void a__receiveAnyLsRequest();
extern Default_Base *activate_a__receiveAnyLsRequest();
extern alt_status a__receiveAnyLsReply_instance();
extern void a__receiveAnyLsReply();
extern Default_Base *activate_a__receiveAnyLsReply();
extern alt_status a__receiveLsRequestAndReply_instance(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector);
extern void a__receiveLsRequestAndReply(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector);
extern Default_Base *activate_a__receiveLsRequestAndReply(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector);
extern void f__prDefault();
extern void start_f__prDefault(const COMPONENT& component_reference);
extern void f__prNonNeighbour();
extern void start_f__prNonNeighbour(const COMPONENT& component_reference);
extern void f__prNeighbour();
extern void start_f__prNeighbour(const COMPONENT& component_reference);
extern void f__initialState();
extern void start_f__initialState(const COMPONENT& component_reference);
extern void f__handleLocationService(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector);
extern void start_f__handleLocationService(const COMPONENT& component_reference, const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector);
extern LibCommon__VerdictControl::FncRetCode f__processLocationService(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__reqSrcPosVector, const INTEGER_template& p__reqSeqNumber, const LibItsGeoNetworking__TypesAndValues::GN__Address_template& p__gnAddress, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__repSrcPosVector);
extern void f__poDefault();
extern void start_f__poDefault(const COMPONENT& component_reference);
extern void f__poNeighbour();
extern void start_f__poNeighbour(const COMPONENT& component_reference);
extern LibCommon__VerdictControl::FncRetCode f__acTriggerEvent(const LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template& p__event);
extern void start_f__acTriggerEvent(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template& p__event);
extern LibItsGeoNetworking__TypesAndValues::LongPosVector f__acGetLongPosVector(const LibItsGeoNetworking__TypesAndValues::GN__Address& p__gnAddress);
extern void start_f__acGetLongPosVector(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::GN__Address& p__gnAddress);
extern LibCommon__VerdictControl::FncRetCode f__acStartBeaconingMultipleNeighbour(const INTEGER& p__numberOfNeighbour);
extern void start_f__acStartBeaconingMultipleNeighbour(const COMPONENT& component_reference, const INTEGER& p__numberOfNeighbour);
extern LibCommon__VerdictControl::FncRetCode f__acEnableSecurity();
extern void start_f__acEnableSecurity(const COMPONENT& component_reference);
extern LibCommon__VerdictControl::FncRetCode f__acDisableSecurity();
extern void start_f__acDisableSecurity(const COMPONENT& component_reference);
extern FLOAT f__getLifetimeValue(const LibItsGeoNetworking__TypesAndValues::Lifetime& p__lifetime);
extern void start_f__getLifetimeValue(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::Lifetime& p__lifetime);
extern INTEGER f__computeGnTimestamp();
extern LibItsGeoNetworking__TypesAndValues::GN__Address f__getTsGnLocalAddress(const CHARSTRING& p__node);
extern void f__sendGeoNetMessage(const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq);
extern void start_f__sendGeoNetMessage(const COMPONENT& component_reference, const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq);
extern void f__sendGeoNetMessageWithPayload(const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq, const LibItsGeoNetworking__TypesAndValues::Payload_template& p__payload);
extern void start_f__sendGeoNetMessageWithPayload(const COMPONENT& component_reference, const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq, const LibItsGeoNetworking__TypesAndValues::Payload_template& p__payload);
extern LibItsGeoNetworking__TestSystem::GeoNetworkingInd_template f__receiveGeoNetMessageWithPayload(const LibItsGeoNetworking__TestSystem::GeoNetworkingInd_template& p__geoNetInd, const LibItsGeoNetworking__TypesAndValues::Payload_template& p__payload);
extern void f__setLocalSequenceNumber();
extern void start_f__setLocalSequenceNumber(const COMPONENT& component_reference);
extern INTEGER f__getInitialSequenceNumber();
extern INTEGER f__getMessageCount();
extern LibItsGeoNetworking__TypesAndValues::GN__Address f__getIutGnLocalAddress();
extern LibItsGeoNetworking__TypesAndValues::GnAddressConfigurationMethod f__getIutGnLocalAddressConfigurationMethod();
extern OCTETSTRING f__getIutMacAddress();
extern LibItsGeoNetworking__TypesAndValues::GeoUnicastForwardingAlgorithm f__getGeoUnicastForwardingAlgorithm();
extern LibItsGeoNetworking__TypesAndValues::GeoBroadcastForwardingAlgorithm f__getGeoBroadcastForwardingAlgorithm();
extern INTEGER f__getDefaultHopLimit();
extern BITSTRING f__isMobile();
extern FLOAT f__getLsRetransmitTimer();
extern FLOAT f__getLsRetransmitTimerMedium();
extern FLOAT f__getLsRetransmitTimerMaximum();
extern FLOAT f__getAppRetransmitTimer();
extern FLOAT f__getAppRetransmitTimerMedium();
extern FLOAT f__getAppRetransmitTimerMaximum();
extern INTEGER f__getLsMaxRetrans();
extern INTEGER f__getAppMaxRetrans();
extern INTEGER f__getLsPacketBufferSize();
extern INTEGER f__getUcForwardingPacketBufferSize();
extern INTEGER f__getBcForwardingPacketBufferSize();
extern FLOAT f__getMaxPacketLifeTime();
extern FLOAT f__getDeltaTimer();
extern FLOAT f__getBsRetransmitTimer();
extern FLOAT f__getBsRetransmitTimerMedium();
extern FLOAT f__getBsRetransmitTimerMaximum();
extern FLOAT f__getBsMaxJitter();
extern FLOAT f__getLifetimeLocTableEntry();
extern INTEGER f__getCbfMaxCommunicationRange();
extern INTEGER f__getGeoUnicastCbfMaxTime();
extern INTEGER f__getGeoUnicastCbfMinTime();
extern INTEGER f__getGeoBroadcastCbfMaxTime();
extern INTEGER f__getGeoBroadcastCbfMinTime();
extern FLOAT f__getGnMaxAreaSize();
extern INTEGER f__getAdvancedGbcForwardingMaxCounter();
extern void f__setNrNeighbourLocTableDefault();
extern void start_f__setNrNeighbourLocTableDefault(const COMPONENT& component_reference);
extern void f__setNrNeighbourLocTableMedium();
extern void start_f__setNrNeighbourLocTableMedium(const COMPONENT& component_reference);
extern void f__setNrNeighbourLocTableMaximum();
extern void start_f__setNrNeighbourLocTableMaximum(const COMPONENT& component_reference);
extern LibItsGeoNetworking__TypesAndValues::ShortPosVector f__longPosVector2ShortPosVector(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__longPosVector);
extern LibItsGeoNetworking__TypesAndValues::LongPosVector f__getIutLongPosVector();
extern void start_f__getIutLongPosVector(const COMPONENT& component_reference);
extern LibItsGeoNetworking__TypesAndValues::ShortPosVector f__getIutShortPosVector();
extern void start_f__getIutShortPosVector(const COMPONENT& component_reference);
extern LibItsGeoNetworking__TypesAndValues::LongPosVector f__computePositionUsingDistance(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__iutLongPosVector, const INTEGER& p__distance, const INTEGER& p__orientation);
extern INTEGER fx__computeGnTimestamp();
extern alt_status a__securedMessage_instance(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern void a__securedMessage(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern Default_Base *activate_a__securedMessage(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern alt_status a__securedMessageWithCertificate_instance(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern void a__securedMessageWithCertificate(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern Default_Base *activate_a__securedMessageWithCertificate(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern alt_status a__securedMessageWithCertificateChain_instance(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern void a__securedMessageWithCertificateChain(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern Default_Base *activate_a__securedMessageWithCertificateChain(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern alt_status a__securedMessageWithDigest_instance(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern void a__securedMessageWithDigest(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern Default_Base *activate_a__securedMessageWithDigest(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
extern BOOLEAN f__waitForCertificate(LibItsSecurity__TypesAndValues::Certificate& p__cert);
extern BOOLEAN f__waitForCertificateChain(LibItsSecurity__TypesAndValues::CertificateChain& p__chain);
extern BOOLEAN f__askForCertificateChain(const OCTETSTRING_template& p__CamPayload);
extern void start_f__askForCertificateChain(const COMPONENT& component_reference, const OCTETSTRING_template& p__CamPayload);
extern BOOLEAN f__askAndWaitForCertificateChain(LibItsSecurity__TypesAndValues::CertificateChain& p__chain, const OCTETSTRING_template& p__CamPayload);
extern BOOLEAN f__waitForDigest(OCTETSTRING& p__digest);
extern void f__sendCertificateRequest(const OCTETSTRING_template& p__digest, const OCTETSTRING_template& p__payload);
extern void start_f__sendCertificateRequest(const COMPONENT& component_reference, const OCTETSTRING_template& p__digest, const OCTETSTRING_template& p__payload);
extern LibItsSecurity__TypesAndValues::SecuredMessage f__getSecuredMessage(const LibItsGeoNetworking__TypesAndValues::GeoNetworkingPdu& p__msg);

/* Global variable declarations */

extern const CHARSTRING& f__cf02Up_p__mainUtComponent_defval;
extern const CHARSTRING& f__cf03Up_p__mainUtComponent_defval;
extern const CHARSTRING& f__cf04Up_p__mainUtComponent_defval;
extern const CHARSTRING& f__cf05Up_p__mainUtComponent_defval;
extern const CHARSTRING& f__cf06Up_p__mainUtComponent_defval;
extern const CHARSTRING& f__cf07Up_p__mainUtComponent_defval;
extern const INTEGER_template& a__receiveGeoBroadcastWithAreaWithHopLimit_p__maxHopLimit_defval;
extern const INTEGER_template& a__receiveGeoAnycastWithAreaWithHopLimit_p__maxHopLimit_defval;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
