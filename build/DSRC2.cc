// This C++ source file was generated by the ASN.1 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "DSRC2.hh"

namespace DSRC2 {

/* Prototypes of static functions */

static void pre_init_module();

/* Global variable definitions */

// No XER for PrioritizationResponseStatus
const TTCN_JSONdescriptor_t PrioritizationResponseStatus_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t PrioritizationResponseStatus_descr_ = { "@DSRC2.PrioritizationResponseStatus", &ENUMERATED_ber_, NULL, NULL, NULL, &PrioritizationResponseStatus_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& SignalGroupID_descr_ = INTEGER_descr_;
// No XER for NodeOffsetPoint
const TTCN_JSONdescriptor_t NodeOffsetPoint_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t NodeOffsetPoint_descr_ = { "@DSRC2.NodeOffsetPoint", &CHOICE_ber_, NULL, NULL, NULL, &NodeOffsetPoint_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& Offset__B10_descr_ = INTEGER_descr_;
static const ASN_Tag_t Node__XY__20b_x_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__XY__20b_x_ber_ = { 1u, Node__XY__20b_x_tag_ };
// No XER for Node__XY__20b_x
const TTCN_Typedescriptor_t Node__XY__20b_x_descr_ = { "@DSRC2.Node-XY-20b.x", &Node__XY__20b_x_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__XY__20b_y_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__XY__20b_y_ber_ = { 1u, Node__XY__20b_y_tag_ };
// No XER for Node__XY__20b_y
const TTCN_Typedescriptor_t Node__XY__20b_y_descr_ = { "@DSRC2.Node-XY-20b.y", &Node__XY__20b_y_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__XY__20b
const TTCN_JSONdescriptor_t Node__XY__20b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__XY__20b_descr_ = { "@DSRC2.Node-XY-20b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__XY__20b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__XY1_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__XY1_ber_ = { 1u, NodeOffsetPoint_node__XY1_tag_ };
// No XER for NodeOffsetPoint_node__XY1
const TTCN_Typedescriptor_t NodeOffsetPoint_node__XY1_descr_ = { "@DSRC2.NodeOffsetPoint.node-XY1", &NodeOffsetPoint_node__XY1_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& Offset__B11_descr_ = INTEGER_descr_;
static const ASN_Tag_t Node__XY__22b_x_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__XY__22b_x_ber_ = { 1u, Node__XY__22b_x_tag_ };
// No XER for Node__XY__22b_x
const TTCN_Typedescriptor_t Node__XY__22b_x_descr_ = { "@DSRC2.Node-XY-22b.x", &Node__XY__22b_x_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__XY__22b_y_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__XY__22b_y_ber_ = { 1u, Node__XY__22b_y_tag_ };
// No XER for Node__XY__22b_y
const TTCN_Typedescriptor_t Node__XY__22b_y_descr_ = { "@DSRC2.Node-XY-22b.y", &Node__XY__22b_y_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__XY__22b
const TTCN_JSONdescriptor_t Node__XY__22b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__XY__22b_descr_ = { "@DSRC2.Node-XY-22b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__XY__22b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__XY2_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__XY2_ber_ = { 1u, NodeOffsetPoint_node__XY2_tag_ };
// No XER for NodeOffsetPoint_node__XY2
const TTCN_Typedescriptor_t NodeOffsetPoint_node__XY2_descr_ = { "@DSRC2.NodeOffsetPoint.node-XY2", &NodeOffsetPoint_node__XY2_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& Offset__B12_descr_ = INTEGER_descr_;
static const ASN_Tag_t Node__XY__24b_x_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__XY__24b_x_ber_ = { 1u, Node__XY__24b_x_tag_ };
// No XER for Node__XY__24b_x
const TTCN_Typedescriptor_t Node__XY__24b_x_descr_ = { "@DSRC2.Node-XY-24b.x", &Node__XY__24b_x_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__XY__24b_y_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__XY__24b_y_ber_ = { 1u, Node__XY__24b_y_tag_ };
// No XER for Node__XY__24b_y
const TTCN_Typedescriptor_t Node__XY__24b_y_descr_ = { "@DSRC2.Node-XY-24b.y", &Node__XY__24b_y_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__XY__24b
const TTCN_JSONdescriptor_t Node__XY__24b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__XY__24b_descr_ = { "@DSRC2.Node-XY-24b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__XY__24b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__XY3_tag_[] = { { ASN_TAG_CONT, 2u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__XY3_ber_ = { 1u, NodeOffsetPoint_node__XY3_tag_ };
// No XER for NodeOffsetPoint_node__XY3
const TTCN_Typedescriptor_t NodeOffsetPoint_node__XY3_descr_ = { "@DSRC2.NodeOffsetPoint.node-XY3", &NodeOffsetPoint_node__XY3_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& Offset__B13_descr_ = INTEGER_descr_;
static const ASN_Tag_t Node__XY__26b_x_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__XY__26b_x_ber_ = { 1u, Node__XY__26b_x_tag_ };
// No XER for Node__XY__26b_x
const TTCN_Typedescriptor_t Node__XY__26b_x_descr_ = { "@DSRC2.Node-XY-26b.x", &Node__XY__26b_x_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__XY__26b_y_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__XY__26b_y_ber_ = { 1u, Node__XY__26b_y_tag_ };
// No XER for Node__XY__26b_y
const TTCN_Typedescriptor_t Node__XY__26b_y_descr_ = { "@DSRC2.Node-XY-26b.y", &Node__XY__26b_y_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__XY__26b
const TTCN_JSONdescriptor_t Node__XY__26b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__XY__26b_descr_ = { "@DSRC2.Node-XY-26b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__XY__26b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__XY4_tag_[] = { { ASN_TAG_CONT, 3u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__XY4_ber_ = { 1u, NodeOffsetPoint_node__XY4_tag_ };
// No XER for NodeOffsetPoint_node__XY4
const TTCN_Typedescriptor_t NodeOffsetPoint_node__XY4_descr_ = { "@DSRC2.NodeOffsetPoint.node-XY4", &NodeOffsetPoint_node__XY4_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& Offset__B14_descr_ = INTEGER_descr_;
static const ASN_Tag_t Node__XY__28b_x_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__XY__28b_x_ber_ = { 1u, Node__XY__28b_x_tag_ };
// No XER for Node__XY__28b_x
const TTCN_Typedescriptor_t Node__XY__28b_x_descr_ = { "@DSRC2.Node-XY-28b.x", &Node__XY__28b_x_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__XY__28b_y_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__XY__28b_y_ber_ = { 1u, Node__XY__28b_y_tag_ };
// No XER for Node__XY__28b_y
const TTCN_Typedescriptor_t Node__XY__28b_y_descr_ = { "@DSRC2.Node-XY-28b.y", &Node__XY__28b_y_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__XY__28b
const TTCN_JSONdescriptor_t Node__XY__28b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__XY__28b_descr_ = { "@DSRC2.Node-XY-28b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__XY__28b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__XY5_tag_[] = { { ASN_TAG_CONT, 4u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__XY5_ber_ = { 1u, NodeOffsetPoint_node__XY5_tag_ };
// No XER for NodeOffsetPoint_node__XY5
const TTCN_Typedescriptor_t NodeOffsetPoint_node__XY5_descr_ = { "@DSRC2.NodeOffsetPoint.node-XY5", &NodeOffsetPoint_node__XY5_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& Offset__B16_descr_ = INTEGER_descr_;
static const ASN_Tag_t Node__XY__32b_x_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__XY__32b_x_ber_ = { 1u, Node__XY__32b_x_tag_ };
// No XER for Node__XY__32b_x
const TTCN_Typedescriptor_t Node__XY__32b_x_descr_ = { "@DSRC2.Node-XY-32b.x", &Node__XY__32b_x_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__XY__32b_y_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__XY__32b_y_ber_ = { 1u, Node__XY__32b_y_tag_ };
// No XER for Node__XY__32b_y
const TTCN_Typedescriptor_t Node__XY__32b_y_descr_ = { "@DSRC2.Node-XY-32b.y", &Node__XY__32b_y_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__XY__32b
const TTCN_JSONdescriptor_t Node__XY__32b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__XY__32b_descr_ = { "@DSRC2.Node-XY-32b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__XY__32b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__XY6_tag_[] = { { ASN_TAG_CONT, 5u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__XY6_ber_ = { 1u, NodeOffsetPoint_node__XY6_tag_ };
// No XER for NodeOffsetPoint_node__XY6
const TTCN_Typedescriptor_t NodeOffsetPoint_node__XY6_descr_ = { "@DSRC2.NodeOffsetPoint.node-XY6", &NodeOffsetPoint_node__XY6_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__LLmD__64b_lon_tag_[] = { { ASN_TAG_CONT, 0u }};
const ASN_BERdescriptor_t Node__LLmD__64b_lon_ber_ = { 1u, Node__LLmD__64b_lon_tag_ };
// No XER for Node__LLmD__64b_lon
const TTCN_Typedescriptor_t Node__LLmD__64b_lon_descr_ = { "@DSRC2.Node-LLmD-64b.lon", &Node__LLmD__64b_lon_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t Node__LLmD__64b_lat_tag_[] = { { ASN_TAG_CONT, 1u }};
const ASN_BERdescriptor_t Node__LLmD__64b_lat_ber_ = { 1u, Node__LLmD__64b_lat_tag_ };
// No XER for Node__LLmD__64b_lat
const TTCN_Typedescriptor_t Node__LLmD__64b_lat_descr_ = { "@DSRC2.Node-LLmD-64b.lat", &Node__LLmD__64b_lat_ber_, NULL, NULL, NULL, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Node__LLmD__64b
const TTCN_JSONdescriptor_t Node__LLmD__64b_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Node__LLmD__64b_descr_ = { "@DSRC2.Node-LLmD-64b", &SEQUENCE_ber_, NULL, NULL, NULL, &Node__LLmD__64b_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const ASN_Tag_t NodeOffsetPoint_node__LatLon_tag_[] = { { ASN_TAG_CONT, 6u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__LatLon_ber_ = { 1u, NodeOffsetPoint_node__LatLon_tag_ };
// No XER for NodeOffsetPoint_node__LatLon
const TTCN_Typedescriptor_t NodeOffsetPoint_node__LatLon_descr_ = { "@DSRC2.NodeOffsetPoint.node-LatLon", &NodeOffsetPoint_node__LatLon_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& RegionalNodeOffsetPoint_descr_ = REGION::Reg__NodeOffsetPoint_descr_;
static const ASN_Tag_t NodeOffsetPoint_node__Regional_tag_[] = { { ASN_TAG_CONT, 7u }};
const ASN_BERdescriptor_t NodeOffsetPoint_node__Regional_ber_ = { 1u, NodeOffsetPoint_node__Regional_tag_ };
// No XER for NodeOffsetPoint_node__Regional
const TTCN_Typedescriptor_t NodeOffsetPoint_node__Regional_descr_ = { "@DSRC2.NodeOffsetPoint.node-Regional", &NodeOffsetPoint_node__Regional_ber_, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_Typedescriptor_t& LaneID_descr_ = INTEGER_descr_;
TTCN_Module module_object("DSRC2", __DATE__, __TIME__, NULL, pre_init_module);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

PrioritizationResponseStatus::PrioritizationResponseStatus()
{
enum_value = UNBOUND_VALUE;
}

PrioritizationResponseStatus::PrioritizationResponseStatus(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @DSRC2.PrioritizationResponseStatus with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

PrioritizationResponseStatus::PrioritizationResponseStatus(enum_type other_value)
{
enum_value = other_value;
}

PrioritizationResponseStatus::PrioritizationResponseStatus(const PrioritizationResponseStatus& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
enum_value = other_value.enum_value;
}

PrioritizationResponseStatus& PrioritizationResponseStatus::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @DSRC2.PrioritizationResponseStatus.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

PrioritizationResponseStatus& PrioritizationResponseStatus::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

PrioritizationResponseStatus& PrioritizationResponseStatus::operator=(const PrioritizationResponseStatus& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
enum_value = other_value.enum_value;
return *this;
}

boolean PrioritizationResponseStatus::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value == other_value;
}

boolean PrioritizationResponseStatus::operator==(const PrioritizationResponseStatus& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value == other_value.enum_value;
}

boolean PrioritizationResponseStatus::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value < other_value;
}

boolean PrioritizationResponseStatus::operator<(const PrioritizationResponseStatus& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value < other_value.enum_value;
}

boolean PrioritizationResponseStatus::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value > other_value;
}

boolean PrioritizationResponseStatus::operator>(const PrioritizationResponseStatus& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value > other_value.enum_value;
}

const char *PrioritizationResponseStatus::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case unknown: return "unknown";
case requested: return "requested";
case processing: return "processing";
case watchOtherTraffic: return "watchOtherTraffic";
case granted: return "granted";
case rejected: return "rejected";
case maxPresence: return "maxPresence";
default: return "<unknown>";
}
}

PrioritizationResponseStatus::enum_type PrioritizationResponseStatus::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "unknown")) return unknown;
else if (!strcmp(str_par, "requested")) return requested;
else if (!strcmp(str_par, "processing")) return processing;
else if (!strcmp(str_par, "watchOtherTraffic")) return watchOtherTraffic;
else if (!strcmp(str_par, "granted")) return granted;
else if (!strcmp(str_par, "rejected")) return rejected;
else if (!strcmp(str_par, "maxPresence")) return maxPresence;
else return UNKNOWN_VALUE;
}

boolean PrioritizationResponseStatus::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
return TRUE;
default:
return FALSE;
}
}

int PrioritizationResponseStatus::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @DSRC2.PrioritizationResponseStatus.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int PrioritizationResponseStatus::enum2int(const PrioritizationResponseStatus& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @DSRC2.PrioritizationResponseStatus.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void PrioritizationResponseStatus::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @DSRC2.PrioritizationResponseStatus.", int_val);
enum_value = (enum_type)int_val;
}

PrioritizationResponseStatus::operator PrioritizationResponseStatus::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @DSRC2.PrioritizationResponseStatus.");
return enum_value;
}

void PrioritizationResponseStatus::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void PrioritizationResponseStatus::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    char* enum_name = param.get_enumerated();
    enum_value = (enum_name != NULL) ? str_to_enum(enum_name) : UNKNOWN_VALUE;
    if (is_valid_enum(enum_value)) {
      return;
    }
    mp = param.get_referenced_param();
  }
  if (mp->get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@DSRC2.PrioritizationResponseStatus");
  enum_value = str_to_enum(mp->get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @DSRC2.PrioritizationResponseStatus.");
  }
}

Module_Param* PrioritizationResponseStatus::get_param(Module_Param_Name& /* param_name */) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  return new Module_Param_Enumerated(mcopystr(enum_to_str(enum_value)));
}

void PrioritizationResponseStatus::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
text_buf.push_int(enum_value);
}

void PrioritizationResponseStatus::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @DSRC2.PrioritizationResponseStatus.", enum_value);
}

void PrioritizationResponseStatus::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void PrioritizationResponseStatus::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* PrioritizationResponseStatus::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=BER_encode_chk_bound(is_bound());
  if(!new_tlv) {
    BER_encode_chk_enum_valid(p_td, is_valid_enum(enum_value), enum_value);
    new_tlv=BER_encode_TLV_INTEGER(p_coding, enum_value);
  }
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean PrioritizationResponseStatus::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  enum_value = UNBOUND_VALUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec("While decoding ENUMERATED type @DSRC2.PrioritizationResponseStatus: ");
  int tmp_mfr;
  if (BER_decode_TLV_INTEGER(stripped_tlv, L_form, tmp_mfr)) {
    BER_decode_chk_enum_valid(p_td, is_valid_enum(tmp_mfr), tmp_mfr);
    enum_value = (enum_type)tmp_mfr;
    return TRUE;
  } else return FALSE;
}

int PrioritizationResponseStatus::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int PrioritizationResponseStatus::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void PrioritizationResponseStatus_template::copy_template(const PrioritizationResponseStatus_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new PrioritizationResponseStatus_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @DSRC2.PrioritizationResponseStatus.");
}
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template()
{
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!PrioritizationResponseStatus::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @DSRC2.PrioritizationResponseStatus with unknown numeric value %d.", other_value);
single_value = (PrioritizationResponseStatus::enum_type)other_value;
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template(PrioritizationResponseStatus::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template(const PrioritizationResponseStatus& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == PrioritizationResponseStatus::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus.");
single_value = other_value.enum_value;
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template(const OPTIONAL<PrioritizationResponseStatus>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (PrioritizationResponseStatus::enum_type)(const PrioritizationResponseStatus&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @DSRC2.PrioritizationResponseStatus from an unbound optional field.");
}
}

PrioritizationResponseStatus_template::PrioritizationResponseStatus_template(const PrioritizationResponseStatus_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

PrioritizationResponseStatus_template::~PrioritizationResponseStatus_template()
{
clean_up();
}

boolean PrioritizationResponseStatus_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean PrioritizationResponseStatus_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != PrioritizationResponseStatus::UNBOUND_VALUE;
}

void PrioritizationResponseStatus_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::operator=(int other_value)
{
if (!PrioritizationResponseStatus::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @DSRC2.PrioritizationResponseStatus.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (PrioritizationResponseStatus::enum_type)other_value;
return *this;
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::operator=(PrioritizationResponseStatus::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::operator=(const PrioritizationResponseStatus& other_value)
{
if (other_value.enum_value == PrioritizationResponseStatus::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @DSRC2.PrioritizationResponseStatus to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::operator=(const OPTIONAL<PrioritizationResponseStatus>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (PrioritizationResponseStatus::enum_type)(const PrioritizationResponseStatus&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @DSRC2.PrioritizationResponseStatus.");
}
return *this;
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::operator=(const PrioritizationResponseStatus_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean PrioritizationResponseStatus_template::match(PrioritizationResponseStatus::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @DSRC2.PrioritizationResponseStatus.");
}
return FALSE;
}

boolean PrioritizationResponseStatus_template::match(const PrioritizationResponseStatus& other_value, boolean) const
{
if (other_value.enum_value == PrioritizationResponseStatus::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @DSRC2.PrioritizationResponseStatus with an unbound value.");
return match(other_value.enum_value);
}

PrioritizationResponseStatus::enum_type PrioritizationResponseStatus_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @DSRC2.PrioritizationResponseStatus.");
return single_value;
}

void PrioritizationResponseStatus_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @DSRC2.PrioritizationResponseStatus.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new PrioritizationResponseStatus_template[list_length];
}

PrioritizationResponseStatus_template& PrioritizationResponseStatus_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @DSRC2.PrioritizationResponseStatus.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @DSRC2.PrioritizationResponseStatus.");
return value_list.list_value[list_index];
}

void PrioritizationResponseStatus_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(PrioritizationResponseStatus::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void PrioritizationResponseStatus_template::log_match(const PrioritizationResponseStatus& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void PrioritizationResponseStatus_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @DSRC2.PrioritizationResponseStatus.");
}
}

void PrioritizationResponseStatus_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (PrioritizationResponseStatus::enum_type)text_buf.pull_int().get_val();
if (!PrioritizationResponseStatus::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @DSRC2.PrioritizationResponseStatus.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new PrioritizationResponseStatus_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @DSRC2.PrioritizationResponseStatus.");
}
}

boolean PrioritizationResponseStatus_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean PrioritizationResponseStatus_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void PrioritizationResponseStatus_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    char* enum_name = param.get_enumerated();
    PrioritizationResponseStatus::enum_type enum_val = (enum_name != NULL) ? PrioritizationResponseStatus::str_to_enum(enum_name) : PrioritizationResponseStatus::UNKNOWN_VALUE;
    if (PrioritizationResponseStatus::is_valid_enum(enum_val)) {
      *this = enum_val;
      is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
      return;
    }
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    PrioritizationResponseStatus_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Enumerated: {
    PrioritizationResponseStatus::enum_type enum_val = PrioritizationResponseStatus::str_to_enum(mp->get_enumerated());
    if (!PrioritizationResponseStatus::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @DSRC2.PrioritizationResponseStatus.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@DSRC2.PrioritizationResponseStatus");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* PrioritizationResponseStatus_template::get_param(Module_Param_Name& param_name) const
{
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE:
    mp = new Module_Param_Enumerated(mcopystr(PrioritizationResponseStatus::enum_to_str(single_value)));
    break;
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void PrioritizationResponseStatus_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.PrioritizationResponseStatus");
}

void NodeOffsetPoint::copy_value(const NodeOffsetPoint& other_value)
{
switch (other_value.union_selection) {
case ALT_node__XY1:
field_node__XY1 = new Node__XY__20b(*other_value.field_node__XY1);
break;
case ALT_node__XY2:
field_node__XY2 = new Node__XY__22b(*other_value.field_node__XY2);
break;
case ALT_node__XY3:
field_node__XY3 = new Node__XY__24b(*other_value.field_node__XY3);
break;
case ALT_node__XY4:
field_node__XY4 = new Node__XY__26b(*other_value.field_node__XY4);
break;
case ALT_node__XY5:
field_node__XY5 = new Node__XY__28b(*other_value.field_node__XY5);
break;
case ALT_node__XY6:
field_node__XY6 = new Node__XY__32b(*other_value.field_node__XY6);
break;
case ALT_node__LatLon:
field_node__LatLon = new Node__LLmD__64b(*other_value.field_node__LatLon);
break;
case ALT_node__Regional:
field_node__Regional = new REGION::Reg__NodeOffsetPoint(*other_value.field_node__Regional);
break;
default:
TTCN_error("Assignment of an unbound union value of type @DSRC2.NodeOffsetPoint.");
}
union_selection = other_value.union_selection;
}

NodeOffsetPoint::NodeOffsetPoint()
{
union_selection = UNBOUND_VALUE;
}

NodeOffsetPoint::NodeOffsetPoint(const NodeOffsetPoint& other_value)
: Base_Type(){
copy_value(other_value);
}

NodeOffsetPoint::~NodeOffsetPoint()
{
clean_up();
}

NodeOffsetPoint& NodeOffsetPoint::operator=(const NodeOffsetPoint& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean NodeOffsetPoint::operator==(const NodeOffsetPoint& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @DSRC2.NodeOffsetPoint.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @DSRC2.NodeOffsetPoint.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_node__XY1:
return *field_node__XY1 == *other_value.field_node__XY1;
case ALT_node__XY2:
return *field_node__XY2 == *other_value.field_node__XY2;
case ALT_node__XY3:
return *field_node__XY3 == *other_value.field_node__XY3;
case ALT_node__XY4:
return *field_node__XY4 == *other_value.field_node__XY4;
case ALT_node__XY5:
return *field_node__XY5 == *other_value.field_node__XY5;
case ALT_node__XY6:
return *field_node__XY6 == *other_value.field_node__XY6;
case ALT_node__LatLon:
return *field_node__LatLon == *other_value.field_node__LatLon;
case ALT_node__Regional:
return *field_node__Regional == *other_value.field_node__Regional;
default:
return FALSE;
}
}

Node__XY__20b& NodeOffsetPoint::node__XY1()
{
if (union_selection != ALT_node__XY1) {
clean_up();
field_node__XY1 = new Node__XY__20b;
union_selection = ALT_node__XY1;
}
return *field_node__XY1;
}

const Node__XY__20b& NodeOffsetPoint::node__XY1() const
{
if (union_selection != ALT_node__XY1) TTCN_error("Using non-selected field node_XY1 in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__XY1;
}

Node__XY__22b& NodeOffsetPoint::node__XY2()
{
if (union_selection != ALT_node__XY2) {
clean_up();
field_node__XY2 = new Node__XY__22b;
union_selection = ALT_node__XY2;
}
return *field_node__XY2;
}

const Node__XY__22b& NodeOffsetPoint::node__XY2() const
{
if (union_selection != ALT_node__XY2) TTCN_error("Using non-selected field node_XY2 in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__XY2;
}

Node__XY__24b& NodeOffsetPoint::node__XY3()
{
if (union_selection != ALT_node__XY3) {
clean_up();
field_node__XY3 = new Node__XY__24b;
union_selection = ALT_node__XY3;
}
return *field_node__XY3;
}

const Node__XY__24b& NodeOffsetPoint::node__XY3() const
{
if (union_selection != ALT_node__XY3) TTCN_error("Using non-selected field node_XY3 in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__XY3;
}

Node__XY__26b& NodeOffsetPoint::node__XY4()
{
if (union_selection != ALT_node__XY4) {
clean_up();
field_node__XY4 = new Node__XY__26b;
union_selection = ALT_node__XY4;
}
return *field_node__XY4;
}

const Node__XY__26b& NodeOffsetPoint::node__XY4() const
{
if (union_selection != ALT_node__XY4) TTCN_error("Using non-selected field node_XY4 in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__XY4;
}

Node__XY__28b& NodeOffsetPoint::node__XY5()
{
if (union_selection != ALT_node__XY5) {
clean_up();
field_node__XY5 = new Node__XY__28b;
union_selection = ALT_node__XY5;
}
return *field_node__XY5;
}

const Node__XY__28b& NodeOffsetPoint::node__XY5() const
{
if (union_selection != ALT_node__XY5) TTCN_error("Using non-selected field node_XY5 in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__XY5;
}

Node__XY__32b& NodeOffsetPoint::node__XY6()
{
if (union_selection != ALT_node__XY6) {
clean_up();
field_node__XY6 = new Node__XY__32b;
union_selection = ALT_node__XY6;
}
return *field_node__XY6;
}

const Node__XY__32b& NodeOffsetPoint::node__XY6() const
{
if (union_selection != ALT_node__XY6) TTCN_error("Using non-selected field node_XY6 in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__XY6;
}

Node__LLmD__64b& NodeOffsetPoint::node__LatLon()
{
if (union_selection != ALT_node__LatLon) {
clean_up();
field_node__LatLon = new Node__LLmD__64b;
union_selection = ALT_node__LatLon;
}
return *field_node__LatLon;
}

const Node__LLmD__64b& NodeOffsetPoint::node__LatLon() const
{
if (union_selection != ALT_node__LatLon) TTCN_error("Using non-selected field node_LatLon in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__LatLon;
}

REGION::Reg__NodeOffsetPoint& NodeOffsetPoint::node__Regional()
{
if (union_selection != ALT_node__Regional) {
clean_up();
field_node__Regional = new REGION::Reg__NodeOffsetPoint;
union_selection = ALT_node__Regional;
}
return *field_node__Regional;
}

const REGION::Reg__NodeOffsetPoint& NodeOffsetPoint::node__Regional() const
{
if (union_selection != ALT_node__Regional) TTCN_error("Using non-selected field node_Regional in a value of union type @DSRC2.NodeOffsetPoint.");
return *field_node__Regional;
}

boolean NodeOffsetPoint::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @DSRC2.NodeOffsetPoint.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @DSRC2.NodeOffsetPoint.");
return union_selection == checked_selection;
}

boolean NodeOffsetPoint::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean NodeOffsetPoint::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_node__XY1: return field_node__XY1->is_value();
case ALT_node__XY2: return field_node__XY2->is_value();
case ALT_node__XY3: return field_node__XY3->is_value();
case ALT_node__XY4: return field_node__XY4->is_value();
case ALT_node__XY5: return field_node__XY5->is_value();
case ALT_node__XY6: return field_node__XY6->is_value();
case ALT_node__LatLon: return field_node__LatLon->is_value();
case ALT_node__Regional: return field_node__Regional->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void NodeOffsetPoint::clean_up()
{
switch (union_selection) {
case ALT_node__XY1:
  delete field_node__XY1;
  break;
case ALT_node__XY2:
  delete field_node__XY2;
  break;
case ALT_node__XY3:
  delete field_node__XY3;
  break;
case ALT_node__XY4:
  delete field_node__XY4;
  break;
case ALT_node__XY5:
  delete field_node__XY5;
  break;
case ALT_node__XY6:
  delete field_node__XY6;
  break;
case ALT_node__LatLon:
  delete field_node__LatLon;
  break;
case ALT_node__Regional:
  delete field_node__Regional;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void NodeOffsetPoint::log() const
{
switch (union_selection) {
case ALT_node__XY1:
TTCN_Logger::log_event_str("{ node_XY1 := ");
field_node__XY1->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__XY2:
TTCN_Logger::log_event_str("{ node_XY2 := ");
field_node__XY2->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__XY3:
TTCN_Logger::log_event_str("{ node_XY3 := ");
field_node__XY3->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__XY4:
TTCN_Logger::log_event_str("{ node_XY4 := ");
field_node__XY4->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__XY5:
TTCN_Logger::log_event_str("{ node_XY5 := ");
field_node__XY5->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__XY6:
TTCN_Logger::log_event_str("{ node_XY6 := ");
field_node__XY6->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__LatLon:
TTCN_Logger::log_event_str("{ node_LatLon := ");
field_node__LatLon->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_node__Regional:
TTCN_Logger::log_event_str("{ node_Regional := ");
field_node__Regional->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void NodeOffsetPoint::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@DSRC2.NodeOffsetPoint'");
    }
    if (strcmp("node_XY1", param_field) == 0) {
      node__XY1().set_param(param);
      return;
    } else if (strcmp("node_XY2", param_field) == 0) {
      node__XY2().set_param(param);
      return;
    } else if (strcmp("node_XY3", param_field) == 0) {
      node__XY3().set_param(param);
      return;
    } else if (strcmp("node_XY4", param_field) == 0) {
      node__XY4().set_param(param);
      return;
    } else if (strcmp("node_XY5", param_field) == 0) {
      node__XY5().set_param(param);
      return;
    } else if (strcmp("node_XY6", param_field) == 0) {
      node__XY6().set_param(param);
      return;
    } else if (strcmp("node_LatLon", param_field) == 0) {
      node__LatLon().set_param(param);
      return;
    } else if (strcmp("node_Regional", param_field) == 0) {
      node__Regional().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@DSRC2.NodeOffsetPoint'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) return;
  if (mp->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = mp->get_elem(mp->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "node_XY1")) {
    node__XY1().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_XY2")) {
    node__XY2().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_XY3")) {
    node__XY3().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_XY4")) {
    node__XY4().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_XY5")) {
    node__XY5().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_XY6")) {
    node__XY6().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_LatLon")) {
    node__LatLon().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "node_Regional")) {
    node__Regional().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @DSRC2.NodeOffsetPoint.", mp_last->get_id()->get_name());
}

Module_Param* NodeOffsetPoint::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for union type `@DSRC2.NodeOffsetPoint'");
    }
    if (strcmp("node_XY1", param_field) == 0) {
      return node__XY1().get_param(param_name);
    } else if (strcmp("node_XY2", param_field) == 0) {
      return node__XY2().get_param(param_name);
    } else if (strcmp("node_XY3", param_field) == 0) {
      return node__XY3().get_param(param_name);
    } else if (strcmp("node_XY4", param_field) == 0) {
      return node__XY4().get_param(param_name);
    } else if (strcmp("node_XY5", param_field) == 0) {
      return node__XY5().get_param(param_name);
    } else if (strcmp("node_XY6", param_field) == 0) {
      return node__XY6().get_param(param_name);
    } else if (strcmp("node_LatLon", param_field) == 0) {
      return node__LatLon().get_param(param_name);
    } else if (strcmp("node_Regional", param_field) == 0) {
      return node__Regional().get_param(param_name);
    } else TTCN_error("Field `%s' not found in union type `NodeOffsetPoint'", param_field);
  }
  Module_Param* mp_field = NULL;
  switch(union_selection) {
  case ALT_node__XY1:
    mp_field = field_node__XY1->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY1")));
    break;
  case ALT_node__XY2:
    mp_field = field_node__XY2->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY2")));
    break;
  case ALT_node__XY3:
    mp_field = field_node__XY3->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY3")));
    break;
  case ALT_node__XY4:
    mp_field = field_node__XY4->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY4")));
    break;
  case ALT_node__XY5:
    mp_field = field_node__XY5->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY5")));
    break;
  case ALT_node__XY6:
    mp_field = field_node__XY6->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY6")));
    break;
  case ALT_node__LatLon:
    mp_field = field_node__LatLon->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_LatLon")));
    break;
  case ALT_node__Regional:
    mp_field = field_node__Regional->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("node_Regional")));
    break;
  default:
    break;
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  mp->add_elem(mp_field);
  return mp;
}

void NodeOffsetPoint::set_implicit_omit()
{
switch (union_selection) {
case ALT_node__XY1:
field_node__XY1->set_implicit_omit(); break;
case ALT_node__XY2:
field_node__XY2->set_implicit_omit(); break;
case ALT_node__XY3:
field_node__XY3->set_implicit_omit(); break;
case ALT_node__XY4:
field_node__XY4->set_implicit_omit(); break;
case ALT_node__XY5:
field_node__XY5->set_implicit_omit(); break;
case ALT_node__XY6:
field_node__XY6->set_implicit_omit(); break;
case ALT_node__LatLon:
field_node__LatLon->set_implicit_omit(); break;
case ALT_node__Regional:
field_node__Regional->set_implicit_omit(); break;
default: break;
}
}

void NodeOffsetPoint::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_node__XY1:
field_node__XY1->encode_text(text_buf);
break;
case ALT_node__XY2:
field_node__XY2->encode_text(text_buf);
break;
case ALT_node__XY3:
field_node__XY3->encode_text(text_buf);
break;
case ALT_node__XY4:
field_node__XY4->encode_text(text_buf);
break;
case ALT_node__XY5:
field_node__XY5->encode_text(text_buf);
break;
case ALT_node__XY6:
field_node__XY6->encode_text(text_buf);
break;
case ALT_node__LatLon:
field_node__LatLon->encode_text(text_buf);
break;
case ALT_node__Regional:
field_node__Regional->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @DSRC2.NodeOffsetPoint.");
}
}

void NodeOffsetPoint::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_node__XY1:
node__XY1().decode_text(text_buf);
break;
case ALT_node__XY2:
node__XY2().decode_text(text_buf);
break;
case ALT_node__XY3:
node__XY3().decode_text(text_buf);
break;
case ALT_node__XY4:
node__XY4().decode_text(text_buf);
break;
case ALT_node__XY5:
node__XY5().decode_text(text_buf);
break;
case ALT_node__XY6:
node__XY6().decode_text(text_buf);
break;
case ALT_node__LatLon:
node__LatLon().decode_text(text_buf);
break;
case ALT_node__Regional:
node__Regional().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @DSRC2.NodeOffsetPoint.");
}
}

void NodeOffsetPoint::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void NodeOffsetPoint::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t *NodeOffsetPoint::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv;
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  switch (union_selection) {
  case ALT_node__XY1:
    ec_1.set_msg("node_XY1': ");
    new_tlv = field_node__XY1->BER_encode_TLV(NodeOffsetPoint_node__XY1_descr_, p_coding);
    break;
  case ALT_node__XY2:
    ec_1.set_msg("node_XY2': ");
    new_tlv = field_node__XY2->BER_encode_TLV(NodeOffsetPoint_node__XY2_descr_, p_coding);
    break;
  case ALT_node__XY3:
    ec_1.set_msg("node_XY3': ");
    new_tlv = field_node__XY3->BER_encode_TLV(NodeOffsetPoint_node__XY3_descr_, p_coding);
    break;
  case ALT_node__XY4:
    ec_1.set_msg("node_XY4': ");
    new_tlv = field_node__XY4->BER_encode_TLV(NodeOffsetPoint_node__XY4_descr_, p_coding);
    break;
  case ALT_node__XY5:
    ec_1.set_msg("node_XY5': ");
    new_tlv = field_node__XY5->BER_encode_TLV(NodeOffsetPoint_node__XY5_descr_, p_coding);
    break;
  case ALT_node__XY6:
    ec_1.set_msg("node_XY6': ");
    new_tlv = field_node__XY6->BER_encode_TLV(NodeOffsetPoint_node__XY6_descr_, p_coding);
    break;
  case ALT_node__LatLon:
    ec_1.set_msg("node_LatLon': ");
    new_tlv = field_node__LatLon->BER_encode_TLV(NodeOffsetPoint_node__LatLon_descr_, p_coding);
    break;
  case ALT_node__Regional:
    ec_1.set_msg("node_Regional': ");
    new_tlv = field_node__Regional->BER_encode_TLV(NodeOffsetPoint_node__Regional_descr_, p_coding);
    break;
  case UNBOUND_VALUE:
    new_tlv = BER_encode_chk_bound(FALSE);
    break;
  default:
    TTCN_EncDec_ErrorContext::error_internal("Unknown selection.");
    new_tlv = NULL;
  }
  return ASN_BER_V2TLV(new_tlv, p_td, p_coding);
}

boolean NodeOffsetPoint::BER_decode_set_selection(const ASN_BER_TLV_t& p_tlv)
{
  clean_up();
  field_node__XY1 = new Node__XY__20b;
  union_selection = ALT_node__XY1;
  if (field_node__XY1->BER_decode_isMyMsg(NodeOffsetPoint_node__XY1_descr_, p_tlv)) return TRUE;
  delete field_node__XY1;
  field_node__XY2 = new Node__XY__22b;
  union_selection = ALT_node__XY2;
  if (field_node__XY2->BER_decode_isMyMsg(NodeOffsetPoint_node__XY2_descr_, p_tlv)) return TRUE;
  delete field_node__XY2;
  field_node__XY3 = new Node__XY__24b;
  union_selection = ALT_node__XY3;
  if (field_node__XY3->BER_decode_isMyMsg(NodeOffsetPoint_node__XY3_descr_, p_tlv)) return TRUE;
  delete field_node__XY3;
  field_node__XY4 = new Node__XY__26b;
  union_selection = ALT_node__XY4;
  if (field_node__XY4->BER_decode_isMyMsg(NodeOffsetPoint_node__XY4_descr_, p_tlv)) return TRUE;
  delete field_node__XY4;
  field_node__XY5 = new Node__XY__28b;
  union_selection = ALT_node__XY5;
  if (field_node__XY5->BER_decode_isMyMsg(NodeOffsetPoint_node__XY5_descr_, p_tlv)) return TRUE;
  delete field_node__XY5;
  field_node__XY6 = new Node__XY__32b;
  union_selection = ALT_node__XY6;
  if (field_node__XY6->BER_decode_isMyMsg(NodeOffsetPoint_node__XY6_descr_, p_tlv)) return TRUE;
  delete field_node__XY6;
  field_node__LatLon = new Node__LLmD__64b;
  union_selection = ALT_node__LatLon;
  if (field_node__LatLon->BER_decode_isMyMsg(NodeOffsetPoint_node__LatLon_descr_, p_tlv)) return TRUE;
  delete field_node__LatLon;
  field_node__Regional = new REGION::Reg__NodeOffsetPoint;
  union_selection = ALT_node__Regional;
  if (field_node__Regional->BER_decode_isMyMsg(NodeOffsetPoint_node__Regional_descr_, p_tlv)) return TRUE;
  delete field_node__Regional;
  union_selection = UNBOUND_VALUE;
  return FALSE;
}

boolean NodeOffsetPoint::BER_decode_isMyMsg(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv)
{
  if (p_td.ber->n_tags == 0) {
    NodeOffsetPoint tmp_type;
    return tmp_type.BER_decode_set_selection(p_tlv);
  } else return Base_Type::BER_decode_isMyMsg(p_td, p_tlv);
}

boolean NodeOffsetPoint::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.NodeOffsetPoint' type: ");
  ASN_BER_TLV_t tmp_tlv;
  if (!BER_decode_TLV_CHOICE(*p_td.ber, stripped_tlv, L_form, tmp_tlv) || !BER_decode_CHOICE_selection(BER_decode_set_selection(tmp_tlv), tmp_tlv)) return FALSE;
  TTCN_EncDec_ErrorContext ec_1("Alternative '");
  TTCN_EncDec_ErrorContext ec_2;
  switch (union_selection) {
  case ALT_node__XY1:
    ec_2.set_msg("node_XY1': ");
    field_node__XY1->BER_decode_TLV(NodeOffsetPoint_node__XY1_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__XY2:
    ec_2.set_msg("node_XY2': ");
    field_node__XY2->BER_decode_TLV(NodeOffsetPoint_node__XY2_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__XY3:
    ec_2.set_msg("node_XY3': ");
    field_node__XY3->BER_decode_TLV(NodeOffsetPoint_node__XY3_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__XY4:
    ec_2.set_msg("node_XY4': ");
    field_node__XY4->BER_decode_TLV(NodeOffsetPoint_node__XY4_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__XY5:
    ec_2.set_msg("node_XY5': ");
    field_node__XY5->BER_decode_TLV(NodeOffsetPoint_node__XY5_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__XY6:
    ec_2.set_msg("node_XY6': ");
    field_node__XY6->BER_decode_TLV(NodeOffsetPoint_node__XY6_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__LatLon:
    ec_2.set_msg("node_LatLon': ");
    field_node__LatLon->BER_decode_TLV(NodeOffsetPoint_node__LatLon_descr_, tmp_tlv, L_form);
    break;
  case ALT_node__Regional:
    ec_2.set_msg("node_Regional': ");
    field_node__Regional->BER_decode_TLV(NodeOffsetPoint_node__Regional_descr_, tmp_tlv, L_form);
    break;
  default:
    return FALSE;
  }
  return TRUE;
}

int NodeOffsetPoint::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_node__XY1:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_XY1");
    enc_len += field_node__XY1->JSON_encode(NodeOffsetPoint_node__XY1_descr_, p_tok);
    break;
  case ALT_node__XY2:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_XY2");
    enc_len += field_node__XY2->JSON_encode(NodeOffsetPoint_node__XY2_descr_, p_tok);
    break;
  case ALT_node__XY3:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_XY3");
    enc_len += field_node__XY3->JSON_encode(NodeOffsetPoint_node__XY3_descr_, p_tok);
    break;
  case ALT_node__XY4:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_XY4");
    enc_len += field_node__XY4->JSON_encode(NodeOffsetPoint_node__XY4_descr_, p_tok);
    break;
  case ALT_node__XY5:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_XY5");
    enc_len += field_node__XY5->JSON_encode(NodeOffsetPoint_node__XY5_descr_, p_tok);
    break;
  case ALT_node__XY6:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_XY6");
    enc_len += field_node__XY6->JSON_encode(NodeOffsetPoint_node__XY6_descr_, p_tok);
    break;
  case ALT_node__LatLon:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_LatLon");
    enc_len += field_node__LatLon->JSON_encode(NodeOffsetPoint_node__LatLon_descr_, p_tok);
    break;
  case ALT_node__Regional:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node_Regional");
    enc_len += field_node__Regional->JSON_encode(NodeOffsetPoint_node__Regional_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @DSRC2.NodeOffsetPoint.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int NodeOffsetPoint::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "node_XY1", name_len)) {
      int ret_val = node__XY1().JSON_decode(NodeOffsetPoint_node__XY1_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_XY1");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_XY2", name_len)) {
      int ret_val = node__XY2().JSON_decode(NodeOffsetPoint_node__XY2_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_XY2");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_XY3", name_len)) {
      int ret_val = node__XY3().JSON_decode(NodeOffsetPoint_node__XY3_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_XY3");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_XY4", name_len)) {
      int ret_val = node__XY4().JSON_decode(NodeOffsetPoint_node__XY4_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_XY4");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_XY5", name_len)) {
      int ret_val = node__XY5().JSON_decode(NodeOffsetPoint_node__XY5_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_XY5");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_XY6", name_len)) {
      int ret_val = node__XY6().JSON_decode(NodeOffsetPoint_node__XY6_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_XY6");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_LatLon", name_len)) {
      int ret_val = node__LatLon().JSON_decode(NodeOffsetPoint_node__LatLon_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_LatLon");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "node_Regional", name_len)) {
      int ret_val = node__Regional().JSON_decode(NodeOffsetPoint_node__Regional_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node_Regional");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void NodeOffsetPoint_template::copy_value(const NodeOffsetPoint& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
single_value.field_node__XY1 = new Node__XY__20b_template(other_value.node__XY1());
break;
case NodeOffsetPoint::ALT_node__XY2:
single_value.field_node__XY2 = new Node__XY__22b_template(other_value.node__XY2());
break;
case NodeOffsetPoint::ALT_node__XY3:
single_value.field_node__XY3 = new Node__XY__24b_template(other_value.node__XY3());
break;
case NodeOffsetPoint::ALT_node__XY4:
single_value.field_node__XY4 = new Node__XY__26b_template(other_value.node__XY4());
break;
case NodeOffsetPoint::ALT_node__XY5:
single_value.field_node__XY5 = new Node__XY__28b_template(other_value.node__XY5());
break;
case NodeOffsetPoint::ALT_node__XY6:
single_value.field_node__XY6 = new Node__XY__32b_template(other_value.node__XY6());
break;
case NodeOffsetPoint::ALT_node__LatLon:
single_value.field_node__LatLon = new Node__LLmD__64b_template(other_value.node__LatLon());
break;
case NodeOffsetPoint::ALT_node__Regional:
single_value.field_node__Regional = new REGION::Reg__NodeOffsetPoint_template(other_value.node__Regional());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @DSRC2.NodeOffsetPoint.");
}
set_selection(SPECIFIC_VALUE);
}

void NodeOffsetPoint_template::copy_template(const NodeOffsetPoint_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
single_value.field_node__XY1 = new Node__XY__20b_template(*other_value.single_value.field_node__XY1);
break;
case NodeOffsetPoint::ALT_node__XY2:
single_value.field_node__XY2 = new Node__XY__22b_template(*other_value.single_value.field_node__XY2);
break;
case NodeOffsetPoint::ALT_node__XY3:
single_value.field_node__XY3 = new Node__XY__24b_template(*other_value.single_value.field_node__XY3);
break;
case NodeOffsetPoint::ALT_node__XY4:
single_value.field_node__XY4 = new Node__XY__26b_template(*other_value.single_value.field_node__XY4);
break;
case NodeOffsetPoint::ALT_node__XY5:
single_value.field_node__XY5 = new Node__XY__28b_template(*other_value.single_value.field_node__XY5);
break;
case NodeOffsetPoint::ALT_node__XY6:
single_value.field_node__XY6 = new Node__XY__32b_template(*other_value.single_value.field_node__XY6);
break;
case NodeOffsetPoint::ALT_node__LatLon:
single_value.field_node__LatLon = new Node__LLmD__64b_template(*other_value.single_value.field_node__LatLon);
break;
case NodeOffsetPoint::ALT_node__Regional:
single_value.field_node__Regional = new REGION::Reg__NodeOffsetPoint_template(*other_value.single_value.field_node__Regional);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @DSRC2.NodeOffsetPoint.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new NodeOffsetPoint_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @DSRC2.NodeOffsetPoint.");
}
set_selection(other_value);
}

NodeOffsetPoint_template::NodeOffsetPoint_template()
{
}

NodeOffsetPoint_template::NodeOffsetPoint_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

NodeOffsetPoint_template::NodeOffsetPoint_template(const NodeOffsetPoint& other_value)
{
copy_value(other_value);
}

NodeOffsetPoint_template::NodeOffsetPoint_template(const OPTIONAL<NodeOffsetPoint>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const NodeOffsetPoint&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @DSRC2.NodeOffsetPoint from an unbound optional field.");
}
}

NodeOffsetPoint_template::NodeOffsetPoint_template(const NodeOffsetPoint_template& other_value)
: Base_Template(){
copy_template(other_value);
}

NodeOffsetPoint_template::~NodeOffsetPoint_template()
{
clean_up();
}

void NodeOffsetPoint_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
delete single_value.field_node__XY1;
break;
case NodeOffsetPoint::ALT_node__XY2:
delete single_value.field_node__XY2;
break;
case NodeOffsetPoint::ALT_node__XY3:
delete single_value.field_node__XY3;
break;
case NodeOffsetPoint::ALT_node__XY4:
delete single_value.field_node__XY4;
break;
case NodeOffsetPoint::ALT_node__XY5:
delete single_value.field_node__XY5;
break;
case NodeOffsetPoint::ALT_node__XY6:
delete single_value.field_node__XY6;
break;
case NodeOffsetPoint::ALT_node__LatLon:
delete single_value.field_node__LatLon;
break;
case NodeOffsetPoint::ALT_node__Regional:
delete single_value.field_node__Regional;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

NodeOffsetPoint_template& NodeOffsetPoint_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

NodeOffsetPoint_template& NodeOffsetPoint_template::operator=(const NodeOffsetPoint& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

NodeOffsetPoint_template& NodeOffsetPoint_template::operator=(const OPTIONAL<NodeOffsetPoint>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const NodeOffsetPoint&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @DSRC2.NodeOffsetPoint.");
}
return *this;
}

NodeOffsetPoint_template& NodeOffsetPoint_template::operator=(const NodeOffsetPoint_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean NodeOffsetPoint_template::match(const NodeOffsetPoint& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
NodeOffsetPoint::union_selection_type value_selection = other_value.get_selection();
if (value_selection == NodeOffsetPoint::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case NodeOffsetPoint::ALT_node__XY1:
return single_value.field_node__XY1->match(other_value.node__XY1(), legacy);
case NodeOffsetPoint::ALT_node__XY2:
return single_value.field_node__XY2->match(other_value.node__XY2(), legacy);
case NodeOffsetPoint::ALT_node__XY3:
return single_value.field_node__XY3->match(other_value.node__XY3(), legacy);
case NodeOffsetPoint::ALT_node__XY4:
return single_value.field_node__XY4->match(other_value.node__XY4(), legacy);
case NodeOffsetPoint::ALT_node__XY5:
return single_value.field_node__XY5->match(other_value.node__XY5(), legacy);
case NodeOffsetPoint::ALT_node__XY6:
return single_value.field_node__XY6->match(other_value.node__XY6(), legacy);
case NodeOffsetPoint::ALT_node__LatLon:
return single_value.field_node__LatLon->match(other_value.node__LatLon(), legacy);
case NodeOffsetPoint::ALT_node__Regional:
return single_value.field_node__Regional->match(other_value.node__Regional(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @DSRC2.NodeOffsetPoint.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @DSRC2.NodeOffsetPoint.");
}
return FALSE;
}

boolean NodeOffsetPoint_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
return single_value.field_node__XY1->is_value();
case NodeOffsetPoint::ALT_node__XY2:
return single_value.field_node__XY2->is_value();
case NodeOffsetPoint::ALT_node__XY3:
return single_value.field_node__XY3->is_value();
case NodeOffsetPoint::ALT_node__XY4:
return single_value.field_node__XY4->is_value();
case NodeOffsetPoint::ALT_node__XY5:
return single_value.field_node__XY5->is_value();
case NodeOffsetPoint::ALT_node__XY6:
return single_value.field_node__XY6->is_value();
case NodeOffsetPoint::ALT_node__LatLon:
return single_value.field_node__LatLon->is_value();
case NodeOffsetPoint::ALT_node__Regional:
return single_value.field_node__Regional->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @DSRC2.NodeOffsetPoint.");
}
}

NodeOffsetPoint NodeOffsetPoint_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @DSRC2.NodeOffsetPoint.");
NodeOffsetPoint ret_val;
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
ret_val.node__XY1() = single_value.field_node__XY1->valueof();
break;
case NodeOffsetPoint::ALT_node__XY2:
ret_val.node__XY2() = single_value.field_node__XY2->valueof();
break;
case NodeOffsetPoint::ALT_node__XY3:
ret_val.node__XY3() = single_value.field_node__XY3->valueof();
break;
case NodeOffsetPoint::ALT_node__XY4:
ret_val.node__XY4() = single_value.field_node__XY4->valueof();
break;
case NodeOffsetPoint::ALT_node__XY5:
ret_val.node__XY5() = single_value.field_node__XY5->valueof();
break;
case NodeOffsetPoint::ALT_node__XY6:
ret_val.node__XY6() = single_value.field_node__XY6->valueof();
break;
case NodeOffsetPoint::ALT_node__LatLon:
ret_val.node__LatLon() = single_value.field_node__LatLon->valueof();
break;
case NodeOffsetPoint::ALT_node__Regional:
ret_val.node__Regional() = single_value.field_node__Regional->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @DSRC2.NodeOffsetPoint.");
}
return ret_val;
}

NodeOffsetPoint_template& NodeOffsetPoint_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @DSRC2.NodeOffsetPoint.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @DSRC2.NodeOffsetPoint.");
return value_list.list_value[list_index];
}
void NodeOffsetPoint_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @DSRC2.NodeOffsetPoint.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new NodeOffsetPoint_template[list_length];
}

Node__XY__20b_template& NodeOffsetPoint_template::node__XY1()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__XY1) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__XY1 = new Node__XY__20b_template(ANY_VALUE);
else single_value.field_node__XY1 = new Node__XY__20b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__XY1;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__XY1;
}

const Node__XY__20b_template& NodeOffsetPoint_template::node__XY1() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_XY1 in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__XY1) TTCN_error("Accessing non-selected field node_XY1 in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__XY1;
}

Node__XY__22b_template& NodeOffsetPoint_template::node__XY2()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__XY2) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__XY2 = new Node__XY__22b_template(ANY_VALUE);
else single_value.field_node__XY2 = new Node__XY__22b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__XY2;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__XY2;
}

const Node__XY__22b_template& NodeOffsetPoint_template::node__XY2() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_XY2 in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__XY2) TTCN_error("Accessing non-selected field node_XY2 in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__XY2;
}

Node__XY__24b_template& NodeOffsetPoint_template::node__XY3()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__XY3) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__XY3 = new Node__XY__24b_template(ANY_VALUE);
else single_value.field_node__XY3 = new Node__XY__24b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__XY3;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__XY3;
}

const Node__XY__24b_template& NodeOffsetPoint_template::node__XY3() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_XY3 in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__XY3) TTCN_error("Accessing non-selected field node_XY3 in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__XY3;
}

Node__XY__26b_template& NodeOffsetPoint_template::node__XY4()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__XY4) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__XY4 = new Node__XY__26b_template(ANY_VALUE);
else single_value.field_node__XY4 = new Node__XY__26b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__XY4;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__XY4;
}

const Node__XY__26b_template& NodeOffsetPoint_template::node__XY4() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_XY4 in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__XY4) TTCN_error("Accessing non-selected field node_XY4 in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__XY4;
}

Node__XY__28b_template& NodeOffsetPoint_template::node__XY5()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__XY5) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__XY5 = new Node__XY__28b_template(ANY_VALUE);
else single_value.field_node__XY5 = new Node__XY__28b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__XY5;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__XY5;
}

const Node__XY__28b_template& NodeOffsetPoint_template::node__XY5() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_XY5 in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__XY5) TTCN_error("Accessing non-selected field node_XY5 in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__XY5;
}

Node__XY__32b_template& NodeOffsetPoint_template::node__XY6()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__XY6) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__XY6 = new Node__XY__32b_template(ANY_VALUE);
else single_value.field_node__XY6 = new Node__XY__32b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__XY6;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__XY6;
}

const Node__XY__32b_template& NodeOffsetPoint_template::node__XY6() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_XY6 in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__XY6) TTCN_error("Accessing non-selected field node_XY6 in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__XY6;
}

Node__LLmD__64b_template& NodeOffsetPoint_template::node__LatLon()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__LatLon) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__LatLon = new Node__LLmD__64b_template(ANY_VALUE);
else single_value.field_node__LatLon = new Node__LLmD__64b_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__LatLon;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__LatLon;
}

const Node__LLmD__64b_template& NodeOffsetPoint_template::node__LatLon() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_LatLon in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__LatLon) TTCN_error("Accessing non-selected field node_LatLon in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__LatLon;
}

REGION::Reg__NodeOffsetPoint_template& NodeOffsetPoint_template::node__Regional()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != NodeOffsetPoint::ALT_node__Regional) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_node__Regional = new REGION::Reg__NodeOffsetPoint_template(ANY_VALUE);
else single_value.field_node__Regional = new REGION::Reg__NodeOffsetPoint_template;
single_value.union_selection = NodeOffsetPoint::ALT_node__Regional;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_node__Regional;
}

const REGION::Reg__NodeOffsetPoint_template& NodeOffsetPoint_template::node__Regional() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field node_Regional in a non-specific template of union type @DSRC2.NodeOffsetPoint.");
if (single_value.union_selection != NodeOffsetPoint::ALT_node__Regional) TTCN_error("Accessing non-selected field node_Regional in a template of union type @DSRC2.NodeOffsetPoint.");
return *single_value.field_node__Regional;
}

boolean NodeOffsetPoint_template::ischosen(NodeOffsetPoint::union_selection_type checked_selection) const
{
if (checked_selection == NodeOffsetPoint::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @DSRC2.NodeOffsetPoint.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == NodeOffsetPoint::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @DSRC2.NodeOffsetPoint.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @DSRC2.NodeOffsetPoint containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @DSRC2.NodeOffsetPoint, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @DSRC2.NodeOffsetPoint");
}
return FALSE;
}

void NodeOffsetPoint_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
TTCN_Logger::log_event_str("{ node_XY1 := ");
single_value.field_node__XY1->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__XY2:
TTCN_Logger::log_event_str("{ node_XY2 := ");
single_value.field_node__XY2->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__XY3:
TTCN_Logger::log_event_str("{ node_XY3 := ");
single_value.field_node__XY3->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__XY4:
TTCN_Logger::log_event_str("{ node_XY4 := ");
single_value.field_node__XY4->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__XY5:
TTCN_Logger::log_event_str("{ node_XY5 := ");
single_value.field_node__XY5->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__XY6:
TTCN_Logger::log_event_str("{ node_XY6 := ");
single_value.field_node__XY6->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__LatLon:
TTCN_Logger::log_event_str("{ node_LatLon := ");
single_value.field_node__LatLon->log();
TTCN_Logger::log_event_str(" }");
break;
case NodeOffsetPoint::ALT_node__Regional:
TTCN_Logger::log_event_str("{ node_Regional := ");
single_value.field_node__Regional->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void NodeOffsetPoint_template::log_match(const NodeOffsetPoint& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_XY1");
single_value.field_node__XY1->log_match(match_value.node__XY1(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_XY1 := ");
single_value.field_node__XY1->log_match(match_value.node__XY1(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__XY2:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_XY2");
single_value.field_node__XY2->log_match(match_value.node__XY2(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_XY2 := ");
single_value.field_node__XY2->log_match(match_value.node__XY2(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__XY3:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_XY3");
single_value.field_node__XY3->log_match(match_value.node__XY3(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_XY3 := ");
single_value.field_node__XY3->log_match(match_value.node__XY3(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__XY4:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_XY4");
single_value.field_node__XY4->log_match(match_value.node__XY4(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_XY4 := ");
single_value.field_node__XY4->log_match(match_value.node__XY4(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__XY5:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_XY5");
single_value.field_node__XY5->log_match(match_value.node__XY5(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_XY5 := ");
single_value.field_node__XY5->log_match(match_value.node__XY5(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__XY6:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_XY6");
single_value.field_node__XY6->log_match(match_value.node__XY6(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_XY6 := ");
single_value.field_node__XY6->log_match(match_value.node__XY6(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__LatLon:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_LatLon");
single_value.field_node__LatLon->log_match(match_value.node__LatLon(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_LatLon := ");
single_value.field_node__LatLon->log_match(match_value.node__LatLon(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case NodeOffsetPoint::ALT_node__Regional:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".node_Regional");
single_value.field_node__Regional->log_match(match_value.node__Regional(), legacy);
} else {
TTCN_Logger::log_event_str("{ node_Regional := ");
single_value.field_node__Regional->log_match(match_value.node__Regional(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void NodeOffsetPoint_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
single_value.field_node__XY1->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY2:
single_value.field_node__XY2->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY3:
single_value.field_node__XY3->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY4:
single_value.field_node__XY4->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY5:
single_value.field_node__XY5->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY6:
single_value.field_node__XY6->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__LatLon:
single_value.field_node__LatLon->encode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__Regional:
single_value.field_node__Regional->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @DSRC2.NodeOffsetPoint.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @DSRC2.NodeOffsetPoint.");
}
}

void NodeOffsetPoint_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = NodeOffsetPoint::UNBOUND_VALUE;
NodeOffsetPoint::union_selection_type new_selection = (NodeOffsetPoint::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case NodeOffsetPoint::ALT_node__XY1:
single_value.field_node__XY1 = new Node__XY__20b_template;
single_value.field_node__XY1->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY2:
single_value.field_node__XY2 = new Node__XY__22b_template;
single_value.field_node__XY2->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY3:
single_value.field_node__XY3 = new Node__XY__24b_template;
single_value.field_node__XY3->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY4:
single_value.field_node__XY4 = new Node__XY__26b_template;
single_value.field_node__XY4->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY5:
single_value.field_node__XY5 = new Node__XY__28b_template;
single_value.field_node__XY5->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__XY6:
single_value.field_node__XY6 = new Node__XY__32b_template;
single_value.field_node__XY6->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__LatLon:
single_value.field_node__LatLon = new Node__LLmD__64b_template;
single_value.field_node__LatLon->decode_text(text_buf);
break;
case NodeOffsetPoint::ALT_node__Regional:
single_value.field_node__Regional = new REGION::Reg__NodeOffsetPoint_template;
single_value.field_node__Regional->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @DSRC2.NodeOffsetPoint.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new NodeOffsetPoint_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @DSRC2.NodeOffsetPoint.");
}
}

boolean NodeOffsetPoint_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean NodeOffsetPoint_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void NodeOffsetPoint_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@DSRC2.NodeOffsetPoint'");
    }
    if (strcmp("node_XY1", param_field) == 0) {
      node__XY1().set_param(param);
      return;
    } else if (strcmp("node_XY2", param_field) == 0) {
      node__XY2().set_param(param);
      return;
    } else if (strcmp("node_XY3", param_field) == 0) {
      node__XY3().set_param(param);
      return;
    } else if (strcmp("node_XY4", param_field) == 0) {
      node__XY4().set_param(param);
      return;
    } else if (strcmp("node_XY5", param_field) == 0) {
      node__XY5().set_param(param);
      return;
    } else if (strcmp("node_XY6", param_field) == 0) {
      node__XY6().set_param(param);
      return;
    } else if (strcmp("node_LatLon", param_field) == 0) {
      node__LatLon().set_param(param);
      return;
    } else if (strcmp("node_Regional", param_field) == 0) {
      node__Regional().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@DSRC2.NodeOffsetPoint'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    NodeOffsetPoint_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (mp->get_size()==0) break;
    param.type_error("union template", "@DSRC2.NodeOffsetPoint");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = mp->get_elem(mp->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "node_XY1")) {
      node__XY1().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_XY2")) {
      node__XY2().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_XY3")) {
      node__XY3().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_XY4")) {
      node__XY4().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_XY5")) {
      node__XY5().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_XY6")) {
      node__XY6().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_LatLon")) {
      node__LatLon().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "node_Regional")) {
      node__Regional().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @DSRC2.NodeOffsetPoint.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@DSRC2.NodeOffsetPoint");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* NodeOffsetPoint_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for union template type `@DSRC2.NodeOffsetPoint'");
    }
    if (strcmp("node_XY1", param_field) == 0) {
      return node__XY1().get_param(param_name);
    } else if (strcmp("node_XY2", param_field) == 0) {
      return node__XY2().get_param(param_name);
    } else if (strcmp("node_XY3", param_field) == 0) {
      return node__XY3().get_param(param_name);
    } else if (strcmp("node_XY4", param_field) == 0) {
      return node__XY4().get_param(param_name);
    } else if (strcmp("node_XY5", param_field) == 0) {
      return node__XY5().get_param(param_name);
    } else if (strcmp("node_XY6", param_field) == 0) {
      return node__XY6().get_param(param_name);
    } else if (strcmp("node_LatLon", param_field) == 0) {
      return node__LatLon().get_param(param_name);
    } else if (strcmp("node_Regional", param_field) == 0) {
      return node__Regional().get_param(param_name);
    } else TTCN_error("Field `%s' not found in union type `NodeOffsetPoint'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Module_Param* mp_field = NULL;
    switch(single_value.union_selection) {
    case NodeOffsetPoint::ALT_node__XY1:
      mp_field = single_value.field_node__XY1->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY1")));
      break;
    case NodeOffsetPoint::ALT_node__XY2:
      mp_field = single_value.field_node__XY2->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY2")));
      break;
    case NodeOffsetPoint::ALT_node__XY3:
      mp_field = single_value.field_node__XY3->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY3")));
      break;
    case NodeOffsetPoint::ALT_node__XY4:
      mp_field = single_value.field_node__XY4->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY4")));
      break;
    case NodeOffsetPoint::ALT_node__XY5:
      mp_field = single_value.field_node__XY5->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY5")));
      break;
    case NodeOffsetPoint::ALT_node__XY6:
      mp_field = single_value.field_node__XY6->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_XY6")));
      break;
    case NodeOffsetPoint::ALT_node__LatLon:
      mp_field = single_value.field_node__LatLon->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_LatLon")));
      break;
    case NodeOffsetPoint::ALT_node__Regional:
      mp_field = single_value.field_node__Regional->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("node_Regional")));
      break;
    default:
      break;
    }
    mp = new Module_Param_Assignment_List();
    mp->add_elem(mp_field);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void NodeOffsetPoint_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case NodeOffsetPoint::ALT_node__XY1:
single_value.field_node__XY1->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__XY2:
single_value.field_node__XY2->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__XY3:
single_value.field_node__XY3->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__XY4:
single_value.field_node__XY4->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__XY5:
single_value.field_node__XY5->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__XY6:
single_value.field_node__XY6->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__LatLon:
single_value.field_node__LatLon->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
case NodeOffsetPoint::ALT_node__Regional:
single_value.field_node__Regional->check_restriction(t_res, t_name ? t_name : "@DSRC2.NodeOffsetPoint");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @DSRC2.NodeOffsetPoint.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.NodeOffsetPoint");
}

Node__XY__20b::Node__XY__20b()
{
  bound_flag = FALSE;
}

Node__XY__20b::Node__XY__20b(const INTEGER& par_x,
    const INTEGER& par_y)
  :   field_x(par_x),
  field_y(par_y)
{
  bound_flag = TRUE;
}

Node__XY__20b::Node__XY__20b(const Node__XY__20b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-XY-20b.");
bound_flag = TRUE;
if (other_value.x().is_bound()) field_x = other_value.x();
else field_x.clean_up();
if (other_value.y().is_bound()) field_y = other_value.y();
else field_y.clean_up();
}

void Node__XY__20b::clean_up()
{
field_x.clean_up();
field_y.clean_up();
bound_flag = FALSE;
}

Node__XY__20b& Node__XY__20b::operator=(const Node__XY__20b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-XY-20b.");
  bound_flag = TRUE;
  if (other_value.x().is_bound()) field_x = other_value.x();
  else field_x.clean_up();
  if (other_value.y().is_bound()) field_y = other_value.y();
  else field_y.clean_up();
}
return *this;
}

boolean Node__XY__20b::operator==(const Node__XY__20b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_x==other_value.field_x
  && field_y==other_value.field_y;
}

boolean Node__XY__20b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_x.is_bound()) return TRUE;
if(field_y.is_bound()) return TRUE;
return FALSE;
}
boolean Node__XY__20b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_x.is_value()) return FALSE;
if(!field_y.is_value()) return FALSE;
return TRUE;
}
int Node__XY__20b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-XY-20b");
  return 2;
}

void Node__XY__20b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ x := ");
field_x.log();
TTCN_Logger::log_event_str(", y := ");
field_y.log();
TTCN_Logger::log_event_str(" }");
}

void Node__XY__20b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-XY-20b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-XY-20b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-XY-20b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-20b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-XY-20b");
  }
}

Module_Param* Node__XY__20b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-XY-20b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-20b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_x = field_x.get_param(param_name);
  mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
  mp->add_elem(mp_field_x);
  Module_Param* mp_field_y = field_y.get_param(param_name);
  mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
  mp->add_elem(mp_field_y);
  return mp;
  }

void Node__XY__20b::set_implicit_omit()
{
if (x().is_bound()) x().set_implicit_omit();
if (y().is_bound()) y().set_implicit_omit();
}

void Node__XY__20b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-XY-20b.");
field_x.encode_text(text_buf);
field_y.encode_text(text_buf);
}

void Node__XY__20b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_x.decode_text(text_buf);
field_y.decode_text(text_buf);
}

void Node__XY__20b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__XY__20b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__XY__20b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("x': ");
  new_tlv->add_TLV(field_x.BER_encode_TLV(Node__XY__20b_x_descr_, p_coding));
  ec_1.set_msg("y': ");
  new_tlv->add_TLV(field_y.BER_encode_TLV(Node__XY__20b_y_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__XY__20b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-XY-20b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("x': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_x.BER_decode_TLV(Node__XY__20b_x_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("y': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_y.BER_decode_TLV(Node__XY__20b_y_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__XY__20b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-XY-20b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x.JSON_encode(Node__XY__20b_x_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "y");
    enc_len += field_y.JSON_encode(Node__XY__20b_y_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__XY__20b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "x", name_len)) {
         int ret_val = field_x.JSON_decode(Node__XY__20b_x_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "y", name_len)) {
         int ret_val = field_y.JSON_decode(Node__XY__20b_y_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "y");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_x.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "x");
    return JSON_ERROR_FATAL;
  }
if (!field_y.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "y");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__XY__20b_template::single_value_struct {
INTEGER_template field_x;
INTEGER_template field_y;
};

void Node__XY__20b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_x = ANY_VALUE;
single_value->field_y = ANY_VALUE;
}
}
}

void Node__XY__20b_template::copy_value(const Node__XY__20b& other_value)
{
single_value = new single_value_struct;
if (other_value.x().is_bound()) {
  single_value->field_x = other_value.x();
} else {
  single_value->field_x.clean_up();
}
if (other_value.y().is_bound()) {
  single_value->field_y = other_value.y();
} else {
  single_value->field_y.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__XY__20b_template::copy_template(const Node__XY__20b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.x().get_selection()) {
single_value->field_x = other_value.x();
} else {
single_value->field_x.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.y().get_selection()) {
single_value->field_y = other_value.y();
} else {
single_value->field_y.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__XY__20b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-XY-20b.");
break;
}
set_selection(other_value);
}

Node__XY__20b_template::Node__XY__20b_template()
{
}

Node__XY__20b_template::Node__XY__20b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__XY__20b_template::Node__XY__20b_template(const Node__XY__20b& other_value)
{
copy_value(other_value);
}

Node__XY__20b_template::Node__XY__20b_template(const OPTIONAL<Node__XY__20b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__20b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-XY-20b from an unbound optional field.");
}
}

Node__XY__20b_template::Node__XY__20b_template(const Node__XY__20b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__XY__20b_template::~Node__XY__20b_template()
{
clean_up();
}

Node__XY__20b_template& Node__XY__20b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__XY__20b_template& Node__XY__20b_template::operator=(const Node__XY__20b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__XY__20b_template& Node__XY__20b_template::operator=(const OPTIONAL<Node__XY__20b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__20b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-XY-20b.");
}
return *this;
}

Node__XY__20b_template& Node__XY__20b_template::operator=(const Node__XY__20b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__XY__20b_template::match(const Node__XY__20b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.x().is_bound()) return FALSE;
if(!single_value->field_x.match(other_value.x(), legacy))return FALSE;
if(!other_value.y().is_bound()) return FALSE;
if(!single_value->field_y.match(other_value.y(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-XY-20b.");
}
return FALSE;
}

boolean Node__XY__20b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_x.is_bound()) return TRUE;
if (single_value->field_y.is_bound()) return TRUE;
return FALSE;
}

boolean Node__XY__20b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_x.is_value()) return FALSE;
if (!single_value->field_y.is_value()) return FALSE;
return TRUE;
}

void Node__XY__20b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__XY__20b Node__XY__20b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-XY-20b.");
Node__XY__20b ret_val;
if (single_value->field_x.is_bound()) {
ret_val.x() = single_value->field_x.valueof();
}
if (single_value->field_y.is_bound()) {
ret_val.y() = single_value->field_y.valueof();
}
return ret_val;
}

void Node__XY__20b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-XY-20b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__XY__20b_template[list_length];
}

Node__XY__20b_template& Node__XY__20b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-XY-20b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-XY-20b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__XY__20b_template::x()
{
set_specific();
return single_value->field_x;
}

const INTEGER_template& Node__XY__20b_template::x() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field x of a non-specific template of type @DSRC2.Node-XY-20b.");
return single_value->field_x;
}

INTEGER_template& Node__XY__20b_template::y()
{
set_specific();
return single_value->field_y;
}

const INTEGER_template& Node__XY__20b_template::y() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field y of a non-specific template of type @DSRC2.Node-XY-20b.");
return single_value->field_y;
}

int Node__XY__20b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-20b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-XY-20b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-20b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-20b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-20b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-20b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-XY-20b.");
  }
  return 0;
}

void Node__XY__20b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log();
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__XY__20b_template::log_match(const Node__XY__20b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_x.match(match_value.x(), legacy)){
TTCN_Logger::log_logmatch_info(".x");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_y.match(match_value.y(), legacy)){
TTCN_Logger::log_logmatch_info(".y");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__XY__20b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_x.encode_text(text_buf);
single_value->field_y.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-XY-20b.");
}
}

void Node__XY__20b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_x.decode_text(text_buf);
single_value->field_y.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__XY__20b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-XY-20b.");
}
}

void Node__XY__20b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-XY-20b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-XY-20b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__XY__20b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-XY-20b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-20b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-XY-20b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__XY__20b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-XY-20b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-20b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_x = single_value->field_x.get_param(param_name);
    mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
    mp->add_elem(mp_field_x);
    Module_Param* mp_field_y = single_value->field_y.get_param(param_name);
    mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
    mp->add_elem(mp_field_y);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__XY__20b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_x.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-20b");
single_value->field_y.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-20b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-XY-20b");
}

boolean Node__XY__20b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__XY__20b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Node__XY__22b::Node__XY__22b()
{
  bound_flag = FALSE;
}

Node__XY__22b::Node__XY__22b(const INTEGER& par_x,
    const INTEGER& par_y)
  :   field_x(par_x),
  field_y(par_y)
{
  bound_flag = TRUE;
}

Node__XY__22b::Node__XY__22b(const Node__XY__22b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-XY-22b.");
bound_flag = TRUE;
if (other_value.x().is_bound()) field_x = other_value.x();
else field_x.clean_up();
if (other_value.y().is_bound()) field_y = other_value.y();
else field_y.clean_up();
}

void Node__XY__22b::clean_up()
{
field_x.clean_up();
field_y.clean_up();
bound_flag = FALSE;
}

Node__XY__22b& Node__XY__22b::operator=(const Node__XY__22b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-XY-22b.");
  bound_flag = TRUE;
  if (other_value.x().is_bound()) field_x = other_value.x();
  else field_x.clean_up();
  if (other_value.y().is_bound()) field_y = other_value.y();
  else field_y.clean_up();
}
return *this;
}

boolean Node__XY__22b::operator==(const Node__XY__22b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_x==other_value.field_x
  && field_y==other_value.field_y;
}

boolean Node__XY__22b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_x.is_bound()) return TRUE;
if(field_y.is_bound()) return TRUE;
return FALSE;
}
boolean Node__XY__22b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_x.is_value()) return FALSE;
if(!field_y.is_value()) return FALSE;
return TRUE;
}
int Node__XY__22b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-XY-22b");
  return 2;
}

void Node__XY__22b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ x := ");
field_x.log();
TTCN_Logger::log_event_str(", y := ");
field_y.log();
TTCN_Logger::log_event_str(" }");
}

void Node__XY__22b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-XY-22b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-XY-22b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-XY-22b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-22b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-XY-22b");
  }
}

Module_Param* Node__XY__22b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-XY-22b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-22b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_x = field_x.get_param(param_name);
  mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
  mp->add_elem(mp_field_x);
  Module_Param* mp_field_y = field_y.get_param(param_name);
  mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
  mp->add_elem(mp_field_y);
  return mp;
  }

void Node__XY__22b::set_implicit_omit()
{
if (x().is_bound()) x().set_implicit_omit();
if (y().is_bound()) y().set_implicit_omit();
}

void Node__XY__22b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-XY-22b.");
field_x.encode_text(text_buf);
field_y.encode_text(text_buf);
}

void Node__XY__22b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_x.decode_text(text_buf);
field_y.decode_text(text_buf);
}

void Node__XY__22b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__XY__22b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__XY__22b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("x': ");
  new_tlv->add_TLV(field_x.BER_encode_TLV(Node__XY__22b_x_descr_, p_coding));
  ec_1.set_msg("y': ");
  new_tlv->add_TLV(field_y.BER_encode_TLV(Node__XY__22b_y_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__XY__22b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-XY-22b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("x': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_x.BER_decode_TLV(Node__XY__22b_x_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("y': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_y.BER_decode_TLV(Node__XY__22b_y_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__XY__22b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-XY-22b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x.JSON_encode(Node__XY__22b_x_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "y");
    enc_len += field_y.JSON_encode(Node__XY__22b_y_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__XY__22b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "x", name_len)) {
         int ret_val = field_x.JSON_decode(Node__XY__22b_x_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "y", name_len)) {
         int ret_val = field_y.JSON_decode(Node__XY__22b_y_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "y");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_x.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "x");
    return JSON_ERROR_FATAL;
  }
if (!field_y.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "y");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__XY__22b_template::single_value_struct {
INTEGER_template field_x;
INTEGER_template field_y;
};

void Node__XY__22b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_x = ANY_VALUE;
single_value->field_y = ANY_VALUE;
}
}
}

void Node__XY__22b_template::copy_value(const Node__XY__22b& other_value)
{
single_value = new single_value_struct;
if (other_value.x().is_bound()) {
  single_value->field_x = other_value.x();
} else {
  single_value->field_x.clean_up();
}
if (other_value.y().is_bound()) {
  single_value->field_y = other_value.y();
} else {
  single_value->field_y.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__XY__22b_template::copy_template(const Node__XY__22b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.x().get_selection()) {
single_value->field_x = other_value.x();
} else {
single_value->field_x.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.y().get_selection()) {
single_value->field_y = other_value.y();
} else {
single_value->field_y.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__XY__22b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-XY-22b.");
break;
}
set_selection(other_value);
}

Node__XY__22b_template::Node__XY__22b_template()
{
}

Node__XY__22b_template::Node__XY__22b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__XY__22b_template::Node__XY__22b_template(const Node__XY__22b& other_value)
{
copy_value(other_value);
}

Node__XY__22b_template::Node__XY__22b_template(const OPTIONAL<Node__XY__22b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__22b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-XY-22b from an unbound optional field.");
}
}

Node__XY__22b_template::Node__XY__22b_template(const Node__XY__22b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__XY__22b_template::~Node__XY__22b_template()
{
clean_up();
}

Node__XY__22b_template& Node__XY__22b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__XY__22b_template& Node__XY__22b_template::operator=(const Node__XY__22b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__XY__22b_template& Node__XY__22b_template::operator=(const OPTIONAL<Node__XY__22b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__22b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-XY-22b.");
}
return *this;
}

Node__XY__22b_template& Node__XY__22b_template::operator=(const Node__XY__22b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__XY__22b_template::match(const Node__XY__22b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.x().is_bound()) return FALSE;
if(!single_value->field_x.match(other_value.x(), legacy))return FALSE;
if(!other_value.y().is_bound()) return FALSE;
if(!single_value->field_y.match(other_value.y(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-XY-22b.");
}
return FALSE;
}

boolean Node__XY__22b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_x.is_bound()) return TRUE;
if (single_value->field_y.is_bound()) return TRUE;
return FALSE;
}

boolean Node__XY__22b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_x.is_value()) return FALSE;
if (!single_value->field_y.is_value()) return FALSE;
return TRUE;
}

void Node__XY__22b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__XY__22b Node__XY__22b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-XY-22b.");
Node__XY__22b ret_val;
if (single_value->field_x.is_bound()) {
ret_val.x() = single_value->field_x.valueof();
}
if (single_value->field_y.is_bound()) {
ret_val.y() = single_value->field_y.valueof();
}
return ret_val;
}

void Node__XY__22b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-XY-22b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__XY__22b_template[list_length];
}

Node__XY__22b_template& Node__XY__22b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-XY-22b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-XY-22b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__XY__22b_template::x()
{
set_specific();
return single_value->field_x;
}

const INTEGER_template& Node__XY__22b_template::x() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field x of a non-specific template of type @DSRC2.Node-XY-22b.");
return single_value->field_x;
}

INTEGER_template& Node__XY__22b_template::y()
{
set_specific();
return single_value->field_y;
}

const INTEGER_template& Node__XY__22b_template::y() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field y of a non-specific template of type @DSRC2.Node-XY-22b.");
return single_value->field_y;
}

int Node__XY__22b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-22b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-XY-22b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-22b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-22b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-22b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-22b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-XY-22b.");
  }
  return 0;
}

void Node__XY__22b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log();
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__XY__22b_template::log_match(const Node__XY__22b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_x.match(match_value.x(), legacy)){
TTCN_Logger::log_logmatch_info(".x");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_y.match(match_value.y(), legacy)){
TTCN_Logger::log_logmatch_info(".y");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__XY__22b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_x.encode_text(text_buf);
single_value->field_y.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-XY-22b.");
}
}

void Node__XY__22b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_x.decode_text(text_buf);
single_value->field_y.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__XY__22b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-XY-22b.");
}
}

void Node__XY__22b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-XY-22b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-XY-22b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__XY__22b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-XY-22b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-22b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-XY-22b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__XY__22b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-XY-22b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-22b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_x = single_value->field_x.get_param(param_name);
    mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
    mp->add_elem(mp_field_x);
    Module_Param* mp_field_y = single_value->field_y.get_param(param_name);
    mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
    mp->add_elem(mp_field_y);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__XY__22b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_x.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-22b");
single_value->field_y.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-22b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-XY-22b");
}

boolean Node__XY__22b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__XY__22b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Node__XY__24b::Node__XY__24b()
{
  bound_flag = FALSE;
}

Node__XY__24b::Node__XY__24b(const INTEGER& par_x,
    const INTEGER& par_y)
  :   field_x(par_x),
  field_y(par_y)
{
  bound_flag = TRUE;
}

Node__XY__24b::Node__XY__24b(const Node__XY__24b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-XY-24b.");
bound_flag = TRUE;
if (other_value.x().is_bound()) field_x = other_value.x();
else field_x.clean_up();
if (other_value.y().is_bound()) field_y = other_value.y();
else field_y.clean_up();
}

void Node__XY__24b::clean_up()
{
field_x.clean_up();
field_y.clean_up();
bound_flag = FALSE;
}

Node__XY__24b& Node__XY__24b::operator=(const Node__XY__24b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-XY-24b.");
  bound_flag = TRUE;
  if (other_value.x().is_bound()) field_x = other_value.x();
  else field_x.clean_up();
  if (other_value.y().is_bound()) field_y = other_value.y();
  else field_y.clean_up();
}
return *this;
}

boolean Node__XY__24b::operator==(const Node__XY__24b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_x==other_value.field_x
  && field_y==other_value.field_y;
}

boolean Node__XY__24b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_x.is_bound()) return TRUE;
if(field_y.is_bound()) return TRUE;
return FALSE;
}
boolean Node__XY__24b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_x.is_value()) return FALSE;
if(!field_y.is_value()) return FALSE;
return TRUE;
}
int Node__XY__24b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-XY-24b");
  return 2;
}

void Node__XY__24b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ x := ");
field_x.log();
TTCN_Logger::log_event_str(", y := ");
field_y.log();
TTCN_Logger::log_event_str(" }");
}

void Node__XY__24b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-XY-24b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-XY-24b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-XY-24b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-24b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-XY-24b");
  }
}

Module_Param* Node__XY__24b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-XY-24b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-24b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_x = field_x.get_param(param_name);
  mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
  mp->add_elem(mp_field_x);
  Module_Param* mp_field_y = field_y.get_param(param_name);
  mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
  mp->add_elem(mp_field_y);
  return mp;
  }

void Node__XY__24b::set_implicit_omit()
{
if (x().is_bound()) x().set_implicit_omit();
if (y().is_bound()) y().set_implicit_omit();
}

void Node__XY__24b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-XY-24b.");
field_x.encode_text(text_buf);
field_y.encode_text(text_buf);
}

void Node__XY__24b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_x.decode_text(text_buf);
field_y.decode_text(text_buf);
}

void Node__XY__24b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__XY__24b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__XY__24b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("x': ");
  new_tlv->add_TLV(field_x.BER_encode_TLV(Node__XY__24b_x_descr_, p_coding));
  ec_1.set_msg("y': ");
  new_tlv->add_TLV(field_y.BER_encode_TLV(Node__XY__24b_y_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__XY__24b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-XY-24b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("x': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_x.BER_decode_TLV(Node__XY__24b_x_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("y': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_y.BER_decode_TLV(Node__XY__24b_y_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__XY__24b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-XY-24b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x.JSON_encode(Node__XY__24b_x_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "y");
    enc_len += field_y.JSON_encode(Node__XY__24b_y_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__XY__24b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "x", name_len)) {
         int ret_val = field_x.JSON_decode(Node__XY__24b_x_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "y", name_len)) {
         int ret_val = field_y.JSON_decode(Node__XY__24b_y_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "y");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_x.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "x");
    return JSON_ERROR_FATAL;
  }
if (!field_y.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "y");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__XY__24b_template::single_value_struct {
INTEGER_template field_x;
INTEGER_template field_y;
};

void Node__XY__24b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_x = ANY_VALUE;
single_value->field_y = ANY_VALUE;
}
}
}

void Node__XY__24b_template::copy_value(const Node__XY__24b& other_value)
{
single_value = new single_value_struct;
if (other_value.x().is_bound()) {
  single_value->field_x = other_value.x();
} else {
  single_value->field_x.clean_up();
}
if (other_value.y().is_bound()) {
  single_value->field_y = other_value.y();
} else {
  single_value->field_y.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__XY__24b_template::copy_template(const Node__XY__24b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.x().get_selection()) {
single_value->field_x = other_value.x();
} else {
single_value->field_x.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.y().get_selection()) {
single_value->field_y = other_value.y();
} else {
single_value->field_y.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__XY__24b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-XY-24b.");
break;
}
set_selection(other_value);
}

Node__XY__24b_template::Node__XY__24b_template()
{
}

Node__XY__24b_template::Node__XY__24b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__XY__24b_template::Node__XY__24b_template(const Node__XY__24b& other_value)
{
copy_value(other_value);
}

Node__XY__24b_template::Node__XY__24b_template(const OPTIONAL<Node__XY__24b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__24b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-XY-24b from an unbound optional field.");
}
}

Node__XY__24b_template::Node__XY__24b_template(const Node__XY__24b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__XY__24b_template::~Node__XY__24b_template()
{
clean_up();
}

Node__XY__24b_template& Node__XY__24b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__XY__24b_template& Node__XY__24b_template::operator=(const Node__XY__24b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__XY__24b_template& Node__XY__24b_template::operator=(const OPTIONAL<Node__XY__24b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__24b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-XY-24b.");
}
return *this;
}

Node__XY__24b_template& Node__XY__24b_template::operator=(const Node__XY__24b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__XY__24b_template::match(const Node__XY__24b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.x().is_bound()) return FALSE;
if(!single_value->field_x.match(other_value.x(), legacy))return FALSE;
if(!other_value.y().is_bound()) return FALSE;
if(!single_value->field_y.match(other_value.y(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-XY-24b.");
}
return FALSE;
}

boolean Node__XY__24b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_x.is_bound()) return TRUE;
if (single_value->field_y.is_bound()) return TRUE;
return FALSE;
}

boolean Node__XY__24b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_x.is_value()) return FALSE;
if (!single_value->field_y.is_value()) return FALSE;
return TRUE;
}

void Node__XY__24b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__XY__24b Node__XY__24b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-XY-24b.");
Node__XY__24b ret_val;
if (single_value->field_x.is_bound()) {
ret_val.x() = single_value->field_x.valueof();
}
if (single_value->field_y.is_bound()) {
ret_val.y() = single_value->field_y.valueof();
}
return ret_val;
}

void Node__XY__24b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-XY-24b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__XY__24b_template[list_length];
}

Node__XY__24b_template& Node__XY__24b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-XY-24b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-XY-24b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__XY__24b_template::x()
{
set_specific();
return single_value->field_x;
}

const INTEGER_template& Node__XY__24b_template::x() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field x of a non-specific template of type @DSRC2.Node-XY-24b.");
return single_value->field_x;
}

INTEGER_template& Node__XY__24b_template::y()
{
set_specific();
return single_value->field_y;
}

const INTEGER_template& Node__XY__24b_template::y() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field y of a non-specific template of type @DSRC2.Node-XY-24b.");
return single_value->field_y;
}

int Node__XY__24b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-24b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-XY-24b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-24b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-24b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-24b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-24b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-XY-24b.");
  }
  return 0;
}

void Node__XY__24b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log();
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__XY__24b_template::log_match(const Node__XY__24b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_x.match(match_value.x(), legacy)){
TTCN_Logger::log_logmatch_info(".x");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_y.match(match_value.y(), legacy)){
TTCN_Logger::log_logmatch_info(".y");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__XY__24b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_x.encode_text(text_buf);
single_value->field_y.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-XY-24b.");
}
}

void Node__XY__24b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_x.decode_text(text_buf);
single_value->field_y.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__XY__24b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-XY-24b.");
}
}

void Node__XY__24b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-XY-24b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-XY-24b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__XY__24b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-XY-24b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-24b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-XY-24b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__XY__24b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-XY-24b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-24b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_x = single_value->field_x.get_param(param_name);
    mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
    mp->add_elem(mp_field_x);
    Module_Param* mp_field_y = single_value->field_y.get_param(param_name);
    mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
    mp->add_elem(mp_field_y);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__XY__24b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_x.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-24b");
single_value->field_y.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-24b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-XY-24b");
}

boolean Node__XY__24b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__XY__24b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Node__XY__26b::Node__XY__26b()
{
  bound_flag = FALSE;
}

Node__XY__26b::Node__XY__26b(const INTEGER& par_x,
    const INTEGER& par_y)
  :   field_x(par_x),
  field_y(par_y)
{
  bound_flag = TRUE;
}

Node__XY__26b::Node__XY__26b(const Node__XY__26b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-XY-26b.");
bound_flag = TRUE;
if (other_value.x().is_bound()) field_x = other_value.x();
else field_x.clean_up();
if (other_value.y().is_bound()) field_y = other_value.y();
else field_y.clean_up();
}

void Node__XY__26b::clean_up()
{
field_x.clean_up();
field_y.clean_up();
bound_flag = FALSE;
}

Node__XY__26b& Node__XY__26b::operator=(const Node__XY__26b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-XY-26b.");
  bound_flag = TRUE;
  if (other_value.x().is_bound()) field_x = other_value.x();
  else field_x.clean_up();
  if (other_value.y().is_bound()) field_y = other_value.y();
  else field_y.clean_up();
}
return *this;
}

boolean Node__XY__26b::operator==(const Node__XY__26b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_x==other_value.field_x
  && field_y==other_value.field_y;
}

boolean Node__XY__26b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_x.is_bound()) return TRUE;
if(field_y.is_bound()) return TRUE;
return FALSE;
}
boolean Node__XY__26b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_x.is_value()) return FALSE;
if(!field_y.is_value()) return FALSE;
return TRUE;
}
int Node__XY__26b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-XY-26b");
  return 2;
}

void Node__XY__26b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ x := ");
field_x.log();
TTCN_Logger::log_event_str(", y := ");
field_y.log();
TTCN_Logger::log_event_str(" }");
}

void Node__XY__26b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-XY-26b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-XY-26b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-XY-26b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-26b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-XY-26b");
  }
}

Module_Param* Node__XY__26b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-XY-26b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-26b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_x = field_x.get_param(param_name);
  mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
  mp->add_elem(mp_field_x);
  Module_Param* mp_field_y = field_y.get_param(param_name);
  mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
  mp->add_elem(mp_field_y);
  return mp;
  }

void Node__XY__26b::set_implicit_omit()
{
if (x().is_bound()) x().set_implicit_omit();
if (y().is_bound()) y().set_implicit_omit();
}

void Node__XY__26b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-XY-26b.");
field_x.encode_text(text_buf);
field_y.encode_text(text_buf);
}

void Node__XY__26b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_x.decode_text(text_buf);
field_y.decode_text(text_buf);
}

void Node__XY__26b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__XY__26b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__XY__26b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("x': ");
  new_tlv->add_TLV(field_x.BER_encode_TLV(Node__XY__26b_x_descr_, p_coding));
  ec_1.set_msg("y': ");
  new_tlv->add_TLV(field_y.BER_encode_TLV(Node__XY__26b_y_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__XY__26b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-XY-26b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("x': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_x.BER_decode_TLV(Node__XY__26b_x_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("y': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_y.BER_decode_TLV(Node__XY__26b_y_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__XY__26b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-XY-26b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x.JSON_encode(Node__XY__26b_x_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "y");
    enc_len += field_y.JSON_encode(Node__XY__26b_y_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__XY__26b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "x", name_len)) {
         int ret_val = field_x.JSON_decode(Node__XY__26b_x_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "y", name_len)) {
         int ret_val = field_y.JSON_decode(Node__XY__26b_y_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "y");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_x.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "x");
    return JSON_ERROR_FATAL;
  }
if (!field_y.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "y");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__XY__26b_template::single_value_struct {
INTEGER_template field_x;
INTEGER_template field_y;
};

void Node__XY__26b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_x = ANY_VALUE;
single_value->field_y = ANY_VALUE;
}
}
}

void Node__XY__26b_template::copy_value(const Node__XY__26b& other_value)
{
single_value = new single_value_struct;
if (other_value.x().is_bound()) {
  single_value->field_x = other_value.x();
} else {
  single_value->field_x.clean_up();
}
if (other_value.y().is_bound()) {
  single_value->field_y = other_value.y();
} else {
  single_value->field_y.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__XY__26b_template::copy_template(const Node__XY__26b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.x().get_selection()) {
single_value->field_x = other_value.x();
} else {
single_value->field_x.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.y().get_selection()) {
single_value->field_y = other_value.y();
} else {
single_value->field_y.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__XY__26b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-XY-26b.");
break;
}
set_selection(other_value);
}

Node__XY__26b_template::Node__XY__26b_template()
{
}

Node__XY__26b_template::Node__XY__26b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__XY__26b_template::Node__XY__26b_template(const Node__XY__26b& other_value)
{
copy_value(other_value);
}

Node__XY__26b_template::Node__XY__26b_template(const OPTIONAL<Node__XY__26b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__26b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-XY-26b from an unbound optional field.");
}
}

Node__XY__26b_template::Node__XY__26b_template(const Node__XY__26b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__XY__26b_template::~Node__XY__26b_template()
{
clean_up();
}

Node__XY__26b_template& Node__XY__26b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__XY__26b_template& Node__XY__26b_template::operator=(const Node__XY__26b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__XY__26b_template& Node__XY__26b_template::operator=(const OPTIONAL<Node__XY__26b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__26b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-XY-26b.");
}
return *this;
}

Node__XY__26b_template& Node__XY__26b_template::operator=(const Node__XY__26b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__XY__26b_template::match(const Node__XY__26b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.x().is_bound()) return FALSE;
if(!single_value->field_x.match(other_value.x(), legacy))return FALSE;
if(!other_value.y().is_bound()) return FALSE;
if(!single_value->field_y.match(other_value.y(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-XY-26b.");
}
return FALSE;
}

boolean Node__XY__26b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_x.is_bound()) return TRUE;
if (single_value->field_y.is_bound()) return TRUE;
return FALSE;
}

boolean Node__XY__26b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_x.is_value()) return FALSE;
if (!single_value->field_y.is_value()) return FALSE;
return TRUE;
}

void Node__XY__26b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__XY__26b Node__XY__26b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-XY-26b.");
Node__XY__26b ret_val;
if (single_value->field_x.is_bound()) {
ret_val.x() = single_value->field_x.valueof();
}
if (single_value->field_y.is_bound()) {
ret_val.y() = single_value->field_y.valueof();
}
return ret_val;
}

void Node__XY__26b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-XY-26b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__XY__26b_template[list_length];
}

Node__XY__26b_template& Node__XY__26b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-XY-26b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-XY-26b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__XY__26b_template::x()
{
set_specific();
return single_value->field_x;
}

const INTEGER_template& Node__XY__26b_template::x() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field x of a non-specific template of type @DSRC2.Node-XY-26b.");
return single_value->field_x;
}

INTEGER_template& Node__XY__26b_template::y()
{
set_specific();
return single_value->field_y;
}

const INTEGER_template& Node__XY__26b_template::y() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field y of a non-specific template of type @DSRC2.Node-XY-26b.");
return single_value->field_y;
}

int Node__XY__26b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-26b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-XY-26b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-26b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-26b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-26b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-26b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-XY-26b.");
  }
  return 0;
}

void Node__XY__26b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log();
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__XY__26b_template::log_match(const Node__XY__26b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_x.match(match_value.x(), legacy)){
TTCN_Logger::log_logmatch_info(".x");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_y.match(match_value.y(), legacy)){
TTCN_Logger::log_logmatch_info(".y");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__XY__26b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_x.encode_text(text_buf);
single_value->field_y.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-XY-26b.");
}
}

void Node__XY__26b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_x.decode_text(text_buf);
single_value->field_y.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__XY__26b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-XY-26b.");
}
}

void Node__XY__26b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-XY-26b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-XY-26b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__XY__26b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-XY-26b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-26b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-XY-26b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__XY__26b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-XY-26b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-26b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_x = single_value->field_x.get_param(param_name);
    mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
    mp->add_elem(mp_field_x);
    Module_Param* mp_field_y = single_value->field_y.get_param(param_name);
    mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
    mp->add_elem(mp_field_y);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__XY__26b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_x.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-26b");
single_value->field_y.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-26b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-XY-26b");
}

boolean Node__XY__26b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__XY__26b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Node__XY__28b::Node__XY__28b()
{
  bound_flag = FALSE;
}

Node__XY__28b::Node__XY__28b(const INTEGER& par_x,
    const INTEGER& par_y)
  :   field_x(par_x),
  field_y(par_y)
{
  bound_flag = TRUE;
}

Node__XY__28b::Node__XY__28b(const Node__XY__28b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-XY-28b.");
bound_flag = TRUE;
if (other_value.x().is_bound()) field_x = other_value.x();
else field_x.clean_up();
if (other_value.y().is_bound()) field_y = other_value.y();
else field_y.clean_up();
}

void Node__XY__28b::clean_up()
{
field_x.clean_up();
field_y.clean_up();
bound_flag = FALSE;
}

Node__XY__28b& Node__XY__28b::operator=(const Node__XY__28b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-XY-28b.");
  bound_flag = TRUE;
  if (other_value.x().is_bound()) field_x = other_value.x();
  else field_x.clean_up();
  if (other_value.y().is_bound()) field_y = other_value.y();
  else field_y.clean_up();
}
return *this;
}

boolean Node__XY__28b::operator==(const Node__XY__28b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_x==other_value.field_x
  && field_y==other_value.field_y;
}

boolean Node__XY__28b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_x.is_bound()) return TRUE;
if(field_y.is_bound()) return TRUE;
return FALSE;
}
boolean Node__XY__28b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_x.is_value()) return FALSE;
if(!field_y.is_value()) return FALSE;
return TRUE;
}
int Node__XY__28b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-XY-28b");
  return 2;
}

void Node__XY__28b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ x := ");
field_x.log();
TTCN_Logger::log_event_str(", y := ");
field_y.log();
TTCN_Logger::log_event_str(" }");
}

void Node__XY__28b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-XY-28b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-XY-28b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-XY-28b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-28b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-XY-28b");
  }
}

Module_Param* Node__XY__28b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-XY-28b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-28b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_x = field_x.get_param(param_name);
  mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
  mp->add_elem(mp_field_x);
  Module_Param* mp_field_y = field_y.get_param(param_name);
  mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
  mp->add_elem(mp_field_y);
  return mp;
  }

void Node__XY__28b::set_implicit_omit()
{
if (x().is_bound()) x().set_implicit_omit();
if (y().is_bound()) y().set_implicit_omit();
}

void Node__XY__28b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-XY-28b.");
field_x.encode_text(text_buf);
field_y.encode_text(text_buf);
}

void Node__XY__28b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_x.decode_text(text_buf);
field_y.decode_text(text_buf);
}

void Node__XY__28b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__XY__28b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__XY__28b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("x': ");
  new_tlv->add_TLV(field_x.BER_encode_TLV(Node__XY__28b_x_descr_, p_coding));
  ec_1.set_msg("y': ");
  new_tlv->add_TLV(field_y.BER_encode_TLV(Node__XY__28b_y_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__XY__28b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-XY-28b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("x': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_x.BER_decode_TLV(Node__XY__28b_x_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("y': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_y.BER_decode_TLV(Node__XY__28b_y_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__XY__28b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-XY-28b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x.JSON_encode(Node__XY__28b_x_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "y");
    enc_len += field_y.JSON_encode(Node__XY__28b_y_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__XY__28b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "x", name_len)) {
         int ret_val = field_x.JSON_decode(Node__XY__28b_x_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "y", name_len)) {
         int ret_val = field_y.JSON_decode(Node__XY__28b_y_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "y");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_x.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "x");
    return JSON_ERROR_FATAL;
  }
if (!field_y.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "y");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__XY__28b_template::single_value_struct {
INTEGER_template field_x;
INTEGER_template field_y;
};

void Node__XY__28b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_x = ANY_VALUE;
single_value->field_y = ANY_VALUE;
}
}
}

void Node__XY__28b_template::copy_value(const Node__XY__28b& other_value)
{
single_value = new single_value_struct;
if (other_value.x().is_bound()) {
  single_value->field_x = other_value.x();
} else {
  single_value->field_x.clean_up();
}
if (other_value.y().is_bound()) {
  single_value->field_y = other_value.y();
} else {
  single_value->field_y.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__XY__28b_template::copy_template(const Node__XY__28b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.x().get_selection()) {
single_value->field_x = other_value.x();
} else {
single_value->field_x.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.y().get_selection()) {
single_value->field_y = other_value.y();
} else {
single_value->field_y.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__XY__28b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-XY-28b.");
break;
}
set_selection(other_value);
}

Node__XY__28b_template::Node__XY__28b_template()
{
}

Node__XY__28b_template::Node__XY__28b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__XY__28b_template::Node__XY__28b_template(const Node__XY__28b& other_value)
{
copy_value(other_value);
}

Node__XY__28b_template::Node__XY__28b_template(const OPTIONAL<Node__XY__28b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__28b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-XY-28b from an unbound optional field.");
}
}

Node__XY__28b_template::Node__XY__28b_template(const Node__XY__28b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__XY__28b_template::~Node__XY__28b_template()
{
clean_up();
}

Node__XY__28b_template& Node__XY__28b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__XY__28b_template& Node__XY__28b_template::operator=(const Node__XY__28b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__XY__28b_template& Node__XY__28b_template::operator=(const OPTIONAL<Node__XY__28b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__28b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-XY-28b.");
}
return *this;
}

Node__XY__28b_template& Node__XY__28b_template::operator=(const Node__XY__28b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__XY__28b_template::match(const Node__XY__28b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.x().is_bound()) return FALSE;
if(!single_value->field_x.match(other_value.x(), legacy))return FALSE;
if(!other_value.y().is_bound()) return FALSE;
if(!single_value->field_y.match(other_value.y(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-XY-28b.");
}
return FALSE;
}

boolean Node__XY__28b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_x.is_bound()) return TRUE;
if (single_value->field_y.is_bound()) return TRUE;
return FALSE;
}

boolean Node__XY__28b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_x.is_value()) return FALSE;
if (!single_value->field_y.is_value()) return FALSE;
return TRUE;
}

void Node__XY__28b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__XY__28b Node__XY__28b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-XY-28b.");
Node__XY__28b ret_val;
if (single_value->field_x.is_bound()) {
ret_val.x() = single_value->field_x.valueof();
}
if (single_value->field_y.is_bound()) {
ret_val.y() = single_value->field_y.valueof();
}
return ret_val;
}

void Node__XY__28b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-XY-28b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__XY__28b_template[list_length];
}

Node__XY__28b_template& Node__XY__28b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-XY-28b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-XY-28b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__XY__28b_template::x()
{
set_specific();
return single_value->field_x;
}

const INTEGER_template& Node__XY__28b_template::x() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field x of a non-specific template of type @DSRC2.Node-XY-28b.");
return single_value->field_x;
}

INTEGER_template& Node__XY__28b_template::y()
{
set_specific();
return single_value->field_y;
}

const INTEGER_template& Node__XY__28b_template::y() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field y of a non-specific template of type @DSRC2.Node-XY-28b.");
return single_value->field_y;
}

int Node__XY__28b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-28b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-XY-28b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-28b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-28b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-28b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-28b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-XY-28b.");
  }
  return 0;
}

void Node__XY__28b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log();
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__XY__28b_template::log_match(const Node__XY__28b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_x.match(match_value.x(), legacy)){
TTCN_Logger::log_logmatch_info(".x");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_y.match(match_value.y(), legacy)){
TTCN_Logger::log_logmatch_info(".y");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__XY__28b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_x.encode_text(text_buf);
single_value->field_y.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-XY-28b.");
}
}

void Node__XY__28b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_x.decode_text(text_buf);
single_value->field_y.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__XY__28b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-XY-28b.");
}
}

void Node__XY__28b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-XY-28b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-XY-28b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__XY__28b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-XY-28b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-28b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-XY-28b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__XY__28b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-XY-28b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-28b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_x = single_value->field_x.get_param(param_name);
    mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
    mp->add_elem(mp_field_x);
    Module_Param* mp_field_y = single_value->field_y.get_param(param_name);
    mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
    mp->add_elem(mp_field_y);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__XY__28b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_x.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-28b");
single_value->field_y.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-28b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-XY-28b");
}

boolean Node__XY__28b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__XY__28b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Node__XY__32b::Node__XY__32b()
{
  bound_flag = FALSE;
}

Node__XY__32b::Node__XY__32b(const INTEGER& par_x,
    const INTEGER& par_y)
  :   field_x(par_x),
  field_y(par_y)
{
  bound_flag = TRUE;
}

Node__XY__32b::Node__XY__32b(const Node__XY__32b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-XY-32b.");
bound_flag = TRUE;
if (other_value.x().is_bound()) field_x = other_value.x();
else field_x.clean_up();
if (other_value.y().is_bound()) field_y = other_value.y();
else field_y.clean_up();
}

void Node__XY__32b::clean_up()
{
field_x.clean_up();
field_y.clean_up();
bound_flag = FALSE;
}

Node__XY__32b& Node__XY__32b::operator=(const Node__XY__32b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-XY-32b.");
  bound_flag = TRUE;
  if (other_value.x().is_bound()) field_x = other_value.x();
  else field_x.clean_up();
  if (other_value.y().is_bound()) field_y = other_value.y();
  else field_y.clean_up();
}
return *this;
}

boolean Node__XY__32b::operator==(const Node__XY__32b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_x==other_value.field_x
  && field_y==other_value.field_y;
}

boolean Node__XY__32b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_x.is_bound()) return TRUE;
if(field_y.is_bound()) return TRUE;
return FALSE;
}
boolean Node__XY__32b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_x.is_value()) return FALSE;
if(!field_y.is_value()) return FALSE;
return TRUE;
}
int Node__XY__32b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-XY-32b");
  return 2;
}

void Node__XY__32b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ x := ");
field_x.log();
TTCN_Logger::log_event_str(", y := ");
field_y.log();
TTCN_Logger::log_event_str(" }");
}

void Node__XY__32b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-XY-32b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-XY-32b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-XY-32b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-32b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-XY-32b");
  }
}

Module_Param* Node__XY__32b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-XY-32b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-32b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_x = field_x.get_param(param_name);
  mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
  mp->add_elem(mp_field_x);
  Module_Param* mp_field_y = field_y.get_param(param_name);
  mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
  mp->add_elem(mp_field_y);
  return mp;
  }

void Node__XY__32b::set_implicit_omit()
{
if (x().is_bound()) x().set_implicit_omit();
if (y().is_bound()) y().set_implicit_omit();
}

void Node__XY__32b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-XY-32b.");
field_x.encode_text(text_buf);
field_y.encode_text(text_buf);
}

void Node__XY__32b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_x.decode_text(text_buf);
field_y.decode_text(text_buf);
}

void Node__XY__32b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__XY__32b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__XY__32b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("x': ");
  new_tlv->add_TLV(field_x.BER_encode_TLV(Node__XY__32b_x_descr_, p_coding));
  ec_1.set_msg("y': ");
  new_tlv->add_TLV(field_y.BER_encode_TLV(Node__XY__32b_y_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__XY__32b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-XY-32b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("x': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_x.BER_decode_TLV(Node__XY__32b_x_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("y': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_y.BER_decode_TLV(Node__XY__32b_y_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__XY__32b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-XY-32b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x.JSON_encode(Node__XY__32b_x_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "y");
    enc_len += field_y.JSON_encode(Node__XY__32b_y_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__XY__32b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (1 == name_len && 0 == strncmp(fld_name, "x", name_len)) {
         int ret_val = field_x.JSON_decode(Node__XY__32b_x_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (1 == name_len && 0 == strncmp(fld_name, "y", name_len)) {
         int ret_val = field_y.JSON_decode(Node__XY__32b_y_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "y");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_x.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "x");
    return JSON_ERROR_FATAL;
  }
if (!field_y.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "y");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__XY__32b_template::single_value_struct {
INTEGER_template field_x;
INTEGER_template field_y;
};

void Node__XY__32b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_x = ANY_VALUE;
single_value->field_y = ANY_VALUE;
}
}
}

void Node__XY__32b_template::copy_value(const Node__XY__32b& other_value)
{
single_value = new single_value_struct;
if (other_value.x().is_bound()) {
  single_value->field_x = other_value.x();
} else {
  single_value->field_x.clean_up();
}
if (other_value.y().is_bound()) {
  single_value->field_y = other_value.y();
} else {
  single_value->field_y.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__XY__32b_template::copy_template(const Node__XY__32b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.x().get_selection()) {
single_value->field_x = other_value.x();
} else {
single_value->field_x.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.y().get_selection()) {
single_value->field_y = other_value.y();
} else {
single_value->field_y.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__XY__32b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-XY-32b.");
break;
}
set_selection(other_value);
}

Node__XY__32b_template::Node__XY__32b_template()
{
}

Node__XY__32b_template::Node__XY__32b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__XY__32b_template::Node__XY__32b_template(const Node__XY__32b& other_value)
{
copy_value(other_value);
}

Node__XY__32b_template::Node__XY__32b_template(const OPTIONAL<Node__XY__32b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__32b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-XY-32b from an unbound optional field.");
}
}

Node__XY__32b_template::Node__XY__32b_template(const Node__XY__32b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__XY__32b_template::~Node__XY__32b_template()
{
clean_up();
}

Node__XY__32b_template& Node__XY__32b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__XY__32b_template& Node__XY__32b_template::operator=(const Node__XY__32b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__XY__32b_template& Node__XY__32b_template::operator=(const OPTIONAL<Node__XY__32b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__XY__32b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-XY-32b.");
}
return *this;
}

Node__XY__32b_template& Node__XY__32b_template::operator=(const Node__XY__32b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__XY__32b_template::match(const Node__XY__32b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.x().is_bound()) return FALSE;
if(!single_value->field_x.match(other_value.x(), legacy))return FALSE;
if(!other_value.y().is_bound()) return FALSE;
if(!single_value->field_y.match(other_value.y(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-XY-32b.");
}
return FALSE;
}

boolean Node__XY__32b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_x.is_bound()) return TRUE;
if (single_value->field_y.is_bound()) return TRUE;
return FALSE;
}

boolean Node__XY__32b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_x.is_value()) return FALSE;
if (!single_value->field_y.is_value()) return FALSE;
return TRUE;
}

void Node__XY__32b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__XY__32b Node__XY__32b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-XY-32b.");
Node__XY__32b ret_val;
if (single_value->field_x.is_bound()) {
ret_val.x() = single_value->field_x.valueof();
}
if (single_value->field_y.is_bound()) {
ret_val.y() = single_value->field_y.valueof();
}
return ret_val;
}

void Node__XY__32b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-XY-32b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__XY__32b_template[list_length];
}

Node__XY__32b_template& Node__XY__32b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-XY-32b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-XY-32b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__XY__32b_template::x()
{
set_specific();
return single_value->field_x;
}

const INTEGER_template& Node__XY__32b_template::x() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field x of a non-specific template of type @DSRC2.Node-XY-32b.");
return single_value->field_x;
}

INTEGER_template& Node__XY__32b_template::y()
{
set_specific();
return single_value->field_y;
}

const INTEGER_template& Node__XY__32b_template::y() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field y of a non-specific template of type @DSRC2.Node-XY-32b.");
return single_value->field_y;
}

int Node__XY__32b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-32b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-XY-32b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-32b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-32b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-32b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-XY-32b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-XY-32b.");
  }
  return 0;
}

void Node__XY__32b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log();
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__XY__32b_template::log_match(const Node__XY__32b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_x.match(match_value.x(), legacy)){
TTCN_Logger::log_logmatch_info(".x");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_y.match(match_value.y(), legacy)){
TTCN_Logger::log_logmatch_info(".y");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ x := ");
single_value->field_x.log_match(match_value.x(), legacy);
TTCN_Logger::log_event_str(", y := ");
single_value->field_y.log_match(match_value.y(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__XY__32b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_x.encode_text(text_buf);
single_value->field_y.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-XY-32b.");
}
}

void Node__XY__32b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_x.decode_text(text_buf);
single_value->field_y.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__XY__32b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-XY-32b.");
}
}

void Node__XY__32b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-XY-32b'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else if (strcmp("y", param_field) == 0) {
      y().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-XY-32b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__XY__32b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-XY-32b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) x().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) y().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "x")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          x().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "y")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          y().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-XY-32b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-XY-32b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__XY__32b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-XY-32b'");
    }
    if (strcmp("x", param_field) == 0) {
      return x().get_param(param_name);
    } else if (strcmp("y", param_field) == 0) {
      return y().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-XY-32b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_x = single_value->field_x.get_param(param_name);
    mp_field_x->set_id(new Module_Param_FieldName(mcopystr("x")));
    mp->add_elem(mp_field_x);
    Module_Param* mp_field_y = single_value->field_y.get_param(param_name);
    mp_field_y->set_id(new Module_Param_FieldName(mcopystr("y")));
    mp->add_elem(mp_field_y);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__XY__32b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_x.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-32b");
single_value->field_y.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-XY-32b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-XY-32b");
}

boolean Node__XY__32b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__XY__32b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Node__LLmD__64b::Node__LLmD__64b()
{
  bound_flag = FALSE;
}

Node__LLmD__64b::Node__LLmD__64b(const INTEGER& par_lon,
    const INTEGER& par_lat)
  :   field_lon(par_lon),
  field_lat(par_lat)
{
  bound_flag = TRUE;
}

Node__LLmD__64b::Node__LLmD__64b(const Node__LLmD__64b& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DSRC2.Node-LLmD-64b.");
bound_flag = TRUE;
if (other_value.lon().is_bound()) field_lon = other_value.lon();
else field_lon.clean_up();
if (other_value.lat().is_bound()) field_lat = other_value.lat();
else field_lat.clean_up();
}

void Node__LLmD__64b::clean_up()
{
field_lon.clean_up();
field_lat.clean_up();
bound_flag = FALSE;
}

Node__LLmD__64b& Node__LLmD__64b::operator=(const Node__LLmD__64b& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DSRC2.Node-LLmD-64b.");
  bound_flag = TRUE;
  if (other_value.lon().is_bound()) field_lon = other_value.lon();
  else field_lon.clean_up();
  if (other_value.lat().is_bound()) field_lat = other_value.lat();
  else field_lat.clean_up();
}
return *this;
}

boolean Node__LLmD__64b::operator==(const Node__LLmD__64b& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_lon==other_value.field_lon
  && field_lat==other_value.field_lat;
}

boolean Node__LLmD__64b::is_bound() const
{
if (bound_flag) return TRUE;
if(field_lon.is_bound()) return TRUE;
if(field_lat.is_bound()) return TRUE;
return FALSE;
}
boolean Node__LLmD__64b::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_lon.is_value()) return FALSE;
if(!field_lat.is_value()) return FALSE;
return TRUE;
}
int Node__LLmD__64b::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DSRC2.Node-LLmD-64b");
  return 2;
}

void Node__LLmD__64b::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ lon := ");
field_lon.log();
TTCN_Logger::log_event_str(", lat := ");
field_lat.log();
TTCN_Logger::log_event_str(" }");
}

void Node__LLmD__64b::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DSRC2.Node-LLmD-64b'");
    }
    if (strcmp("lon", param_field) == 0) {
      lon().set_param(param);
      return;
    } else if (strcmp("lat", param_field) == 0) {
      lat().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DSRC2.Node-LLmD-64b'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @DSRC2.Node-LLmD-64b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lon().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) lat().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lon")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lon().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lat")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lat().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-LLmD-64b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DSRC2.Node-LLmD-64b");
  }
}

Module_Param* Node__LLmD__64b::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@DSRC2.Node-LLmD-64b'");
    }
    if (strcmp("lon", param_field) == 0) {
      return lon().get_param(param_name);
    } else if (strcmp("lat", param_field) == 0) {
      return lat().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-LLmD-64b'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_lon = field_lon.get_param(param_name);
  mp_field_lon->set_id(new Module_Param_FieldName(mcopystr("lon")));
  mp->add_elem(mp_field_lon);
  Module_Param* mp_field_lat = field_lat.get_param(param_name);
  mp_field_lat->set_id(new Module_Param_FieldName(mcopystr("lat")));
  mp->add_elem(mp_field_lat);
  return mp;
  }

void Node__LLmD__64b::set_implicit_omit()
{
if (lon().is_bound()) lon().set_implicit_omit();
if (lat().is_bound()) lat().set_implicit_omit();
}

void Node__LLmD__64b::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DSRC2.Node-LLmD-64b.");
field_lon.encode_text(text_buf);
field_lat.encode_text(text_buf);
}

void Node__LLmD__64b::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_lon.decode_text(text_buf);
field_lat.decode_text(text_buf);
}

void Node__LLmD__64b::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Node__LLmD__64b::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

ASN_BER_TLV_t* Node__LLmD__64b::BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  BER_chk_descr(p_td);
  ASN_BER_TLV_t *new_tlv=ASN_BER_TLV_t::construct(NULL);
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  ec_1.set_msg("lon': ");
  new_tlv->add_TLV(field_lon.BER_encode_TLV(Node__LLmD__64b_lon_descr_, p_coding));
  ec_1.set_msg("lat': ");
  new_tlv->add_TLV(field_lat.BER_encode_TLV(Node__LLmD__64b_lat_descr_, p_coding));
  new_tlv=ASN_BER_V2TLV(new_tlv, p_td, p_coding);
  return new_tlv;
}

boolean Node__LLmD__64b::BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form)
{
  bound_flag = TRUE;
  BER_chk_descr(p_td);
  ASN_BER_TLV_t stripped_tlv;
  BER_decode_strip_tags(*p_td.ber, p_tlv, L_form, stripped_tlv);
  TTCN_EncDec_ErrorContext ec_0("While decoding '@DSRC2.Node-LLmD-64b' type: ");
  stripped_tlv.chk_constructed_flag(TRUE);
  size_t V_pos=0;
  ASN_BER_TLV_t tmp_tlv;
  boolean tlv_present=FALSE;
  {
    TTCN_EncDec_ErrorContext ec_1("Component '");
    TTCN_EncDec_ErrorContext ec_2;
    ec_2.set_msg("lon': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_lon.BER_decode_TLV(Node__LLmD__64b_lon_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
    ec_2.set_msg("lat': ");
    if(!tlv_present) tlv_present=BER_decode_constdTLV_next(stripped_tlv, V_pos, L_form, tmp_tlv);
    if(!tlv_present){
      ec_2.error(TTCN_EncDec::ET_INCOMPL_MSG,"Invalid or incomplete message was received.");
      return FALSE;
    }
    field_lat.BER_decode_TLV(Node__LLmD__64b_lat_descr_, tmp_tlv, L_form);
    tlv_present=FALSE;
  }
  BER_decode_constdTLV_end(stripped_tlv, V_pos, L_form, tmp_tlv, tlv_present);
  return TRUE;
}

int Node__LLmD__64b::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @DSRC2.Node-LLmD-64b.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lon");
    enc_len += field_lon.JSON_encode(Node__LLmD__64b_lon_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lat");
    enc_len += field_lat.JSON_encode(Node__LLmD__64b_lat_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Node__LLmD__64b::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "lon", name_len)) {
         int ret_val = field_lon.JSON_decode(Node__LLmD__64b_lon_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lon");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (3 == name_len && 0 == strncmp(fld_name, "lat", name_len)) {
         int ret_val = field_lat.JSON_decode(Node__LLmD__64b_lat_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lat");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_lon.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "lon");
    return JSON_ERROR_FATAL;
  }
if (!field_lat.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "lat");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Node__LLmD__64b_template::single_value_struct {
INTEGER_template field_lon;
INTEGER_template field_lat;
};

void Node__LLmD__64b_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_lon = ANY_VALUE;
single_value->field_lat = ANY_VALUE;
}
}
}

void Node__LLmD__64b_template::copy_value(const Node__LLmD__64b& other_value)
{
single_value = new single_value_struct;
if (other_value.lon().is_bound()) {
  single_value->field_lon = other_value.lon();
} else {
  single_value->field_lon.clean_up();
}
if (other_value.lat().is_bound()) {
  single_value->field_lat = other_value.lat();
} else {
  single_value->field_lat.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Node__LLmD__64b_template::copy_template(const Node__LLmD__64b_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.lon().get_selection()) {
single_value->field_lon = other_value.lon();
} else {
single_value->field_lon.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.lat().get_selection()) {
single_value->field_lat = other_value.lat();
} else {
single_value->field_lat.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Node__LLmD__64b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DSRC2.Node-LLmD-64b.");
break;
}
set_selection(other_value);
}

Node__LLmD__64b_template::Node__LLmD__64b_template()
{
}

Node__LLmD__64b_template::Node__LLmD__64b_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Node__LLmD__64b_template::Node__LLmD__64b_template(const Node__LLmD__64b& other_value)
{
copy_value(other_value);
}

Node__LLmD__64b_template::Node__LLmD__64b_template(const OPTIONAL<Node__LLmD__64b>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__LLmD__64b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DSRC2.Node-LLmD-64b from an unbound optional field.");
}
}

Node__LLmD__64b_template::Node__LLmD__64b_template(const Node__LLmD__64b_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Node__LLmD__64b_template::~Node__LLmD__64b_template()
{
clean_up();
}

Node__LLmD__64b_template& Node__LLmD__64b_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Node__LLmD__64b_template& Node__LLmD__64b_template::operator=(const Node__LLmD__64b& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Node__LLmD__64b_template& Node__LLmD__64b_template::operator=(const OPTIONAL<Node__LLmD__64b>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Node__LLmD__64b&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DSRC2.Node-LLmD-64b.");
}
return *this;
}

Node__LLmD__64b_template& Node__LLmD__64b_template::operator=(const Node__LLmD__64b_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Node__LLmD__64b_template::match(const Node__LLmD__64b& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.lon().is_bound()) return FALSE;
if(!single_value->field_lon.match(other_value.lon(), legacy))return FALSE;
if(!other_value.lat().is_bound()) return FALSE;
if(!single_value->field_lat.match(other_value.lat(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DSRC2.Node-LLmD-64b.");
}
return FALSE;
}

boolean Node__LLmD__64b_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_lon.is_bound()) return TRUE;
if (single_value->field_lat.is_bound()) return TRUE;
return FALSE;
}

boolean Node__LLmD__64b_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_lon.is_value()) return FALSE;
if (!single_value->field_lat.is_value()) return FALSE;
return TRUE;
}

void Node__LLmD__64b_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Node__LLmD__64b Node__LLmD__64b_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DSRC2.Node-LLmD-64b.");
Node__LLmD__64b ret_val;
if (single_value->field_lon.is_bound()) {
ret_val.lon() = single_value->field_lon.valueof();
}
if (single_value->field_lat.is_bound()) {
ret_val.lat() = single_value->field_lat.valueof();
}
return ret_val;
}

void Node__LLmD__64b_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DSRC2.Node-LLmD-64b.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Node__LLmD__64b_template[list_length];
}

Node__LLmD__64b_template& Node__LLmD__64b_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DSRC2.Node-LLmD-64b.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DSRC2.Node-LLmD-64b.");
return value_list.list_value[list_index];
}

INTEGER_template& Node__LLmD__64b_template::lon()
{
set_specific();
return single_value->field_lon;
}

const INTEGER_template& Node__LLmD__64b_template::lon() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lon of a non-specific template of type @DSRC2.Node-LLmD-64b.");
return single_value->field_lon;
}

INTEGER_template& Node__LLmD__64b_template::lat()
{
set_specific();
return single_value->field_lat;
}

const INTEGER_template& Node__LLmD__64b_template::lat() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lat of a non-specific template of type @DSRC2.Node-LLmD-64b.");
return single_value->field_lat;
}

int Node__LLmD__64b_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-LLmD-64b which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DSRC2.Node-LLmD-64b containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-LLmD-64b containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-LLmD-64b containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-LLmD-64b containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DSRC2.Node-LLmD-64b containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DSRC2.Node-LLmD-64b.");
  }
  return 0;
}

void Node__LLmD__64b_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ lon := ");
single_value->field_lon.log();
TTCN_Logger::log_event_str(", lat := ");
single_value->field_lat.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Node__LLmD__64b_template::log_match(const Node__LLmD__64b& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_lon.match(match_value.lon(), legacy)){
TTCN_Logger::log_logmatch_info(".lon");
single_value->field_lon.log_match(match_value.lon(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_lat.match(match_value.lat(), legacy)){
TTCN_Logger::log_logmatch_info(".lat");
single_value->field_lat.log_match(match_value.lat(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ lon := ");
single_value->field_lon.log_match(match_value.lon(), legacy);
TTCN_Logger::log_event_str(", lat := ");
single_value->field_lat.log_match(match_value.lat(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Node__LLmD__64b_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_lon.encode_text(text_buf);
single_value->field_lat.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DSRC2.Node-LLmD-64b.");
}
}

void Node__LLmD__64b_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_lon.decode_text(text_buf);
single_value->field_lat.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Node__LLmD__64b_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DSRC2.Node-LLmD-64b.");
}
}

void Node__LLmD__64b_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DSRC2.Node-LLmD-64b'");
    }
    if (strcmp("lon", param_field) == 0) {
      lon().set_param(param);
      return;
    } else if (strcmp("lat", param_field) == 0) {
      lat().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DSRC2.Node-LLmD-64b'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Node__LLmD__64b_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @DSRC2.Node-LLmD-64b has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lon().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) lat().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lon")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lon().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lat")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lat().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @DSRC2.Node-LLmD-64b: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DSRC2.Node-LLmD-64b");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Node__LLmD__64b_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@DSRC2.Node-LLmD-64b'");
    }
    if (strcmp("lon", param_field) == 0) {
      return lon().get_param(param_name);
    } else if (strcmp("lat", param_field) == 0) {
      return lat().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@DSRC2.Node-LLmD-64b'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_lon = single_value->field_lon.get_param(param_name);
    mp_field_lon->set_id(new Module_Param_FieldName(mcopystr("lon")));
    mp->add_elem(mp_field_lon);
    Module_Param* mp_field_lat = single_value->field_lat.get_param(param_name);
    mp_field_lat->set_id(new Module_Param_FieldName(mcopystr("lat")));
    mp->add_elem(mp_field_lat);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Node__LLmD__64b_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_lon.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-LLmD-64b");
single_value->field_lat.check_restriction(t_res, t_name ? t_name : "@DSRC2.Node-LLmD-64b");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DSRC2.Node-LLmD-64b");
}

boolean Node__LLmD__64b_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Node__LLmD__64b_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("DSRC2.asn", 0, TTCN_Location::LOCATION_UNKNOWN, "DSRC2");
ITS__Container::module_object.pre_init_module();
REGION::module_object.pre_init_module();
}


} /* end of namespace */
