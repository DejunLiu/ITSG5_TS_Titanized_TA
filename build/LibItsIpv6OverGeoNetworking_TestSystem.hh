// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsIpv6OverGeoNetworking__TestSystem_HH
#define LibItsIpv6OverGeoNetworking__TestSystem_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibCommon_Time.hh"
#include "LibCommon_Sync.hh"
#include "LibItsGeoNetworking_TestSystem.hh"
#include "LibItsIpv6OverGeoNetworking_TypesAndValues.hh"
#include "General_Types.hh"
#include "TTCN_EncDec.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LibItsIpv6OverGeoNetworking__TestSystem_HH
#endif

namespace LibItsIpv6OverGeoNetworking__TestSystem {

/* Forward declarations of classes */

class IPv6OverGeoNetworkingPort_BASE;
class IPv6OverGeoNetworkingPort;
class IPv6OverGeoNetworkingInd;
class IPv6OverGeoNetworkingInd_template;
class IPv6OverGeoNetworkingReq;
class IPv6OverGeoNetworkingReq_template;

} /* end of namespace */

#ifndef LibItsIpv6OverGeoNetworking__TestSystem_HH
#define LibItsIpv6OverGeoNetworking__TestSystem_HH

namespace LibItsIpv6OverGeoNetworking__TestSystem {

/* Type definitions */

typedef COMPONENT ItsIpv6OverGeoNetworkingSystem;
typedef COMPONENT_template ItsIpv6OverGeoNetworkingSystem_template;
typedef COMPONENT ItsIpv6OverGeoNetworking;
typedef COMPONENT_template ItsIpv6OverGeoNetworking_template;

/* Class definitions */

class IPv6OverGeoNetworkingPort_BASE : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
IPv6OverGeoNetworkingInd *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
IPv6OverGeoNetworkingPort_BASE(const char *par_port_name);
~IPv6OverGeoNetworkingPort_BASE();
void send(const IPv6OverGeoNetworkingReq& send_par, const COMPONENT& destination_component);
void send(const IPv6OverGeoNetworkingReq& send_par);
void send(const IPv6OverGeoNetworkingReq_template& send_par, const COMPONENT& destination_component);
void send(const IPv6OverGeoNetworkingReq_template& send_par);
protected:
virtual void outgoing_send(const IPv6OverGeoNetworkingReq& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const IPv6OverGeoNetworkingInd_template& value_template, IPv6OverGeoNetworkingInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const IPv6OverGeoNetworkingInd_template& value_template, IPv6OverGeoNetworkingInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const IPv6OverGeoNetworkingInd_template& value_template, IPv6OverGeoNetworkingInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const IPv6OverGeoNetworkingInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const IPv6OverGeoNetworkingInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class IPv6OverGeoNetworkingInd : public Base_Type {
  CHARSTRING field_interface;
  OCTETSTRING field_macSourceAddress;
  OCTETSTRING field_macDestinationAddress;
  LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet field_ipv6Packet;
  boolean bound_flag;
public:
  IPv6OverGeoNetworkingInd();
  IPv6OverGeoNetworkingInd(const CHARSTRING& par_interface,
    const OCTETSTRING& par_macSourceAddress,
    const OCTETSTRING& par_macDestinationAddress,
    const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& par_ipv6Packet);
  IPv6OverGeoNetworkingInd(const IPv6OverGeoNetworkingInd& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  IPv6OverGeoNetworkingInd& operator=(const IPv6OverGeoNetworkingInd& other_value);
  boolean operator==(const IPv6OverGeoNetworkingInd& other_value) const;
  inline boolean operator!=(const IPv6OverGeoNetworkingInd& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& interface()
    {return field_interface;}
  inline const CHARSTRING& interface() const
    {return field_interface;}
  inline OCTETSTRING& macSourceAddress()
    {return field_macSourceAddress;}
  inline const OCTETSTRING& macSourceAddress() const
    {return field_macSourceAddress;}
  inline OCTETSTRING& macDestinationAddress()
    {return field_macDestinationAddress;}
  inline const OCTETSTRING& macDestinationAddress() const
    {return field_macDestinationAddress;}
  inline LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& ipv6Packet()
    {return field_ipv6Packet;}
  inline const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& ipv6Packet() const
    {return field_ipv6Packet;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class IPv6OverGeoNetworkingInd_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
IPv6OverGeoNetworkingInd_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const IPv6OverGeoNetworkingInd& other_value);
void copy_template(const IPv6OverGeoNetworkingInd_template& other_value);

public:
IPv6OverGeoNetworkingInd_template();
IPv6OverGeoNetworkingInd_template(template_sel other_value);
IPv6OverGeoNetworkingInd_template(const IPv6OverGeoNetworkingInd& other_value);
IPv6OverGeoNetworkingInd_template(const OPTIONAL<IPv6OverGeoNetworkingInd>& other_value);
IPv6OverGeoNetworkingInd_template(const IPv6OverGeoNetworkingInd_template& other_value);
~IPv6OverGeoNetworkingInd_template();
IPv6OverGeoNetworkingInd_template& operator=(template_sel other_value);
IPv6OverGeoNetworkingInd_template& operator=(const IPv6OverGeoNetworkingInd& other_value);
IPv6OverGeoNetworkingInd_template& operator=(const OPTIONAL<IPv6OverGeoNetworkingInd>& other_value);
IPv6OverGeoNetworkingInd_template& operator=(const IPv6OverGeoNetworkingInd_template& other_value);
boolean match(const IPv6OverGeoNetworkingInd& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
IPv6OverGeoNetworkingInd valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
IPv6OverGeoNetworkingInd_template& list_item(unsigned int list_index) const;
CHARSTRING_template& interface();
const CHARSTRING_template& interface() const;
OCTETSTRING_template& macSourceAddress();
const OCTETSTRING_template& macSourceAddress() const;
OCTETSTRING_template& macDestinationAddress();
const OCTETSTRING_template& macDestinationAddress() const;
LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& ipv6Packet();
const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& ipv6Packet() const;
int size_of() const;
void log() const;
void log_match(const IPv6OverGeoNetworkingInd& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class IPv6OverGeoNetworkingReq : public Base_Type {
  CHARSTRING field_interface;
  OCTETSTRING field_macSourceAddress;
  OCTETSTRING field_macDestinationAddress;
  LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet field_ipv6Packet;
  boolean bound_flag;
public:
  IPv6OverGeoNetworkingReq();
  IPv6OverGeoNetworkingReq(const CHARSTRING& par_interface,
    const OCTETSTRING& par_macSourceAddress,
    const OCTETSTRING& par_macDestinationAddress,
    const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& par_ipv6Packet);
  IPv6OverGeoNetworkingReq(const IPv6OverGeoNetworkingReq& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  IPv6OverGeoNetworkingReq& operator=(const IPv6OverGeoNetworkingReq& other_value);
  boolean operator==(const IPv6OverGeoNetworkingReq& other_value) const;
  inline boolean operator!=(const IPv6OverGeoNetworkingReq& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline CHARSTRING& interface()
    {return field_interface;}
  inline const CHARSTRING& interface() const
    {return field_interface;}
  inline OCTETSTRING& macSourceAddress()
    {return field_macSourceAddress;}
  inline const OCTETSTRING& macSourceAddress() const
    {return field_macSourceAddress;}
  inline OCTETSTRING& macDestinationAddress()
    {return field_macDestinationAddress;}
  inline const OCTETSTRING& macDestinationAddress() const
    {return field_macDestinationAddress;}
  inline LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& ipv6Packet()
    {return field_ipv6Packet;}
  inline const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& ipv6Packet() const
    {return field_ipv6Packet;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class IPv6OverGeoNetworkingReq_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
IPv6OverGeoNetworkingReq_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const IPv6OverGeoNetworkingReq& other_value);
void copy_template(const IPv6OverGeoNetworkingReq_template& other_value);

public:
IPv6OverGeoNetworkingReq_template();
IPv6OverGeoNetworkingReq_template(template_sel other_value);
IPv6OverGeoNetworkingReq_template(const IPv6OverGeoNetworkingReq& other_value);
IPv6OverGeoNetworkingReq_template(const OPTIONAL<IPv6OverGeoNetworkingReq>& other_value);
IPv6OverGeoNetworkingReq_template(const IPv6OverGeoNetworkingReq_template& other_value);
~IPv6OverGeoNetworkingReq_template();
IPv6OverGeoNetworkingReq_template& operator=(template_sel other_value);
IPv6OverGeoNetworkingReq_template& operator=(const IPv6OverGeoNetworkingReq& other_value);
IPv6OverGeoNetworkingReq_template& operator=(const OPTIONAL<IPv6OverGeoNetworkingReq>& other_value);
IPv6OverGeoNetworkingReq_template& operator=(const IPv6OverGeoNetworkingReq_template& other_value);
boolean match(const IPv6OverGeoNetworkingReq& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
IPv6OverGeoNetworkingReq valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
IPv6OverGeoNetworkingReq_template& list_item(unsigned int list_index) const;
CHARSTRING_template& interface();
const CHARSTRING_template& interface() const;
OCTETSTRING_template& macSourceAddress();
const OCTETSTRING_template& macSourceAddress() const;
OCTETSTRING_template& macDestinationAddress();
const OCTETSTRING_template& macDestinationAddress() const;
LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& ipv6Packet();
const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& ipv6Packet() const;
int size_of() const;
void log() const;
void log_match(const IPv6OverGeoNetworkingReq& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t& ItsIpv6OverGeoNetworkingSystem_descr_;
extern IPv6OverGeoNetworkingPort ItsIpv6OverGeoNetworkingSystem_component_ipv6OverGeoNetworkingPort;
extern const TTCN_Typedescriptor_t& ItsIpv6OverGeoNetworking_descr_;
extern IPv6OverGeoNetworkingPort ItsIpv6OverGeoNetworking_component_ipv6OverGeoNetworkingPort;
extern LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable ItsIpv6OverGeoNetworking_component_vc__gvlTable;
extern LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable ItsIpv6OverGeoNetworking_component_vc__addressTable;
extern const XERdescriptor_t IPv6OverGeoNetworkingInd_interface_xer_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_interface_descr_;
extern const XERdescriptor_t IPv6OverGeoNetworkingInd_macSourceAddress_xer_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_macSourceAddress_descr_;
extern const XERdescriptor_t IPv6OverGeoNetworkingInd_macDestinationAddress_xer_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_macDestinationAddress_descr_;
extern const TTCN_RAWdescriptor_t IPv6OverGeoNetworkingInd_raw_;
extern const TTCN_JSONdescriptor_t IPv6OverGeoNetworkingInd_json_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_descr_;
extern const XERdescriptor_t IPv6OverGeoNetworkingReq_interface_xer_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_interface_descr_;
extern const XERdescriptor_t IPv6OverGeoNetworkingReq_macSourceAddress_xer_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_macSourceAddress_descr_;
extern const XERdescriptor_t IPv6OverGeoNetworkingReq_macDestinationAddress_xer_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_macDestinationAddress_descr_;
extern const TTCN_RAWdescriptor_t IPv6OverGeoNetworkingReq_raw_;
extern const TTCN_JSONdescriptor_t IPv6OverGeoNetworkingReq_json_;
extern const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "IPv6OverGeoNetworkingPort.hh"

#endif
