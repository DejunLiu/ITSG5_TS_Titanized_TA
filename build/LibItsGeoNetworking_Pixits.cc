// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsGeoNetworking_Pixits.hh"

namespace LibItsGeoNetworking__Pixits {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static Module_Param* get_module_param(Module_Param_Name& param_name);
static void log_module_param();

/* Literal string constants */

static const unsigned char os_0_octets[] = { 0, 0, 0, 0, 0, 10 },
os_1_octets[] = { 0, 0, 0, 0, 0, 11 },
os_2_octets[] = { 0, 0, 0, 0, 0, 12 },
os_3_octets[] = { 0, 0, 0, 0, 0, 13 },
os_4_octets[] = { 0, 0, 0, 0, 0, 14 },
os_5_octets[] = { 0, 0, 0, 0, 0, 15 };
static const OCTETSTRING os_0(6, os_0_octets),
os_1(6, os_1_octets),
os_2(6, os_2_octets),
os_3(6, os_3_octets),
os_4(6, os_4_octets),
os_5(6, os_5_octets);
static const unsigned char module_checksum[] = { 0x66, 0x2c, 0x34, 0x2d, 0x68, 0xf7, 0xb7, 0x71, 0xf8, 0x66, 0x84, 0xb3, 0x53, 0xb8, 0xdd, 0x93 };

/* Global variable definitions */

static LibItsGeoNetworking__TypesAndValues::GN__Address modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR;
const LibItsGeoNetworking__TypesAndValues::GN__Address& PX__TS__NODE__A__LOCAL__GN__ADDR = modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR;
static LibItsGeoNetworking__TypesAndValues::GN__Address modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR;
const LibItsGeoNetworking__TypesAndValues::GN__Address& PX__TS__NODE__B__LOCAL__GN__ADDR = modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR;
static LibItsGeoNetworking__TypesAndValues::GN__Address modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR;
const LibItsGeoNetworking__TypesAndValues::GN__Address& PX__TS__NODE__C__LOCAL__GN__ADDR = modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR;
static LibItsGeoNetworking__TypesAndValues::GN__Address modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR;
const LibItsGeoNetworking__TypesAndValues::GN__Address& PX__TS__NODE__D__LOCAL__GN__ADDR = modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR;
static LibItsGeoNetworking__TypesAndValues::GN__Address modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR;
const LibItsGeoNetworking__TypesAndValues::GN__Address& PX__TS__NODE__E__LOCAL__GN__ADDR = modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR;
static LibItsGeoNetworking__TypesAndValues::GN__Address modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR;
const LibItsGeoNetworking__TypesAndValues::GN__Address& PX__TS__NODE__F__LOCAL__GN__ADDR = modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR;
static INTEGER modulepar_PX__MIN__NR__NEIGHBOUR;
const INTEGER& PX__MIN__NR__NEIGHBOUR = modulepar_PX__MIN__NR__NEIGHBOUR;
static INTEGER modulepar_PX__MAX__NR__NEIGHBOUR;
const INTEGER& PX__MAX__NR__NEIGHBOUR = modulepar_PX__MAX__NR__NEIGHBOUR;
static INTEGER modulepar_PX__GN__APPLICATION__MAX__RETRANS;
const INTEGER& PX__GN__APPLICATION__MAX__RETRANS = modulepar_PX__GN__APPLICATION__MAX__RETRANS;
static FLOAT modulepar_PX__T__DELTA;
const FLOAT& PX__T__DELTA = modulepar_PX__T__DELTA;
static INTEGER modulepar_PX__GN__BEACON__SERVICE__TIMER__MEDIUM;
const INTEGER& PX__GN__BEACON__SERVICE__TIMER__MEDIUM = modulepar_PX__GN__BEACON__SERVICE__TIMER__MEDIUM;
static INTEGER modulepar_PX__GN__BEACON__SERVICE__TIMER__MAXIMUM;
const INTEGER& PX__GN__BEACON__SERVICE__TIMER__MAXIMUM = modulepar_PX__GN__BEACON__SERVICE__TIMER__MAXIMUM;
static INTEGER modulepar_PX__GN__LOCATION__SERVICE__TIMER__MEDIUM;
const INTEGER& PX__GN__LOCATION__SERVICE__TIMER__MEDIUM = modulepar_PX__GN__LOCATION__SERVICE__TIMER__MEDIUM;
static INTEGER modulepar_PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM;
const INTEGER& PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM = modulepar_PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM;
static INTEGER modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER;
const INTEGER& PX__GN__APPLICATION__RETRANSMIT__TIMER = modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER;
static INTEGER modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM;
const INTEGER& PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM = modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM;
static INTEGER modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM;
const INTEGER& PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM = modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM;
static INTEGER modulepar_PX__POS__DELTA;
const INTEGER& PX__POS__DELTA = modulepar_PX__POS__DELTA;
static LibItsGeoNetworking__TypesAndValues::NextHeader modulepar_PX__GN__UPPER__LAYER;
const LibItsGeoNetworking__TypesAndValues::NextHeader& PX__GN__UPPER__LAYER = modulepar_PX__GN__UPPER__LAYER;
static BOOLEAN modulepar_PX__BTP__IN__UT__IND;
const BOOLEAN& PX__BTP__IN__UT__IND = modulepar_PX__BTP__IN__UT__IND;
static INTEGER modulepar_PX__MESSAGE__COUNT;
const INTEGER& PX__MESSAGE__COUNT = modulepar_PX__MESSAGE__COUNT;
static FLOAT modulepar_PX__NEIGHBOUR__DISCOVERY__DELAY;
const FLOAT& PX__NEIGHBOUR__DISCOVERY__DELAY = modulepar_PX__NEIGHBOUR__DISCOVERY__DELAY;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsGeoNetworking_Pixits", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, get_module_param, log_module_param, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsGeoNetworking_Pixits.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsGeoNetworking_Pixits");
LibItsGeoNetworking__TypesAndValues::module_object.pre_init_module();
current_location.update_lineno(28);
/* LibItsGeoNetworking_Pixits.ttcn, line 28 */
modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR.typeOfAddress() = LibItsGeoNetworking__TypesAndValues::TypeOfAddress::e__manual;
modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR.stationType() = LibItsGeoNetworking__TypesAndValues::StationType::e__passengerCar;
modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR.stationCountryCode() = LibCommon__BasicTypesAndValues::c__uInt10Zero;
modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR.mid() = os_0;
current_location.update_lineno(39);
/* LibItsGeoNetworking_Pixits.ttcn, line 39 */
modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR.typeOfAddress() = LibItsGeoNetworking__TypesAndValues::TypeOfAddress::e__manual;
modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR.stationType() = LibItsGeoNetworking__TypesAndValues::StationType::e__passengerCar;
modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR.stationCountryCode() = LibCommon__BasicTypesAndValues::c__uInt10Zero;
modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR.mid() = os_1;
current_location.update_lineno(50);
/* LibItsGeoNetworking_Pixits.ttcn, line 50 */
modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR.typeOfAddress() = LibItsGeoNetworking__TypesAndValues::TypeOfAddress::e__manual;
modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR.stationType() = LibItsGeoNetworking__TypesAndValues::StationType::e__passengerCar;
modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR.stationCountryCode() = LibCommon__BasicTypesAndValues::c__uInt10Zero;
modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR.mid() = os_2;
current_location.update_lineno(61);
/* LibItsGeoNetworking_Pixits.ttcn, line 61 */
modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR.typeOfAddress() = LibItsGeoNetworking__TypesAndValues::TypeOfAddress::e__manual;
modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR.stationType() = LibItsGeoNetworking__TypesAndValues::StationType::e__passengerCar;
modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR.stationCountryCode() = LibCommon__BasicTypesAndValues::c__uInt10Zero;
modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR.mid() = os_3;
current_location.update_lineno(72);
/* LibItsGeoNetworking_Pixits.ttcn, line 72 */
modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR.typeOfAddress() = LibItsGeoNetworking__TypesAndValues::TypeOfAddress::e__manual;
modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR.stationType() = LibItsGeoNetworking__TypesAndValues::StationType::e__passengerCar;
modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR.stationCountryCode() = LibCommon__BasicTypesAndValues::c__uInt10Zero;
modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR.mid() = os_4;
current_location.update_lineno(83);
/* LibItsGeoNetworking_Pixits.ttcn, line 83 */
modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR.typeOfAddress() = LibItsGeoNetworking__TypesAndValues::TypeOfAddress::e__manual;
modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR.stationType() = LibItsGeoNetworking__TypesAndValues::StationType::e__passengerCar;
modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR.stationCountryCode() = LibCommon__BasicTypesAndValues::c__uInt10Zero;
modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR.mid() = os_5;
current_location.update_lineno(98);
/* LibItsGeoNetworking_Pixits.ttcn, line 98 */
modulepar_PX__MIN__NR__NEIGHBOUR = 50;
current_location.update_lineno(104);
/* LibItsGeoNetworking_Pixits.ttcn, line 104 */
modulepar_PX__MAX__NR__NEIGHBOUR = 50;
current_location.update_lineno(110);
/* LibItsGeoNetworking_Pixits.ttcn, line 110 */
modulepar_PX__GN__APPLICATION__MAX__RETRANS = 10;
current_location.update_lineno(120);
/* LibItsGeoNetworking_Pixits.ttcn, line 120 */
modulepar_PX__T__DELTA = 1.0e-1;
current_location.update_lineno(126);
/* LibItsGeoNetworking_Pixits.ttcn, line 126 */
modulepar_PX__GN__BEACON__SERVICE__TIMER__MEDIUM = 5000;
current_location.update_lineno(132);
/* LibItsGeoNetworking_Pixits.ttcn, line 132 */
modulepar_PX__GN__BEACON__SERVICE__TIMER__MAXIMUM = 8000;
current_location.update_lineno(138);
/* LibItsGeoNetworking_Pixits.ttcn, line 138 */
modulepar_PX__GN__LOCATION__SERVICE__TIMER__MEDIUM = 2000;
current_location.update_lineno(144);
/* LibItsGeoNetworking_Pixits.ttcn, line 144 */
modulepar_PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM = 3000;
current_location.update_lineno(150);
/* LibItsGeoNetworking_Pixits.ttcn, line 150 */
modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER = 1000;
current_location.update_lineno(156);
/* LibItsGeoNetworking_Pixits.ttcn, line 156 */
modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM = 2000;
current_location.update_lineno(162);
/* LibItsGeoNetworking_Pixits.ttcn, line 162 */
modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM = 3000;
current_location.update_lineno(168);
/* LibItsGeoNetworking_Pixits.ttcn, line 168 */
modulepar_PX__POS__DELTA = 1;
current_location.update_lineno(177);
/* LibItsGeoNetworking_Pixits.ttcn, line 177 */
modulepar_PX__GN__UPPER__LAYER = LibItsGeoNetworking__TypesAndValues::NextHeader::e__btpA;
current_location.update_lineno(184);
/* LibItsGeoNetworking_Pixits.ttcn, line 184 */
modulepar_PX__BTP__IN__UT__IND = TRUE;
current_location.update_lineno(194);
/* LibItsGeoNetworking_Pixits.ttcn, line 194 */
modulepar_PX__MESSAGE__COUNT = 5;
current_location.update_lineno(200);
/* LibItsGeoNetworking_Pixits.ttcn, line 200 */
modulepar_PX__NEIGHBOUR__DISCOVERY__DELAY = 1.0;
}

static void post_init_module()
{
TTCN_Location current_location("LibItsGeoNetworking_Pixits.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsGeoNetworking_Pixits");
LibItsGeoNetworking__TypesAndValues::module_object.post_init_module();
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "PX_TS_NODE_A_LOCAL_GN_ADDR")) {
modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TS_NODE_B_LOCAL_GN_ADDR")) {
modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TS_NODE_C_LOCAL_GN_ADDR")) {
modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TS_NODE_D_LOCAL_GN_ADDR")) {
modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TS_NODE_E_LOCAL_GN_ADDR")) {
modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TS_NODE_F_LOCAL_GN_ADDR")) {
modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_MIN_NR_NEIGHBOUR")) {
modulepar_PX__MIN__NR__NEIGHBOUR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_MAX_NR_NEIGHBOUR")) {
modulepar_PX__MAX__NR__NEIGHBOUR.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_APPLICATION_MAX_RETRANS")) {
modulepar_PX__GN__APPLICATION__MAX__RETRANS.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_T_DELTA")) {
modulepar_PX__T__DELTA.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_BEACON_SERVICE_TIMER_MEDIUM")) {
modulepar_PX__GN__BEACON__SERVICE__TIMER__MEDIUM.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_BEACON_SERVICE_TIMER_MAXIMUM")) {
modulepar_PX__GN__BEACON__SERVICE__TIMER__MAXIMUM.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_LOCATION_SERVICE_TIMER_MEDIUM")) {
modulepar_PX__GN__LOCATION__SERVICE__TIMER__MEDIUM.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_LOCATION_SERVICE_TIMER_MAXIMUM")) {
modulepar_PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_APPLICATION_RETRANSMIT_TIMER")) {
modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_APPLICATION_RETRANSMIT_TIMER_MEDIUM")) {
modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_APPLICATION_RETRANSMIT_TIMER_MAXIMUM")) {
modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_POS_DELTA")) {
modulepar_PX__POS__DELTA.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_GN_UPPER_LAYER")) {
modulepar_PX__GN__UPPER__LAYER.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_BTP_IN_UT_IND")) {
modulepar_PX__BTP__IN__UT__IND.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_MESSAGE_COUNT")) {
modulepar_PX__MESSAGE__COUNT.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_NEIGHBOUR_DISCOVERY_DELAY")) {
modulepar_PX__NEIGHBOUR__DISCOVERY__DELAY.set_param(param);
return TRUE;
} else return FALSE;
}

static Module_Param* get_module_param(Module_Param_Name& param_name)
{
const char* const par_name = param_name.get_current_name();
if (!strcmp(par_name, "PX_TS_NODE_A_LOCAL_GN_ADDR")) {
return modulepar_PX__TS__NODE__A__LOCAL__GN__ADDR.get_param(param_name);
} else if (!strcmp(par_name, "PX_TS_NODE_B_LOCAL_GN_ADDR")) {
return modulepar_PX__TS__NODE__B__LOCAL__GN__ADDR.get_param(param_name);
} else if (!strcmp(par_name, "PX_TS_NODE_C_LOCAL_GN_ADDR")) {
return modulepar_PX__TS__NODE__C__LOCAL__GN__ADDR.get_param(param_name);
} else if (!strcmp(par_name, "PX_TS_NODE_D_LOCAL_GN_ADDR")) {
return modulepar_PX__TS__NODE__D__LOCAL__GN__ADDR.get_param(param_name);
} else if (!strcmp(par_name, "PX_TS_NODE_E_LOCAL_GN_ADDR")) {
return modulepar_PX__TS__NODE__E__LOCAL__GN__ADDR.get_param(param_name);
} else if (!strcmp(par_name, "PX_TS_NODE_F_LOCAL_GN_ADDR")) {
return modulepar_PX__TS__NODE__F__LOCAL__GN__ADDR.get_param(param_name);
} else if (!strcmp(par_name, "PX_MIN_NR_NEIGHBOUR")) {
return modulepar_PX__MIN__NR__NEIGHBOUR.get_param(param_name);
} else if (!strcmp(par_name, "PX_MAX_NR_NEIGHBOUR")) {
return modulepar_PX__MAX__NR__NEIGHBOUR.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_APPLICATION_MAX_RETRANS")) {
return modulepar_PX__GN__APPLICATION__MAX__RETRANS.get_param(param_name);
} else if (!strcmp(par_name, "PX_T_DELTA")) {
return modulepar_PX__T__DELTA.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_BEACON_SERVICE_TIMER_MEDIUM")) {
return modulepar_PX__GN__BEACON__SERVICE__TIMER__MEDIUM.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_BEACON_SERVICE_TIMER_MAXIMUM")) {
return modulepar_PX__GN__BEACON__SERVICE__TIMER__MAXIMUM.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_LOCATION_SERVICE_TIMER_MEDIUM")) {
return modulepar_PX__GN__LOCATION__SERVICE__TIMER__MEDIUM.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_LOCATION_SERVICE_TIMER_MAXIMUM")) {
return modulepar_PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_APPLICATION_RETRANSMIT_TIMER")) {
return modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_APPLICATION_RETRANSMIT_TIMER_MEDIUM")) {
return modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_APPLICATION_RETRANSMIT_TIMER_MAXIMUM")) {
return modulepar_PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM.get_param(param_name);
} else if (!strcmp(par_name, "PX_POS_DELTA")) {
return modulepar_PX__POS__DELTA.get_param(param_name);
} else if (!strcmp(par_name, "PX_GN_UPPER_LAYER")) {
return modulepar_PX__GN__UPPER__LAYER.get_param(param_name);
} else if (!strcmp(par_name, "PX_BTP_IN_UT_IND")) {
return modulepar_PX__BTP__IN__UT__IND.get_param(param_name);
} else if (!strcmp(par_name, "PX_MESSAGE_COUNT")) {
return modulepar_PX__MESSAGE__COUNT.get_param(param_name);
} else if (!strcmp(par_name, "PX_NEIGHBOUR_DISCOVERY_DELAY")) {
return modulepar_PX__NEIGHBOUR__DISCOVERY__DELAY.get_param(param_name);
} else return NULL;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("PX_TS_NODE_A_LOCAL_GN_ADDR := ");
PX__TS__NODE__A__LOCAL__GN__ADDR.log();
TTCN_Logger::log_event_str(", PX_TS_NODE_B_LOCAL_GN_ADDR := ");
PX__TS__NODE__B__LOCAL__GN__ADDR.log();
TTCN_Logger::log_event_str(", PX_TS_NODE_C_LOCAL_GN_ADDR := ");
PX__TS__NODE__C__LOCAL__GN__ADDR.log();
TTCN_Logger::log_event_str(", PX_TS_NODE_D_LOCAL_GN_ADDR := ");
PX__TS__NODE__D__LOCAL__GN__ADDR.log();
TTCN_Logger::log_event_str(", PX_TS_NODE_E_LOCAL_GN_ADDR := ");
PX__TS__NODE__E__LOCAL__GN__ADDR.log();
TTCN_Logger::log_event_str(", PX_TS_NODE_F_LOCAL_GN_ADDR := ");
PX__TS__NODE__F__LOCAL__GN__ADDR.log();
TTCN_Logger::log_event_str(", PX_MIN_NR_NEIGHBOUR := ");
PX__MIN__NR__NEIGHBOUR.log();
TTCN_Logger::log_event_str(", PX_MAX_NR_NEIGHBOUR := ");
PX__MAX__NR__NEIGHBOUR.log();
TTCN_Logger::log_event_str(", PX_GN_APPLICATION_MAX_RETRANS := ");
PX__GN__APPLICATION__MAX__RETRANS.log();
TTCN_Logger::log_event_str(", PX_T_DELTA := ");
PX__T__DELTA.log();
TTCN_Logger::log_event_str(", PX_GN_BEACON_SERVICE_TIMER_MEDIUM := ");
PX__GN__BEACON__SERVICE__TIMER__MEDIUM.log();
TTCN_Logger::log_event_str(", PX_GN_BEACON_SERVICE_TIMER_MAXIMUM := ");
PX__GN__BEACON__SERVICE__TIMER__MAXIMUM.log();
TTCN_Logger::log_event_str(", PX_GN_LOCATION_SERVICE_TIMER_MEDIUM := ");
PX__GN__LOCATION__SERVICE__TIMER__MEDIUM.log();
TTCN_Logger::log_event_str(", PX_GN_LOCATION_SERVICE_TIMER_MAXIMUM := ");
PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM.log();
TTCN_Logger::log_event_str(", PX_GN_APPLICATION_RETRANSMIT_TIMER := ");
PX__GN__APPLICATION__RETRANSMIT__TIMER.log();
TTCN_Logger::log_event_str(", PX_GN_APPLICATION_RETRANSMIT_TIMER_MEDIUM := ");
PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM.log();
TTCN_Logger::log_event_str(", PX_GN_APPLICATION_RETRANSMIT_TIMER_MAXIMUM := ");
PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM.log();
TTCN_Logger::log_event_str(", PX_POS_DELTA := ");
PX__POS__DELTA.log();
TTCN_Logger::log_event_str(", PX_GN_UPPER_LAYER := ");
PX__GN__UPPER__LAYER.log();
TTCN_Logger::log_event_str(", PX_BTP_IN_UT_IND := ");
PX__BTP__IN__UT__IND.log();
TTCN_Logger::log_event_str(", PX_MESSAGE_COUNT := ");
PX__MESSAGE__COUNT.log();
TTCN_Logger::log_event_str(", PX_NEIGHBOUR_DISCOVERY_DELAY := ");
PX__NEIGHBOUR__DISCOVERY__DELAY.log();
}


} /* end of namespace */
