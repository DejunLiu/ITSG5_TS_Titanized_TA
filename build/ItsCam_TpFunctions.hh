// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef ItsCam__TpFunctions_HH
#define ItsCam__TpFunctions_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibItsCam_Functions.hh"
#include "LibItsCam_Pics.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef ItsCam__TpFunctions_HH
#endif

namespace ItsCam__TpFunctions {

/* Forward declarations of classes */

class UtCamTriggers;
class UtCamTriggers_template;
class CamPdus;
class CamPdus_template;

} /* end of namespace */

#ifndef ItsCam__TpFunctions_HH
#define ItsCam__TpFunctions_HH

namespace ItsCam__TpFunctions {

/* Class definitions */

class UtCamTriggers : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
LibItsCam__TypesAndValues::UtCamTrigger **value_elements;
} *val_ptr;

static const LibItsCam__TypesAndValues::UtCamTrigger UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const UtCamTriggers& other_value);

public:
  typedef LibItsCam__TypesAndValues::UtCamTrigger of_type;
UtCamTriggers();
UtCamTriggers(null_type other_value);
UtCamTriggers(const UtCamTriggers& other_value);
~UtCamTriggers();

void clean_up();
UtCamTriggers& operator=(null_type other_value);
UtCamTriggers& operator=(const UtCamTriggers& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const UtCamTriggers& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const UtCamTriggers& other_value) const { return !(*this == other_value); }

LibItsCam__TypesAndValues::UtCamTrigger& operator[](int index_value);
LibItsCam__TypesAndValues::UtCamTrigger& operator[](const INTEGER& index_value);
const LibItsCam__TypesAndValues::UtCamTrigger& operator[](int index_value) const;
const LibItsCam__TypesAndValues::UtCamTrigger& operator[](const INTEGER& index_value) const;

UtCamTriggers operator<<=(int rotate_count) const;
UtCamTriggers operator<<=(const INTEGER& rotate_count) const;
UtCamTriggers operator>>=(int rotate_count) const;
UtCamTriggers operator>>=(const INTEGER& rotate_count) const;

UtCamTriggers operator+(const UtCamTriggers& other_value) const;

UtCamTriggers substr(int index, int returncount) const;

UtCamTriggers replace(int index, int len, const UtCamTriggers& repl) const;

UtCamTriggers replace(int index, int len, const UtCamTriggers_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class UtCamTriggers_template : public Record_Of_Template {
union {
struct {
int n_elements;
LibItsCam__TypesAndValues::UtCamTrigger_template **value_elements;
} single_value;
struct {
unsigned int n_values;
UtCamTriggers_template *list_value;
} value_list;
};
void copy_value(const UtCamTriggers& other_value);
void copy_template(const UtCamTriggers_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
UtCamTriggers_template();
UtCamTriggers_template(template_sel other_value);
UtCamTriggers_template(null_type other_value);
UtCamTriggers_template(const UtCamTriggers& other_value);
UtCamTriggers_template(const OPTIONAL<UtCamTriggers>& other_value);
UtCamTriggers_template(const UtCamTriggers_template& other_value);
~UtCamTriggers_template();

void clean_up();
UtCamTriggers_template& operator=(template_sel other_value);
UtCamTriggers_template& operator=(null_type other_value);
UtCamTriggers_template& operator=(const UtCamTriggers& other_value);
UtCamTriggers_template& operator=(const OPTIONAL<UtCamTriggers>& other_value);
UtCamTriggers_template& operator=(const UtCamTriggers_template& other_value);

LibItsCam__TypesAndValues::UtCamTrigger_template& operator[](int index_value);
LibItsCam__TypesAndValues::UtCamTrigger_template& operator[](const INTEGER& index_value);
const LibItsCam__TypesAndValues::UtCamTrigger_template& operator[](int index_value) const;
const LibItsCam__TypesAndValues::UtCamTrigger_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const UtCamTriggers& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
UtCamTriggers valueof() const;
UtCamTriggers substr(int index, int returncount) const;

UtCamTriggers replace(int index, int len, const UtCamTriggers_template& repl) const;

UtCamTriggers replace(int index, int len, const UtCamTriggers& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
UtCamTriggers_template& list_item(unsigned int list_index);
void log() const;
void log_match(const UtCamTriggers& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};

class CamPdus : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
CAM__PDU__Descriptions::CAM **value_elements;
} *val_ptr;

static const CAM__PDU__Descriptions::CAM UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const CamPdus& other_value);

public:
  typedef CAM__PDU__Descriptions::CAM of_type;
CamPdus();
CamPdus(null_type other_value);
CamPdus(const CamPdus& other_value);
~CamPdus();

void clean_up();
CamPdus& operator=(null_type other_value);
CamPdus& operator=(const CamPdus& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const CamPdus& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const CamPdus& other_value) const { return !(*this == other_value); }

CAM__PDU__Descriptions::CAM& operator[](int index_value);
CAM__PDU__Descriptions::CAM& operator[](const INTEGER& index_value);
const CAM__PDU__Descriptions::CAM& operator[](int index_value) const;
const CAM__PDU__Descriptions::CAM& operator[](const INTEGER& index_value) const;

CamPdus operator<<=(int rotate_count) const;
CamPdus operator<<=(const INTEGER& rotate_count) const;
CamPdus operator>>=(int rotate_count) const;
CamPdus operator>>=(const INTEGER& rotate_count) const;

CamPdus operator+(const CamPdus& other_value) const;

CamPdus substr(int index, int returncount) const;

CamPdus replace(int index, int len, const CamPdus& repl) const;

CamPdus replace(int index, int len, const CamPdus_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class CamPdus_template : public Record_Of_Template {
union {
struct {
int n_elements;
CAM__PDU__Descriptions::CAM_template **value_elements;
} single_value;
struct {
unsigned int n_values;
CamPdus_template *list_value;
} value_list;
};
void copy_value(const CamPdus& other_value);
void copy_template(const CamPdus_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy);

public:
CamPdus_template();
CamPdus_template(template_sel other_value);
CamPdus_template(null_type other_value);
CamPdus_template(const CamPdus& other_value);
CamPdus_template(const OPTIONAL<CamPdus>& other_value);
CamPdus_template(const CamPdus_template& other_value);
~CamPdus_template();

void clean_up();
CamPdus_template& operator=(template_sel other_value);
CamPdus_template& operator=(null_type other_value);
CamPdus_template& operator=(const CamPdus& other_value);
CamPdus_template& operator=(const OPTIONAL<CamPdus>& other_value);
CamPdus_template& operator=(const CamPdus_template& other_value);

CAM__PDU__Descriptions::CAM_template& operator[](int index_value);
CAM__PDU__Descriptions::CAM_template& operator[](const INTEGER& index_value);
const CAM__PDU__Descriptions::CAM_template& operator[](int index_value) const;
const CAM__PDU__Descriptions::CAM_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const CamPdus& other_value, boolean legacy = FALSE) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
CamPdus valueof() const;
CamPdus substr(int index, int returncount) const;

CamPdus replace(int index, int len, const CamPdus_template& repl) const;

CamPdus replace(int index, int len, const CamPdus& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
CamPdus_template& list_item(unsigned int list_index);
void log() const;
void log_match(const CamPdus& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
};


/* Function prototypes */

extern void f__CAM__MSD__FMT__BV__01();
extern void start_f__CAM__MSD__FMT__BV__01(const COMPONENT& component_reference);
extern void f__CAM__MSD__FMT__BV__02();
extern void start_f__CAM__MSD__FMT__BV__02(const COMPONENT& component_reference);
extern void f__CAM__MSD__FMT__BV__03();
extern void start_f__CAM__MSD__FMT__BV__03(const COMPONENT& component_reference);
extern void f__CAM__MSD__FMT__BV__04();
extern void start_f__CAM__MSD__FMT__BV__04(const COMPONENT& component_reference);
extern void f__CAM__MSD__FMT__BV__05();
extern void start_f__CAM__MSD__FMT__BV__05(const COMPONENT& component_reference);
extern boolean operator==(null_type null_value, const UtCamTriggers& other_value);
inline boolean operator!=(null_type null_value, const UtCamTriggers& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const CamPdus& other_value);
inline boolean operator!=(null_type null_value, const CamPdus& other_value) { return !(null_value == other_value); }
extern void f__CAM__MSD__INA__BV__01(const CHARSTRING& p__INFO, const UtCamTriggers_template& p__utTriggers, const CamPdus_template& p__camPdus);
extern void start_f__CAM__MSD__INA__BV__01(const COMPONENT& component_reference, const CHARSTRING& p__INFO, const UtCamTriggers_template& p__utTriggers, const CamPdus_template& p__camPdus);
extern void f__CAM__MSD__INA__BV__01__01();
extern void start_f__CAM__MSD__INA__BV__01__01(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__02();
extern void start_f__CAM__MSD__INA__BV__01__02(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__03();
extern void start_f__CAM__MSD__INA__BV__01__03(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__04();
extern void start_f__CAM__MSD__INA__BV__01__04(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__05();
extern void start_f__CAM__MSD__INA__BV__01__05(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__06();
extern void start_f__CAM__MSD__INA__BV__01__06(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__07();
extern void start_f__CAM__MSD__INA__BV__01__07(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__08();
extern void start_f__CAM__MSD__INA__BV__01__08(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__09();
extern void start_f__CAM__MSD__INA__BV__01__09(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__10();
extern void start_f__CAM__MSD__INA__BV__01__10(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__11();
extern void start_f__CAM__MSD__INA__BV__01__11(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__12();
extern void start_f__CAM__MSD__INA__BV__01__12(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__13();
extern void start_f__CAM__MSD__INA__BV__01__13(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__14();
extern void start_f__CAM__MSD__INA__BV__01__14(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__15();
extern void start_f__CAM__MSD__INA__BV__01__15(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__16();
extern void start_f__CAM__MSD__INA__BV__01__16(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__17();
extern void start_f__CAM__MSD__INA__BV__01__17(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__18();
extern void start_f__CAM__MSD__INA__BV__01__18(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__19();
extern void start_f__CAM__MSD__INA__BV__01__19(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__20();
extern void start_f__CAM__MSD__INA__BV__01__20(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__21();
extern void start_f__CAM__MSD__INA__BV__01__21(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__22();
extern void start_f__CAM__MSD__INA__BV__01__22(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__23();
extern void start_f__CAM__MSD__INA__BV__01__23(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__24();
extern void start_f__CAM__MSD__INA__BV__01__24(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__25();
extern void start_f__CAM__MSD__INA__BV__01__25(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__26();
extern void start_f__CAM__MSD__INA__BV__01__26(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__27();
extern void start_f__CAM__MSD__INA__BV__01__27(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__28();
extern void start_f__CAM__MSD__INA__BV__01__28(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__29();
extern void start_f__CAM__MSD__INA__BV__01__29(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__30();
extern void start_f__CAM__MSD__INA__BV__01__30(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__31();
extern void start_f__CAM__MSD__INA__BV__01__31(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__32();
extern void start_f__CAM__MSD__INA__BV__01__32(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__33();
extern void start_f__CAM__MSD__INA__BV__01__33(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__34();
extern void start_f__CAM__MSD__INA__BV__01__34(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__01__35();
extern void start_f__CAM__MSD__INA__BV__01__35(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__02();
extern void start_f__CAM__MSD__INA__BV__02(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__03();
extern void start_f__CAM__MSD__INA__BV__03(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__04();
extern void start_f__CAM__MSD__INA__BV__04(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__05();
extern void start_f__CAM__MSD__INA__BV__05(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__06();
extern void start_f__CAM__MSD__INA__BV__06(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__07();
extern void start_f__CAM__MSD__INA__BV__07(const COMPONENT& component_reference);
extern void f__CAM__MSD__INA__BV__08();
extern void start_f__CAM__MSD__INA__BV__08(const COMPONENT& component_reference);
extern void f__CAM__MSD__GFQ__TI__01();
extern void start_f__CAM__MSD__GFQ__TI__01(const COMPONENT& component_reference);
extern LibCommon__VerdictControl::FncRetCode f__CAM__MSD__GFQ__TI__01__helper(TIMER& t__minTransInterval);
extern void f__CAM__MSD__GFQ__TI__02();
extern void start_f__CAM__MSD__GFQ__TI__02(const COMPONENT& component_reference);
extern LibCommon__VerdictControl::FncRetCode f__CAM__MSD__GFQ__TI__02__helper(TIMER& t__maxTransInterval);
extern void f__CAM__MSD__GFQ__TI__03();
extern void start_f__CAM__MSD__GFQ__TI__03(const COMPONENT& component_reference);
extern void f__CAM__MSD__GFQ__BV__04();
extern void start_f__CAM__MSD__GFQ__BV__04(const COMPONENT& component_reference);
extern void f__CAM__MSD__GFQ__BV__05();
extern void start_f__CAM__MSD__GFQ__BV__05(const COMPONENT& component_reference);
extern void f__CAM__MSD__GFQ__BV__06();
extern void start_f__CAM__MSD__GFQ__BV__06(const COMPONENT& component_reference);
extern void f__CAM__MSD__GFQ__TI__07();
extern void start_f__CAM__MSD__GFQ__TI__07(const COMPONENT& component_reference);
extern void f__CAM__MSD__GFQ__TI__08();
extern void start_f__CAM__MSD__GFQ__TI__08(const COMPONENT& component_reference);
extern void f__CAM__MSD__PAR__BV__01();
extern void start_f__CAM__MSD__PAR__BV__01(const COMPONENT& component_reference);
extern void f__CAM__MSD__PAR__BV__02();
extern void start_f__CAM__MSD__PAR__BV__02(const COMPONENT& component_reference);
extern void f__CAM__MSD__PAR__BV__03();
extern void start_f__CAM__MSD__PAR__BV__03(const COMPONENT& component_reference);
extern void f__CAM__MSP__BV__01();
extern void start_f__CAM__MSP__BV__01(const COMPONENT& component_reference);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t UtCamTriggers_descr_;
extern const TTCN_Typedescriptor_t CamPdus_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
