// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsDenm__TestSystem_HH
#define LibItsDenm__TestSystem_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibItsCommon_TestSystem.hh"
#include "LibItsCommon_TypesAndValues.hh"
#include "LibItsDenm_TypesAndValues.hh"
#include "General_Types.hh"
#include "TTCN_EncDec.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LibItsDenm__TestSystem_HH
#endif

namespace LibItsDenm__TestSystem {

/* Forward declarations of classes */

class UpperTesterDENMPort_BASE;
class UpperTesterDENMPort;
class DenmPort_BASE;
class DenmPort;
class DenmInd;
class DenmInd_template;
class DenmReq;
class DenmReq_template;

} /* end of namespace */

#ifndef LibItsDenm__TestSystem_HH
#define LibItsDenm__TestSystem_HH

namespace LibItsDenm__TestSystem {

/* Type definitions */

typedef COMPONENT ItsDenmSystem;
typedef COMPONENT_template ItsDenmSystem_template;
typedef COMPONENT ItsDenm;
typedef COMPONENT_template ItsDenm_template;

/* Class definitions */

class UpperTesterDENMPort_BASE : public PORT {
enum msg_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2, MESSAGE_3, MESSAGE_4, MESSAGE_5, MESSAGE_6 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
LibItsCommon__TypesAndValues::UtInitializeResult *message_0;
LibItsDenm__TypesAndValues::UtDenmTriggerResult *message_1;
LibItsDenm__TypesAndValues::UtDenmUpdateResult *message_2;
BOOLEAN *message_3;
LibItsCommon__TypesAndValues::UtChangePositionResult *message_4;
LibItsCommon__TypesAndValues::UtChangePseudonymResult *message_5;
LibItsDenm__TypesAndValues::UtDenmEventInd *message_6;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
UpperTesterDENMPort_BASE(const char *par_port_name);
~UpperTesterDENMPort_BASE();
void send(const LibItsCommon__TypesAndValues::UtInitialize& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtInitialize& send_par);
void send(const LibItsCommon__TypesAndValues::UtInitialize_template& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtInitialize_template& send_par);
void send(const LibItsDenm__TypesAndValues::UtDenmTrigger& send_par, const COMPONENT& destination_component);
void send(const LibItsDenm__TypesAndValues::UtDenmTrigger& send_par);
void send(const LibItsDenm__TypesAndValues::UtDenmTrigger_template& send_par, const COMPONENT& destination_component);
void send(const LibItsDenm__TypesAndValues::UtDenmTrigger_template& send_par);
void send(const LibItsDenm__TypesAndValues::UtDenmUpdate& send_par, const COMPONENT& destination_component);
void send(const LibItsDenm__TypesAndValues::UtDenmUpdate& send_par);
void send(const LibItsDenm__TypesAndValues::UtDenmUpdate_template& send_par, const COMPONENT& destination_component);
void send(const LibItsDenm__TypesAndValues::UtDenmUpdate_template& send_par);
void send(const LibItsDenm__TypesAndValues::UtDenmTermination& send_par, const COMPONENT& destination_component);
void send(const LibItsDenm__TypesAndValues::UtDenmTermination& send_par);
void send(const LibItsDenm__TypesAndValues::UtDenmTermination_template& send_par, const COMPONENT& destination_component);
void send(const LibItsDenm__TypesAndValues::UtDenmTermination_template& send_par);
void send(const LibItsCommon__TypesAndValues::UtChangePosition& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtChangePosition& send_par);
void send(const LibItsCommon__TypesAndValues::UtChangePosition_template& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtChangePosition_template& send_par);
void send(const LibItsCommon__TypesAndValues::UtChangePseudonym& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtChangePseudonym& send_par);
void send(const LibItsCommon__TypesAndValues::UtChangePseudonym_template& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtChangePseudonym_template& send_par);
protected:
virtual void outgoing_send(const LibItsCommon__TypesAndValues::UtInitialize& send_par) = 0;
virtual void outgoing_send(const LibItsDenm__TypesAndValues::UtDenmTrigger& send_par) = 0;
virtual void outgoing_send(const LibItsDenm__TypesAndValues::UtDenmUpdate& send_par) = 0;
virtual void outgoing_send(const LibItsDenm__TypesAndValues::UtDenmTermination& send_par) = 0;
virtual void outgoing_send(const LibItsCommon__TypesAndValues::UtChangePosition& send_par) = 0;
virtual void outgoing_send(const LibItsCommon__TypesAndValues::UtChangePseudonym& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsDenm__TypesAndValues::UtDenmTriggerResult_template& value_template, LibItsDenm__TypesAndValues::UtDenmTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsDenm__TypesAndValues::UtDenmTriggerResult_template& value_template, LibItsDenm__TypesAndValues::UtDenmTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsDenm__TypesAndValues::UtDenmTriggerResult_template& value_template, LibItsDenm__TypesAndValues::UtDenmTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsDenm__TypesAndValues::UtDenmUpdateResult_template& value_template, LibItsDenm__TypesAndValues::UtDenmUpdateResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsDenm__TypesAndValues::UtDenmUpdateResult_template& value_template, LibItsDenm__TypesAndValues::UtDenmUpdateResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsDenm__TypesAndValues::UtDenmUpdateResult_template& value_template, LibItsDenm__TypesAndValues::UtDenmUpdateResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const BOOLEAN_template& value_template, BOOLEAN *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const BOOLEAN_template& value_template, BOOLEAN *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const BOOLEAN_template& value_template, BOOLEAN *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsCommon__TypesAndValues::UtChangePositionResult_template& value_template, LibItsCommon__TypesAndValues::UtChangePositionResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsCommon__TypesAndValues::UtChangePositionResult_template& value_template, LibItsCommon__TypesAndValues::UtChangePositionResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsCommon__TypesAndValues::UtChangePositionResult_template& value_template, LibItsCommon__TypesAndValues::UtChangePositionResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsCommon__TypesAndValues::UtChangePseudonymResult_template& value_template, LibItsCommon__TypesAndValues::UtChangePseudonymResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsCommon__TypesAndValues::UtChangePseudonymResult_template& value_template, LibItsCommon__TypesAndValues::UtChangePseudonymResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsCommon__TypesAndValues::UtChangePseudonymResult_template& value_template, LibItsCommon__TypesAndValues::UtChangePseudonymResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsDenm__TypesAndValues::UtDenmEventInd_template& value_template, LibItsDenm__TypesAndValues::UtDenmEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsDenm__TypesAndValues::UtDenmEventInd_template& value_template, LibItsDenm__TypesAndValues::UtDenmEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsDenm__TypesAndValues::UtDenmEventInd_template& value_template, LibItsDenm__TypesAndValues::UtDenmEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const LibItsCommon__TypesAndValues::UtInitializeResult& incoming_par, component sender_component);
void incoming_message(const LibItsDenm__TypesAndValues::UtDenmTriggerResult& incoming_par, component sender_component);
void incoming_message(const LibItsDenm__TypesAndValues::UtDenmUpdateResult& incoming_par, component sender_component);
void incoming_message(const BOOLEAN& incoming_par, component sender_component);
void incoming_message(const LibItsCommon__TypesAndValues::UtChangePositionResult& incoming_par, component sender_component);
void incoming_message(const LibItsCommon__TypesAndValues::UtChangePseudonymResult& incoming_par, component sender_component);
void incoming_message(const LibItsDenm__TypesAndValues::UtDenmEventInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const LibItsCommon__TypesAndValues::UtInitializeResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsDenm__TypesAndValues::UtDenmTriggerResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsDenm__TypesAndValues::UtDenmUpdateResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const BOOLEAN& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsCommon__TypesAndValues::UtChangePositionResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsCommon__TypesAndValues::UtChangePseudonymResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsDenm__TypesAndValues::UtDenmEventInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class DenmPort_BASE : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
DenmInd *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
DenmPort_BASE(const char *par_port_name);
~DenmPort_BASE();
void send(const DenmReq& send_par, const COMPONENT& destination_component);
void send(const DenmReq& send_par);
void send(const DenmReq_template& send_par, const COMPONENT& destination_component);
void send(const DenmReq_template& send_par);
protected:
virtual void outgoing_send(const DenmReq& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const DenmInd_template& value_template, DenmInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const DenmInd_template& value_template, DenmInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const DenmInd_template& value_template, DenmInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const DenmInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const DenmInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class DenmInd : public Base_Type {
  DENM__PDU__Descriptions::DENM field_msgIn;
  INTEGER field_gnNextHeader;
  INTEGER field_gnHeaderType;
  INTEGER field_gnHeaderSubtype;
  INTEGER field_gnLifetime;
  INTEGER field_gnTrafficClass;
  INTEGER field_btpDestinationPort;
  INTEGER field_btpInfo;
  boolean bound_flag;
public:
  DenmInd();
  DenmInd(const DENM__PDU__Descriptions::DENM& par_msgIn,
    const INTEGER& par_gnNextHeader,
    const INTEGER& par_gnHeaderType,
    const INTEGER& par_gnHeaderSubtype,
    const INTEGER& par_gnLifetime,
    const INTEGER& par_gnTrafficClass,
    const INTEGER& par_btpDestinationPort,
    const INTEGER& par_btpInfo);
  DenmInd(const DenmInd& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  DenmInd& operator=(const DenmInd& other_value);
  boolean operator==(const DenmInd& other_value) const;
  inline boolean operator!=(const DenmInd& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline DENM__PDU__Descriptions::DENM& msgIn()
    {return field_msgIn;}
  inline const DENM__PDU__Descriptions::DENM& msgIn() const
    {return field_msgIn;}
  inline INTEGER& gnNextHeader()
    {return field_gnNextHeader;}
  inline const INTEGER& gnNextHeader() const
    {return field_gnNextHeader;}
  inline INTEGER& gnHeaderType()
    {return field_gnHeaderType;}
  inline const INTEGER& gnHeaderType() const
    {return field_gnHeaderType;}
  inline INTEGER& gnHeaderSubtype()
    {return field_gnHeaderSubtype;}
  inline const INTEGER& gnHeaderSubtype() const
    {return field_gnHeaderSubtype;}
  inline INTEGER& gnLifetime()
    {return field_gnLifetime;}
  inline const INTEGER& gnLifetime() const
    {return field_gnLifetime;}
  inline INTEGER& gnTrafficClass()
    {return field_gnTrafficClass;}
  inline const INTEGER& gnTrafficClass() const
    {return field_gnTrafficClass;}
  inline INTEGER& btpDestinationPort()
    {return field_btpDestinationPort;}
  inline const INTEGER& btpDestinationPort() const
    {return field_btpDestinationPort;}
  inline INTEGER& btpInfo()
    {return field_btpInfo;}
  inline const INTEGER& btpInfo() const
    {return field_btpInfo;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class DenmInd_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
DenmInd_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const DenmInd& other_value);
void copy_template(const DenmInd_template& other_value);

public:
DenmInd_template();
DenmInd_template(template_sel other_value);
DenmInd_template(const DenmInd& other_value);
DenmInd_template(const OPTIONAL<DenmInd>& other_value);
DenmInd_template(const DenmInd_template& other_value);
~DenmInd_template();
DenmInd_template& operator=(template_sel other_value);
DenmInd_template& operator=(const DenmInd& other_value);
DenmInd_template& operator=(const OPTIONAL<DenmInd>& other_value);
DenmInd_template& operator=(const DenmInd_template& other_value);
boolean match(const DenmInd& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
DenmInd valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
DenmInd_template& list_item(unsigned int list_index) const;
DENM__PDU__Descriptions::DENM_template& msgIn();
const DENM__PDU__Descriptions::DENM_template& msgIn() const;
INTEGER_template& gnNextHeader();
const INTEGER_template& gnNextHeader() const;
INTEGER_template& gnHeaderType();
const INTEGER_template& gnHeaderType() const;
INTEGER_template& gnHeaderSubtype();
const INTEGER_template& gnHeaderSubtype() const;
INTEGER_template& gnLifetime();
const INTEGER_template& gnLifetime() const;
INTEGER_template& gnTrafficClass();
const INTEGER_template& gnTrafficClass() const;
INTEGER_template& btpDestinationPort();
const INTEGER_template& btpDestinationPort() const;
INTEGER_template& btpInfo();
const INTEGER_template& btpInfo() const;
int size_of() const;
void log() const;
void log_match(const DenmInd& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class DenmReq : public Base_Type {
  DENM__PDU__Descriptions::DENM field_msgOut;
  boolean bound_flag;
public:
  DenmReq();
  DenmReq(const DENM__PDU__Descriptions::DENM& par_msgOut);
  DenmReq(const DenmReq& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  DenmReq& operator=(const DenmReq& other_value);
  boolean operator==(const DenmReq& other_value) const;
  inline boolean operator!=(const DenmReq& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline DENM__PDU__Descriptions::DENM& msgOut()
    {return field_msgOut;}
  inline const DENM__PDU__Descriptions::DENM& msgOut() const
    {return field_msgOut;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class DenmReq_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
DenmReq_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const DenmReq& other_value);
void copy_template(const DenmReq_template& other_value);

public:
DenmReq_template();
DenmReq_template(template_sel other_value);
DenmReq_template(const DenmReq& other_value);
DenmReq_template(const OPTIONAL<DenmReq>& other_value);
DenmReq_template(const DenmReq_template& other_value);
~DenmReq_template();
DenmReq_template& operator=(template_sel other_value);
DenmReq_template& operator=(const DenmReq& other_value);
DenmReq_template& operator=(const OPTIONAL<DenmReq>& other_value);
DenmReq_template& operator=(const DenmReq_template& other_value);
boolean match(const DenmReq& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
DenmReq valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
DenmReq_template& list_item(unsigned int list_index) const;
DENM__PDU__Descriptions::DENM_template& msgOut();
const DENM__PDU__Descriptions::DENM_template& msgOut() const;
int size_of() const;
void log() const;
void log_match(const DenmReq& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t& ItsDenmSystem_descr_;
extern UpperTesterDENMPort ItsDenmSystem_component_utPort;
extern DenmPort ItsDenmSystem_component_denmPort;
extern const TTCN_Typedescriptor_t& ItsDenm_descr_;
extern UpperTesterDENMPort ItsDenm_component_utPort;
extern DenmPort ItsDenm_component_denmPort;
extern DEFAULT ItsDenm_component_vc__default;
extern INTEGER ItsDenm_component_vc__sequenceNo;
extern BOOLEAN ItsDenm_component_vc__denmReceived;
extern LibItsDenm__TypesAndValues::UtDenmEventIndList ItsDenm_component_vc__utEvents;
extern LibItsDenm__TypesAndValues::UtDenmActionIDList ItsDenm_component_vc__utActionIDs;
extern const XERdescriptor_t DenmInd_gnNextHeader_xer_;
extern const TTCN_Typedescriptor_t DenmInd_gnNextHeader_descr_;
extern const XERdescriptor_t DenmInd_gnHeaderType_xer_;
extern const TTCN_Typedescriptor_t DenmInd_gnHeaderType_descr_;
extern const XERdescriptor_t DenmInd_gnHeaderSubtype_xer_;
extern const TTCN_Typedescriptor_t DenmInd_gnHeaderSubtype_descr_;
extern const XERdescriptor_t DenmInd_gnLifetime_xer_;
extern const TTCN_Typedescriptor_t DenmInd_gnLifetime_descr_;
extern const XERdescriptor_t DenmInd_gnTrafficClass_xer_;
extern const TTCN_Typedescriptor_t DenmInd_gnTrafficClass_descr_;
extern const XERdescriptor_t DenmInd_btpDestinationPort_xer_;
extern const TTCN_Typedescriptor_t DenmInd_btpDestinationPort_descr_;
extern const XERdescriptor_t DenmInd_btpInfo_xer_;
extern const TTCN_Typedescriptor_t DenmInd_btpInfo_descr_;
extern const TTCN_RAWdescriptor_t DenmInd_raw_;
extern const TTCN_JSONdescriptor_t DenmInd_json_;
extern const TTCN_Typedescriptor_t DenmInd_descr_;
extern const TTCN_RAWdescriptor_t DenmReq_raw_;
extern const TTCN_JSONdescriptor_t DenmReq_json_;
extern const TTCN_Typedescriptor_t DenmReq_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "UpperTesterDENMPort.hh"
#include "DenmPort.hh"

#endif
