// This C++ header file was generated by the ASN.1 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef MAP__SPAT__ETSI_HH
#define MAP__SPAT__ETSI_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "DSRC.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the ASN.1 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef MAP__SPAT__ETSI_HH
#endif

namespace MAP__SPAT__ETSI {

/* Forward declarations of classes */

class MAP__PDU;
class MAP__PDU_template;
class SPAT__PDU;
class SPAT__PDU_template;

} /* end of namespace */

#ifndef MAP__SPAT__ETSI_HH
#define MAP__SPAT__ETSI_HH

namespace MAP__SPAT__ETSI {

/* Class definitions */

class MAP__PDU : public Base_Type {
  ITS__Container::ItsPduHeader field_header;
  DSRC::MapData field_mapData;
  boolean bound_flag;
public:
  MAP__PDU();
  MAP__PDU(const ITS__Container::ItsPduHeader& par_header,
    const DSRC::MapData& par_mapData);
  MAP__PDU(const MAP__PDU& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MAP__PDU& operator=(const MAP__PDU& other_value);
  boolean operator==(const MAP__PDU& other_value) const;
  inline boolean operator!=(const MAP__PDU& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline ITS__Container::ItsPduHeader& header()
    {return field_header;}
  inline const ITS__Container::ItsPduHeader& header() const
    {return field_header;}
  inline DSRC::MapData& mapData()
    {return field_mapData;}
  inline const DSRC::MapData& mapData() const
    {return field_mapData;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
ASN_BER_TLV_t* BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const;
boolean BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class MAP__PDU_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MAP__PDU_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MAP__PDU& other_value);
void copy_template(const MAP__PDU_template& other_value);

public:
MAP__PDU_template();
MAP__PDU_template(template_sel other_value);
MAP__PDU_template(const MAP__PDU& other_value);
MAP__PDU_template(const OPTIONAL<MAP__PDU>& other_value);
MAP__PDU_template(const MAP__PDU_template& other_value);
~MAP__PDU_template();
MAP__PDU_template& operator=(template_sel other_value);
MAP__PDU_template& operator=(const MAP__PDU& other_value);
MAP__PDU_template& operator=(const OPTIONAL<MAP__PDU>& other_value);
MAP__PDU_template& operator=(const MAP__PDU_template& other_value);
boolean match(const MAP__PDU& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MAP__PDU valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MAP__PDU_template& list_item(unsigned int list_index) const;
ITS__Container::ItsPduHeader_template& header();
const ITS__Container::ItsPduHeader_template& header() const;
DSRC::MapData_template& mapData();
const DSRC::MapData_template& mapData() const;
int size_of() const;
void log() const;
void log_match(const MAP__PDU& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class SPAT__PDU : public Base_Type {
  ITS__Container::ItsPduHeader field_header;
  DSRC::SPAT field_spatData;
  boolean bound_flag;
public:
  SPAT__PDU();
  SPAT__PDU(const ITS__Container::ItsPduHeader& par_header,
    const DSRC::SPAT& par_spatData);
  SPAT__PDU(const SPAT__PDU& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  SPAT__PDU& operator=(const SPAT__PDU& other_value);
  boolean operator==(const SPAT__PDU& other_value) const;
  inline boolean operator!=(const SPAT__PDU& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline ITS__Container::ItsPduHeader& header()
    {return field_header;}
  inline const ITS__Container::ItsPduHeader& header() const
    {return field_header;}
  inline DSRC::SPAT& spatData()
    {return field_spatData;}
  inline const DSRC::SPAT& spatData() const
    {return field_spatData;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
ASN_BER_TLV_t* BER_encode_TLV(const TTCN_Typedescriptor_t& p_td, unsigned p_coding) const;
boolean BER_decode_TLV(const TTCN_Typedescriptor_t& p_td, const ASN_BER_TLV_t& p_tlv, unsigned L_form);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class SPAT__PDU_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
SPAT__PDU_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const SPAT__PDU& other_value);
void copy_template(const SPAT__PDU_template& other_value);

public:
SPAT__PDU_template();
SPAT__PDU_template(template_sel other_value);
SPAT__PDU_template(const SPAT__PDU& other_value);
SPAT__PDU_template(const OPTIONAL<SPAT__PDU>& other_value);
SPAT__PDU_template(const SPAT__PDU_template& other_value);
~SPAT__PDU_template();
SPAT__PDU_template& operator=(template_sel other_value);
SPAT__PDU_template& operator=(const SPAT__PDU& other_value);
SPAT__PDU_template& operator=(const OPTIONAL<SPAT__PDU>& other_value);
SPAT__PDU_template& operator=(const SPAT__PDU_template& other_value);
boolean match(const SPAT__PDU& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
SPAT__PDU valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
SPAT__PDU_template& list_item(unsigned int list_index) const;
ITS__Container::ItsPduHeader_template& header();
const ITS__Container::ItsPduHeader_template& header() const;
DSRC::SPAT_template& spatData();
const DSRC::SPAT_template& spatData() const;
int size_of() const;
void log() const;
void log_match(const SPAT__PDU& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const ASN_BERdescriptor_t MAP__PDU_header_ber_;
extern const TTCN_Typedescriptor_t MAP__PDU_header_descr_;
extern const ASN_BERdescriptor_t MAP__PDU_mapData_ber_;
extern const TTCN_Typedescriptor_t MAP__PDU_mapData_descr_;
extern const TTCN_JSONdescriptor_t MAP__PDU_json_;
extern const TTCN_Typedescriptor_t MAP__PDU_descr_;
extern const ASN_BERdescriptor_t SPAT__PDU_header_ber_;
extern const TTCN_Typedescriptor_t SPAT__PDU_header_descr_;
extern const ASN_BERdescriptor_t SPAT__PDU_spatData_ber_;
extern const TTCN_Typedescriptor_t SPAT__PDU_spatData_descr_;
extern const TTCN_JSONdescriptor_t SPAT__PDU_json_;
extern const TTCN_Typedescriptor_t SPAT__PDU_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
