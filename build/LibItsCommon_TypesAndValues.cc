// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsCommon_TypesAndValues.hh"

namespace LibItsCommon__TypesAndValues {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0xaa, 0xa7, 0x70, 0xa9, 0x01, 0xce, 0xac, 0x10, 0x62, 0xd3, 0x8c, 0xe7, 0x41, 0xc0, 0xfd, 0xed };

/* Global variable definitions */

const XERdescriptor_t       UtInitialize_hashedId8_xer_ = { {"hashedId8>\n", "hashedId8>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtInitialize_hashedId8_descr_ = { "@LibItsCommon_TypesAndValues.UtInitialize.hashedId8", &OCTETSTRING_ber_, &LibCommon__DataStrings::Oct8_raw_, &OCTETSTRING_text_, &UtInitialize_hashedId8_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtInitialize_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtInitialize
const TTCN_JSONdescriptor_t UtInitialize_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtInitialize_descr_ = { "@LibItsCommon_TypesAndValues.UtInitialize", NULL, &UtInitialize_raw_, NULL, NULL, &UtInitialize_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtInitializeResult_utInitializeResult_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtInitializeResult_utInitializeResult_xer_ = { {"utInitializeResult>\n", "utInitializeResult>\n"}, {20, 20}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtInitializeResult_utInitializeResult_descr_ = { "@LibItsCommon_TypesAndValues.UtInitializeResult.utInitializeResult", &BOOLEAN_ber_, &UtInitializeResult_utInitializeResult_raw_, &BOOLEAN_text_, &UtInitializeResult_utInitializeResult_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtInitializeResult_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtInitializeResult
const TTCN_JSONdescriptor_t UtInitializeResult_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtInitializeResult_descr_ = { "@LibItsCommon_TypesAndValues.UtInitializeResult", NULL, &UtInitializeResult_raw_, NULL, NULL, &UtInitializeResult_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePosition_latitude_raw_ = {32,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtChangePosition_latitude_xer_ = { {"latitude>\n", "latitude>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtChangePosition_latitude_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePosition.latitude", &INTEGER_ber_, &UtChangePosition_latitude_raw_, &INTEGER_text_, &UtChangePosition_latitude_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePosition_longitude_raw_ = {32,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtChangePosition_longitude_xer_ = { {"longitude>\n", "longitude>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtChangePosition_longitude_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePosition.longitude", &INTEGER_ber_, &UtChangePosition_longitude_raw_, &INTEGER_text_, &UtChangePosition_longitude_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePosition_elevation_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtChangePosition_elevation_xer_ = { {"elevation>\n", "elevation>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtChangePosition_elevation_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePosition.elevation", &INTEGER_ber_, &UtChangePosition_elevation_raw_, &INTEGER_text_, &UtChangePosition_elevation_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePosition_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtChangePosition
const TTCN_JSONdescriptor_t UtChangePosition_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtChangePosition_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePosition", NULL, &UtChangePosition_raw_, NULL, NULL, &UtChangePosition_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePositionResult_utChangePositionResult_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtChangePositionResult_utChangePositionResult_xer_ = { {"utChangePositionResult>\n", "utChangePositionResult>\n"}, {24, 24}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtChangePositionResult_utChangePositionResult_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePositionResult.utChangePositionResult", &BOOLEAN_ber_, &UtChangePositionResult_utChangePositionResult_raw_, &BOOLEAN_text_, &UtChangePositionResult_utChangePositionResult_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePositionResult_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtChangePositionResult
const TTCN_JSONdescriptor_t UtChangePositionResult_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtChangePositionResult_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePositionResult", NULL, &UtChangePositionResult_raw_, NULL, NULL, &UtChangePositionResult_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePseudonym_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtChangePseudonym
const TTCN_JSONdescriptor_t UtChangePseudonym_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtChangePseudonym_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePseudonym", NULL, &UtChangePseudonym_raw_, NULL, NULL, &UtChangePseudonym_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePseudonymResult_utChangePseudonymResult_raw_ = {8,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UtChangePseudonymResult_utChangePseudonymResult_xer_ = { {"utChangePseudonymResult>\n", "utChangePseudonymResult>\n"}, {25, 25}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UtChangePseudonymResult_utChangePseudonymResult_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePseudonymResult.utChangePseudonymResult", &BOOLEAN_ber_, &UtChangePseudonymResult_utChangePseudonymResult_raw_, &BOOLEAN_text_, &UtChangePseudonymResult_utChangePseudonymResult_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UtChangePseudonymResult_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for UtChangePseudonymResult
const TTCN_JSONdescriptor_t UtChangePseudonymResult_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UtChangePseudonymResult_descr_ = { "@LibItsCommon_TypesAndValues.UtChangePseudonymResult", NULL, &UtChangePseudonymResult_raw_, NULL, NULL, &UtChangePseudonymResult_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static INTEGER const_c__semiAxisLengthOneCentimeter;
const INTEGER& c__semiAxisLengthOneCentimeter = const_c__semiAxisLengthOneCentimeter;
static INTEGER const_c__semiAxisLengthUnavailable;
const INTEGER& c__semiAxisLengthUnavailable = const_c__semiAxisLengthUnavailable;
static INTEGER const_c__headingConfidence__withinZeroPointOneDegree;
const INTEGER& c__headingConfidence__withinZeroPointOneDegree = const_c__headingConfidence__withinZeroPointOneDegree;
static INTEGER const_c__headingValue__wgs84North;
const INTEGER& c__headingValue__wgs84North = const_c__headingValue__wgs84North;
static INTEGER const_c__altitudeValue__seaLevel;
const INTEGER& c__altitudeValue__seaLevel = const_c__altitudeValue__seaLevel;
static INTEGER const_c__stationType__passengerCar;
const INTEGER& c__stationType__passengerCar = const_c__stationType__passengerCar;
static INTEGER const_c__longitudinalAccelerationValue__unavailable;
const INTEGER& c__longitudinalAccelerationValue__unavailable = const_c__longitudinalAccelerationValue__unavailable;
static INTEGER const_c__accelerationConfidence__unavailable;
const INTEGER& c__accelerationConfidence__unavailable = const_c__accelerationConfidence__unavailable;
static INTEGER const_c__curvatureValue__straight;
const INTEGER& c__curvatureValue__straight = const_c__curvatureValue__straight;
static INTEGER const_c__yawRateValue__straight;
const INTEGER& c__yawRateValue__straight = const_c__yawRateValue__straight;
static INTEGER const_c__causeReserved;
const INTEGER& c__causeReserved = const_c__causeReserved;
static INTEGER const_c__causeTrafficCondition;
const INTEGER& c__causeTrafficCondition = const_c__causeTrafficCondition;
static INTEGER const_c__causeAccident;
const INTEGER& c__causeAccident = const_c__causeAccident;
static INTEGER const_c__causeRoadworks;
const INTEGER& c__causeRoadworks = const_c__causeRoadworks;
static INTEGER const_c__causeAdverseWeatherCondition__Adhesion;
const INTEGER& c__causeAdverseWeatherCondition__Adhesion = const_c__causeAdverseWeatherCondition__Adhesion;
static INTEGER const_c__causeHazardousLocation__SurfaceCondition;
const INTEGER& c__causeHazardousLocation__SurfaceCondition = const_c__causeHazardousLocation__SurfaceCondition;
static INTEGER const_c__causeHazardousLocation__ObstacleOnTheRoad;
const INTEGER& c__causeHazardousLocation__ObstacleOnTheRoad = const_c__causeHazardousLocation__ObstacleOnTheRoad;
static INTEGER const_c__causeHazardousLocation__AnimalOnTheRoad;
const INTEGER& c__causeHazardousLocation__AnimalOnTheRoad = const_c__causeHazardousLocation__AnimalOnTheRoad;
static INTEGER const_c__causeHumanPresenceOnTheRoad;
const INTEGER& c__causeHumanPresenceOnTheRoad = const_c__causeHumanPresenceOnTheRoad;
static INTEGER const_c__causeWrongWayDriving;
const INTEGER& c__causeWrongWayDriving = const_c__causeWrongWayDriving;
static INTEGER const_c__causeRescueAndRecoveryWorkInProgress;
const INTEGER& c__causeRescueAndRecoveryWorkInProgress = const_c__causeRescueAndRecoveryWorkInProgress;
static INTEGER const_c__causeAdverseWeatherCondition__ExtremeWeatherCondition;
const INTEGER& c__causeAdverseWeatherCondition__ExtremeWeatherCondition = const_c__causeAdverseWeatherCondition__ExtremeWeatherCondition;
static INTEGER const_c__causeAdverseWeatherCondition__Visibility;
const INTEGER& c__causeAdverseWeatherCondition__Visibility = const_c__causeAdverseWeatherCondition__Visibility;
static INTEGER const_c__causeAdverseWeatherCondition__Precipitation;
const INTEGER& c__causeAdverseWeatherCondition__Precipitation = const_c__causeAdverseWeatherCondition__Precipitation;
static INTEGER const_c__causeSlowVehicle;
const INTEGER& c__causeSlowVehicle = const_c__causeSlowVehicle;
static INTEGER const_c__causeDangerousEndOfQueue;
const INTEGER& c__causeDangerousEndOfQueue = const_c__causeDangerousEndOfQueue;
static INTEGER const_c__causeVehicleBreakdown;
const INTEGER& c__causeVehicleBreakdown = const_c__causeVehicleBreakdown;
static INTEGER const_c__causePostCrash;
const INTEGER& c__causePostCrash = const_c__causePostCrash;
static INTEGER const_c__causeHumanProblem;
const INTEGER& c__causeHumanProblem = const_c__causeHumanProblem;
static INTEGER const_c__causeStationaryVehicle;
const INTEGER& c__causeStationaryVehicle = const_c__causeStationaryVehicle;
static INTEGER const_c__causeEmergencyVehicleApproaching;
const INTEGER& c__causeEmergencyVehicleApproaching = const_c__causeEmergencyVehicleApproaching;
static INTEGER const_c__causeHazardousLocation__DangerousCurve;
const INTEGER& c__causeHazardousLocation__DangerousCurve = const_c__causeHazardousLocation__DangerousCurve;
static INTEGER const_c__causeCollisionRisk;
const INTEGER& c__causeCollisionRisk = const_c__causeCollisionRisk;
static INTEGER const_c__causeSignalViolation;
const INTEGER& c__causeSignalViolation = const_c__causeSignalViolation;
static INTEGER const_c__causeDangerousSituation;
const INTEGER& c__causeDangerousSituation = const_c__causeDangerousSituation;
static INTEGER const_c__subCauseCode__Unavailable;
const INTEGER& c__subCauseCode__Unavailable = const_c__subCauseCode__Unavailable;
static INTEGER const_c__vehicleBreakDownSubCauseCode__engineProblem;
const INTEGER& c__vehicleBreakDownSubCauseCode__engineProblem = const_c__vehicleBreakDownSubCauseCode__engineProblem;
static INTEGER const_c__slowVehicleSubCauseCode__convoy;
const INTEGER& c__slowVehicleSubCauseCode__convoy = const_c__slowVehicleSubCauseCode__convoy;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsCommon_TypesAndValues", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

UtInitialize::UtInitialize()
{
  bound_flag = FALSE;
}

UtInitialize::UtInitialize(const OCTETSTRING& par_hashedId8)
  :   field_hashedId8(par_hashedId8)
{
  bound_flag = TRUE;
}

UtInitialize::UtInitialize(const UtInitialize& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsCommon_TypesAndValues.UtInitialize.");
bound_flag = TRUE;
if (other_value.hashedId8().is_bound()) field_hashedId8 = other_value.hashedId8();
else field_hashedId8.clean_up();
}

void UtInitialize::clean_up()
{
field_hashedId8.clean_up();
bound_flag = FALSE;
}

UtInitialize& UtInitialize::operator=(const UtInitialize& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtInitialize.");
  bound_flag = TRUE;
  if (other_value.hashedId8().is_bound()) field_hashedId8 = other_value.hashedId8();
  else field_hashedId8.clean_up();
}
return *this;
}

boolean UtInitialize::operator==(const UtInitialize& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_hashedId8==other_value.field_hashedId8;
}

boolean UtInitialize::is_bound() const
{
if (bound_flag) return TRUE;
if(field_hashedId8.is_bound()) return TRUE;
return FALSE;
}
boolean UtInitialize::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_hashedId8.is_value()) return FALSE;
return TRUE;
}
int UtInitialize::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsCommon_TypesAndValues.UtInitialize");
  return 1;
}

void UtInitialize::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ hashedId8 := ");
field_hashedId8.log();
TTCN_Logger::log_event_str(" }");
}

void UtInitialize::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsCommon_TypesAndValues.UtInitialize'");
    }
    if (strcmp("hashedId8", param_field) == 0) {
      hashedId8().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtInitialize'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @LibItsCommon_TypesAndValues.UtInitialize has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) hashedId8().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "hashedId8")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          hashedId8().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtInitialize: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsCommon_TypesAndValues.UtInitialize");
  }
}

Module_Param* UtInitialize::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsCommon_TypesAndValues.UtInitialize'");
    }
    if (strcmp("hashedId8", param_field) == 0) {
      return hashedId8().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtInitialize'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_hashedId8 = field_hashedId8.get_param(param_name);
  mp_field_hashedId8->set_id(new Module_Param_FieldName(mcopystr("hashedId8")));
  mp->add_elem(mp_field_hashedId8);
  return mp;
  }

void UtInitialize::set_implicit_omit()
{
if (hashedId8().is_bound()) hashedId8().set_implicit_omit();
}

void UtInitialize::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsCommon_TypesAndValues.UtInitialize.");
field_hashedId8.encode_text(text_buf);
}

void UtInitialize::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_hashedId8.decode_text(text_buf);
}

void UtInitialize::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtInitialize::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtInitialize::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_hashedId8.RAW_decode(LibCommon__DataStrings::Oct8_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtInitialize::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 1;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(1);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, LibCommon__DataStrings::Oct8_descr_.raw);
  encoded_length += field_hashedId8.RAW_encode(LibCommon__DataStrings::Oct8_descr_, *myleaf.body.node.nodes[0]);
  return myleaf.length = encoded_length;
}

int UtInitialize::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtInitialize.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "hashedId8");
    enc_len += field_hashedId8.JSON_encode(LibCommon__DataStrings::Oct8_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtInitialize::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (9 == name_len && 0 == strncmp(fld_name, "hashedId8", name_len)) {
         int ret_val = field_hashedId8.JSON_decode(LibCommon__DataStrings::Oct8_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "hashedId8");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_hashedId8.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "hashedId8");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtInitialize_template::single_value_struct {
OCTETSTRING_template field_hashedId8;
};

void UtInitialize_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_hashedId8 = ANY_VALUE;
}
}
}

void UtInitialize_template::copy_value(const UtInitialize& other_value)
{
single_value = new single_value_struct;
if (other_value.hashedId8().is_bound()) {
  single_value->field_hashedId8 = other_value.hashedId8();
} else {
  single_value->field_hashedId8.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtInitialize_template::copy_template(const UtInitialize_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.hashedId8().get_selection()) {
single_value->field_hashedId8 = other_value.hashedId8();
} else {
single_value->field_hashedId8.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtInitialize_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitialize.");
break;
}
set_selection(other_value);
}

UtInitialize_template::UtInitialize_template()
{
}

UtInitialize_template::UtInitialize_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtInitialize_template::UtInitialize_template(const UtInitialize& other_value)
{
copy_value(other_value);
}

UtInitialize_template::UtInitialize_template(const OPTIONAL<UtInitialize>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtInitialize&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsCommon_TypesAndValues.UtInitialize from an unbound optional field.");
}
}

UtInitialize_template::UtInitialize_template(const UtInitialize_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtInitialize_template::~UtInitialize_template()
{
clean_up();
}

UtInitialize_template& UtInitialize_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtInitialize_template& UtInitialize_template::operator=(const UtInitialize& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtInitialize_template& UtInitialize_template::operator=(const OPTIONAL<UtInitialize>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtInitialize&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsCommon_TypesAndValues.UtInitialize.");
}
return *this;
}

UtInitialize_template& UtInitialize_template::operator=(const UtInitialize_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtInitialize_template::match(const UtInitialize& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.hashedId8().is_bound()) return FALSE;
if(!single_value->field_hashedId8.match(other_value.hashedId8(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitialize.");
}
return FALSE;
}

boolean UtInitialize_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_hashedId8.is_bound()) return TRUE;
return FALSE;
}

boolean UtInitialize_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_hashedId8.is_value()) return FALSE;
return TRUE;
}

void UtInitialize_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtInitialize UtInitialize_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsCommon_TypesAndValues.UtInitialize.");
UtInitialize ret_val;
if (single_value->field_hashedId8.is_bound()) {
ret_val.hashedId8() = single_value->field_hashedId8.valueof();
}
return ret_val;
}

void UtInitialize_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsCommon_TypesAndValues.UtInitialize.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtInitialize_template[list_length];
}

UtInitialize_template& UtInitialize_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsCommon_TypesAndValues.UtInitialize.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsCommon_TypesAndValues.UtInitialize.");
return value_list.list_value[list_index];
}

OCTETSTRING_template& UtInitialize_template::hashedId8()
{
set_specific();
return single_value->field_hashedId8;
}

const OCTETSTRING_template& UtInitialize_template::hashedId8() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field hashedId8 of a non-specific template of type @LibItsCommon_TypesAndValues.UtInitialize.");
return single_value->field_hashedId8;
}

int UtInitialize_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitialize which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitialize containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitialize containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitialize containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitialize containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitialize containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitialize.");
  }
  return 0;
}

void UtInitialize_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ hashedId8 := ");
single_value->field_hashedId8.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtInitialize_template::log_match(const UtInitialize& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_hashedId8.match(match_value.hashedId8(), legacy)){
TTCN_Logger::log_logmatch_info(".hashedId8");
single_value->field_hashedId8.log_match(match_value.hashedId8(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ hashedId8 := ");
single_value->field_hashedId8.log_match(match_value.hashedId8(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtInitialize_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_hashedId8.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitialize.");
}
}

void UtInitialize_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_hashedId8.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtInitialize_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsCommon_TypesAndValues.UtInitialize.");
}
}

void UtInitialize_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsCommon_TypesAndValues.UtInitialize'");
    }
    if (strcmp("hashedId8", param_field) == 0) {
      hashedId8().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsCommon_TypesAndValues.UtInitialize'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtInitialize_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @LibItsCommon_TypesAndValues.UtInitialize has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) hashedId8().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "hashedId8")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          hashedId8().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtInitialize: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsCommon_TypesAndValues.UtInitialize");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtInitialize_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsCommon_TypesAndValues.UtInitialize'");
    }
    if (strcmp("hashedId8", param_field) == 0) {
      return hashedId8().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtInitialize'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_hashedId8 = single_value->field_hashedId8.get_param(param_name);
    mp_field_hashedId8->set_id(new Module_Param_FieldName(mcopystr("hashedId8")));
    mp->add_elem(mp_field_hashedId8);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtInitialize_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_hashedId8.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtInitialize");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsCommon_TypesAndValues.UtInitialize");
}

boolean UtInitialize_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtInitialize_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtInitializeResult::UtInitializeResult()
{
  bound_flag = FALSE;
}

UtInitializeResult::UtInitializeResult(const BOOLEAN& par_utInitializeResult)
  :   field_utInitializeResult(par_utInitializeResult)
{
  bound_flag = TRUE;
}

UtInitializeResult::UtInitializeResult(const UtInitializeResult& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
bound_flag = TRUE;
if (other_value.utInitializeResult().is_bound()) field_utInitializeResult = other_value.utInitializeResult();
else field_utInitializeResult.clean_up();
}

void UtInitializeResult::clean_up()
{
field_utInitializeResult.clean_up();
bound_flag = FALSE;
}

UtInitializeResult& UtInitializeResult::operator=(const UtInitializeResult& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
  bound_flag = TRUE;
  if (other_value.utInitializeResult().is_bound()) field_utInitializeResult = other_value.utInitializeResult();
  else field_utInitializeResult.clean_up();
}
return *this;
}

boolean UtInitializeResult::operator==(const UtInitializeResult& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_utInitializeResult==other_value.field_utInitializeResult;
}

boolean UtInitializeResult::is_bound() const
{
if (bound_flag) return TRUE;
if(field_utInitializeResult.is_bound()) return TRUE;
return FALSE;
}
boolean UtInitializeResult::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_utInitializeResult.is_value()) return FALSE;
return TRUE;
}
int UtInitializeResult::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsCommon_TypesAndValues.UtInitializeResult");
  return 1;
}

void UtInitializeResult::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ utInitializeResult := ");
field_utInitializeResult.log();
TTCN_Logger::log_event_str(" }");
}

void UtInitializeResult::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsCommon_TypesAndValues.UtInitializeResult'");
    }
    if (strcmp("utInitializeResult", param_field) == 0) {
      utInitializeResult().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtInitializeResult'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @LibItsCommon_TypesAndValues.UtInitializeResult has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) utInitializeResult().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "utInitializeResult")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          utInitializeResult().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtInitializeResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsCommon_TypesAndValues.UtInitializeResult");
  }
}

Module_Param* UtInitializeResult::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsCommon_TypesAndValues.UtInitializeResult'");
    }
    if (strcmp("utInitializeResult", param_field) == 0) {
      return utInitializeResult().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtInitializeResult'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_utInitializeResult = field_utInitializeResult.get_param(param_name);
  mp_field_utInitializeResult->set_id(new Module_Param_FieldName(mcopystr("utInitializeResult")));
  mp->add_elem(mp_field_utInitializeResult);
  return mp;
  }

void UtInitializeResult::set_implicit_omit()
{
if (utInitializeResult().is_bound()) utInitializeResult().set_implicit_omit();
}

void UtInitializeResult::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
field_utInitializeResult.encode_text(text_buf);
}

void UtInitializeResult::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_utInitializeResult.decode_text(text_buf);
}

void UtInitializeResult::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtInitializeResult::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtInitializeResult::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_utInitializeResult.RAW_decode(UtInitializeResult_utInitializeResult_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtInitializeResult::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 1;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(1);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, UtInitializeResult_utInitializeResult_descr_.raw);
  encoded_length += field_utInitializeResult.RAW_encode(UtInitializeResult_utInitializeResult_descr_, *myleaf.body.node.nodes[0]);
  return myleaf.length = encoded_length;
}

int UtInitializeResult::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "utInitializeResult");
    enc_len += field_utInitializeResult.JSON_encode(UtInitializeResult_utInitializeResult_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtInitializeResult::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (18 == name_len && 0 == strncmp(fld_name, "utInitializeResult", name_len)) {
         int ret_val = field_utInitializeResult.JSON_decode(UtInitializeResult_utInitializeResult_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "utInitializeResult");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_utInitializeResult.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "utInitializeResult");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtInitializeResult_template::single_value_struct {
BOOLEAN_template field_utInitializeResult;
};

void UtInitializeResult_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_utInitializeResult = ANY_VALUE;
}
}
}

void UtInitializeResult_template::copy_value(const UtInitializeResult& other_value)
{
single_value = new single_value_struct;
if (other_value.utInitializeResult().is_bound()) {
  single_value->field_utInitializeResult = other_value.utInitializeResult();
} else {
  single_value->field_utInitializeResult.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtInitializeResult_template::copy_template(const UtInitializeResult_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.utInitializeResult().get_selection()) {
single_value->field_utInitializeResult = other_value.utInitializeResult();
} else {
single_value->field_utInitializeResult.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtInitializeResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
break;
}
set_selection(other_value);
}

UtInitializeResult_template::UtInitializeResult_template()
{
}

UtInitializeResult_template::UtInitializeResult_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtInitializeResult_template::UtInitializeResult_template(const UtInitializeResult& other_value)
{
copy_value(other_value);
}

UtInitializeResult_template::UtInitializeResult_template(const OPTIONAL<UtInitializeResult>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtInitializeResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsCommon_TypesAndValues.UtInitializeResult from an unbound optional field.");
}
}

UtInitializeResult_template::UtInitializeResult_template(const UtInitializeResult_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtInitializeResult_template::~UtInitializeResult_template()
{
clean_up();
}

UtInitializeResult_template& UtInitializeResult_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtInitializeResult_template& UtInitializeResult_template::operator=(const UtInitializeResult& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtInitializeResult_template& UtInitializeResult_template::operator=(const OPTIONAL<UtInitializeResult>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtInitializeResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
}
return *this;
}

UtInitializeResult_template& UtInitializeResult_template::operator=(const UtInitializeResult_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtInitializeResult_template::match(const UtInitializeResult& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.utInitializeResult().is_bound()) return FALSE;
if(!single_value->field_utInitializeResult.match(other_value.utInitializeResult(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
}
return FALSE;
}

boolean UtInitializeResult_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_utInitializeResult.is_bound()) return TRUE;
return FALSE;
}

boolean UtInitializeResult_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_utInitializeResult.is_value()) return FALSE;
return TRUE;
}

void UtInitializeResult_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtInitializeResult UtInitializeResult_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
UtInitializeResult ret_val;
if (single_value->field_utInitializeResult.is_bound()) {
ret_val.utInitializeResult() = single_value->field_utInitializeResult.valueof();
}
return ret_val;
}

void UtInitializeResult_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtInitializeResult_template[list_length];
}

UtInitializeResult_template& UtInitializeResult_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
return value_list.list_value[list_index];
}

BOOLEAN_template& UtInitializeResult_template::utInitializeResult()
{
set_specific();
return single_value->field_utInitializeResult;
}

const BOOLEAN_template& UtInitializeResult_template::utInitializeResult() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field utInitializeResult of a non-specific template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
return single_value->field_utInitializeResult;
}

int UtInitializeResult_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitializeResult which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitializeResult containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitializeResult containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitializeResult containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitializeResult containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtInitializeResult containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
  }
  return 0;
}

void UtInitializeResult_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ utInitializeResult := ");
single_value->field_utInitializeResult.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtInitializeResult_template::log_match(const UtInitializeResult& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_utInitializeResult.match(match_value.utInitializeResult(), legacy)){
TTCN_Logger::log_logmatch_info(".utInitializeResult");
single_value->field_utInitializeResult.log_match(match_value.utInitializeResult(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ utInitializeResult := ");
single_value->field_utInitializeResult.log_match(match_value.utInitializeResult(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtInitializeResult_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_utInitializeResult.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
}
}

void UtInitializeResult_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_utInitializeResult.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtInitializeResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsCommon_TypesAndValues.UtInitializeResult.");
}
}

void UtInitializeResult_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsCommon_TypesAndValues.UtInitializeResult'");
    }
    if (strcmp("utInitializeResult", param_field) == 0) {
      utInitializeResult().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsCommon_TypesAndValues.UtInitializeResult'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtInitializeResult_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @LibItsCommon_TypesAndValues.UtInitializeResult has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) utInitializeResult().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "utInitializeResult")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          utInitializeResult().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtInitializeResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsCommon_TypesAndValues.UtInitializeResult");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtInitializeResult_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsCommon_TypesAndValues.UtInitializeResult'");
    }
    if (strcmp("utInitializeResult", param_field) == 0) {
      return utInitializeResult().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtInitializeResult'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_utInitializeResult = single_value->field_utInitializeResult.get_param(param_name);
    mp_field_utInitializeResult->set_id(new Module_Param_FieldName(mcopystr("utInitializeResult")));
    mp->add_elem(mp_field_utInitializeResult);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtInitializeResult_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_utInitializeResult.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtInitializeResult");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsCommon_TypesAndValues.UtInitializeResult");
}

boolean UtInitializeResult_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtInitializeResult_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtChangePosition::UtChangePosition()
{
  bound_flag = FALSE;
}

UtChangePosition::UtChangePosition(const INTEGER& par_latitude,
    const INTEGER& par_longitude,
    const INTEGER& par_elevation)
  :   field_latitude(par_latitude),
  field_longitude(par_longitude),
  field_elevation(par_elevation)
{
  bound_flag = TRUE;
}

UtChangePosition::UtChangePosition(const UtChangePosition& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsCommon_TypesAndValues.UtChangePosition.");
bound_flag = TRUE;
if (other_value.latitude().is_bound()) field_latitude = other_value.latitude();
else field_latitude.clean_up();
if (other_value.longitude().is_bound()) field_longitude = other_value.longitude();
else field_longitude.clean_up();
if (other_value.elevation().is_bound()) field_elevation = other_value.elevation();
else field_elevation.clean_up();
}

void UtChangePosition::clean_up()
{
field_latitude.clean_up();
field_longitude.clean_up();
field_elevation.clean_up();
bound_flag = FALSE;
}

UtChangePosition& UtChangePosition::operator=(const UtChangePosition& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePosition.");
  bound_flag = TRUE;
  if (other_value.latitude().is_bound()) field_latitude = other_value.latitude();
  else field_latitude.clean_up();
  if (other_value.longitude().is_bound()) field_longitude = other_value.longitude();
  else field_longitude.clean_up();
  if (other_value.elevation().is_bound()) field_elevation = other_value.elevation();
  else field_elevation.clean_up();
}
return *this;
}

boolean UtChangePosition::operator==(const UtChangePosition& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_latitude==other_value.field_latitude
  && field_longitude==other_value.field_longitude
  && field_elevation==other_value.field_elevation;
}

boolean UtChangePosition::is_bound() const
{
if (bound_flag) return TRUE;
if(field_latitude.is_bound()) return TRUE;
if(field_longitude.is_bound()) return TRUE;
if(field_elevation.is_bound()) return TRUE;
return FALSE;
}
boolean UtChangePosition::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_latitude.is_value()) return FALSE;
if(!field_longitude.is_value()) return FALSE;
if(!field_elevation.is_value()) return FALSE;
return TRUE;
}
int UtChangePosition::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsCommon_TypesAndValues.UtChangePosition");
  return 3;
}

void UtChangePosition::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ latitude := ");
field_latitude.log();
TTCN_Logger::log_event_str(", longitude := ");
field_longitude.log();
TTCN_Logger::log_event_str(", elevation := ");
field_elevation.log();
TTCN_Logger::log_event_str(" }");
}

void UtChangePosition::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsCommon_TypesAndValues.UtChangePosition'");
    }
    if (strcmp("latitude", param_field) == 0) {
      latitude().set_param(param);
      return;
    } else if (strcmp("longitude", param_field) == 0) {
      longitude().set_param(param);
      return;
    } else if (strcmp("elevation", param_field) == 0) {
      elevation().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePosition'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (3<mp->get_size()) {
      param.error("record value of type @LibItsCommon_TypesAndValues.UtChangePosition has 3 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) latitude().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) longitude().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) elevation().set_param(*mp->get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "latitude")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          latitude().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "longitude")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          longitude().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elevation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elevation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtChangePosition: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsCommon_TypesAndValues.UtChangePosition");
  }
}

Module_Param* UtChangePosition::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsCommon_TypesAndValues.UtChangePosition'");
    }
    if (strcmp("latitude", param_field) == 0) {
      return latitude().get_param(param_name);
    } else if (strcmp("longitude", param_field) == 0) {
      return longitude().get_param(param_name);
    } else if (strcmp("elevation", param_field) == 0) {
      return elevation().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePosition'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_latitude = field_latitude.get_param(param_name);
  mp_field_latitude->set_id(new Module_Param_FieldName(mcopystr("latitude")));
  mp->add_elem(mp_field_latitude);
  Module_Param* mp_field_longitude = field_longitude.get_param(param_name);
  mp_field_longitude->set_id(new Module_Param_FieldName(mcopystr("longitude")));
  mp->add_elem(mp_field_longitude);
  Module_Param* mp_field_elevation = field_elevation.get_param(param_name);
  mp_field_elevation->set_id(new Module_Param_FieldName(mcopystr("elevation")));
  mp->add_elem(mp_field_elevation);
  return mp;
  }

void UtChangePosition::set_implicit_omit()
{
if (latitude().is_bound()) latitude().set_implicit_omit();
if (longitude().is_bound()) longitude().set_implicit_omit();
if (elevation().is_bound()) elevation().set_implicit_omit();
}

void UtChangePosition::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsCommon_TypesAndValues.UtChangePosition.");
field_latitude.encode_text(text_buf);
field_longitude.encode_text(text_buf);
field_elevation.encode_text(text_buf);
}

void UtChangePosition::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_latitude.decode_text(text_buf);
field_longitude.decode_text(text_buf);
field_elevation.decode_text(text_buf);
}

void UtChangePosition::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtChangePosition::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtChangePosition::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_latitude.RAW_decode(UtChangePosition_latitude_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_longitude.RAW_decode(UtChangePosition_longitude_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_elevation.RAW_decode(UtChangePosition_elevation_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtChangePosition::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 3;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(3);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, UtChangePosition_latitude_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, UtChangePosition_longitude_descr_.raw);
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, UtChangePosition_elevation_descr_.raw);
  encoded_length += field_latitude.RAW_encode(UtChangePosition_latitude_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_longitude.RAW_encode(UtChangePosition_longitude_descr_, *myleaf.body.node.nodes[1]);
  encoded_length += field_elevation.RAW_encode(UtChangePosition_elevation_descr_, *myleaf.body.node.nodes[2]);
  return myleaf.length = encoded_length;
}

int UtChangePosition::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtChangePosition.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "latitude");
    enc_len += field_latitude.JSON_encode(UtChangePosition_latitude_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "longitude");
    enc_len += field_longitude.JSON_encode(UtChangePosition_longitude_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elevation");
    enc_len += field_elevation.JSON_encode(UtChangePosition_elevation_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtChangePosition::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "latitude", name_len)) {
         int ret_val = field_latitude.JSON_decode(UtChangePosition_latitude_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "latitude");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "longitude", name_len)) {
         int ret_val = field_longitude.JSON_decode(UtChangePosition_longitude_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "longitude");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "elevation", name_len)) {
         int ret_val = field_elevation.JSON_decode(UtChangePosition_elevation_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elevation");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_latitude.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "latitude");
    return JSON_ERROR_FATAL;
  }
if (!field_longitude.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "longitude");
    return JSON_ERROR_FATAL;
  }
if (!field_elevation.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elevation");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtChangePosition_template::single_value_struct {
INTEGER_template field_latitude;
INTEGER_template field_longitude;
INTEGER_template field_elevation;
};

void UtChangePosition_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_latitude = ANY_VALUE;
single_value->field_longitude = ANY_VALUE;
single_value->field_elevation = ANY_VALUE;
}
}
}

void UtChangePosition_template::copy_value(const UtChangePosition& other_value)
{
single_value = new single_value_struct;
if (other_value.latitude().is_bound()) {
  single_value->field_latitude = other_value.latitude();
} else {
  single_value->field_latitude.clean_up();
}
if (other_value.longitude().is_bound()) {
  single_value->field_longitude = other_value.longitude();
} else {
  single_value->field_longitude.clean_up();
}
if (other_value.elevation().is_bound()) {
  single_value->field_elevation = other_value.elevation();
} else {
  single_value->field_elevation.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtChangePosition_template::copy_template(const UtChangePosition_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.latitude().get_selection()) {
single_value->field_latitude = other_value.latitude();
} else {
single_value->field_latitude.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.longitude().get_selection()) {
single_value->field_longitude = other_value.longitude();
} else {
single_value->field_longitude.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elevation().get_selection()) {
single_value->field_elevation = other_value.elevation();
} else {
single_value->field_elevation.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtChangePosition_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
break;
}
set_selection(other_value);
}

UtChangePosition_template::UtChangePosition_template()
{
}

UtChangePosition_template::UtChangePosition_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtChangePosition_template::UtChangePosition_template(const UtChangePosition& other_value)
{
copy_value(other_value);
}

UtChangePosition_template::UtChangePosition_template(const OPTIONAL<UtChangePosition>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtChangePosition&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsCommon_TypesAndValues.UtChangePosition from an unbound optional field.");
}
}

UtChangePosition_template::UtChangePosition_template(const UtChangePosition_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtChangePosition_template::~UtChangePosition_template()
{
clean_up();
}

UtChangePosition_template& UtChangePosition_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtChangePosition_template& UtChangePosition_template::operator=(const UtChangePosition& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtChangePosition_template& UtChangePosition_template::operator=(const OPTIONAL<UtChangePosition>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtChangePosition&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
}
return *this;
}

UtChangePosition_template& UtChangePosition_template::operator=(const UtChangePosition_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtChangePosition_template::match(const UtChangePosition& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.latitude().is_bound()) return FALSE;
if(!single_value->field_latitude.match(other_value.latitude(), legacy))return FALSE;
if(!other_value.longitude().is_bound()) return FALSE;
if(!single_value->field_longitude.match(other_value.longitude(), legacy))return FALSE;
if(!other_value.elevation().is_bound()) return FALSE;
if(!single_value->field_elevation.match(other_value.elevation(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
}
return FALSE;
}

boolean UtChangePosition_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_latitude.is_bound()) return TRUE;
if (single_value->field_longitude.is_bound()) return TRUE;
if (single_value->field_elevation.is_bound()) return TRUE;
return FALSE;
}

boolean UtChangePosition_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_latitude.is_value()) return FALSE;
if (!single_value->field_longitude.is_value()) return FALSE;
if (!single_value->field_elevation.is_value()) return FALSE;
return TRUE;
}

void UtChangePosition_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtChangePosition UtChangePosition_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
UtChangePosition ret_val;
if (single_value->field_latitude.is_bound()) {
ret_val.latitude() = single_value->field_latitude.valueof();
}
if (single_value->field_longitude.is_bound()) {
ret_val.longitude() = single_value->field_longitude.valueof();
}
if (single_value->field_elevation.is_bound()) {
ret_val.elevation() = single_value->field_elevation.valueof();
}
return ret_val;
}

void UtChangePosition_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtChangePosition_template[list_length];
}

UtChangePosition_template& UtChangePosition_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
return value_list.list_value[list_index];
}

INTEGER_template& UtChangePosition_template::latitude()
{
set_specific();
return single_value->field_latitude;
}

const INTEGER_template& UtChangePosition_template::latitude() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field latitude of a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
return single_value->field_latitude;
}

INTEGER_template& UtChangePosition_template::longitude()
{
set_specific();
return single_value->field_longitude;
}

const INTEGER_template& UtChangePosition_template::longitude() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field longitude of a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
return single_value->field_longitude;
}

INTEGER_template& UtChangePosition_template::elevation()
{
set_specific();
return single_value->field_elevation;
}

const INTEGER_template& UtChangePosition_template::elevation() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elevation of a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
return single_value->field_elevation;
}

int UtChangePosition_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePosition which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePosition containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePosition containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePosition containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePosition containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePosition containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
  }
  return 0;
}

void UtChangePosition_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ latitude := ");
single_value->field_latitude.log();
TTCN_Logger::log_event_str(", longitude := ");
single_value->field_longitude.log();
TTCN_Logger::log_event_str(", elevation := ");
single_value->field_elevation.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtChangePosition_template::log_match(const UtChangePosition& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_latitude.match(match_value.latitude(), legacy)){
TTCN_Logger::log_logmatch_info(".latitude");
single_value->field_latitude.log_match(match_value.latitude(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_longitude.match(match_value.longitude(), legacy)){
TTCN_Logger::log_logmatch_info(".longitude");
single_value->field_longitude.log_match(match_value.longitude(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_elevation.match(match_value.elevation(), legacy)){
TTCN_Logger::log_logmatch_info(".elevation");
single_value->field_elevation.log_match(match_value.elevation(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ latitude := ");
single_value->field_latitude.log_match(match_value.latitude(), legacy);
TTCN_Logger::log_event_str(", longitude := ");
single_value->field_longitude.log_match(match_value.longitude(), legacy);
TTCN_Logger::log_event_str(", elevation := ");
single_value->field_elevation.log_match(match_value.elevation(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtChangePosition_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_latitude.encode_text(text_buf);
single_value->field_longitude.encode_text(text_buf);
single_value->field_elevation.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
}
}

void UtChangePosition_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_latitude.decode_text(text_buf);
single_value->field_longitude.decode_text(text_buf);
single_value->field_elevation.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtChangePosition_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsCommon_TypesAndValues.UtChangePosition.");
}
}

void UtChangePosition_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsCommon_TypesAndValues.UtChangePosition'");
    }
    if (strcmp("latitude", param_field) == 0) {
      latitude().set_param(param);
      return;
    } else if (strcmp("longitude", param_field) == 0) {
      longitude().set_param(param);
      return;
    } else if (strcmp("elevation", param_field) == 0) {
      elevation().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsCommon_TypesAndValues.UtChangePosition'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtChangePosition_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<mp->get_size()) {
      param.error("record template of type @LibItsCommon_TypesAndValues.UtChangePosition has 3 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) latitude().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) longitude().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) elevation().set_param(*mp->get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "latitude")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          latitude().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "longitude")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          longitude().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elevation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elevation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtChangePosition: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsCommon_TypesAndValues.UtChangePosition");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtChangePosition_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsCommon_TypesAndValues.UtChangePosition'");
    }
    if (strcmp("latitude", param_field) == 0) {
      return latitude().get_param(param_name);
    } else if (strcmp("longitude", param_field) == 0) {
      return longitude().get_param(param_name);
    } else if (strcmp("elevation", param_field) == 0) {
      return elevation().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePosition'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_latitude = single_value->field_latitude.get_param(param_name);
    mp_field_latitude->set_id(new Module_Param_FieldName(mcopystr("latitude")));
    mp->add_elem(mp_field_latitude);
    Module_Param* mp_field_longitude = single_value->field_longitude.get_param(param_name);
    mp_field_longitude->set_id(new Module_Param_FieldName(mcopystr("longitude")));
    mp->add_elem(mp_field_longitude);
    Module_Param* mp_field_elevation = single_value->field_elevation.get_param(param_name);
    mp_field_elevation->set_id(new Module_Param_FieldName(mcopystr("elevation")));
    mp->add_elem(mp_field_elevation);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtChangePosition_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_latitude.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePosition");
single_value->field_longitude.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePosition");
single_value->field_elevation.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePosition");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePosition");
}

boolean UtChangePosition_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtChangePosition_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtChangePositionResult::UtChangePositionResult()
{
  bound_flag = FALSE;
}

UtChangePositionResult::UtChangePositionResult(const BOOLEAN& par_utChangePositionResult)
  :   field_utChangePositionResult(par_utChangePositionResult)
{
  bound_flag = TRUE;
}

UtChangePositionResult::UtChangePositionResult(const UtChangePositionResult& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
bound_flag = TRUE;
if (other_value.utChangePositionResult().is_bound()) field_utChangePositionResult = other_value.utChangePositionResult();
else field_utChangePositionResult.clean_up();
}

void UtChangePositionResult::clean_up()
{
field_utChangePositionResult.clean_up();
bound_flag = FALSE;
}

UtChangePositionResult& UtChangePositionResult::operator=(const UtChangePositionResult& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
  bound_flag = TRUE;
  if (other_value.utChangePositionResult().is_bound()) field_utChangePositionResult = other_value.utChangePositionResult();
  else field_utChangePositionResult.clean_up();
}
return *this;
}

boolean UtChangePositionResult::operator==(const UtChangePositionResult& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_utChangePositionResult==other_value.field_utChangePositionResult;
}

boolean UtChangePositionResult::is_bound() const
{
if (bound_flag) return TRUE;
if(field_utChangePositionResult.is_bound()) return TRUE;
return FALSE;
}
boolean UtChangePositionResult::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_utChangePositionResult.is_value()) return FALSE;
return TRUE;
}
int UtChangePositionResult::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsCommon_TypesAndValues.UtChangePositionResult");
  return 1;
}

void UtChangePositionResult::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ utChangePositionResult := ");
field_utChangePositionResult.log();
TTCN_Logger::log_event_str(" }");
}

void UtChangePositionResult::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsCommon_TypesAndValues.UtChangePositionResult'");
    }
    if (strcmp("utChangePositionResult", param_field) == 0) {
      utChangePositionResult().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePositionResult'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @LibItsCommon_TypesAndValues.UtChangePositionResult has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) utChangePositionResult().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "utChangePositionResult")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          utChangePositionResult().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtChangePositionResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsCommon_TypesAndValues.UtChangePositionResult");
  }
}

Module_Param* UtChangePositionResult::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsCommon_TypesAndValues.UtChangePositionResult'");
    }
    if (strcmp("utChangePositionResult", param_field) == 0) {
      return utChangePositionResult().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePositionResult'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_utChangePositionResult = field_utChangePositionResult.get_param(param_name);
  mp_field_utChangePositionResult->set_id(new Module_Param_FieldName(mcopystr("utChangePositionResult")));
  mp->add_elem(mp_field_utChangePositionResult);
  return mp;
  }

void UtChangePositionResult::set_implicit_omit()
{
if (utChangePositionResult().is_bound()) utChangePositionResult().set_implicit_omit();
}

void UtChangePositionResult::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
field_utChangePositionResult.encode_text(text_buf);
}

void UtChangePositionResult::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_utChangePositionResult.decode_text(text_buf);
}

void UtChangePositionResult::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtChangePositionResult::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtChangePositionResult::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_utChangePositionResult.RAW_decode(UtChangePositionResult_utChangePositionResult_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtChangePositionResult::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 1;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(1);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, UtChangePositionResult_utChangePositionResult_descr_.raw);
  encoded_length += field_utChangePositionResult.RAW_encode(UtChangePositionResult_utChangePositionResult_descr_, *myleaf.body.node.nodes[0]);
  return myleaf.length = encoded_length;
}

int UtChangePositionResult::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "utChangePositionResult");
    enc_len += field_utChangePositionResult.JSON_encode(UtChangePositionResult_utChangePositionResult_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtChangePositionResult::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (22 == name_len && 0 == strncmp(fld_name, "utChangePositionResult", name_len)) {
         int ret_val = field_utChangePositionResult.JSON_decode(UtChangePositionResult_utChangePositionResult_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "utChangePositionResult");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_utChangePositionResult.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "utChangePositionResult");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtChangePositionResult_template::single_value_struct {
BOOLEAN_template field_utChangePositionResult;
};

void UtChangePositionResult_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_utChangePositionResult = ANY_VALUE;
}
}
}

void UtChangePositionResult_template::copy_value(const UtChangePositionResult& other_value)
{
single_value = new single_value_struct;
if (other_value.utChangePositionResult().is_bound()) {
  single_value->field_utChangePositionResult = other_value.utChangePositionResult();
} else {
  single_value->field_utChangePositionResult.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtChangePositionResult_template::copy_template(const UtChangePositionResult_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.utChangePositionResult().get_selection()) {
single_value->field_utChangePositionResult = other_value.utChangePositionResult();
} else {
single_value->field_utChangePositionResult.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtChangePositionResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
break;
}
set_selection(other_value);
}

UtChangePositionResult_template::UtChangePositionResult_template()
{
}

UtChangePositionResult_template::UtChangePositionResult_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtChangePositionResult_template::UtChangePositionResult_template(const UtChangePositionResult& other_value)
{
copy_value(other_value);
}

UtChangePositionResult_template::UtChangePositionResult_template(const OPTIONAL<UtChangePositionResult>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtChangePositionResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult from an unbound optional field.");
}
}

UtChangePositionResult_template::UtChangePositionResult_template(const UtChangePositionResult_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtChangePositionResult_template::~UtChangePositionResult_template()
{
clean_up();
}

UtChangePositionResult_template& UtChangePositionResult_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtChangePositionResult_template& UtChangePositionResult_template::operator=(const UtChangePositionResult& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtChangePositionResult_template& UtChangePositionResult_template::operator=(const OPTIONAL<UtChangePositionResult>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtChangePositionResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
}
return *this;
}

UtChangePositionResult_template& UtChangePositionResult_template::operator=(const UtChangePositionResult_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtChangePositionResult_template::match(const UtChangePositionResult& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.utChangePositionResult().is_bound()) return FALSE;
if(!single_value->field_utChangePositionResult.match(other_value.utChangePositionResult(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
}
return FALSE;
}

boolean UtChangePositionResult_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_utChangePositionResult.is_bound()) return TRUE;
return FALSE;
}

boolean UtChangePositionResult_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_utChangePositionResult.is_value()) return FALSE;
return TRUE;
}

void UtChangePositionResult_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtChangePositionResult UtChangePositionResult_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
UtChangePositionResult ret_val;
if (single_value->field_utChangePositionResult.is_bound()) {
ret_val.utChangePositionResult() = single_value->field_utChangePositionResult.valueof();
}
return ret_val;
}

void UtChangePositionResult_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtChangePositionResult_template[list_length];
}

UtChangePositionResult_template& UtChangePositionResult_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
return value_list.list_value[list_index];
}

BOOLEAN_template& UtChangePositionResult_template::utChangePositionResult()
{
set_specific();
return single_value->field_utChangePositionResult;
}

const BOOLEAN_template& UtChangePositionResult_template::utChangePositionResult() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field utChangePositionResult of a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
return single_value->field_utChangePositionResult;
}

int UtChangePositionResult_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
  }
  return 0;
}

void UtChangePositionResult_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ utChangePositionResult := ");
single_value->field_utChangePositionResult.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtChangePositionResult_template::log_match(const UtChangePositionResult& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_utChangePositionResult.match(match_value.utChangePositionResult(), legacy)){
TTCN_Logger::log_logmatch_info(".utChangePositionResult");
single_value->field_utChangePositionResult.log_match(match_value.utChangePositionResult(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ utChangePositionResult := ");
single_value->field_utChangePositionResult.log_match(match_value.utChangePositionResult(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtChangePositionResult_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_utChangePositionResult.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
}
}

void UtChangePositionResult_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_utChangePositionResult.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtChangePositionResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsCommon_TypesAndValues.UtChangePositionResult.");
}
}

void UtChangePositionResult_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsCommon_TypesAndValues.UtChangePositionResult'");
    }
    if (strcmp("utChangePositionResult", param_field) == 0) {
      utChangePositionResult().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsCommon_TypesAndValues.UtChangePositionResult'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtChangePositionResult_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @LibItsCommon_TypesAndValues.UtChangePositionResult has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) utChangePositionResult().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "utChangePositionResult")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          utChangePositionResult().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtChangePositionResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsCommon_TypesAndValues.UtChangePositionResult");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtChangePositionResult_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsCommon_TypesAndValues.UtChangePositionResult'");
    }
    if (strcmp("utChangePositionResult", param_field) == 0) {
      return utChangePositionResult().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePositionResult'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_utChangePositionResult = single_value->field_utChangePositionResult.get_param(param_name);
    mp_field_utChangePositionResult->set_id(new Module_Param_FieldName(mcopystr("utChangePositionResult")));
    mp->add_elem(mp_field_utChangePositionResult);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtChangePositionResult_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_utChangePositionResult.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePositionResult");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePositionResult");
}

boolean UtChangePositionResult_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtChangePositionResult_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtChangePseudonym::UtChangePseudonym()
{
bound_flag = FALSE;
}

UtChangePseudonym::UtChangePseudonym(null_type)
{
bound_flag = TRUE;
}

UtChangePseudonym::UtChangePseudonym(const UtChangePseudonym& other_value)
{
other_value.must_bound("Copying an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
bound_flag = TRUE;
}

UtChangePseudonym& UtChangePseudonym::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

UtChangePseudonym& UtChangePseudonym::operator=(const UtChangePseudonym& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
bound_flag = TRUE;
return *this;
}

boolean UtChangePseudonym::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
return TRUE;
}

boolean UtChangePseudonym::operator==(const UtChangePseudonym& other_value) const
{
must_bound("Comparison of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
other_value.must_bound("Comparison of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
return TRUE;
}

void UtChangePseudonym::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void UtChangePseudonym::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  if (mp->get_type()!=Module_Param::MP_Value_List || mp->get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@LibItsCommon_TypesAndValues.UtChangePseudonym");
  }
  bound_flag = TRUE;
}

Module_Param* UtChangePseudonym::get_param(Module_Param_Name& /* param_name */) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  return new Module_Param_Value_List();
}

void UtChangePseudonym::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
}

void UtChangePseudonym::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void UtChangePseudonym::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtChangePseudonym::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtChangePseudonym::RAW_encode(const TTCN_Typedescriptor_t& p_td, RAW_enc_tree& /*myleaf*/) const
{
if (!bound_flag) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value of type %s.", p_td.name);
return 0;
}

int UtChangePseudonym::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int, raw_order_t, boolean, int, boolean)
{
bound_flag = TRUE;
return p_buf.increase_pos_padd(p_td.raw->prepadding) + p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtChangePseudonym::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
    return -1;
  }

  return p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL) + 
    p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
}

int UtChangePseudonym::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  bound_flag = true;

  return dec_len;
}

void UtChangePseudonym_template::copy_template(const UtChangePseudonym_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtChangePseudonym_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
break;
}
}

UtChangePseudonym_template::UtChangePseudonym_template()
{
}

UtChangePseudonym_template::UtChangePseudonym_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtChangePseudonym_template::UtChangePseudonym_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

UtChangePseudonym_template::UtChangePseudonym_template(const UtChangePseudonym& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
}

UtChangePseudonym_template::UtChangePseudonym_template(const OPTIONAL<UtChangePseudonym>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsCommon_TypesAndValues.UtChangePseudonym from an unbound optional field.");
}
}

UtChangePseudonym_template::UtChangePseudonym_template(const UtChangePseudonym_template& other_value)
: Base_Template(){
copy_template(other_value);
}

UtChangePseudonym_template::~UtChangePseudonym_template()
{
clean_up();
}

void UtChangePseudonym_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

UtChangePseudonym_template& UtChangePseudonym_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtChangePseudonym_template& UtChangePseudonym_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

UtChangePseudonym_template& UtChangePseudonym_template::operator=(const UtChangePseudonym& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

UtChangePseudonym_template& UtChangePseudonym_template::operator=(const OPTIONAL<UtChangePseudonym>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
}
return *this;
}

UtChangePseudonym_template& UtChangePseudonym_template::operator=(const UtChangePseudonym_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean UtChangePseudonym_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
}
return FALSE;
}

boolean UtChangePseudonym_template::match(const UtChangePseudonym& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;return match(NULL_VALUE);
}

UtChangePseudonym UtChangePseudonym_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
return NULL_VALUE;
}

void UtChangePseudonym_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtChangePseudonym_template[list_length];
}

UtChangePseudonym_template& UtChangePseudonym_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
return value_list.list_value[list_index];
}

void UtChangePseudonym_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtChangePseudonym_template::log_match(const UtChangePseudonym& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void UtChangePseudonym_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
}
}

void UtChangePseudonym_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtChangePseudonym_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
}
}

void UtChangePseudonym_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtChangePseudonym_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (mp->get_size()>0) param.type_error("empty record/set template", "@LibItsCommon_TypesAndValues.UtChangePseudonym");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@LibItsCommon_TypesAndValues.UtChangePseudonym");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtChangePseudonym_template::get_param(Module_Param_Name& param_name) const
{
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE:
    mp = new Module_Param_Value_List();
    break;
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtChangePseudonym_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePseudonym");
}

boolean UtChangePseudonym_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtChangePseudonym_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UtChangePseudonymResult::UtChangePseudonymResult()
{
  bound_flag = FALSE;
}

UtChangePseudonymResult::UtChangePseudonymResult(const BOOLEAN& par_utChangePseudonymResult)
  :   field_utChangePseudonymResult(par_utChangePseudonymResult)
{
  bound_flag = TRUE;
}

UtChangePseudonymResult::UtChangePseudonymResult(const UtChangePseudonymResult& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
bound_flag = TRUE;
if (other_value.utChangePseudonymResult().is_bound()) field_utChangePseudonymResult = other_value.utChangePseudonymResult();
else field_utChangePseudonymResult.clean_up();
}

void UtChangePseudonymResult::clean_up()
{
field_utChangePseudonymResult.clean_up();
bound_flag = FALSE;
}

UtChangePseudonymResult& UtChangePseudonymResult::operator=(const UtChangePseudonymResult& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
  bound_flag = TRUE;
  if (other_value.utChangePseudonymResult().is_bound()) field_utChangePseudonymResult = other_value.utChangePseudonymResult();
  else field_utChangePseudonymResult.clean_up();
}
return *this;
}

boolean UtChangePseudonymResult::operator==(const UtChangePseudonymResult& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_utChangePseudonymResult==other_value.field_utChangePseudonymResult;
}

boolean UtChangePseudonymResult::is_bound() const
{
if (bound_flag) return TRUE;
if(field_utChangePseudonymResult.is_bound()) return TRUE;
return FALSE;
}
boolean UtChangePseudonymResult::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_utChangePseudonymResult.is_value()) return FALSE;
return TRUE;
}
int UtChangePseudonymResult::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult");
  return 1;
}

void UtChangePseudonymResult::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ utChangePseudonymResult := ");
field_utChangePseudonymResult.log();
TTCN_Logger::log_event_str(" }");
}

void UtChangePseudonymResult::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'");
    }
    if (strcmp("utChangePseudonymResult", param_field) == 0) {
      utChangePseudonymResult().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) utChangePseudonymResult().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "utChangePseudonymResult")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          utChangePseudonymResult().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtChangePseudonymResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsCommon_TypesAndValues.UtChangePseudonymResult");
  }
}

Module_Param* UtChangePseudonymResult::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'");
    }
    if (strcmp("utChangePseudonymResult", param_field) == 0) {
      return utChangePseudonymResult().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_utChangePseudonymResult = field_utChangePseudonymResult.get_param(param_name);
  mp_field_utChangePseudonymResult->set_id(new Module_Param_FieldName(mcopystr("utChangePseudonymResult")));
  mp->add_elem(mp_field_utChangePseudonymResult);
  return mp;
  }

void UtChangePseudonymResult::set_implicit_omit()
{
if (utChangePseudonymResult().is_bound()) utChangePseudonymResult().set_implicit_omit();
}

void UtChangePseudonymResult::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
field_utChangePseudonymResult.encode_text(text_buf);
}

void UtChangePseudonymResult::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_utChangePseudonymResult.decode_text(text_buf);
}

void UtChangePseudonymResult::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UtChangePseudonymResult::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UtChangePseudonymResult::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_utChangePseudonymResult.RAW_decode(UtChangePseudonymResult_utChangePseudonymResult_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int UtChangePseudonymResult::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 1;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(1);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, UtChangePseudonymResult_utChangePseudonymResult_descr_.raw);
  encoded_length += field_utChangePseudonymResult.RAW_encode(UtChangePseudonymResult_utChangePseudonymResult_descr_, *myleaf.body.node.nodes[0]);
  return myleaf.length = encoded_length;
}

int UtChangePseudonymResult::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "utChangePseudonymResult");
    enc_len += field_utChangePseudonymResult.JSON_encode(UtChangePseudonymResult_utChangePseudonymResult_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int UtChangePseudonymResult::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (23 == name_len && 0 == strncmp(fld_name, "utChangePseudonymResult", name_len)) {
         int ret_val = field_utChangePseudonymResult.JSON_decode(UtChangePseudonymResult_utChangePseudonymResult_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "utChangePseudonymResult");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_utChangePseudonymResult.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "utChangePseudonymResult");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct UtChangePseudonymResult_template::single_value_struct {
BOOLEAN_template field_utChangePseudonymResult;
};

void UtChangePseudonymResult_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_utChangePseudonymResult = ANY_VALUE;
}
}
}

void UtChangePseudonymResult_template::copy_value(const UtChangePseudonymResult& other_value)
{
single_value = new single_value_struct;
if (other_value.utChangePseudonymResult().is_bound()) {
  single_value->field_utChangePseudonymResult = other_value.utChangePseudonymResult();
} else {
  single_value->field_utChangePseudonymResult.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void UtChangePseudonymResult_template::copy_template(const UtChangePseudonymResult_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.utChangePseudonymResult().get_selection()) {
single_value->field_utChangePseudonymResult = other_value.utChangePseudonymResult();
} else {
single_value->field_utChangePseudonymResult.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtChangePseudonymResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
break;
}
set_selection(other_value);
}

UtChangePseudonymResult_template::UtChangePseudonymResult_template()
{
}

UtChangePseudonymResult_template::UtChangePseudonymResult_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UtChangePseudonymResult_template::UtChangePseudonymResult_template(const UtChangePseudonymResult& other_value)
{
copy_value(other_value);
}

UtChangePseudonymResult_template::UtChangePseudonymResult_template(const OPTIONAL<UtChangePseudonymResult>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtChangePseudonymResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult from an unbound optional field.");
}
}

UtChangePseudonymResult_template::UtChangePseudonymResult_template(const UtChangePseudonymResult_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

UtChangePseudonymResult_template::~UtChangePseudonymResult_template()
{
clean_up();
}

UtChangePseudonymResult_template& UtChangePseudonymResult_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtChangePseudonymResult_template& UtChangePseudonymResult_template::operator=(const UtChangePseudonymResult& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtChangePseudonymResult_template& UtChangePseudonymResult_template::operator=(const OPTIONAL<UtChangePseudonymResult>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtChangePseudonymResult&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
}
return *this;
}

UtChangePseudonymResult_template& UtChangePseudonymResult_template::operator=(const UtChangePseudonymResult_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean UtChangePseudonymResult_template::match(const UtChangePseudonymResult& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.utChangePseudonymResult().is_bound()) return FALSE;
if(!single_value->field_utChangePseudonymResult.match(other_value.utChangePseudonymResult(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
}
return FALSE;
}

boolean UtChangePseudonymResult_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_utChangePseudonymResult.is_bound()) return TRUE;
return FALSE;
}

boolean UtChangePseudonymResult_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_utChangePseudonymResult.is_value()) return FALSE;
return TRUE;
}

void UtChangePseudonymResult_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtChangePseudonymResult UtChangePseudonymResult_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
UtChangePseudonymResult ret_val;
if (single_value->field_utChangePseudonymResult.is_bound()) {
ret_val.utChangePseudonymResult() = single_value->field_utChangePseudonymResult.valueof();
}
return ret_val;
}

void UtChangePseudonymResult_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UtChangePseudonymResult_template[list_length];
}

UtChangePseudonymResult_template& UtChangePseudonymResult_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
return value_list.list_value[list_index];
}

BOOLEAN_template& UtChangePseudonymResult_template::utChangePseudonymResult()
{
set_specific();
return single_value->field_utChangePseudonymResult;
}

const BOOLEAN_template& UtChangePseudonymResult_template::utChangePseudonymResult() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field utChangePseudonymResult of a non-specific template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
return single_value->field_utChangePseudonymResult;
}

int UtChangePseudonymResult_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
  }
  return 0;
}

void UtChangePseudonymResult_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ utChangePseudonymResult := ");
single_value->field_utChangePseudonymResult.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UtChangePseudonymResult_template::log_match(const UtChangePseudonymResult& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_utChangePseudonymResult.match(match_value.utChangePseudonymResult(), legacy)){
TTCN_Logger::log_logmatch_info(".utChangePseudonymResult");
single_value->field_utChangePseudonymResult.log_match(match_value.utChangePseudonymResult(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ utChangePseudonymResult := ");
single_value->field_utChangePseudonymResult.log_match(match_value.utChangePseudonymResult(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtChangePseudonymResult_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_utChangePseudonymResult.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
}
}

void UtChangePseudonymResult_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_utChangePseudonymResult.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtChangePseudonymResult_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult.");
}
}

void UtChangePseudonymResult_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'");
    }
    if (strcmp("utChangePseudonymResult", param_field) == 0) {
      utChangePseudonymResult().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtChangePseudonymResult_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @LibItsCommon_TypesAndValues.UtChangePseudonymResult has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) utChangePseudonymResult().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "utChangePseudonymResult")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          utChangePseudonymResult().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsCommon_TypesAndValues.UtChangePseudonymResult: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsCommon_TypesAndValues.UtChangePseudonymResult");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UtChangePseudonymResult_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'");
    }
    if (strcmp("utChangePseudonymResult", param_field) == 0) {
      return utChangePseudonymResult().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsCommon_TypesAndValues.UtChangePseudonymResult'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_utChangePseudonymResult = single_value->field_utChangePseudonymResult.get_param(param_name);
    mp_field_utChangePseudonymResult->set_id(new Module_Param_FieldName(mcopystr("utChangePseudonymResult")));
    mp->add_elem(mp_field_utChangePseudonymResult);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UtChangePseudonymResult_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_utChangePseudonymResult.check_restriction(t_res, t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePseudonymResult");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsCommon_TypesAndValues.UtChangePseudonymResult");
}

boolean UtChangePseudonymResult_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtChangePseudonymResult_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const UtChangePseudonym& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @LibItsCommon_TypesAndValues.UtChangePseudonym.");
return TRUE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsCommon_TypesAndValues.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsCommon_TypesAndValues");
LibCommon__DataStrings::module_object.pre_init_module();
ITS__Container::module_object.pre_init_module();
current_location.update_lineno(71);
/* LibItsCommon_TypesAndValues.ttcn, line 71 */
const_c__semiAxisLengthOneCentimeter = 1;
current_location.update_lineno(72);
/* LibItsCommon_TypesAndValues.ttcn, line 72 */
const_c__semiAxisLengthUnavailable = 4095;
current_location.update_lineno(75);
/* LibItsCommon_TypesAndValues.ttcn, line 75 */
const_c__headingConfidence__withinZeroPointOneDegree = 1;
current_location.update_lineno(76);
/* LibItsCommon_TypesAndValues.ttcn, line 76 */
const_c__headingValue__wgs84North = 0;
current_location.update_lineno(79);
/* LibItsCommon_TypesAndValues.ttcn, line 79 */
const_c__altitudeValue__seaLevel = 0;
current_location.update_lineno(80);
/* LibItsCommon_TypesAndValues.ttcn, line 80 */
const_c__stationType__passengerCar = 5;
current_location.update_lineno(81);
/* LibItsCommon_TypesAndValues.ttcn, line 81 */
const_c__longitudinalAccelerationValue__unavailable = 161;
current_location.update_lineno(82);
/* LibItsCommon_TypesAndValues.ttcn, line 82 */
const_c__accelerationConfidence__unavailable = 102;
current_location.update_lineno(83);
/* LibItsCommon_TypesAndValues.ttcn, line 83 */
const_c__curvatureValue__straight = 0;
current_location.update_lineno(84);
/* LibItsCommon_TypesAndValues.ttcn, line 84 */
const_c__yawRateValue__straight = 0;
current_location.update_lineno(93);
/* LibItsCommon_TypesAndValues.ttcn, line 93 */
const_c__causeReserved = 0;
current_location.update_lineno(94);
/* LibItsCommon_TypesAndValues.ttcn, line 94 */
const_c__causeTrafficCondition = 1;
current_location.update_lineno(95);
/* LibItsCommon_TypesAndValues.ttcn, line 95 */
const_c__causeAccident = 2;
current_location.update_lineno(96);
/* LibItsCommon_TypesAndValues.ttcn, line 96 */
const_c__causeRoadworks = 3;
current_location.update_lineno(97);
/* LibItsCommon_TypesAndValues.ttcn, line 97 */
const_c__causeAdverseWeatherCondition__Adhesion = 6;
current_location.update_lineno(98);
/* LibItsCommon_TypesAndValues.ttcn, line 98 */
const_c__causeHazardousLocation__SurfaceCondition = 9;
current_location.update_lineno(99);
/* LibItsCommon_TypesAndValues.ttcn, line 99 */
const_c__causeHazardousLocation__ObstacleOnTheRoad = 10;
current_location.update_lineno(100);
/* LibItsCommon_TypesAndValues.ttcn, line 100 */
const_c__causeHazardousLocation__AnimalOnTheRoad = 11;
current_location.update_lineno(101);
/* LibItsCommon_TypesAndValues.ttcn, line 101 */
const_c__causeHumanPresenceOnTheRoad = 12;
current_location.update_lineno(102);
/* LibItsCommon_TypesAndValues.ttcn, line 102 */
const_c__causeWrongWayDriving = 14;
current_location.update_lineno(103);
/* LibItsCommon_TypesAndValues.ttcn, line 103 */
const_c__causeRescueAndRecoveryWorkInProgress = 15;
current_location.update_lineno(104);
/* LibItsCommon_TypesAndValues.ttcn, line 104 */
const_c__causeAdverseWeatherCondition__ExtremeWeatherCondition = 17;
current_location.update_lineno(105);
/* LibItsCommon_TypesAndValues.ttcn, line 105 */
const_c__causeAdverseWeatherCondition__Visibility = 18;
current_location.update_lineno(106);
/* LibItsCommon_TypesAndValues.ttcn, line 106 */
const_c__causeAdverseWeatherCondition__Precipitation = 19;
current_location.update_lineno(107);
/* LibItsCommon_TypesAndValues.ttcn, line 107 */
const_c__causeSlowVehicle = 26;
current_location.update_lineno(108);
/* LibItsCommon_TypesAndValues.ttcn, line 108 */
const_c__causeDangerousEndOfQueue = 27;
current_location.update_lineno(109);
/* LibItsCommon_TypesAndValues.ttcn, line 109 */
const_c__causeVehicleBreakdown = 91;
current_location.update_lineno(110);
/* LibItsCommon_TypesAndValues.ttcn, line 110 */
const_c__causePostCrash = 92;
current_location.update_lineno(111);
/* LibItsCommon_TypesAndValues.ttcn, line 111 */
const_c__causeHumanProblem = 93;
current_location.update_lineno(112);
/* LibItsCommon_TypesAndValues.ttcn, line 112 */
const_c__causeStationaryVehicle = 94;
current_location.update_lineno(113);
/* LibItsCommon_TypesAndValues.ttcn, line 113 */
const_c__causeEmergencyVehicleApproaching = 95;
current_location.update_lineno(114);
/* LibItsCommon_TypesAndValues.ttcn, line 114 */
const_c__causeHazardousLocation__DangerousCurve = 96;
current_location.update_lineno(115);
/* LibItsCommon_TypesAndValues.ttcn, line 115 */
const_c__causeCollisionRisk = 97;
current_location.update_lineno(116);
/* LibItsCommon_TypesAndValues.ttcn, line 116 */
const_c__causeSignalViolation = 98;
current_location.update_lineno(117);
/* LibItsCommon_TypesAndValues.ttcn, line 117 */
const_c__causeDangerousSituation = 99;
current_location.update_lineno(126);
/* LibItsCommon_TypesAndValues.ttcn, line 126 */
const_c__subCauseCode__Unavailable = 0;
current_location.update_lineno(127);
/* LibItsCommon_TypesAndValues.ttcn, line 127 */
const_c__vehicleBreakDownSubCauseCode__engineProblem = 3;
current_location.update_lineno(128);
/* LibItsCommon_TypesAndValues.ttcn, line 128 */
const_c__slowVehicleSubCauseCode__convoy = 5;
}

static void post_init_module()
{
TTCN_Location current_location("LibItsCommon_TypesAndValues.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsCommon_TypesAndValues");
LibCommon__DataStrings::module_object.post_init_module();
}


} /* end of namespace */
