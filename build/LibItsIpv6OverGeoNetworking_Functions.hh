// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsIpv6OverGeoNetworking__Functions_HH
#define LibItsIpv6OverGeoNetworking__Functions_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibCommon_TextStrings.hh"
#include "LibItsGeoNetworking_Functions.hh"
#include "LibItsIpv6OverGeoNetworking_Pixits.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

namespace LibItsIpv6OverGeoNetworking__Functions {

/* Function prototypes */

extern void f__cf01UpGn6();
extern void start_f__cf01UpGn6(const COMPONENT& component_reference);
extern void f__cf01DownGn6();
extern void start_f__cf01DownGn6(const COMPONENT& component_reference);
extern alt_status a__ipv6Default_instance();
extern void a__ipv6Default();
extern Default_Base *activate_a__ipv6Default();
extern void f__prIpv6Neighbour();
extern void start_f__prIpv6Neighbour(const COMPONENT& component_reference);
extern LibCommon__VerdictControl::FncRetCode f__prConfigureGVL(const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlIdxList& p__gvls, const LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template& p__validLifetimes);
extern void start_f__prConfigureGVL(const COMPONENT& component_reference, const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlIdxList& p__gvls, const LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template& p__validLifetimes);
extern void f__poIpv6Neighbour();
extern void start_f__poIpv6Neighbour(const COMPONENT& component_reference);
extern void f__acUpdateInterfaces();
extern void start_f__acUpdateInterfaces(const COMPONENT& component_reference);
extern void f__sendGeoBroadcastWithRtAdv(const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry_template& p__gvl, const CHARSTRING& p__compName, const INTEGER& p__validLifetime);
extern void start_f__sendGeoBroadcastWithRtAdv(const COMPONENT& component_reference, const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry_template& p__gvl, const CHARSTRING& p__compName, const INTEGER& p__validLifetime);
extern void f__addGvl(const CHARSTRING& p__gvlKey, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLength, const CHARSTRING& p__area, const CHARSTRING& p__interface);
extern void start_f__addGvl(const COMPONENT& component_reference, const CHARSTRING& p__gvlKey, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLength, const CHARSTRING& p__area, const CHARSTRING& p__interface);
extern LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry f__getGvl(const CHARSTRING& p__gvlName);
extern void start_f__getGvl(const COMPONENT& component_reference, const CHARSTRING& p__gvlName);
extern CHARSTRING f__getGvlInterface(const INTEGER& p__gvlIdx);
extern void start_f__getGvlInterface(const COMPONENT& component_reference, const INTEGER& p__gvlIdx);
extern CHARSTRING f__getTvlInterface();
extern void start_f__getTvlInterface(const COMPONENT& component_reference);
extern OCTETSTRING f__gnAddr2MacAddr(const LibItsGeoNetworking__TypesAndValues::GN__Address& p__gnAddr);
extern LibItsGeoNetworking__TypesAndValues::GN__Address f__macAddr2GnAddr(const OCTETSTRING& p__macAddr);
extern OCTETSTRING f__createUniqueInterfaceId(const OCTETSTRING& p__macAddr);
extern void f__addAddresses(LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable& p__addressTable, const CHARSTRING& p__componentName);
extern void start_f__addAddresses(const COMPONENT& component_reference, LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable& p__addressTable, const CHARSTRING& p__componentName);
extern LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry f__getAddresses(const CHARSTRING& p__positionKey);
extern void start_f__getAddresses(const COMPONENT& component_reference, const CHARSTRING& p__positionKey);
extern OCTETSTRING f__compute64BitsPrefix(const BITSTRING& p__prefixBits, const INTEGER& p__prefixLen);
extern OCTETSTRING f__computeGlobalAddress(const CHARSTRING& p__compName, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen);
extern void start_f__computeGlobalAddress(const COMPONENT& component_reference, const CHARSTRING& p__compName, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen);
extern OCTETSTRING f__computeHomeAgentAnycastAddress(const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen);
extern OCTETSTRING f__computeGlobalScopedUnicastPrefixBasedMulticastIpv6Address(const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen, const INTEGER& p__groupId);
extern OCTETSTRING f__computeGeographicAnycastIpv6Address(const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen);
extern OCTETSTRING f__getPrefix(const INTEGER& p__index);
extern INTEGER f__getPrefixLength(const INTEGER& p__index);
extern BOOLEAN f__isIpv6AddressCorrespondingToPrefix(const OCTETSTRING& p__ipv6Address, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLength);
extern OCTETSTRING f__computeIPv6CheckSum(const OCTETSTRING_template& p__sourceAddress, const OCTETSTRING_template& p__destinationAddress, const INTEGER_template& p__payloadLength, const OCTETSTRING_template& p__payload, const INTEGER_template& p__nextHdr);

/* Global variable declarations */

extern const LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template& f__prConfigureGVL_p__validLifetimes_defval;
extern const INTEGER& f__sendGeoBroadcastWithRtAdv_p__validLifetime_defval;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
