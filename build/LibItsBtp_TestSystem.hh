// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsBtp__TestSystem_HH
#define LibItsBtp__TestSystem_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibItsCommon_TestSystem.hh"
#include "LibItsCommon_TypesAndValues.hh"
#include "LibItsBtp_TypesAndValues.hh"
#include "General_Types.hh"
#include "TTCN_EncDec.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LibItsBtp__TestSystem_HH
#endif

namespace LibItsBtp__TestSystem {

/* Forward declarations of classes */

class UpperTesterPort_BASE;
class UpperTesterPort;
class BtpPort_BASE;
class BtpPort;
class BtpInd;
class BtpInd_template;
class BtpReq;
class BtpReq_template;

} /* end of namespace */

#ifndef LibItsBtp__TestSystem_HH
#define LibItsBtp__TestSystem_HH

namespace LibItsBtp__TestSystem {

/* Type definitions */

typedef COMPONENT ItsBtpSystem;
typedef COMPONENT_template ItsBtpSystem_template;
typedef COMPONENT ItsBtp;
typedef COMPONENT_template ItsBtp_template;

/* Class definitions */

class UpperTesterPort_BASE : public PORT {
enum msg_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
LibItsCommon__TypesAndValues::UtInitializeResult *message_0;
LibItsBtp__TypesAndValues::UtBtpTriggerResult *message_1;
LibItsBtp__TypesAndValues::UtBtpEventInd *message_2;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
UpperTesterPort_BASE(const char *par_port_name);
~UpperTesterPort_BASE();
void send(const LibItsCommon__TypesAndValues::UtInitialize& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtInitialize& send_par);
void send(const LibItsCommon__TypesAndValues::UtInitialize_template& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtInitialize_template& send_par);
void send(const LibItsBtp__TypesAndValues::UtBtpTrigger& send_par, const COMPONENT& destination_component);
void send(const LibItsBtp__TypesAndValues::UtBtpTrigger& send_par);
void send(const LibItsBtp__TypesAndValues::UtBtpTrigger_template& send_par, const COMPONENT& destination_component);
void send(const LibItsBtp__TypesAndValues::UtBtpTrigger_template& send_par);
protected:
virtual void outgoing_send(const LibItsCommon__TypesAndValues::UtInitialize& send_par) = 0;
virtual void outgoing_send(const LibItsBtp__TypesAndValues::UtBtpTrigger& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsBtp__TypesAndValues::UtBtpTriggerResult_template& value_template, LibItsBtp__TypesAndValues::UtBtpTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsBtp__TypesAndValues::UtBtpTriggerResult_template& value_template, LibItsBtp__TypesAndValues::UtBtpTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsBtp__TypesAndValues::UtBtpTriggerResult_template& value_template, LibItsBtp__TypesAndValues::UtBtpTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsBtp__TypesAndValues::UtBtpEventInd_template& value_template, LibItsBtp__TypesAndValues::UtBtpEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsBtp__TypesAndValues::UtBtpEventInd_template& value_template, LibItsBtp__TypesAndValues::UtBtpEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsBtp__TypesAndValues::UtBtpEventInd_template& value_template, LibItsBtp__TypesAndValues::UtBtpEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const LibItsCommon__TypesAndValues::UtInitializeResult& incoming_par, component sender_component);
void incoming_message(const LibItsBtp__TypesAndValues::UtBtpTriggerResult& incoming_par, component sender_component);
void incoming_message(const LibItsBtp__TypesAndValues::UtBtpEventInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const LibItsCommon__TypesAndValues::UtInitializeResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsBtp__TypesAndValues::UtBtpTriggerResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsBtp__TypesAndValues::UtBtpEventInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class BtpPort_BASE : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
BtpInd *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
BtpPort_BASE(const char *par_port_name);
~BtpPort_BASE();
void send(const BtpReq& send_par, const COMPONENT& destination_component);
void send(const BtpReq& send_par);
void send(const BtpReq_template& send_par, const COMPONENT& destination_component);
void send(const BtpReq_template& send_par);
protected:
virtual void outgoing_send(const BtpReq& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const BtpInd_template& value_template, BtpInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const BtpInd_template& value_template, BtpInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const BtpInd_template& value_template, BtpInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const BtpInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const BtpInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class BtpInd : public Base_Type {
  LibItsBtp__TypesAndValues::BtpPacket field_msgIn;
  boolean bound_flag;
public:
  BtpInd();
  BtpInd(const LibItsBtp__TypesAndValues::BtpPacket& par_msgIn);
  BtpInd(const BtpInd& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  BtpInd& operator=(const BtpInd& other_value);
  boolean operator==(const BtpInd& other_value) const;
  inline boolean operator!=(const BtpInd& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline LibItsBtp__TypesAndValues::BtpPacket& msgIn()
    {return field_msgIn;}
  inline const LibItsBtp__TypesAndValues::BtpPacket& msgIn() const
    {return field_msgIn;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class BtpInd_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
BtpInd_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const BtpInd& other_value);
void copy_template(const BtpInd_template& other_value);

public:
BtpInd_template();
BtpInd_template(template_sel other_value);
BtpInd_template(const BtpInd& other_value);
BtpInd_template(const OPTIONAL<BtpInd>& other_value);
BtpInd_template(const BtpInd_template& other_value);
~BtpInd_template();
BtpInd_template& operator=(template_sel other_value);
BtpInd_template& operator=(const BtpInd& other_value);
BtpInd_template& operator=(const OPTIONAL<BtpInd>& other_value);
BtpInd_template& operator=(const BtpInd_template& other_value);
boolean match(const BtpInd& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
BtpInd valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
BtpInd_template& list_item(unsigned int list_index) const;
LibItsBtp__TypesAndValues::BtpPacket_template& msgIn();
const LibItsBtp__TypesAndValues::BtpPacket_template& msgIn() const;
int size_of() const;
void log() const;
void log_match(const BtpInd& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class BtpReq : public Base_Type {
  LibItsBtp__TypesAndValues::BtpPacket field_msgOut;
  boolean bound_flag;
public:
  BtpReq();
  BtpReq(const LibItsBtp__TypesAndValues::BtpPacket& par_msgOut);
  BtpReq(const BtpReq& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  BtpReq& operator=(const BtpReq& other_value);
  boolean operator==(const BtpReq& other_value) const;
  inline boolean operator!=(const BtpReq& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline LibItsBtp__TypesAndValues::BtpPacket& msgOut()
    {return field_msgOut;}
  inline const LibItsBtp__TypesAndValues::BtpPacket& msgOut() const
    {return field_msgOut;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class BtpReq_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
BtpReq_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const BtpReq& other_value);
void copy_template(const BtpReq_template& other_value);

public:
BtpReq_template();
BtpReq_template(template_sel other_value);
BtpReq_template(const BtpReq& other_value);
BtpReq_template(const OPTIONAL<BtpReq>& other_value);
BtpReq_template(const BtpReq_template& other_value);
~BtpReq_template();
BtpReq_template& operator=(template_sel other_value);
BtpReq_template& operator=(const BtpReq& other_value);
BtpReq_template& operator=(const OPTIONAL<BtpReq>& other_value);
BtpReq_template& operator=(const BtpReq_template& other_value);
boolean match(const BtpReq& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
BtpReq valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
BtpReq_template& list_item(unsigned int list_index) const;
LibItsBtp__TypesAndValues::BtpPacket_template& msgOut();
const LibItsBtp__TypesAndValues::BtpPacket_template& msgOut() const;
int size_of() const;
void log() const;
void log_match(const BtpReq& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t& ItsBtpSystem_descr_;
extern UpperTesterPort ItsBtpSystem_component_utPort;
extern BtpPort ItsBtpSystem_component_btpPort;
extern const TTCN_Typedescriptor_t& ItsBtp_descr_;
extern UpperTesterPort ItsBtp_component_utPort;
extern BtpPort ItsBtp_component_btpPort;
extern LibItsBtp__TypesAndValues::UtBtpEventIndList ItsBtp_component_vc__utEvents;
extern const TTCN_RAWdescriptor_t BtpInd_raw_;
extern const TTCN_JSONdescriptor_t BtpInd_json_;
extern const TTCN_Typedescriptor_t BtpInd_descr_;
extern const TTCN_RAWdescriptor_t BtpReq_raw_;
extern const TTCN_JSONdescriptor_t BtpReq_json_;
extern const TTCN_Typedescriptor_t BtpReq_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "UpperTesterPort.hh"
#include "BtpPort.hh"

#endif
