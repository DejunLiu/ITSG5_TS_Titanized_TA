// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsIpv6OverGeoNetworking_TestSystem.hh"

namespace LibItsIpv6OverGeoNetworking__TestSystem {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x3b, 0x0e, 0x9c, 0x1e, 0x20, 0xad, 0x06, 0x5e, 0x1f, 0x7a, 0x9f, 0xd5, 0x07, 0x49, 0xc1, 0x91 };

/* Global variable definitions */

const TTCN_Typedescriptor_t& ItsIpv6OverGeoNetworkingSystem_descr_ = COMPONENT_descr_;
IPv6OverGeoNetworkingPort ItsIpv6OverGeoNetworkingSystem_component_ipv6OverGeoNetworkingPort("ipv6OverGeoNetworkingPort");
const TTCN_Typedescriptor_t& ItsIpv6OverGeoNetworking_descr_ = COMPONENT_descr_;
IPv6OverGeoNetworkingPort ItsIpv6OverGeoNetworking_component_ipv6OverGeoNetworkingPort("ipv6OverGeoNetworkingPort");
LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable ItsIpv6OverGeoNetworking_component_vc__gvlTable;
LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable ItsIpv6OverGeoNetworking_component_vc__addressTable;
const XERdescriptor_t       IPv6OverGeoNetworkingInd_interface_xer_ = { {"interface>\n", "interface>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_interface_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.interface", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &IPv6OverGeoNetworkingInd_interface_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IPv6OverGeoNetworkingInd_macSourceAddress_xer_ = { {"macSourceAddress>\n", "macSourceAddress>\n"}, {18, 18}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_macSourceAddress_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.macSourceAddress", &OCTETSTRING_ber_, &LibCommon__DataStrings::Oct6_raw_, &OCTETSTRING_text_, &IPv6OverGeoNetworkingInd_macSourceAddress_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IPv6OverGeoNetworkingInd_macDestinationAddress_xer_ = { {"macDestinationAddress>\n", "macDestinationAddress>\n"}, {23, 23}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_macDestinationAddress_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.macDestinationAddress", &OCTETSTRING_ber_, &LibCommon__DataStrings::Oct6_raw_, &OCTETSTRING_text_, &IPv6OverGeoNetworkingInd_macDestinationAddress_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t IPv6OverGeoNetworkingInd_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for IPv6OverGeoNetworkingInd
const TTCN_JSONdescriptor_t IPv6OverGeoNetworkingInd_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingInd_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd", NULL, &IPv6OverGeoNetworkingInd_raw_, NULL, NULL, &IPv6OverGeoNetworkingInd_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IPv6OverGeoNetworkingReq_interface_xer_ = { {"interface>\n", "interface>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_interface_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.interface", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &IPv6OverGeoNetworkingReq_interface_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IPv6OverGeoNetworkingReq_macSourceAddress_xer_ = { {"macSourceAddress>\n", "macSourceAddress>\n"}, {18, 18}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_macSourceAddress_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.macSourceAddress", &OCTETSTRING_ber_, &LibCommon__DataStrings::Oct6_raw_, &OCTETSTRING_text_, &IPv6OverGeoNetworkingReq_macSourceAddress_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IPv6OverGeoNetworkingReq_macDestinationAddress_xer_ = { {"macDestinationAddress>\n", "macDestinationAddress>\n"}, {23, 23}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_macDestinationAddress_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.macDestinationAddress", &OCTETSTRING_ber_, &LibCommon__DataStrings::Oct6_raw_, &OCTETSTRING_text_, &IPv6OverGeoNetworkingReq_macDestinationAddress_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t IPv6OverGeoNetworkingReq_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for IPv6OverGeoNetworkingReq
const TTCN_JSONdescriptor_t IPv6OverGeoNetworkingReq_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t IPv6OverGeoNetworkingReq_descr_ = { "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq", NULL, &IPv6OverGeoNetworkingReq_raw_, NULL, NULL, &IPv6OverGeoNetworkingReq_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsIpv6OverGeoNetworking_TestSystem", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, init_comp_type, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

void IPv6OverGeoNetworkingPort_BASE::remove_msg_queue_head()
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
switch (my_head->item_selection) {
case MESSAGE_0:
delete (my_head)->message_0;
break;
default:
TTCN_error("Internal error: Invalid message selector in the queue of port %s.", port_name);
}
msg_queue_item_base *next_item = msg_queue_head->next_item;
delete (msg_queue_item*)msg_queue_head;
msg_queue_head = next_item;
if (next_item == NULL) msg_queue_tail = NULL;
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::extract__msg, port_name, 0, ++msg_head_count, CHARSTRING(0,NULL), CHARSTRING(0,NULL));}

void IPv6OverGeoNetworkingPort_BASE::clear_queue()
{
while (msg_queue_head != NULL) remove_msg_queue_head();
}

IPv6OverGeoNetworkingPort_BASE::IPv6OverGeoNetworkingPort_BASE(const char *par_port_name)
 : PORT(par_port_name)
{
msg_queue_head = NULL;
msg_queue_tail = NULL;
}

IPv6OverGeoNetworkingPort_BASE::~IPv6OverGeoNetworkingPort_BASE()
{
clear_queue();
}

void IPv6OverGeoNetworkingPort_BASE::send(const IPv6OverGeoNetworkingReq& send_par, const COMPONENT& destination_component)
{
if (!is_started) TTCN_error("Sending a message on port %s, which is not started.", port_name);
if (!destination_component.is_bound()) TTCN_error("Unbound component reference in the to clause of send operation.");
const TTCN_Logger::Severity log_sev = destination_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMSEND:TTCN_Logger::PORTEVENT_MCSEND;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_send(port_name, destination_component,
(TTCN_Logger::begin_event(log_sev, TRUE), TTCN_Logger::log_event_str(" @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq : "),
send_par.log(), TTCN_Logger::end_event_log2str()));
}
if (destination_component == SYSTEM_COMPREF) outgoing_send(send_par);
else {
Text_Buf text_buf;
prepare_message(text_buf, "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
send_par.encode_text(text_buf);
send_data(text_buf, destination_component);
}
}

void IPv6OverGeoNetworkingPort_BASE::send(const IPv6OverGeoNetworkingReq& send_par)
{
send(send_par, COMPONENT(get_default_destination()));
}

void IPv6OverGeoNetworkingPort_BASE::send(const IPv6OverGeoNetworkingReq_template& send_par, const COMPONENT& destination_component)
{
const IPv6OverGeoNetworkingReq& send_par_value = IPv6OverGeoNetworkingReq(send_par.valueof());
send(send_par_value, destination_component);
}

void IPv6OverGeoNetworkingPort_BASE::send(const IPv6OverGeoNetworkingReq_template& send_par)
{
const IPv6OverGeoNetworkingReq& send_par_value = IPv6OverGeoNetworkingReq(send_par.valueof());
send(send_par_value, COMPONENT(get_default_destination()));
}

alt_status IPv6OverGeoNetworkingPort_BASE::receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status IPv6OverGeoNetworkingPort_BASE::check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
return ALT_YES;
}
}

alt_status IPv6OverGeoNetworkingPort_BASE::trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS, "Matching on port %s succeeded.", port_name);
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
switch (my_head->item_selection) {
case MESSAGE_0:
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd: "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()), msg_head_count+1);
break;
default:
TTCN_error("Internal error: unknown message");
}
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status IPv6OverGeoNetworkingPort_BASE::receive(const IPv6OverGeoNetworkingInd_template& value_template, IPv6OverGeoNetworkingInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0, TRUE)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0, TRUE),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_ptr != NULL) *value_ptr = *my_head->message_0;
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0, TRUE),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

alt_status IPv6OverGeoNetworkingPort_BASE::check_receive(const IPv6OverGeoNetworkingInd_template& value_template, IPv6OverGeoNetworkingInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s failed: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
return ALT_NO;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s failed: Type of the first message in the queue is not @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.", port_name);
return ALT_NO;
} else if (!value_template.match(*my_head->message_0, TRUE)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0, TRUE),
 TTCN_Logger::end_event_log2str()));
}
return ALT_NO;
} else {
if (value_ptr != NULL) *value_ptr = *my_head->message_0;
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0, TRUE),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::check__receive__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
return ALT_YES;
}
}

alt_status IPv6OverGeoNetworkingPort_BASE::trigger(const IPv6OverGeoNetworkingInd_template& value_template, IPv6OverGeoNetworkingInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr)
{
msg_queue_item *my_head = (msg_queue_item*)msg_queue_head;
if (msg_queue_head == NULL) {
if (is_started) return ALT_MAYBE;
else {
TTCN_Logger::log(TTCN_Logger::MATCHING_PROBLEM, "Matching on port %s failed: Port is not started and the queue is empty.", port_name);
return ALT_NO;
}
} else if (!sender_template.match(my_head->sender_component)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::begin_event(log_sev);
TTCN_Logger::log_event("Matching on port %s will drop a message: Sender of the first message in the queue does not match the from clause: ", port_name);
sender_template.log_match(my_head->sender_component);
TTCN_Logger::end_event();
}
remove_msg_queue_head();
return ALT_REPEAT;
} else if (my_head->item_selection != MESSAGE_0) {
TTCN_Logger::log(my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMUNSUCC:TTCN_Logger::MATCHING_MCUNSUCC, "Matching on port %s will drop a message: Type of the first message in the queue is not @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.", port_name);
remove_msg_queue_head();
return ALT_REPEAT;
} else if (!value_template.match(*my_head->message_0, TRUE)) {
const TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF ? TTCN_Logger::MATCHING_MMUNSUCC : TTCN_Logger::MATCHING_MCUNSUCC;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_failure(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
TitanLoggerApiSimple::MatchingFailureType_reason::message__does__not__match__template,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0, TRUE),
 TTCN_Logger::end_event_log2str()));
}
remove_msg_queue_head();
return ALT_REPEAT;
} else {
if (value_ptr != NULL) *value_ptr = *my_head->message_0;
if (sender_ptr != NULL) *sender_ptr = my_head->sender_component;
TTCN_Logger::Severity log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::MATCHING_MMSUCCESS:TTCN_Logger::MATCHING_MCSUCCESS;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_matching_success(TitanLoggerApiSimple::PortType::message__,
port_name, my_head->sender_component,
(TTCN_Logger::begin_event(log_sev, TRUE), value_template.log_match(*my_head->message_0, TRUE),
 TTCN_Logger::end_event_log2str()));
}
log_sev = my_head->sender_component==SYSTEM_COMPREF?TTCN_Logger::PORTEVENT_MMRECV:TTCN_Logger::PORTEVENT_MCRECV;
if (TTCN_Logger::log_this_event(log_sev)) {
TTCN_Logger::log_msgport_recv(port_name, TitanLoggerApiSimple::Msg__port__recv_operation::trigger__op,
my_head->sender_component, CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(log_sev,TRUE), TTCN_Logger::log_event_str(": @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd : "),
my_head->message_0->log(), TTCN_Logger::end_event_log2str()),
msg_head_count+1);
}
remove_msg_queue_head();
return ALT_YES;
}
}

void IPv6OverGeoNetworkingPort_BASE::incoming_message(const IPv6OverGeoNetworkingInd& incoming_par, component sender_component)
{
if (!is_started) TTCN_error("Port %s is not started but a message has arrived on it.", port_name);
msg_tail_count++;
if (TTCN_Logger::log_this_event(TTCN_Logger::PORTEVENT_MQUEUE)) {
TTCN_Logger::log_port_queue(TitanLoggerApiSimple::Port__Queue_operation::enqueue__msg, port_name, sender_component, msg_tail_count,
CHARSTRING(0, NULL),
(TTCN_Logger::begin_event(TTCN_Logger::PORTEVENT_MQUEUE, TRUE), TTCN_Logger::log_event_str(" @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd : "), incoming_par.log(), TTCN_Logger::end_event_log2str()));
}
msg_queue_item *new_item = new msg_queue_item;
new_item->item_selection = MESSAGE_0;
new_item->message_0 = new IPv6OverGeoNetworkingInd(incoming_par);
new_item->sender_component = sender_component;
append_to_msg_queue(new_item);
}

boolean IPv6OverGeoNetworkingPort_BASE::process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING&)
{
if (!strcmp(message_type, "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd")) {
IPv6OverGeoNetworkingInd incoming_par;
incoming_par.decode_text(incoming_buf);
incoming_message(incoming_par, sender_component);
return TRUE;
} else return FALSE;
}

IPv6OverGeoNetworkingInd::IPv6OverGeoNetworkingInd()
{
  bound_flag = FALSE;
}

IPv6OverGeoNetworkingInd::IPv6OverGeoNetworkingInd(const CHARSTRING& par_interface,
    const OCTETSTRING& par_macSourceAddress,
    const OCTETSTRING& par_macDestinationAddress,
    const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& par_ipv6Packet)
  :   field_interface(par_interface),
  field_macSourceAddress(par_macSourceAddress),
  field_macDestinationAddress(par_macDestinationAddress),
  field_ipv6Packet(par_ipv6Packet)
{
  bound_flag = TRUE;
}

IPv6OverGeoNetworkingInd::IPv6OverGeoNetworkingInd(const IPv6OverGeoNetworkingInd& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
bound_flag = TRUE;
if (other_value.interface().is_bound()) field_interface = other_value.interface();
else field_interface.clean_up();
if (other_value.macSourceAddress().is_bound()) field_macSourceAddress = other_value.macSourceAddress();
else field_macSourceAddress.clean_up();
if (other_value.macDestinationAddress().is_bound()) field_macDestinationAddress = other_value.macDestinationAddress();
else field_macDestinationAddress.clean_up();
if (other_value.ipv6Packet().is_bound()) field_ipv6Packet = other_value.ipv6Packet();
else field_ipv6Packet.clean_up();
}

void IPv6OverGeoNetworkingInd::clean_up()
{
field_interface.clean_up();
field_macSourceAddress.clean_up();
field_macDestinationAddress.clean_up();
field_ipv6Packet.clean_up();
bound_flag = FALSE;
}

IPv6OverGeoNetworkingInd& IPv6OverGeoNetworkingInd::operator=(const IPv6OverGeoNetworkingInd& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
  bound_flag = TRUE;
  if (other_value.interface().is_bound()) field_interface = other_value.interface();
  else field_interface.clean_up();
  if (other_value.macSourceAddress().is_bound()) field_macSourceAddress = other_value.macSourceAddress();
  else field_macSourceAddress.clean_up();
  if (other_value.macDestinationAddress().is_bound()) field_macDestinationAddress = other_value.macDestinationAddress();
  else field_macDestinationAddress.clean_up();
  if (other_value.ipv6Packet().is_bound()) field_ipv6Packet = other_value.ipv6Packet();
  else field_ipv6Packet.clean_up();
}
return *this;
}

boolean IPv6OverGeoNetworkingInd::operator==(const IPv6OverGeoNetworkingInd& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_interface==other_value.field_interface
  && field_macSourceAddress==other_value.field_macSourceAddress
  && field_macDestinationAddress==other_value.field_macDestinationAddress
  && field_ipv6Packet==other_value.field_ipv6Packet;
}

boolean IPv6OverGeoNetworkingInd::is_bound() const
{
if (bound_flag) return TRUE;
if(field_interface.is_bound()) return TRUE;
if(field_macSourceAddress.is_bound()) return TRUE;
if(field_macDestinationAddress.is_bound()) return TRUE;
if(field_ipv6Packet.is_bound()) return TRUE;
return FALSE;
}
boolean IPv6OverGeoNetworkingInd::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_interface.is_value()) return FALSE;
if(!field_macSourceAddress.is_value()) return FALSE;
if(!field_macDestinationAddress.is_value()) return FALSE;
if(!field_ipv6Packet.is_value()) return FALSE;
return TRUE;
}
int IPv6OverGeoNetworkingInd::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
  return 4;
}

void IPv6OverGeoNetworkingInd::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ interface := ");
field_interface.log();
TTCN_Logger::log_event_str(", macSourceAddress := ");
field_macSourceAddress.log();
TTCN_Logger::log_event_str(", macDestinationAddress := ");
field_macDestinationAddress.log();
TTCN_Logger::log_event_str(", ipv6Packet := ");
field_ipv6Packet.log();
TTCN_Logger::log_event_str(" }");
}

void IPv6OverGeoNetworkingInd::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'");
    }
    if (strcmp("interface", param_field) == 0) {
      interface().set_param(param);
      return;
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      macSourceAddress().set_param(param);
      return;
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      macDestinationAddress().set_param(param);
      return;
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      ipv6Packet().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (4<mp->get_size()) {
      param.error("record value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd has 4 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) interface().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) macSourceAddress().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) macDestinationAddress().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) ipv6Packet().set_param(*mp->get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "interface")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          interface().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macSourceAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macSourceAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macDestinationAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macDestinationAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ipv6Packet")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ipv6Packet().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
  }
}

Module_Param* IPv6OverGeoNetworkingInd::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'");
    }
    if (strcmp("interface", param_field) == 0) {
      return interface().get_param(param_name);
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      return macSourceAddress().get_param(param_name);
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      return macDestinationAddress().get_param(param_name);
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      return ipv6Packet().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_interface = field_interface.get_param(param_name);
  mp_field_interface->set_id(new Module_Param_FieldName(mcopystr("interface")));
  mp->add_elem(mp_field_interface);
  Module_Param* mp_field_macSourceAddress = field_macSourceAddress.get_param(param_name);
  mp_field_macSourceAddress->set_id(new Module_Param_FieldName(mcopystr("macSourceAddress")));
  mp->add_elem(mp_field_macSourceAddress);
  Module_Param* mp_field_macDestinationAddress = field_macDestinationAddress.get_param(param_name);
  mp_field_macDestinationAddress->set_id(new Module_Param_FieldName(mcopystr("macDestinationAddress")));
  mp->add_elem(mp_field_macDestinationAddress);
  Module_Param* mp_field_ipv6Packet = field_ipv6Packet.get_param(param_name);
  mp_field_ipv6Packet->set_id(new Module_Param_FieldName(mcopystr("ipv6Packet")));
  mp->add_elem(mp_field_ipv6Packet);
  return mp;
  }

void IPv6OverGeoNetworkingInd::set_implicit_omit()
{
if (interface().is_bound()) interface().set_implicit_omit();
if (macSourceAddress().is_bound()) macSourceAddress().set_implicit_omit();
if (macDestinationAddress().is_bound()) macDestinationAddress().set_implicit_omit();
if (ipv6Packet().is_bound()) ipv6Packet().set_implicit_omit();
}

void IPv6OverGeoNetworkingInd::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
field_interface.encode_text(text_buf);
field_macSourceAddress.encode_text(text_buf);
field_macDestinationAddress.encode_text(text_buf);
field_ipv6Packet.encode_text(text_buf);
}

void IPv6OverGeoNetworkingInd::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_interface.decode_text(text_buf);
field_macSourceAddress.decode_text(text_buf);
field_macDestinationAddress.decode_text(text_buf);
field_ipv6Packet.decode_text(text_buf);
}

void IPv6OverGeoNetworkingInd::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void IPv6OverGeoNetworkingInd::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int IPv6OverGeoNetworkingInd::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_interface.RAW_decode(CHARSTRING_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_macSourceAddress.RAW_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_macDestinationAddress.RAW_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_ipv6Packet.RAW_decode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int IPv6OverGeoNetworkingInd::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 4;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(4);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, CHARSTRING_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, LibItsExternal__TypesAndValues::MacAddress_descr_.raw);
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, LibItsExternal__TypesAndValues::MacAddress_descr_.raw);
  myleaf.body.node.nodes[3] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 3, LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_.raw);
  encoded_length += field_interface.RAW_encode(CHARSTRING_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_macSourceAddress.RAW_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, *myleaf.body.node.nodes[1]);
  encoded_length += field_macDestinationAddress.RAW_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, *myleaf.body.node.nodes[2]);
  encoded_length += field_ipv6Packet.RAW_encode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, *myleaf.body.node.nodes[3]);
  return myleaf.length = encoded_length;
}

int IPv6OverGeoNetworkingInd::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "interface");
    enc_len += field_interface.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "macSourceAddress");
    enc_len += field_macSourceAddress.JSON_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "macDestinationAddress");
    enc_len += field_macDestinationAddress.JSON_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "ipv6Packet");
    enc_len += field_ipv6Packet.JSON_encode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int IPv6OverGeoNetworkingInd::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (9 == name_len && 0 == strncmp(fld_name, "interface", name_len)) {
         int ret_val = field_interface.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "interface");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (16 == name_len && 0 == strncmp(fld_name, "macSourceAddress", name_len)) {
         int ret_val = field_macSourceAddress.JSON_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "macSourceAddress");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (21 == name_len && 0 == strncmp(fld_name, "macDestinationAddress", name_len)) {
         int ret_val = field_macDestinationAddress.JSON_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "macDestinationAddress");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (10 == name_len && 0 == strncmp(fld_name, "ipv6Packet", name_len)) {
         int ret_val = field_ipv6Packet.JSON_decode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "ipv6Packet");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_interface.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "interface");
    return JSON_ERROR_FATAL;
  }
if (!field_macSourceAddress.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "macSourceAddress");
    return JSON_ERROR_FATAL;
  }
if (!field_macDestinationAddress.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "macDestinationAddress");
    return JSON_ERROR_FATAL;
  }
if (!field_ipv6Packet.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "ipv6Packet");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct IPv6OverGeoNetworkingInd_template::single_value_struct {
CHARSTRING_template field_interface;
OCTETSTRING_template field_macSourceAddress;
OCTETSTRING_template field_macDestinationAddress;
LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template field_ipv6Packet;
};

void IPv6OverGeoNetworkingInd_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_interface = ANY_VALUE;
single_value->field_macSourceAddress = ANY_VALUE;
single_value->field_macDestinationAddress = ANY_VALUE;
single_value->field_ipv6Packet = ANY_VALUE;
}
}
}

void IPv6OverGeoNetworkingInd_template::copy_value(const IPv6OverGeoNetworkingInd& other_value)
{
single_value = new single_value_struct;
if (other_value.interface().is_bound()) {
  single_value->field_interface = other_value.interface();
} else {
  single_value->field_interface.clean_up();
}
if (other_value.macSourceAddress().is_bound()) {
  single_value->field_macSourceAddress = other_value.macSourceAddress();
} else {
  single_value->field_macSourceAddress.clean_up();
}
if (other_value.macDestinationAddress().is_bound()) {
  single_value->field_macDestinationAddress = other_value.macDestinationAddress();
} else {
  single_value->field_macDestinationAddress.clean_up();
}
if (other_value.ipv6Packet().is_bound()) {
  single_value->field_ipv6Packet = other_value.ipv6Packet();
} else {
  single_value->field_ipv6Packet.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void IPv6OverGeoNetworkingInd_template::copy_template(const IPv6OverGeoNetworkingInd_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.interface().get_selection()) {
single_value->field_interface = other_value.interface();
} else {
single_value->field_interface.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.macSourceAddress().get_selection()) {
single_value->field_macSourceAddress = other_value.macSourceAddress();
} else {
single_value->field_macSourceAddress.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.macDestinationAddress().get_selection()) {
single_value->field_macDestinationAddress = other_value.macDestinationAddress();
} else {
single_value->field_macDestinationAddress.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ipv6Packet().get_selection()) {
single_value->field_ipv6Packet = other_value.ipv6Packet();
} else {
single_value->field_ipv6Packet.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new IPv6OverGeoNetworkingInd_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
break;
}
set_selection(other_value);
}

IPv6OverGeoNetworkingInd_template::IPv6OverGeoNetworkingInd_template()
{
}

IPv6OverGeoNetworkingInd_template::IPv6OverGeoNetworkingInd_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

IPv6OverGeoNetworkingInd_template::IPv6OverGeoNetworkingInd_template(const IPv6OverGeoNetworkingInd& other_value)
{
copy_value(other_value);
}

IPv6OverGeoNetworkingInd_template::IPv6OverGeoNetworkingInd_template(const OPTIONAL<IPv6OverGeoNetworkingInd>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const IPv6OverGeoNetworkingInd&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd from an unbound optional field.");
}
}

IPv6OverGeoNetworkingInd_template::IPv6OverGeoNetworkingInd_template(const IPv6OverGeoNetworkingInd_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

IPv6OverGeoNetworkingInd_template::~IPv6OverGeoNetworkingInd_template()
{
clean_up();
}

IPv6OverGeoNetworkingInd_template& IPv6OverGeoNetworkingInd_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

IPv6OverGeoNetworkingInd_template& IPv6OverGeoNetworkingInd_template::operator=(const IPv6OverGeoNetworkingInd& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

IPv6OverGeoNetworkingInd_template& IPv6OverGeoNetworkingInd_template::operator=(const OPTIONAL<IPv6OverGeoNetworkingInd>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const IPv6OverGeoNetworkingInd&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
}
return *this;
}

IPv6OverGeoNetworkingInd_template& IPv6OverGeoNetworkingInd_template::operator=(const IPv6OverGeoNetworkingInd_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean IPv6OverGeoNetworkingInd_template::match(const IPv6OverGeoNetworkingInd& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.interface().is_bound()) return FALSE;
if(!single_value->field_interface.match(other_value.interface(), legacy))return FALSE;
if(!other_value.macSourceAddress().is_bound()) return FALSE;
if(!single_value->field_macSourceAddress.match(other_value.macSourceAddress(), legacy))return FALSE;
if(!other_value.macDestinationAddress().is_bound()) return FALSE;
if(!single_value->field_macDestinationAddress.match(other_value.macDestinationAddress(), legacy))return FALSE;
if(!other_value.ipv6Packet().is_bound()) return FALSE;
if(!single_value->field_ipv6Packet.match(other_value.ipv6Packet(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
}
return FALSE;
}

boolean IPv6OverGeoNetworkingInd_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_interface.is_bound()) return TRUE;
if (single_value->field_macSourceAddress.is_bound()) return TRUE;
if (single_value->field_macDestinationAddress.is_bound()) return TRUE;
if (single_value->field_ipv6Packet.is_bound()) return TRUE;
return FALSE;
}

boolean IPv6OverGeoNetworkingInd_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_interface.is_value()) return FALSE;
if (!single_value->field_macSourceAddress.is_value()) return FALSE;
if (!single_value->field_macDestinationAddress.is_value()) return FALSE;
if (!single_value->field_ipv6Packet.is_value()) return FALSE;
return TRUE;
}

void IPv6OverGeoNetworkingInd_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

IPv6OverGeoNetworkingInd IPv6OverGeoNetworkingInd_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
IPv6OverGeoNetworkingInd ret_val;
if (single_value->field_interface.is_bound()) {
ret_val.interface() = single_value->field_interface.valueof();
}
if (single_value->field_macSourceAddress.is_bound()) {
ret_val.macSourceAddress() = single_value->field_macSourceAddress.valueof();
}
if (single_value->field_macDestinationAddress.is_bound()) {
ret_val.macDestinationAddress() = single_value->field_macDestinationAddress.valueof();
}
if (single_value->field_ipv6Packet.is_bound()) {
ret_val.ipv6Packet() = single_value->field_ipv6Packet.valueof();
}
return ret_val;
}

void IPv6OverGeoNetworkingInd_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new IPv6OverGeoNetworkingInd_template[list_length];
}

IPv6OverGeoNetworkingInd_template& IPv6OverGeoNetworkingInd_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
return value_list.list_value[list_index];
}

CHARSTRING_template& IPv6OverGeoNetworkingInd_template::interface()
{
set_specific();
return single_value->field_interface;
}

const CHARSTRING_template& IPv6OverGeoNetworkingInd_template::interface() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field interface of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
return single_value->field_interface;
}

OCTETSTRING_template& IPv6OverGeoNetworkingInd_template::macSourceAddress()
{
set_specific();
return single_value->field_macSourceAddress;
}

const OCTETSTRING_template& IPv6OverGeoNetworkingInd_template::macSourceAddress() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field macSourceAddress of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
return single_value->field_macSourceAddress;
}

OCTETSTRING_template& IPv6OverGeoNetworkingInd_template::macDestinationAddress()
{
set_specific();
return single_value->field_macDestinationAddress;
}

const OCTETSTRING_template& IPv6OverGeoNetworkingInd_template::macDestinationAddress() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field macDestinationAddress of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
return single_value->field_macDestinationAddress;
}

LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& IPv6OverGeoNetworkingInd_template::ipv6Packet()
{
set_specific();
return single_value->field_ipv6Packet;
}

const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& IPv6OverGeoNetworkingInd_template::ipv6Packet() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ipv6Packet of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
return single_value->field_ipv6Packet;
}

int IPv6OverGeoNetworkingInd_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 4;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
  }
  return 0;
}

void IPv6OverGeoNetworkingInd_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ interface := ");
single_value->field_interface.log();
TTCN_Logger::log_event_str(", macSourceAddress := ");
single_value->field_macSourceAddress.log();
TTCN_Logger::log_event_str(", macDestinationAddress := ");
single_value->field_macDestinationAddress.log();
TTCN_Logger::log_event_str(", ipv6Packet := ");
single_value->field_ipv6Packet.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void IPv6OverGeoNetworkingInd_template::log_match(const IPv6OverGeoNetworkingInd& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_interface.match(match_value.interface(), legacy)){
TTCN_Logger::log_logmatch_info(".interface");
single_value->field_interface.log_match(match_value.interface(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_macSourceAddress.match(match_value.macSourceAddress(), legacy)){
TTCN_Logger::log_logmatch_info(".macSourceAddress");
single_value->field_macSourceAddress.log_match(match_value.macSourceAddress(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_macDestinationAddress.match(match_value.macDestinationAddress(), legacy)){
TTCN_Logger::log_logmatch_info(".macDestinationAddress");
single_value->field_macDestinationAddress.log_match(match_value.macDestinationAddress(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ipv6Packet.match(match_value.ipv6Packet(), legacy)){
TTCN_Logger::log_logmatch_info(".ipv6Packet");
single_value->field_ipv6Packet.log_match(match_value.ipv6Packet(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ interface := ");
single_value->field_interface.log_match(match_value.interface(), legacy);
TTCN_Logger::log_event_str(", macSourceAddress := ");
single_value->field_macSourceAddress.log_match(match_value.macSourceAddress(), legacy);
TTCN_Logger::log_event_str(", macDestinationAddress := ");
single_value->field_macDestinationAddress.log_match(match_value.macDestinationAddress(), legacy);
TTCN_Logger::log_event_str(", ipv6Packet := ");
single_value->field_ipv6Packet.log_match(match_value.ipv6Packet(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void IPv6OverGeoNetworkingInd_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_interface.encode_text(text_buf);
single_value->field_macSourceAddress.encode_text(text_buf);
single_value->field_macDestinationAddress.encode_text(text_buf);
single_value->field_ipv6Packet.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
}
}

void IPv6OverGeoNetworkingInd_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_interface.decode_text(text_buf);
single_value->field_macSourceAddress.decode_text(text_buf);
single_value->field_macDestinationAddress.decode_text(text_buf);
single_value->field_ipv6Packet.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new IPv6OverGeoNetworkingInd_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd.");
}
}

void IPv6OverGeoNetworkingInd_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'");
    }
    if (strcmp("interface", param_field) == 0) {
      interface().set_param(param);
      return;
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      macSourceAddress().set_param(param);
      return;
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      macDestinationAddress().set_param(param);
      return;
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      ipv6Packet().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    IPv6OverGeoNetworkingInd_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (4<mp->get_size()) {
      param.error("record template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd has 4 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) interface().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) macSourceAddress().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) macDestinationAddress().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) ipv6Packet().set_param(*mp->get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "interface")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          interface().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macSourceAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macSourceAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macDestinationAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macDestinationAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ipv6Packet")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ipv6Packet().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* IPv6OverGeoNetworkingInd_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'");
    }
    if (strcmp("interface", param_field) == 0) {
      return interface().get_param(param_name);
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      return macSourceAddress().get_param(param_name);
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      return macDestinationAddress().get_param(param_name);
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      return ipv6Packet().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_interface = single_value->field_interface.get_param(param_name);
    mp_field_interface->set_id(new Module_Param_FieldName(mcopystr("interface")));
    mp->add_elem(mp_field_interface);
    Module_Param* mp_field_macSourceAddress = single_value->field_macSourceAddress.get_param(param_name);
    mp_field_macSourceAddress->set_id(new Module_Param_FieldName(mcopystr("macSourceAddress")));
    mp->add_elem(mp_field_macSourceAddress);
    Module_Param* mp_field_macDestinationAddress = single_value->field_macDestinationAddress.get_param(param_name);
    mp_field_macDestinationAddress->set_id(new Module_Param_FieldName(mcopystr("macDestinationAddress")));
    mp->add_elem(mp_field_macDestinationAddress);
    Module_Param* mp_field_ipv6Packet = single_value->field_ipv6Packet.get_param(param_name);
    mp_field_ipv6Packet->set_id(new Module_Param_FieldName(mcopystr("ipv6Packet")));
    mp->add_elem(mp_field_ipv6Packet);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void IPv6OverGeoNetworkingInd_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_interface.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
single_value->field_macSourceAddress.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
single_value->field_macDestinationAddress.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
single_value->field_ipv6Packet.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingInd");
}

boolean IPv6OverGeoNetworkingInd_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean IPv6OverGeoNetworkingInd_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

IPv6OverGeoNetworkingReq::IPv6OverGeoNetworkingReq()
{
  bound_flag = FALSE;
}

IPv6OverGeoNetworkingReq::IPv6OverGeoNetworkingReq(const CHARSTRING& par_interface,
    const OCTETSTRING& par_macSourceAddress,
    const OCTETSTRING& par_macDestinationAddress,
    const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet& par_ipv6Packet)
  :   field_interface(par_interface),
  field_macSourceAddress(par_macSourceAddress),
  field_macDestinationAddress(par_macDestinationAddress),
  field_ipv6Packet(par_ipv6Packet)
{
  bound_flag = TRUE;
}

IPv6OverGeoNetworkingReq::IPv6OverGeoNetworkingReq(const IPv6OverGeoNetworkingReq& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
bound_flag = TRUE;
if (other_value.interface().is_bound()) field_interface = other_value.interface();
else field_interface.clean_up();
if (other_value.macSourceAddress().is_bound()) field_macSourceAddress = other_value.macSourceAddress();
else field_macSourceAddress.clean_up();
if (other_value.macDestinationAddress().is_bound()) field_macDestinationAddress = other_value.macDestinationAddress();
else field_macDestinationAddress.clean_up();
if (other_value.ipv6Packet().is_bound()) field_ipv6Packet = other_value.ipv6Packet();
else field_ipv6Packet.clean_up();
}

void IPv6OverGeoNetworkingReq::clean_up()
{
field_interface.clean_up();
field_macSourceAddress.clean_up();
field_macDestinationAddress.clean_up();
field_ipv6Packet.clean_up();
bound_flag = FALSE;
}

IPv6OverGeoNetworkingReq& IPv6OverGeoNetworkingReq::operator=(const IPv6OverGeoNetworkingReq& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
  bound_flag = TRUE;
  if (other_value.interface().is_bound()) field_interface = other_value.interface();
  else field_interface.clean_up();
  if (other_value.macSourceAddress().is_bound()) field_macSourceAddress = other_value.macSourceAddress();
  else field_macSourceAddress.clean_up();
  if (other_value.macDestinationAddress().is_bound()) field_macDestinationAddress = other_value.macDestinationAddress();
  else field_macDestinationAddress.clean_up();
  if (other_value.ipv6Packet().is_bound()) field_ipv6Packet = other_value.ipv6Packet();
  else field_ipv6Packet.clean_up();
}
return *this;
}

boolean IPv6OverGeoNetworkingReq::operator==(const IPv6OverGeoNetworkingReq& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_interface==other_value.field_interface
  && field_macSourceAddress==other_value.field_macSourceAddress
  && field_macDestinationAddress==other_value.field_macDestinationAddress
  && field_ipv6Packet==other_value.field_ipv6Packet;
}

boolean IPv6OverGeoNetworkingReq::is_bound() const
{
if (bound_flag) return TRUE;
if(field_interface.is_bound()) return TRUE;
if(field_macSourceAddress.is_bound()) return TRUE;
if(field_macDestinationAddress.is_bound()) return TRUE;
if(field_ipv6Packet.is_bound()) return TRUE;
return FALSE;
}
boolean IPv6OverGeoNetworkingReq::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_interface.is_value()) return FALSE;
if(!field_macSourceAddress.is_value()) return FALSE;
if(!field_macDestinationAddress.is_value()) return FALSE;
if(!field_ipv6Packet.is_value()) return FALSE;
return TRUE;
}
int IPv6OverGeoNetworkingReq::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
  return 4;
}

void IPv6OverGeoNetworkingReq::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ interface := ");
field_interface.log();
TTCN_Logger::log_event_str(", macSourceAddress := ");
field_macSourceAddress.log();
TTCN_Logger::log_event_str(", macDestinationAddress := ");
field_macDestinationAddress.log();
TTCN_Logger::log_event_str(", ipv6Packet := ");
field_ipv6Packet.log();
TTCN_Logger::log_event_str(" }");
}

void IPv6OverGeoNetworkingReq::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'");
    }
    if (strcmp("interface", param_field) == 0) {
      interface().set_param(param);
      return;
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      macSourceAddress().set_param(param);
      return;
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      macDestinationAddress().set_param(param);
      return;
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      ipv6Packet().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (4<mp->get_size()) {
      param.error("record value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq has 4 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) interface().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) macSourceAddress().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) macDestinationAddress().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) ipv6Packet().set_param(*mp->get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "interface")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          interface().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macSourceAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macSourceAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macDestinationAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macDestinationAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ipv6Packet")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ipv6Packet().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
  }
}

Module_Param* IPv6OverGeoNetworkingReq::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'");
    }
    if (strcmp("interface", param_field) == 0) {
      return interface().get_param(param_name);
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      return macSourceAddress().get_param(param_name);
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      return macDestinationAddress().get_param(param_name);
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      return ipv6Packet().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_interface = field_interface.get_param(param_name);
  mp_field_interface->set_id(new Module_Param_FieldName(mcopystr("interface")));
  mp->add_elem(mp_field_interface);
  Module_Param* mp_field_macSourceAddress = field_macSourceAddress.get_param(param_name);
  mp_field_macSourceAddress->set_id(new Module_Param_FieldName(mcopystr("macSourceAddress")));
  mp->add_elem(mp_field_macSourceAddress);
  Module_Param* mp_field_macDestinationAddress = field_macDestinationAddress.get_param(param_name);
  mp_field_macDestinationAddress->set_id(new Module_Param_FieldName(mcopystr("macDestinationAddress")));
  mp->add_elem(mp_field_macDestinationAddress);
  Module_Param* mp_field_ipv6Packet = field_ipv6Packet.get_param(param_name);
  mp_field_ipv6Packet->set_id(new Module_Param_FieldName(mcopystr("ipv6Packet")));
  mp->add_elem(mp_field_ipv6Packet);
  return mp;
  }

void IPv6OverGeoNetworkingReq::set_implicit_omit()
{
if (interface().is_bound()) interface().set_implicit_omit();
if (macSourceAddress().is_bound()) macSourceAddress().set_implicit_omit();
if (macDestinationAddress().is_bound()) macDestinationAddress().set_implicit_omit();
if (ipv6Packet().is_bound()) ipv6Packet().set_implicit_omit();
}

void IPv6OverGeoNetworkingReq::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
field_interface.encode_text(text_buf);
field_macSourceAddress.encode_text(text_buf);
field_macDestinationAddress.encode_text(text_buf);
field_ipv6Packet.encode_text(text_buf);
}

void IPv6OverGeoNetworkingReq::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_interface.decode_text(text_buf);
field_macSourceAddress.decode_text(text_buf);
field_macDestinationAddress.decode_text(text_buf);
field_ipv6Packet.decode_text(text_buf);
}

void IPv6OverGeoNetworkingReq::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void IPv6OverGeoNetworkingReq::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int IPv6OverGeoNetworkingReq::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_interface.RAW_decode(CHARSTRING_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_macSourceAddress.RAW_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_macDestinationAddress.RAW_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_ipv6Packet.RAW_decode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int IPv6OverGeoNetworkingReq::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 4;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(4);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, CHARSTRING_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, LibItsExternal__TypesAndValues::MacAddress_descr_.raw);
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, LibItsExternal__TypesAndValues::MacAddress_descr_.raw);
  myleaf.body.node.nodes[3] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 3, LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_.raw);
  encoded_length += field_interface.RAW_encode(CHARSTRING_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_macSourceAddress.RAW_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, *myleaf.body.node.nodes[1]);
  encoded_length += field_macDestinationAddress.RAW_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, *myleaf.body.node.nodes[2]);
  encoded_length += field_ipv6Packet.RAW_encode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, *myleaf.body.node.nodes[3]);
  return myleaf.length = encoded_length;
}

int IPv6OverGeoNetworkingReq::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "interface");
    enc_len += field_interface.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "macSourceAddress");
    enc_len += field_macSourceAddress.JSON_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "macDestinationAddress");
    enc_len += field_macDestinationAddress.JSON_encode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "ipv6Packet");
    enc_len += field_ipv6Packet.JSON_encode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int IPv6OverGeoNetworkingReq::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (9 == name_len && 0 == strncmp(fld_name, "interface", name_len)) {
         int ret_val = field_interface.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "interface");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (16 == name_len && 0 == strncmp(fld_name, "macSourceAddress", name_len)) {
         int ret_val = field_macSourceAddress.JSON_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "macSourceAddress");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (21 == name_len && 0 == strncmp(fld_name, "macDestinationAddress", name_len)) {
         int ret_val = field_macDestinationAddress.JSON_decode(LibItsExternal__TypesAndValues::MacAddress_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "macDestinationAddress");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (10 == name_len && 0 == strncmp(fld_name, "ipv6Packet", name_len)) {
         int ret_val = field_ipv6Packet.JSON_decode(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "ipv6Packet");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_interface.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "interface");
    return JSON_ERROR_FATAL;
  }
if (!field_macSourceAddress.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "macSourceAddress");
    return JSON_ERROR_FATAL;
  }
if (!field_macDestinationAddress.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "macDestinationAddress");
    return JSON_ERROR_FATAL;
  }
if (!field_ipv6Packet.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "ipv6Packet");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct IPv6OverGeoNetworkingReq_template::single_value_struct {
CHARSTRING_template field_interface;
OCTETSTRING_template field_macSourceAddress;
OCTETSTRING_template field_macDestinationAddress;
LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template field_ipv6Packet;
};

void IPv6OverGeoNetworkingReq_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_interface = ANY_VALUE;
single_value->field_macSourceAddress = ANY_VALUE;
single_value->field_macDestinationAddress = ANY_VALUE;
single_value->field_ipv6Packet = ANY_VALUE;
}
}
}

void IPv6OverGeoNetworkingReq_template::copy_value(const IPv6OverGeoNetworkingReq& other_value)
{
single_value = new single_value_struct;
if (other_value.interface().is_bound()) {
  single_value->field_interface = other_value.interface();
} else {
  single_value->field_interface.clean_up();
}
if (other_value.macSourceAddress().is_bound()) {
  single_value->field_macSourceAddress = other_value.macSourceAddress();
} else {
  single_value->field_macSourceAddress.clean_up();
}
if (other_value.macDestinationAddress().is_bound()) {
  single_value->field_macDestinationAddress = other_value.macDestinationAddress();
} else {
  single_value->field_macDestinationAddress.clean_up();
}
if (other_value.ipv6Packet().is_bound()) {
  single_value->field_ipv6Packet = other_value.ipv6Packet();
} else {
  single_value->field_ipv6Packet.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void IPv6OverGeoNetworkingReq_template::copy_template(const IPv6OverGeoNetworkingReq_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.interface().get_selection()) {
single_value->field_interface = other_value.interface();
} else {
single_value->field_interface.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.macSourceAddress().get_selection()) {
single_value->field_macSourceAddress = other_value.macSourceAddress();
} else {
single_value->field_macSourceAddress.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.macDestinationAddress().get_selection()) {
single_value->field_macDestinationAddress = other_value.macDestinationAddress();
} else {
single_value->field_macDestinationAddress.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ipv6Packet().get_selection()) {
single_value->field_ipv6Packet = other_value.ipv6Packet();
} else {
single_value->field_ipv6Packet.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new IPv6OverGeoNetworkingReq_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
break;
}
set_selection(other_value);
}

IPv6OverGeoNetworkingReq_template::IPv6OverGeoNetworkingReq_template()
{
}

IPv6OverGeoNetworkingReq_template::IPv6OverGeoNetworkingReq_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

IPv6OverGeoNetworkingReq_template::IPv6OverGeoNetworkingReq_template(const IPv6OverGeoNetworkingReq& other_value)
{
copy_value(other_value);
}

IPv6OverGeoNetworkingReq_template::IPv6OverGeoNetworkingReq_template(const OPTIONAL<IPv6OverGeoNetworkingReq>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const IPv6OverGeoNetworkingReq&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq from an unbound optional field.");
}
}

IPv6OverGeoNetworkingReq_template::IPv6OverGeoNetworkingReq_template(const IPv6OverGeoNetworkingReq_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

IPv6OverGeoNetworkingReq_template::~IPv6OverGeoNetworkingReq_template()
{
clean_up();
}

IPv6OverGeoNetworkingReq_template& IPv6OverGeoNetworkingReq_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

IPv6OverGeoNetworkingReq_template& IPv6OverGeoNetworkingReq_template::operator=(const IPv6OverGeoNetworkingReq& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

IPv6OverGeoNetworkingReq_template& IPv6OverGeoNetworkingReq_template::operator=(const OPTIONAL<IPv6OverGeoNetworkingReq>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const IPv6OverGeoNetworkingReq&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
}
return *this;
}

IPv6OverGeoNetworkingReq_template& IPv6OverGeoNetworkingReq_template::operator=(const IPv6OverGeoNetworkingReq_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean IPv6OverGeoNetworkingReq_template::match(const IPv6OverGeoNetworkingReq& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.interface().is_bound()) return FALSE;
if(!single_value->field_interface.match(other_value.interface(), legacy))return FALSE;
if(!other_value.macSourceAddress().is_bound()) return FALSE;
if(!single_value->field_macSourceAddress.match(other_value.macSourceAddress(), legacy))return FALSE;
if(!other_value.macDestinationAddress().is_bound()) return FALSE;
if(!single_value->field_macDestinationAddress.match(other_value.macDestinationAddress(), legacy))return FALSE;
if(!other_value.ipv6Packet().is_bound()) return FALSE;
if(!single_value->field_ipv6Packet.match(other_value.ipv6Packet(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
}
return FALSE;
}

boolean IPv6OverGeoNetworkingReq_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_interface.is_bound()) return TRUE;
if (single_value->field_macSourceAddress.is_bound()) return TRUE;
if (single_value->field_macDestinationAddress.is_bound()) return TRUE;
if (single_value->field_ipv6Packet.is_bound()) return TRUE;
return FALSE;
}

boolean IPv6OverGeoNetworkingReq_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_interface.is_value()) return FALSE;
if (!single_value->field_macSourceAddress.is_value()) return FALSE;
if (!single_value->field_macDestinationAddress.is_value()) return FALSE;
if (!single_value->field_ipv6Packet.is_value()) return FALSE;
return TRUE;
}

void IPv6OverGeoNetworkingReq_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

IPv6OverGeoNetworkingReq IPv6OverGeoNetworkingReq_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
IPv6OverGeoNetworkingReq ret_val;
if (single_value->field_interface.is_bound()) {
ret_val.interface() = single_value->field_interface.valueof();
}
if (single_value->field_macSourceAddress.is_bound()) {
ret_val.macSourceAddress() = single_value->field_macSourceAddress.valueof();
}
if (single_value->field_macDestinationAddress.is_bound()) {
ret_val.macDestinationAddress() = single_value->field_macDestinationAddress.valueof();
}
if (single_value->field_ipv6Packet.is_bound()) {
ret_val.ipv6Packet() = single_value->field_ipv6Packet.valueof();
}
return ret_val;
}

void IPv6OverGeoNetworkingReq_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new IPv6OverGeoNetworkingReq_template[list_length];
}

IPv6OverGeoNetworkingReq_template& IPv6OverGeoNetworkingReq_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
return value_list.list_value[list_index];
}

CHARSTRING_template& IPv6OverGeoNetworkingReq_template::interface()
{
set_specific();
return single_value->field_interface;
}

const CHARSTRING_template& IPv6OverGeoNetworkingReq_template::interface() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field interface of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
return single_value->field_interface;
}

OCTETSTRING_template& IPv6OverGeoNetworkingReq_template::macSourceAddress()
{
set_specific();
return single_value->field_macSourceAddress;
}

const OCTETSTRING_template& IPv6OverGeoNetworkingReq_template::macSourceAddress() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field macSourceAddress of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
return single_value->field_macSourceAddress;
}

OCTETSTRING_template& IPv6OverGeoNetworkingReq_template::macDestinationAddress()
{
set_specific();
return single_value->field_macDestinationAddress;
}

const OCTETSTRING_template& IPv6OverGeoNetworkingReq_template::macDestinationAddress() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field macDestinationAddress of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
return single_value->field_macDestinationAddress;
}

LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& IPv6OverGeoNetworkingReq_template::ipv6Packet()
{
set_specific();
return single_value->field_ipv6Packet;
}

const LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template& IPv6OverGeoNetworkingReq_template::ipv6Packet() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ipv6Packet of a non-specific template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
return single_value->field_ipv6Packet;
}

int IPv6OverGeoNetworkingReq_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 4;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
  }
  return 0;
}

void IPv6OverGeoNetworkingReq_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ interface := ");
single_value->field_interface.log();
TTCN_Logger::log_event_str(", macSourceAddress := ");
single_value->field_macSourceAddress.log();
TTCN_Logger::log_event_str(", macDestinationAddress := ");
single_value->field_macDestinationAddress.log();
TTCN_Logger::log_event_str(", ipv6Packet := ");
single_value->field_ipv6Packet.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void IPv6OverGeoNetworkingReq_template::log_match(const IPv6OverGeoNetworkingReq& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_interface.match(match_value.interface(), legacy)){
TTCN_Logger::log_logmatch_info(".interface");
single_value->field_interface.log_match(match_value.interface(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_macSourceAddress.match(match_value.macSourceAddress(), legacy)){
TTCN_Logger::log_logmatch_info(".macSourceAddress");
single_value->field_macSourceAddress.log_match(match_value.macSourceAddress(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_macDestinationAddress.match(match_value.macDestinationAddress(), legacy)){
TTCN_Logger::log_logmatch_info(".macDestinationAddress");
single_value->field_macDestinationAddress.log_match(match_value.macDestinationAddress(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ipv6Packet.match(match_value.ipv6Packet(), legacy)){
TTCN_Logger::log_logmatch_info(".ipv6Packet");
single_value->field_ipv6Packet.log_match(match_value.ipv6Packet(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ interface := ");
single_value->field_interface.log_match(match_value.interface(), legacy);
TTCN_Logger::log_event_str(", macSourceAddress := ");
single_value->field_macSourceAddress.log_match(match_value.macSourceAddress(), legacy);
TTCN_Logger::log_event_str(", macDestinationAddress := ");
single_value->field_macDestinationAddress.log_match(match_value.macDestinationAddress(), legacy);
TTCN_Logger::log_event_str(", ipv6Packet := ");
single_value->field_ipv6Packet.log_match(match_value.ipv6Packet(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void IPv6OverGeoNetworkingReq_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_interface.encode_text(text_buf);
single_value->field_macSourceAddress.encode_text(text_buf);
single_value->field_macDestinationAddress.encode_text(text_buf);
single_value->field_ipv6Packet.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
}
}

void IPv6OverGeoNetworkingReq_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_interface.decode_text(text_buf);
single_value->field_macSourceAddress.decode_text(text_buf);
single_value->field_macDestinationAddress.decode_text(text_buf);
single_value->field_ipv6Packet.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new IPv6OverGeoNetworkingReq_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq.");
}
}

void IPv6OverGeoNetworkingReq_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'");
    }
    if (strcmp("interface", param_field) == 0) {
      interface().set_param(param);
      return;
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      macSourceAddress().set_param(param);
      return;
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      macDestinationAddress().set_param(param);
      return;
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      ipv6Packet().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    IPv6OverGeoNetworkingReq_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (4<mp->get_size()) {
      param.error("record template of type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq has 4 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) interface().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) macSourceAddress().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) macDestinationAddress().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) ipv6Packet().set_param(*mp->get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "interface")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          interface().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macSourceAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macSourceAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "macDestinationAddress")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          macDestinationAddress().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ipv6Packet")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ipv6Packet().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* IPv6OverGeoNetworkingReq_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'");
    }
    if (strcmp("interface", param_field) == 0) {
      return interface().get_param(param_name);
    } else if (strcmp("macSourceAddress", param_field) == 0) {
      return macSourceAddress().get_param(param_name);
    } else if (strcmp("macDestinationAddress", param_field) == 0) {
      return macDestinationAddress().get_param(param_name);
    } else if (strcmp("ipv6Packet", param_field) == 0) {
      return ipv6Packet().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_interface = single_value->field_interface.get_param(param_name);
    mp_field_interface->set_id(new Module_Param_FieldName(mcopystr("interface")));
    mp->add_elem(mp_field_interface);
    Module_Param* mp_field_macSourceAddress = single_value->field_macSourceAddress.get_param(param_name);
    mp_field_macSourceAddress->set_id(new Module_Param_FieldName(mcopystr("macSourceAddress")));
    mp->add_elem(mp_field_macSourceAddress);
    Module_Param* mp_field_macDestinationAddress = single_value->field_macDestinationAddress.get_param(param_name);
    mp_field_macDestinationAddress->set_id(new Module_Param_FieldName(mcopystr("macDestinationAddress")));
    mp->add_elem(mp_field_macDestinationAddress);
    Module_Param* mp_field_ipv6Packet = single_value->field_ipv6Packet.get_param(param_name);
    mp_field_ipv6Packet->set_id(new Module_Param_FieldName(mcopystr("ipv6Packet")));
    mp->add_elem(mp_field_ipv6Packet);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void IPv6OverGeoNetworkingReq_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_interface.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
single_value->field_macSourceAddress.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
single_value->field_macDestinationAddress.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
single_value->field_ipv6Packet.check_restriction(t_res, t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@LibItsIpv6OverGeoNetworking_TestSystem.IPv6OverGeoNetworkingReq");
}

boolean IPv6OverGeoNetworkingReq_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean IPv6OverGeoNetworkingReq_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_TestSystem.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsIpv6OverGeoNetworking_TestSystem");
LibCommon__Time::module_object.pre_init_module();
LibCommon__Sync::module_object.pre_init_module();
LibItsGeoNetworking__TestSystem::module_object.pre_init_module();
LibItsIpv6OverGeoNetworking__TypesAndValues::module_object.pre_init_module();
General__Types::module_object.pre_init_module();
TTCN__EncDec::module_object.pre_init_module();
}

static void post_init_module()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_TestSystem.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsIpv6OverGeoNetworking_TestSystem");
LibCommon__Time::module_object.post_init_module();
LibCommon__Sync::module_object.post_init_module();
LibItsGeoNetworking__TestSystem::module_object.post_init_module();
LibItsIpv6OverGeoNetworking__TypesAndValues::module_object.post_init_module();
General__Types::module_object.post_init_module();
TTCN__EncDec::module_object.post_init_module();
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "ItsIpv6OverGeoNetworkingSystem")) {
if (init_base_comps) {
Module_List::initialize_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworkingSystem", FALSE);
}
ItsIpv6OverGeoNetworkingSystem_component_ipv6OverGeoNetworkingPort.activate_port();
return TRUE;
} else if (!strcmp(component_type, "ItsIpv6OverGeoNetworking")) {
if (init_base_comps) {
Module_List::initialize_component("LibCommon_Sync", "BaseSyncComp", FALSE);
Module_List::initialize_component("LibCommon_Sync", "ClientSyncComp", FALSE);
Module_List::initialize_component("LibCommon_Sync", "SelfSyncComp", FALSE);
Module_List::initialize_component("LibItsCommon_TestSystem", "ItsBaseComponent", FALSE);
Module_List::initialize_component("LibItsGeoNetworking_TestSystem", "ItsBaseGeoNetworking", FALSE);
Module_List::initialize_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", FALSE);
Module_List::initialize_component("LibItsSecurity_TestSystem", "ItsSecurityBaseComponent", FALSE);
}
ItsIpv6OverGeoNetworking_component_ipv6OverGeoNetworkingPort.activate_port();
ItsIpv6OverGeoNetworking_component_vc__gvlTable = NULL_VALUE;
ItsIpv6OverGeoNetworking_component_vc__addressTable = NULL_VALUE;
return TRUE;
} else return FALSE;
}


} /* end of namespace */
