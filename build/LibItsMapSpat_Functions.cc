// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsMapSpat_Functions.hh"

namespace LibItsMapSpat__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const CHARSTRING cs_0(4, "*** "),
cs_6(43, ": ERROR: Received an unexpected message ***"),
cs_7(63, ": INCONC: Timeout while awaiting the reception of a message ***"),
cs_2(66, ": INFO: Could not receive expected UT message from IUT in time ***"),
cs_1(27, ": INFO: IUT initialized ***"),
cs_5(43, ": INFO: MAP message received in default ***"),
cs_9(58, ": INFO: Received unhandled/unknown UT message from IUT ***"),
cs_8(47, ": INFO: TEST COMPONENT NOW STOPPING ITSELF! ***"),
cs_4(22, "MapSpat Trigger failed"),
cs_3(5, "error");
static const unsigned char module_checksum[] = { 0x1d, 0xb9, 0x23, 0x69, 0x7d, 0x52, 0x2f, 0x40, 0x8d, 0x8d, 0x2c, 0x07, 0x93, 0x75, 0xc2, 0xb2 };

/* Class definitions for internal use */

class a__cf01Down_Default : public Default_Base {
public:
a__cf01Down_Default();
alt_status call_altstep();
};

class a__default_Default : public Default_Base {
public:
a__default_Default();
alt_status call_altstep();
};

class a__utDefault_Default : public Default_Base {
public:
a__utDefault_Default();
alt_status call_altstep();
};


/* Global variable definitions */

static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsMapSpat_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

a__cf01Down_Default::a__cf01Down_Default()
 : Default_Base("a_cf01Down")
{
}

alt_status a__cf01Down_Default::call_altstep()
{
return a__cf01Down_instance();
}

a__default_Default::a__default_Default()
 : Default_Base("a_default")
{
}

alt_status a__default_Default::call_altstep()
{
return a__default_instance();
}

a__utDefault_Default::a__utDefault_Default()
 : Default_Base("a_utDefault")
{
}

alt_status a__utDefault_Default::call_altstep()
{
return a__utDefault_instance();
}


/* Bodies of functions, altsteps and testcases */

void f__utInitializeIut(const LibItsCommon__TypesAndValues::UtInitialize_template& p__init)
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 34, TTCN_Location::LOCATION_FUNCTION, "f_utInitializeIut");
current_location.update_lineno(36);
/* LibItsMapSpat_Functions.ttcn, line 36 */
LibItsCommon__TypesAndValues::UtInitializeResult v__UtInitializeResult;
current_location.update_lineno(37);
/* LibItsMapSpat_Functions.ttcn, line 37 */
v__UtInitializeResult.utInitializeResult() = TRUE;
current_location.update_lineno(39);
/* LibItsMapSpat_Functions.ttcn, line 39 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.send(p__init);
current_location.update_lineno(40);
/* LibItsMapSpat_Functions.ttcn, line 40 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(41);
/* LibItsMapSpat_Functions.ttcn, line 41 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(42);
/* LibItsMapSpat_Functions.ttcn, line 42 */
tmp_1_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.receive(LibItsCommon__TypesAndValues::UtInitializeResult_template(v__UtInitializeResult), NULL, any_compref, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(43);
/* LibItsMapSpat_Functions.ttcn, line 43 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(44);
/* LibItsMapSpat_Functions.ttcn, line 44 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(46);
/* LibItsMapSpat_Functions.ttcn, line 46 */
tmp_1_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_1_alt_flag_1 == ALT_YES) {
current_location.update_lineno(47);
/* LibItsMapSpat_Functions.ttcn, line 47 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(48);
/* LibItsMapSpat_Functions.ttcn, line 48 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(52);
/* LibItsMapSpat_Functions.ttcn, line 52 */
goto tmp_1;
}
}
}
}

void start_f__utInitializeIut(const COMPONENT& component_reference, const LibItsCommon__TypesAndValues::UtInitialize_template& p__init)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utInitializeIut(");
p__init.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_utInitializeIut", text_buf);
p__init.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__utTriggerEvent(const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger_template& p__event)
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 61, TTCN_Location::LOCATION_FUNCTION, "f_utTriggerEvent");
current_location.update_lineno(62);
/* LibItsMapSpat_Functions.ttcn, line 62 */
INTEGER v__msgCount;
current_location.update_lineno(63);
/* LibItsMapSpat_Functions.ttcn, line 63 */
LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult v__result;
current_location.update_lineno(65);
/* LibItsMapSpat_Functions.ttcn, line 65 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.send(p__event);
current_location.update_lineno(66);
/* LibItsMapSpat_Functions.ttcn, line 66 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(67);
/* LibItsMapSpat_Functions.ttcn, line 67 */
{
tmp_2:
alt_status tmp_2_alt_flag_0 = ALT_MAYBE;
alt_status tmp_2_alt_flag_1 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_2_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(68);
/* LibItsMapSpat_Functions.ttcn, line 68 */
tmp_2_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.receive(LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult_template(ANY_VALUE), &(v__result), any_compref, NULL);
if (tmp_2_alt_flag_0 == ALT_YES) {
current_location.update_lineno(69);
/* LibItsMapSpat_Functions.ttcn, line 69 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(70);
/* LibItsMapSpat_Functions.ttcn, line 70 */
v__msgCount = const_cast< const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult&>(v__result).msgCount();
current_location.update_lineno(71);
/* LibItsMapSpat_Functions.ttcn, line 71 */
if ((!(const_cast< const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult&>(v__result).result()))) {
current_location.update_lineno(72);
/* LibItsMapSpat_Functions.ttcn, line 72 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_4, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_2_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(76);
/* LibItsMapSpat_Functions.ttcn, line 76 */
tmp_2_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_2_alt_flag_1 == ALT_YES) {
current_location.update_lineno(77);
/* LibItsMapSpat_Functions.ttcn, line 77 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(78);
/* LibItsMapSpat_Functions.ttcn, line 78 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(82);
/* LibItsMapSpat_Functions.ttcn, line 82 */
goto tmp_2;
}
}
}
current_location.update_lineno(86);
/* LibItsMapSpat_Functions.ttcn, line 86 */
return v__msgCount;
}

void start_f__utTriggerEvent(const COMPONENT& component_reference, const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger_template& p__event)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_utTriggerEvent", text_buf);
p__event.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

alt_status a__cf01Down_instance()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 95, TTCN_Location::LOCATION_ALTSTEP, "a_cf01Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(96);
/* LibItsMapSpat_Functions.ttcn, line 96 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(97);
/* LibItsMapSpat_Functions.ttcn, line 97 */
f__poDefault();
current_location.update_lineno(98);
/* LibItsMapSpat_Functions.ttcn, line 98 */
f__cfDown();
current_location.update_lineno(99);
/* LibItsMapSpat_Functions.ttcn, line 99 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf01Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(100);
/* LibItsMapSpat_Functions.ttcn, line 100 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf01Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf01Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf01Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf01Down()
{
return new a__cf01Down_Default();
}

alt_status a__default_instance()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 107, TTCN_Location::LOCATION_ALTSTEP, "a_default");
alt_status ret_val = ALT_NO;
current_location.update_lineno(108);
/* LibItsMapSpat_Functions.ttcn, line 108 */
switch (LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(ITS__Container::ItsPduHeader_template(ANY_VALUE), LibItsMapSpat__Templates::mw__anyMap)), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(109);
/* LibItsMapSpat_Functions.ttcn, line 109 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_5).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(110);
/* LibItsMapSpat_Functions.ttcn, line 110 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__mapReceived = TRUE;
current_location.update_lineno(111);
/* LibItsMapSpat_Functions.ttcn, line 111 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(113);
/* LibItsMapSpat_Functions.ttcn, line 113 */
switch (LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(ITS__Container::ItsPduHeader_template(ANY_VALUE), LibItsMapSpat__Templates::mw__anySpat)), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(114);
/* LibItsMapSpat_Functions.ttcn, line 114 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_5).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(115);
/* LibItsMapSpat_Functions.ttcn, line 115 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__spatReceived = TRUE;
current_location.update_lineno(116);
/* LibItsMapSpat_Functions.ttcn, line 116 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(118);
/* LibItsMapSpat_Functions.ttcn, line 118 */
switch (LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(119);
/* LibItsMapSpat_Functions.ttcn, line 119 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(120);
/* LibItsMapSpat_Functions.ttcn, line 120 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__error);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(122);
/* LibItsMapSpat_Functions.ttcn, line 122 */
switch (TIMER::any_timeout()) {
case ALT_YES:
{
current_location.update_lineno(123);
/* LibItsMapSpat_Functions.ttcn, line 123 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(124);
/* LibItsMapSpat_Functions.ttcn, line 124 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(126);
/* LibItsMapSpat_Functions.ttcn, line 126 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(127);
/* LibItsMapSpat_Functions.ttcn, line 127 */
f__poDefault();
current_location.update_lineno(128);
/* LibItsMapSpat_Functions.ttcn, line 128 */
f__cfDown();
current_location.update_lineno(129);
/* LibItsMapSpat_Functions.ttcn, line 129 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_8).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(130);
/* LibItsMapSpat_Functions.ttcn, line 130 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_default.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__default()
{
return new a__default_Default();
}

alt_status a__utDefault_instance()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 137, TTCN_Location::LOCATION_ALTSTEP, "a_utDefault");
current_location.update_lineno(138);
/* LibItsMapSpat_Functions.ttcn, line 138 */
LibItsMapSpat__TypesAndValues::UtMapEventInd v__mapevent;
current_location.update_lineno(139);
/* LibItsMapSpat_Functions.ttcn, line 139 */
LibItsMapSpat__TypesAndValues::UtSpatEventInd v__spatevent;
alt_status ret_val = ALT_NO;
current_location.update_lineno(140);
/* LibItsMapSpat_Functions.ttcn, line 140 */
switch (LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.receive(LibItsMapSpat__TypesAndValues::UtMapEventInd_template(ANY_VALUE), &(v__mapevent), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(142);
/* LibItsMapSpat_Functions.ttcn, line 142 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utMapEvents[LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utMapEvents.lengthof()] = v__mapevent;
current_location.update_lineno(143);
/* LibItsMapSpat_Functions.ttcn, line 143 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(145);
/* LibItsMapSpat_Functions.ttcn, line 145 */
switch (LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.receive(LibItsMapSpat__TypesAndValues::UtSpatEventInd_template(ANY_VALUE), &(v__spatevent), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(147);
/* LibItsMapSpat_Functions.ttcn, line 147 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utSpatEvents[LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utSpatEvents.lengthof()] = v__spatevent;
current_location.update_lineno(148);
/* LibItsMapSpat_Functions.ttcn, line 148 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(150);
/* LibItsMapSpat_Functions.ttcn, line 150 */
switch (LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.receive(any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(151);
/* LibItsMapSpat_Functions.ttcn, line 151 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_9).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(152);
/* LibItsMapSpat_Functions.ttcn, line 152 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__utDefault()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__utDefault_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_utDefault.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__utDefault()
{
return new a__utDefault_Default();
}

void f__cfUp()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 163, TTCN_Location::LOCATION_FUNCTION, "f_cfUp");
current_location.update_lineno(165);
/* LibItsMapSpat_Functions.ttcn, line 165 */
TTCN_Runtime::map_port(self, LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(166);
/* LibItsMapSpat_Functions.ttcn, line 166 */
TTCN_Runtime::map_port(self, LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.get_name(), SYSTEM_COMPREF, "mapSpatPort");
current_location.update_lineno(169);
/* LibItsMapSpat_Functions.ttcn, line 169 */
LibCommon__Sync::f__connect4SelfOrClientSync();
current_location.update_lineno(172);
/* LibItsMapSpat_Functions.ttcn, line 172 */
f__prInitialState();
}

void start_f__cfUp(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cfUp(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_cfUp", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cfDown()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 179, TTCN_Location::LOCATION_FUNCTION, "f_cfDown");
current_location.update_lineno(181);
/* LibItsMapSpat_Functions.ttcn, line 181 */
TTCN_Runtime::unmap_port(self, LibItsMapSpat__TestSystem::ItsMapSpat_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(182);
/* LibItsMapSpat_Functions.ttcn, line 182 */
TTCN_Runtime::unmap_port(self, LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.get_name(), SYSTEM_COMPREF, "mapSpatPort");
current_location.update_lineno(184);
/* LibItsMapSpat_Functions.ttcn, line 184 */
LibCommon__Sync::f__disconnect4SelfOrClientSync();
}

void start_f__cfDown(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cfDown(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_cfDown", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__prDefault()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 194, TTCN_Location::LOCATION_FUNCTION, "f_prDefault");
current_location.update_lineno(195);
/* LibItsMapSpat_Functions.ttcn, line 195 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__default = activate_a__default();
current_location.update_lineno(196);
/* LibItsMapSpat_Functions.ttcn, line 196 */
activate_a__utDefault();
}

void start_f__prDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_prDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__prInitialState()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 203, TTCN_Location::LOCATION_FUNCTION, "f_prInitialState");
current_location.update_lineno(204);
/* LibItsMapSpat_Functions.ttcn, line 204 */
LibCommon__VerdictControl::FncRetCode v__ret(LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(206);
/* LibItsMapSpat_Functions.ttcn, line 206 */
f__utInitializeIut(LibItsMapSpat__Templates::m__mapSpatInitialize);
current_location.update_lineno(207);
/* LibItsMapSpat_Functions.ttcn, line 207 */
f__prDefault();
current_location.update_lineno(208);
/* LibItsMapSpat_Functions.ttcn, line 208 */
return v__ret;
}

void start_f__prInitialState(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prInitialState(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_prInitialState", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__poDefault()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 218, TTCN_Location::LOCATION_FUNCTION, "f_poDefault");
}

void start_f__poDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsMapSpat_Functions", "f_poDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsMapSpat_Functions");
LibItsMapSpat__Templates::module_object.pre_init_module();
module_object.add_function("f_utInitializeIut", (genericfunc_t)&f__utInitializeIut, (genericfunc_t)&start_f__utInitializeIut);
module_object.add_function("f_utTriggerEvent", (genericfunc_t)&f__utTriggerEvent, (genericfunc_t)&start_f__utTriggerEvent);
module_object.add_altstep("a_cf01Down", (genericfunc_t)&a__cf01Down_instance, (genericfunc_t )&activate_a__cf01Down, (genericfunc_t )&a__cf01Down);
module_object.add_altstep("a_default", (genericfunc_t)&a__default_instance, (genericfunc_t )&activate_a__default, (genericfunc_t )&a__default);
module_object.add_altstep("a_utDefault", (genericfunc_t)&a__utDefault_instance, (genericfunc_t )&activate_a__utDefault, (genericfunc_t )&a__utDefault);
module_object.add_function("f_cfUp", (genericfunc_t)&f__cfUp, (genericfunc_t)&start_f__cfUp);
module_object.add_function("f_cfDown", (genericfunc_t)&f__cfDown, (genericfunc_t)&start_f__cfDown);
module_object.add_function("f_prDefault", (genericfunc_t)&f__prDefault, (genericfunc_t)&start_f__prDefault);
module_object.add_function("f_prInitialState", (genericfunc_t)&f__prInitialState, (genericfunc_t)&start_f__prInitialState);
module_object.add_function("f_poDefault", (genericfunc_t)&f__poDefault, (genericfunc_t)&start_f__poDefault);
}

static void post_init_module()
{
TTCN_Location current_location("LibItsMapSpat_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsMapSpat_Functions");
LibItsMapSpat__Templates::module_object.post_init_module();
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_utInitializeIut")) {
LibItsCommon__TypesAndValues::UtInitialize_template p__init;
p__init.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utInitializeIut(");
p__init.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utInitializeIut(p__init);
TTCN_Runtime::function_finished("f_utInitializeIut");
return TRUE;
} else if (!strcmp(function_name, "f_utTriggerEvent")) {
LibItsMapSpat__TypesAndValues::UtMapSpatTrigger_template p__event;
p__event.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utTriggerEvent(p__event);
TTCN_Runtime::function_finished("f_utTriggerEvent");
return TRUE;
} else if (!strcmp(function_name, "f_cfUp")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cfUp().");
TTCN_Runtime::function_started(function_arguments);
f__cfUp();
TTCN_Runtime::function_finished("f_cfUp");
return TRUE;
} else if (!strcmp(function_name, "f_cfDown")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cfDown().");
TTCN_Runtime::function_started(function_arguments);
f__cfDown();
TTCN_Runtime::function_finished("f_cfDown");
return TRUE;
} else if (!strcmp(function_name, "f_prDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prDefault().");
TTCN_Runtime::function_started(function_arguments);
f__prDefault();
TTCN_Runtime::function_finished("f_prDefault");
return TRUE;
} else if (!strcmp(function_name, "f_prInitialState")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prInitialState().");
TTCN_Runtime::function_started(function_arguments);
f__prInitialState();
TTCN_Runtime::function_finished("f_prInitialState");
return TRUE;
} else if (!strcmp(function_name, "f_poDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_poDefault().");
TTCN_Runtime::function_started(function_arguments);
f__poDefault();
TTCN_Runtime::function_finished("f_poDefault");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
