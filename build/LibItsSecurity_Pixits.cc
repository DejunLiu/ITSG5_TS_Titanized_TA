// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsSecurity_Pixits.hh"

namespace LibItsSecurity__Pixits {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean set_module_param(Module_Param& param);
static Module_Param* get_module_param(Module_Param_Name& param_name);
static void log_module_param();

/* Literal string constants */

static const CHARSTRING cs_2(13, "CERT_IUT_A_AT"),
cs_1(5, "cfg01"),
cs_0(17, "data/certificates");
static const unsigned char module_checksum[] = { 0xc8, 0x93, 0x9f, 0xb2, 0xe2, 0x75, 0xf0, 0x32, 0x5e, 0x4e, 0xf5, 0x66, 0x9f, 0x11, 0x28, 0x42 };

/* Global variable definitions */

static CHARSTRING modulepar_PX__CERTIFICATE__POOL__PATH;
const CHARSTRING& PX__CERTIFICATE__POOL__PATH = modulepar_PX__CERTIFICATE__POOL__PATH;
static CHARSTRING modulepar_PX__IUT__SEC__CONFIG__NAME;
const CHARSTRING& PX__IUT__SEC__CONFIG__NAME = modulepar_PX__IUT__SEC__CONFIG__NAME;
static CHARSTRING modulepar_PX__IUT__DEFAULT__CERTIFICATE;
const CHARSTRING& PX__IUT__DEFAULT__CERTIFICATE = modulepar_PX__IUT__DEFAULT__CERTIFICATE;
static INTEGER modulepar_PX__OTHER__ITS__AID;
const INTEGER& PX__OTHER__ITS__AID = modulepar_PX__OTHER__ITS__AID;
static INTEGER modulepar_PX__WRONG__PROTOCOL__VERSION;
const INTEGER& PX__WRONG__PROTOCOL__VERSION = modulepar_PX__WRONG__PROTOCOL__VERSION;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsSecurity_Pixits", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, set_module_param, get_module_param, log_module_param, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsSecurity_Pixits.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsSecurity_Pixits");
LibItsSecurity__TypesAndValues::module_object.pre_init_module();
current_location.update_lineno(22);
/* LibItsSecurity_Pixits.ttcn, line 22 */
modulepar_PX__CERTIFICATE__POOL__PATH = cs_0;
current_location.update_lineno(27);
/* LibItsSecurity_Pixits.ttcn, line 27 */
modulepar_PX__IUT__SEC__CONFIG__NAME = cs_1;
current_location.update_lineno(33);
/* LibItsSecurity_Pixits.ttcn, line 33 */
modulepar_PX__IUT__DEFAULT__CERTIFICATE = cs_2;
current_location.update_lineno(38);
/* LibItsSecurity_Pixits.ttcn, line 38 */
modulepar_PX__OTHER__ITS__AID = 38;
current_location.update_lineno(43);
/* LibItsSecurity_Pixits.ttcn, line 43 */
modulepar_PX__WRONG__PROTOCOL__VERSION = 1;
}

static void post_init_module()
{
TTCN_Location current_location("LibItsSecurity_Pixits.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsSecurity_Pixits");
LibItsSecurity__TypesAndValues::module_object.post_init_module();
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "PX_CERTIFICATE_POOL_PATH")) {
modulepar_PX__CERTIFICATE__POOL__PATH.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_IUT_SEC_CONFIG_NAME")) {
modulepar_PX__IUT__SEC__CONFIG__NAME.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_IUT_DEFAULT_CERTIFICATE")) {
modulepar_PX__IUT__DEFAULT__CERTIFICATE.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_OTHER_ITS_AID")) {
modulepar_PX__OTHER__ITS__AID.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_WRONG_PROTOCOL_VERSION")) {
modulepar_PX__WRONG__PROTOCOL__VERSION.set_param(param);
return TRUE;
} else return FALSE;
}

static Module_Param* get_module_param(Module_Param_Name& param_name)
{
const char* const par_name = param_name.get_current_name();
if (!strcmp(par_name, "PX_CERTIFICATE_POOL_PATH")) {
return modulepar_PX__CERTIFICATE__POOL__PATH.get_param(param_name);
} else if (!strcmp(par_name, "PX_IUT_SEC_CONFIG_NAME")) {
return modulepar_PX__IUT__SEC__CONFIG__NAME.get_param(param_name);
} else if (!strcmp(par_name, "PX_IUT_DEFAULT_CERTIFICATE")) {
return modulepar_PX__IUT__DEFAULT__CERTIFICATE.get_param(param_name);
} else if (!strcmp(par_name, "PX_OTHER_ITS_AID")) {
return modulepar_PX__OTHER__ITS__AID.get_param(param_name);
} else if (!strcmp(par_name, "PX_WRONG_PROTOCOL_VERSION")) {
return modulepar_PX__WRONG__PROTOCOL__VERSION.get_param(param_name);
} else return NULL;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("PX_CERTIFICATE_POOL_PATH := ");
PX__CERTIFICATE__POOL__PATH.log();
TTCN_Logger::log_event_str(", PX_IUT_SEC_CONFIG_NAME := ");
PX__IUT__SEC__CONFIG__NAME.log();
TTCN_Logger::log_event_str(", PX_IUT_DEFAULT_CERTIFICATE := ");
PX__IUT__DEFAULT__CERTIFICATE.log();
TTCN_Logger::log_event_str(", PX_OTHER_ITS_AID := ");
PX__OTHER__ITS__AID.log();
TTCN_Logger::log_event_str(", PX_WRONG_PROTOCOL_VERSION := ");
PX__WRONG__PROTOCOL__VERSION.log();
}


} /* end of namespace */
