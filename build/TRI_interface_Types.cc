// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "TRI_interface_Types.hh"

namespace TRI__interface__Types {

/* Prototypes of static functions */

static void pre_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0xba, 0x0f, 0x62, 0xfb, 0x93, 0xc2, 0xb4, 0xb3, 0x4b, 0xad, 0x2f, 0x4f, 0x8b, 0x74, 0x3e, 0xa3 };

/* Global variable definitions */

// No XER for Result__value
const TTCN_JSONdescriptor_t Result__value_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Result__value_descr_ = { "@TRI_interface_Types.Result_value", NULL, NULL, NULL, NULL, &Result__value_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriComponentIdType_componentId_xer_ = { {"componentId>\n", "componentId>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriComponentIdType_componentId_descr_ = { "@TRI_interface_Types.TriComponentIdType.componentId", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &TriComponentIdType_componentId_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriComponentIdType_componentName_xer_ = { {"componentName>\n", "componentName>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriComponentIdType_componentName_descr_ = { "@TRI_interface_Types.TriComponentIdType.componentName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &TriComponentIdType_componentName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriComponentIdType_componentTypeName_xer_ = { {"componentTypeName>\n", "componentTypeName>\n"}, {19, 19}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriComponentIdType_componentTypeName_descr_ = { "@TRI_interface_Types.TriComponentIdType.componentTypeName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &TriComponentIdType_componentTypeName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for TriComponentIdType
const TTCN_JSONdescriptor_t TriComponentIdType_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t TriComponentIdType_descr_ = { "@TRI_interface_Types.TriComponentIdType", NULL, NULL, NULL, NULL, &TriComponentIdType_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriPortIdType_portName_xer_ = { {"portName>\n", "portName>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriPortIdType_portName_descr_ = { "@TRI_interface_Types.TriPortIdType.portName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &TriPortIdType_portName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriPortIdType_portTypeName_xer_ = { {"portTypeName>\n", "portTypeName>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriPortIdType_portTypeName_descr_ = { "@TRI_interface_Types.TriPortIdType.portTypeName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &TriPortIdType_portTypeName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for TriPortIdType
const TTCN_JSONdescriptor_t TriPortIdType_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t TriPortIdType_descr_ = { "@TRI_interface_Types.TriPortIdType", NULL, NULL, NULL, NULL, &TriPortIdType_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriPortIdType_portindex_xer_ = { {"portindex>\n", "portindex>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriPortIdType_portindex_descr_ = { "@TRI_interface_Types.TriPortIdType.portindex", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &TriPortIdType_portindex_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TriAddressType_sut__address_xer_ = { {"sut_address>\n", "sut_address>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TriAddressType_sut__address_descr_ = { "@TRI_interface_Types.TriAddressType.sut_address", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &TriAddressType_sut__address_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for TriAddressType
const TTCN_JSONdescriptor_t TriAddressType_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t TriAddressType_descr_ = { "@TRI_interface_Types.TriAddressType", NULL, NULL, NULL, NULL, &TriAddressType_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for msg__data__container
const TTCN_JSONdescriptor_t msg__data__container_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t msg__data__container_descr_ = { "@TRI_interface_Types.msg_data_container", NULL, NULL, NULL, NULL, &msg__data__container_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       msg__data__container_encoded__data_xer_ = { {"encoded_data>\n", "encoded_data>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t msg__data__container_encoded__data_descr_ = { "@TRI_interface_Types.msg_data_container.encoded_data", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &msg__data__container_encoded__data_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       type__info_xer_ = { {"type_info>\n", "type_info>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t type__info_descr_ = { "@TRI_interface_Types.type_info", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &type__info_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Type__Value__container_msg__type_xer_ = { {"msg_type>\n", "msg_type>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Type__Value__container_msg__type_descr_ = { "@TRI_interface_Types.Type_Value_container.msg_type", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &Type__Value__container_msg__type_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       value__info_xer_ = { {"value_info>\n", "value_info>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t value__info_descr_ = { "@TRI_interface_Types.value_info", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &value__info_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Type__Value__container_msg__value_xer_ = { {"msg_value>\n", "msg_value>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Type__Value__container_msg__value_descr_ = { "@TRI_interface_Types.Type_Value_container.msg_value", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &Type__Value__container_msg__value_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Type__Value__container
const TTCN_JSONdescriptor_t Type__Value__container_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Type__Value__container_descr_ = { "@TRI_interface_Types.Type_Value_container", NULL, NULL, NULL, NULL, &Type__Value__container_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Type__info__list
const TTCN_JSONdescriptor_t Type__info__list_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Type__info__list_descr_ = { "@TRI_interface_Types.Type_info_list", NULL, NULL, NULL, NULL, &Type__info__list_json_, &type__info_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Type__info__list_0_xer_ = { {"type_info>\n", "type_info>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Type__info__list_0_descr_ = { "@TRI_interface_Types.Type_info_list.<oftype>", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &Type__info__list_0_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Result
const TTCN_JSONdescriptor_t Result_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Result_descr_ = { "@TRI_interface_Types.Result", NULL, NULL, NULL, NULL, &Result_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Result_result__string_xer_ = { {"result_string>\n", "result_string>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Result_result__string_descr_ = { "@TRI_interface_Types.Result.result_string", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Result_result__string_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Register
const TTCN_JSONdescriptor_t Register_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Register_descr_ = { "@TRI_interface_Types.Register", NULL, NULL, NULL, NULL, &Register_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Map
const TTCN_JSONdescriptor_t Map_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Map_descr_ = { "@TRI_interface_Types.Map", NULL, NULL, NULL, NULL, &Map_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for UnMap
const TTCN_JSONdescriptor_t UnMap_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t UnMap_descr_ = { "@TRI_interface_Types.UnMap", NULL, NULL, NULL, NULL, &UnMap_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Unregister
const TTCN_JSONdescriptor_t Unregister_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Unregister_descr_ = { "@TRI_interface_Types.Unregister", NULL, NULL, NULL, NULL, &Unregister_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for SendMsg
const TTCN_JSONdescriptor_t SendMsg_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t SendMsg_descr_ = { "@TRI_interface_Types.SendMsg", NULL, NULL, NULL, NULL, &SendMsg_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for EnqueueMsg
const TTCN_JSONdescriptor_t EnqueueMsg_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t EnqueueMsg_descr_ = { "@TRI_interface_Types.EnqueueMsg", NULL, NULL, NULL, NULL, &EnqueueMsg_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       TRI__mapper__PDU_msg__id_xer_ = { {"msg_id>\n", "msg_id>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TRI__mapper__PDU_msg__id_descr_ = { "@TRI_interface_Types.TRI_mapper_PDU.msg_id", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &TRI__mapper__PDU_msg__id_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for Msg__union
const TTCN_JSONdescriptor_t Msg__union_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t Msg__union_descr_ = { "@TRI_interface_Types.Msg_union", NULL, NULL, NULL, NULL, &Msg__union_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for TRI__mapper__PDU
const TTCN_JSONdescriptor_t TRI__mapper__PDU_json_ = { false, NULL, false, NULL, false };
const TTCN_Typedescriptor_t TRI__mapper__PDU_descr_ = { "@TRI_interface_Types.TRI_mapper_PDU", NULL, NULL, NULL, NULL, &TRI__mapper__PDU_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 0;
TTCN_Module module_object("TRI_interface_Types", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

Result__value::Result__value()
{
enum_value = UNBOUND_VALUE;
}

Result__value::Result__value(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @TRI_interface_Types.Result_value with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Result__value::Result__value(enum_type other_value)
{
enum_value = other_value;
}

Result__value::Result__value(const Result__value& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @TRI_interface_Types.Result_value.");
enum_value = other_value.enum_value;
}

Result__value& Result__value::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @TRI_interface_Types.Result_value.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Result__value& Result__value::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Result__value& Result__value::operator=(const Result__value& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @TRI_interface_Types.Result_value.");
enum_value = other_value.enum_value;
return *this;
}

boolean Result__value::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
return enum_value == other_value;
}

boolean Result__value::operator==(const Result__value& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
return enum_value == other_value.enum_value;
}

boolean Result__value::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
return enum_value < other_value;
}

boolean Result__value::operator<(const Result__value& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
return enum_value < other_value.enum_value;
}

boolean Result__value::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
return enum_value > other_value;
}

boolean Result__value::operator>(const Result__value& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @TRI_interface_Types.Result_value.");
return enum_value > other_value.enum_value;
}

const char *Result__value::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case TRI__ok: return "TRI_ok";
case TRI__error: return "TRI_error";
default: return "<unknown>";
}
}

Result__value::enum_type Result__value::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "TRI_ok")) return TRI__ok;
else if (!strcmp(str_par, "TRI_error")) return TRI__error;
else return UNKNOWN_VALUE;
}

boolean Result__value::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int Result__value::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @TRI_interface_Types.Result_value.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Result__value::enum2int(const Result__value& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @TRI_interface_Types.Result_value.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

void Result__value::int2enum(int int_val)
{
if (!is_valid_enum(int_val)) TTCN_error("Assigning invalid numeric value %d to a variable of enumerated type @TRI_interface_Types.Result_value.", int_val);
enum_value = (enum_type)int_val;
}

Result__value::operator Result__value::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @TRI_interface_Types.Result_value.");
return enum_value;
}

void Result__value::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Result__value::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    char* enum_name = param.get_enumerated();
    enum_value = (enum_name != NULL) ? str_to_enum(enum_name) : UNKNOWN_VALUE;
    if (is_valid_enum(enum_value)) {
      return;
    }
    mp = param.get_referenced_param();
  }
  if (mp->get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@TRI_interface_Types.Result_value");
  enum_value = str_to_enum(mp->get_enumerated());
  if (!is_valid_enum(enum_value)) {
    param.error("Invalid enumerated value for type @TRI_interface_Types.Result_value.");
  }
}

Module_Param* Result__value::get_param(Module_Param_Name& /* param_name */) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  return new Module_Param_Enumerated(mcopystr(enum_to_str(enum_value)));
}

void Result__value::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @TRI_interface_Types.Result_value.");
text_buf.push_int(enum_value);
}

void Result__value::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @TRI_interface_Types.Result_value.", enum_value);
}

void Result__value::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Result__value::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Result__value::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @TRI_interface_Types.Result_value.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Result__value::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Result__value_template::copy_template(const Result__value_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Result__value_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @TRI_interface_Types.Result_value.");
}
}

Result__value_template::Result__value_template()
{
}

Result__value_template::Result__value_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Result__value_template::Result__value_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Result__value::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @TRI_interface_Types.Result_value with unknown numeric value %d.", other_value);
single_value = (Result__value::enum_type)other_value;
}

Result__value_template::Result__value_template(Result__value::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Result__value_template::Result__value_template(const Result__value& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Result__value::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @TRI_interface_Types.Result_value.");
single_value = other_value.enum_value;
}

Result__value_template::Result__value_template(const OPTIONAL<Result__value>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Result__value::enum_type)(const Result__value&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @TRI_interface_Types.Result_value from an unbound optional field.");
}
}

Result__value_template::Result__value_template(const Result__value_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Result__value_template::~Result__value_template()
{
clean_up();
}

boolean Result__value_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Result__value_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Result__value::UNBOUND_VALUE;
}

void Result__value_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Result__value_template& Result__value_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Result__value_template& Result__value_template::operator=(int other_value)
{
if (!Result__value::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @TRI_interface_Types.Result_value.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Result__value::enum_type)other_value;
return *this;
}

Result__value_template& Result__value_template::operator=(Result__value::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Result__value_template& Result__value_template::operator=(const Result__value& other_value)
{
if (other_value.enum_value == Result__value::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @TRI_interface_Types.Result_value to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Result__value_template& Result__value_template::operator=(const OPTIONAL<Result__value>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Result__value::enum_type)(const Result__value&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @TRI_interface_Types.Result_value.");
}
return *this;
}

Result__value_template& Result__value_template::operator=(const Result__value_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Result__value_template::match(Result__value::enum_type other_value, boolean) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @TRI_interface_Types.Result_value.");
}
return FALSE;
}

boolean Result__value_template::match(const Result__value& other_value, boolean) const
{
if (other_value.enum_value == Result__value::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @TRI_interface_Types.Result_value with an unbound value.");
return match(other_value.enum_value);
}

Result__value::enum_type Result__value_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @TRI_interface_Types.Result_value.");
return single_value;
}

void Result__value_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @TRI_interface_Types.Result_value.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Result__value_template[list_length];
}

Result__value_template& Result__value_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @TRI_interface_Types.Result_value.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @TRI_interface_Types.Result_value.");
return value_list.list_value[list_index];
}

void Result__value_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Result__value::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Result__value_template::log_match(const Result__value& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Result__value_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @TRI_interface_Types.Result_value.");
}
}

void Result__value_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Result__value::enum_type)text_buf.pull_int().get_val();
if (!Result__value::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @TRI_interface_Types.Result_value.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Result__value_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @TRI_interface_Types.Result_value.");
}
}

boolean Result__value_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Result__value_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Result__value_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    char* enum_name = param.get_enumerated();
    Result__value::enum_type enum_val = (enum_name != NULL) ? Result__value::str_to_enum(enum_name) : Result__value::UNKNOWN_VALUE;
    if (Result__value::is_valid_enum(enum_val)) {
      *this = enum_val;
      is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
      return;
    }
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Result__value_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Enumerated: {
    Result__value::enum_type enum_val = Result__value::str_to_enum(mp->get_enumerated());
    if (!Result__value::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @TRI_interface_Types.Result_value.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@TRI_interface_Types.Result_value");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Result__value_template::get_param(Module_Param_Name& param_name) const
{
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE:
    mp = new Module_Param_Enumerated(mcopystr(Result__value::enum_to_str(single_value)));
    break;
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Result__value_template::check_restriction(template_res t_res, const char* t_name,
boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Result_value");
}

TriComponentIdType::TriComponentIdType()
{
  bound_flag = FALSE;
}

TriComponentIdType::TriComponentIdType(const OCTETSTRING& par_componentId,
    const CHARSTRING& par_componentName,
    const CHARSTRING& par_componentTypeName)
  :   field_componentId(par_componentId),
  field_componentName(par_componentName),
  field_componentTypeName(par_componentTypeName)
{
  bound_flag = TRUE;
}

TriComponentIdType::TriComponentIdType(const TriComponentIdType& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.TriComponentIdType.");
bound_flag = TRUE;
if (other_value.componentId().is_bound()) field_componentId = other_value.componentId();
else field_componentId.clean_up();
if (other_value.componentName().is_bound()) field_componentName = other_value.componentName();
else field_componentName.clean_up();
if (other_value.componentTypeName().is_bound()) field_componentTypeName = other_value.componentTypeName();
else field_componentTypeName.clean_up();
}

void TriComponentIdType::clean_up()
{
field_componentId.clean_up();
field_componentName.clean_up();
field_componentTypeName.clean_up();
bound_flag = FALSE;
}

TriComponentIdType& TriComponentIdType::operator=(const TriComponentIdType& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.TriComponentIdType.");
  bound_flag = TRUE;
  if (other_value.componentId().is_bound()) field_componentId = other_value.componentId();
  else field_componentId.clean_up();
  if (other_value.componentName().is_bound()) field_componentName = other_value.componentName();
  else field_componentName.clean_up();
  if (other_value.componentTypeName().is_bound()) field_componentTypeName = other_value.componentTypeName();
  else field_componentTypeName.clean_up();
}
return *this;
}

boolean TriComponentIdType::operator==(const TriComponentIdType& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_componentId==other_value.field_componentId
  && field_componentName==other_value.field_componentName
  && field_componentTypeName==other_value.field_componentTypeName;
}

boolean TriComponentIdType::is_bound() const
{
if (bound_flag) return TRUE;
if(field_componentId.is_bound()) return TRUE;
if(field_componentName.is_bound()) return TRUE;
if(field_componentTypeName.is_bound()) return TRUE;
return FALSE;
}
boolean TriComponentIdType::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_componentId.is_value()) return FALSE;
if(!field_componentName.is_value()) return FALSE;
if(!field_componentTypeName.is_value()) return FALSE;
return TRUE;
}
int TriComponentIdType::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.TriComponentIdType");
  return 3;
}

void TriComponentIdType::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ componentId := ");
field_componentId.log();
TTCN_Logger::log_event_str(", componentName := ");
field_componentName.log();
TTCN_Logger::log_event_str(", componentTypeName := ");
field_componentTypeName.log();
TTCN_Logger::log_event_str(" }");
}

void TriComponentIdType::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.TriComponentIdType'");
    }
    if (strcmp("componentId", param_field) == 0) {
      componentId().set_param(param);
      return;
    } else if (strcmp("componentName", param_field) == 0) {
      componentName().set_param(param);
      return;
    } else if (strcmp("componentTypeName", param_field) == 0) {
      componentTypeName().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.TriComponentIdType'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (3<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.TriComponentIdType has 3 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) componentId().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) componentName().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) componentTypeName().set_param(*mp->get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "componentId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          componentId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "componentName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          componentName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "componentTypeName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          componentTypeName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TriComponentIdType: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.TriComponentIdType");
  }
}

Module_Param* TriComponentIdType::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.TriComponentIdType'");
    }
    if (strcmp("componentId", param_field) == 0) {
      return componentId().get_param(param_name);
    } else if (strcmp("componentName", param_field) == 0) {
      return componentName().get_param(param_name);
    } else if (strcmp("componentTypeName", param_field) == 0) {
      return componentTypeName().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TriComponentIdType'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_componentId = field_componentId.get_param(param_name);
  mp_field_componentId->set_id(new Module_Param_FieldName(mcopystr("componentId")));
  mp->add_elem(mp_field_componentId);
  Module_Param* mp_field_componentName = field_componentName.get_param(param_name);
  mp_field_componentName->set_id(new Module_Param_FieldName(mcopystr("componentName")));
  mp->add_elem(mp_field_componentName);
  Module_Param* mp_field_componentTypeName = field_componentTypeName.get_param(param_name);
  mp_field_componentTypeName->set_id(new Module_Param_FieldName(mcopystr("componentTypeName")));
  mp->add_elem(mp_field_componentTypeName);
  return mp;
  }

void TriComponentIdType::set_implicit_omit()
{
if (componentId().is_bound()) componentId().set_implicit_omit();
if (componentName().is_bound()) componentName().set_implicit_omit();
if (componentTypeName().is_bound()) componentTypeName().set_implicit_omit();
}

void TriComponentIdType::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.TriComponentIdType.");
field_componentId.encode_text(text_buf);
field_componentName.encode_text(text_buf);
field_componentTypeName.encode_text(text_buf);
}

void TriComponentIdType::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_componentId.decode_text(text_buf);
field_componentName.decode_text(text_buf);
field_componentTypeName.decode_text(text_buf);
}

void TriComponentIdType::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void TriComponentIdType::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int TriComponentIdType::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.TriComponentIdType.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "componentId");
    enc_len += field_componentId.JSON_encode(OCTETSTRING_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "componentName");
    enc_len += field_componentName.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "componentTypeName");
    enc_len += field_componentTypeName.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int TriComponentIdType::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (11 == name_len && 0 == strncmp(fld_name, "componentId", name_len)) {
         int ret_val = field_componentId.JSON_decode(OCTETSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "componentId");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (13 == name_len && 0 == strncmp(fld_name, "componentName", name_len)) {
         int ret_val = field_componentName.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "componentName");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (17 == name_len && 0 == strncmp(fld_name, "componentTypeName", name_len)) {
         int ret_val = field_componentTypeName.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "componentTypeName");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_componentId.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "componentId");
    return JSON_ERROR_FATAL;
  }
if (!field_componentName.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "componentName");
    return JSON_ERROR_FATAL;
  }
if (!field_componentTypeName.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "componentTypeName");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct TriComponentIdType_template::single_value_struct {
OCTETSTRING_template field_componentId;
CHARSTRING_template field_componentName;
CHARSTRING_template field_componentTypeName;
};

void TriComponentIdType_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_componentId = ANY_VALUE;
single_value->field_componentName = ANY_VALUE;
single_value->field_componentTypeName = ANY_VALUE;
}
}
}

void TriComponentIdType_template::copy_value(const TriComponentIdType& other_value)
{
single_value = new single_value_struct;
if (other_value.componentId().is_bound()) {
  single_value->field_componentId = other_value.componentId();
} else {
  single_value->field_componentId.clean_up();
}
if (other_value.componentName().is_bound()) {
  single_value->field_componentName = other_value.componentName();
} else {
  single_value->field_componentName.clean_up();
}
if (other_value.componentTypeName().is_bound()) {
  single_value->field_componentTypeName = other_value.componentTypeName();
} else {
  single_value->field_componentTypeName.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void TriComponentIdType_template::copy_template(const TriComponentIdType_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.componentId().get_selection()) {
single_value->field_componentId = other_value.componentId();
} else {
single_value->field_componentId.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.componentName().get_selection()) {
single_value->field_componentName = other_value.componentName();
} else {
single_value->field_componentName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.componentTypeName().get_selection()) {
single_value->field_componentTypeName = other_value.componentTypeName();
} else {
single_value->field_componentTypeName.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new TriComponentIdType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.TriComponentIdType.");
break;
}
set_selection(other_value);
}

TriComponentIdType_template::TriComponentIdType_template()
{
}

TriComponentIdType_template::TriComponentIdType_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

TriComponentIdType_template::TriComponentIdType_template(const TriComponentIdType& other_value)
{
copy_value(other_value);
}

TriComponentIdType_template::TriComponentIdType_template(const OPTIONAL<TriComponentIdType>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TriComponentIdType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.TriComponentIdType from an unbound optional field.");
}
}

TriComponentIdType_template::TriComponentIdType_template(const TriComponentIdType_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

TriComponentIdType_template::~TriComponentIdType_template()
{
clean_up();
}

TriComponentIdType_template& TriComponentIdType_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

TriComponentIdType_template& TriComponentIdType_template::operator=(const TriComponentIdType& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

TriComponentIdType_template& TriComponentIdType_template::operator=(const OPTIONAL<TriComponentIdType>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TriComponentIdType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.TriComponentIdType.");
}
return *this;
}

TriComponentIdType_template& TriComponentIdType_template::operator=(const TriComponentIdType_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean TriComponentIdType_template::match(const TriComponentIdType& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.componentId().is_bound()) return FALSE;
if(!single_value->field_componentId.match(other_value.componentId(), legacy))return FALSE;
if(!other_value.componentName().is_bound()) return FALSE;
if(!single_value->field_componentName.match(other_value.componentName(), legacy))return FALSE;
if(!other_value.componentTypeName().is_bound()) return FALSE;
if(!single_value->field_componentTypeName.match(other_value.componentTypeName(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.TriComponentIdType.");
}
return FALSE;
}

boolean TriComponentIdType_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_componentId.is_bound()) return TRUE;
if (single_value->field_componentName.is_bound()) return TRUE;
if (single_value->field_componentTypeName.is_bound()) return TRUE;
return FALSE;
}

boolean TriComponentIdType_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_componentId.is_value()) return FALSE;
if (!single_value->field_componentName.is_value()) return FALSE;
if (!single_value->field_componentTypeName.is_value()) return FALSE;
return TRUE;
}

void TriComponentIdType_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

TriComponentIdType TriComponentIdType_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.TriComponentIdType.");
TriComponentIdType ret_val;
if (single_value->field_componentId.is_bound()) {
ret_val.componentId() = single_value->field_componentId.valueof();
}
if (single_value->field_componentName.is_bound()) {
ret_val.componentName() = single_value->field_componentName.valueof();
}
if (single_value->field_componentTypeName.is_bound()) {
ret_val.componentTypeName() = single_value->field_componentTypeName.valueof();
}
return ret_val;
}

void TriComponentIdType_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.TriComponentIdType.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new TriComponentIdType_template[list_length];
}

TriComponentIdType_template& TriComponentIdType_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.TriComponentIdType.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.TriComponentIdType.");
return value_list.list_value[list_index];
}

OCTETSTRING_template& TriComponentIdType_template::componentId()
{
set_specific();
return single_value->field_componentId;
}

const OCTETSTRING_template& TriComponentIdType_template::componentId() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field componentId of a non-specific template of type @TRI_interface_Types.TriComponentIdType.");
return single_value->field_componentId;
}

CHARSTRING_template& TriComponentIdType_template::componentName()
{
set_specific();
return single_value->field_componentName;
}

const CHARSTRING_template& TriComponentIdType_template::componentName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field componentName of a non-specific template of type @TRI_interface_Types.TriComponentIdType.");
return single_value->field_componentName;
}

CHARSTRING_template& TriComponentIdType_template::componentTypeName()
{
set_specific();
return single_value->field_componentTypeName;
}

const CHARSTRING_template& TriComponentIdType_template::componentTypeName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field componentTypeName of a non-specific template of type @TRI_interface_Types.TriComponentIdType.");
return single_value->field_componentTypeName;
}

int TriComponentIdType_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriComponentIdType which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.TriComponentIdType containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriComponentIdType containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriComponentIdType containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriComponentIdType containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriComponentIdType containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.TriComponentIdType.");
  }
  return 0;
}

void TriComponentIdType_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ componentId := ");
single_value->field_componentId.log();
TTCN_Logger::log_event_str(", componentName := ");
single_value->field_componentName.log();
TTCN_Logger::log_event_str(", componentTypeName := ");
single_value->field_componentTypeName.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void TriComponentIdType_template::log_match(const TriComponentIdType& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_componentId.match(match_value.componentId(), legacy)){
TTCN_Logger::log_logmatch_info(".componentId");
single_value->field_componentId.log_match(match_value.componentId(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_componentName.match(match_value.componentName(), legacy)){
TTCN_Logger::log_logmatch_info(".componentName");
single_value->field_componentName.log_match(match_value.componentName(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_componentTypeName.match(match_value.componentTypeName(), legacy)){
TTCN_Logger::log_logmatch_info(".componentTypeName");
single_value->field_componentTypeName.log_match(match_value.componentTypeName(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ componentId := ");
single_value->field_componentId.log_match(match_value.componentId(), legacy);
TTCN_Logger::log_event_str(", componentName := ");
single_value->field_componentName.log_match(match_value.componentName(), legacy);
TTCN_Logger::log_event_str(", componentTypeName := ");
single_value->field_componentTypeName.log_match(match_value.componentTypeName(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void TriComponentIdType_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_componentId.encode_text(text_buf);
single_value->field_componentName.encode_text(text_buf);
single_value->field_componentTypeName.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.TriComponentIdType.");
}
}

void TriComponentIdType_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_componentId.decode_text(text_buf);
single_value->field_componentName.decode_text(text_buf);
single_value->field_componentTypeName.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new TriComponentIdType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.TriComponentIdType.");
}
}

void TriComponentIdType_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.TriComponentIdType'");
    }
    if (strcmp("componentId", param_field) == 0) {
      componentId().set_param(param);
      return;
    } else if (strcmp("componentName", param_field) == 0) {
      componentName().set_param(param);
      return;
    } else if (strcmp("componentTypeName", param_field) == 0) {
      componentTypeName().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.TriComponentIdType'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    TriComponentIdType_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (3<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.TriComponentIdType has 3 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) componentId().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) componentName().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) componentTypeName().set_param(*mp->get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "componentId")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          componentId().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "componentName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          componentName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "componentTypeName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          componentTypeName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TriComponentIdType: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.TriComponentIdType");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* TriComponentIdType_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.TriComponentIdType'");
    }
    if (strcmp("componentId", param_field) == 0) {
      return componentId().get_param(param_name);
    } else if (strcmp("componentName", param_field) == 0) {
      return componentName().get_param(param_name);
    } else if (strcmp("componentTypeName", param_field) == 0) {
      return componentTypeName().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TriComponentIdType'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_componentId = single_value->field_componentId.get_param(param_name);
    mp_field_componentId->set_id(new Module_Param_FieldName(mcopystr("componentId")));
    mp->add_elem(mp_field_componentId);
    Module_Param* mp_field_componentName = single_value->field_componentName.get_param(param_name);
    mp_field_componentName->set_id(new Module_Param_FieldName(mcopystr("componentName")));
    mp->add_elem(mp_field_componentName);
    Module_Param* mp_field_componentTypeName = single_value->field_componentTypeName.get_param(param_name);
    mp_field_componentTypeName->set_id(new Module_Param_FieldName(mcopystr("componentTypeName")));
    mp->add_elem(mp_field_componentTypeName);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void TriComponentIdType_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_componentId.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriComponentIdType");
single_value->field_componentName.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriComponentIdType");
single_value->field_componentTypeName.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriComponentIdType");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.TriComponentIdType");
}

boolean TriComponentIdType_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean TriComponentIdType_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

TriPortIdType::TriPortIdType()
{
  bound_flag = FALSE;
}

TriPortIdType::TriPortIdType(const CHARSTRING& par_portName,
    const CHARSTRING& par_portTypeName,
    const TriComponentIdType& par_component__,
    const OPTIONAL<INTEGER>& par_portindex)
  :   field_portName(par_portName),
  field_portTypeName(par_portTypeName),
  field_component__(par_component__),
  field_portindex(par_portindex)
{
  bound_flag = TRUE;
}

TriPortIdType::TriPortIdType(const TriPortIdType& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.TriPortIdType.");
bound_flag = TRUE;
if (other_value.portName().is_bound()) field_portName = other_value.portName();
else field_portName.clean_up();
if (other_value.portTypeName().is_bound()) field_portTypeName = other_value.portTypeName();
else field_portTypeName.clean_up();
if (other_value.component__().is_bound()) field_component__ = other_value.component__();
else field_component__.clean_up();
if (other_value.portindex().is_bound()) field_portindex = other_value.portindex();
else field_portindex.clean_up();
}

void TriPortIdType::clean_up()
{
field_portName.clean_up();
field_portTypeName.clean_up();
field_component__.clean_up();
field_portindex.clean_up();
bound_flag = FALSE;
}

TriPortIdType& TriPortIdType::operator=(const TriPortIdType& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.TriPortIdType.");
  bound_flag = TRUE;
  if (other_value.portName().is_bound()) field_portName = other_value.portName();
  else field_portName.clean_up();
  if (other_value.portTypeName().is_bound()) field_portTypeName = other_value.portTypeName();
  else field_portTypeName.clean_up();
  if (other_value.component__().is_bound()) field_component__ = other_value.component__();
  else field_component__.clean_up();
  if (other_value.portindex().is_bound()) field_portindex = other_value.portindex();
  else field_portindex.clean_up();
}
return *this;
}

boolean TriPortIdType::operator==(const TriPortIdType& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_portName==other_value.field_portName
  && field_portTypeName==other_value.field_portTypeName
  && field_component__==other_value.field_component__
  && field_portindex==other_value.field_portindex;
}

boolean TriPortIdType::is_bound() const
{
if (bound_flag) return TRUE;
if(field_portName.is_bound()) return TRUE;
if(field_portTypeName.is_bound()) return TRUE;
if(field_component__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_portindex.get_selection() || field_portindex.is_bound()) return TRUE;
return FALSE;
}
boolean TriPortIdType::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_portName.is_value()) return FALSE;
if(!field_portTypeName.is_value()) return FALSE;
if(!field_component__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_portindex.get_selection() && !field_portindex.is_value()) return FALSE;
return TRUE;
}
int TriPortIdType::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.TriPortIdType");
  int ret_val = 3;
  if (field_portindex.ispresent()) ret_val++;
  return ret_val;
}

void TriPortIdType::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ portName := ");
field_portName.log();
TTCN_Logger::log_event_str(", portTypeName := ");
field_portTypeName.log();
TTCN_Logger::log_event_str(", component_ := ");
field_component__.log();
TTCN_Logger::log_event_str(", portindex := ");
field_portindex.log();
TTCN_Logger::log_event_str(" }");
}

void TriPortIdType::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.TriPortIdType'");
    }
    if (strcmp("portName", param_field) == 0) {
      portName().set_param(param);
      return;
    } else if (strcmp("portTypeName", param_field) == 0) {
      portTypeName().set_param(param);
      return;
    } else if (strcmp("component_", param_field) == 0) {
      component__().set_param(param);
      return;
    } else if (strcmp("portindex", param_field) == 0) {
      portindex().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.TriPortIdType'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (4<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.TriPortIdType has 4 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) portName().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) portTypeName().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) component__().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) portindex().set_param(*mp->get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portTypeName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portTypeName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "component_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          component__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portindex")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portindex().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TriPortIdType: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.TriPortIdType");
  }
}

Module_Param* TriPortIdType::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.TriPortIdType'");
    }
    if (strcmp("portName", param_field) == 0) {
      return portName().get_param(param_name);
    } else if (strcmp("portTypeName", param_field) == 0) {
      return portTypeName().get_param(param_name);
    } else if (strcmp("component_", param_field) == 0) {
      return component__().get_param(param_name);
    } else if (strcmp("portindex", param_field) == 0) {
      return portindex().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TriPortIdType'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_portName = field_portName.get_param(param_name);
  mp_field_portName->set_id(new Module_Param_FieldName(mcopystr("portName")));
  mp->add_elem(mp_field_portName);
  Module_Param* mp_field_portTypeName = field_portTypeName.get_param(param_name);
  mp_field_portTypeName->set_id(new Module_Param_FieldName(mcopystr("portTypeName")));
  mp->add_elem(mp_field_portTypeName);
  Module_Param* mp_field_component__ = field_component__.get_param(param_name);
  mp_field_component__->set_id(new Module_Param_FieldName(mcopystr("component_")));
  mp->add_elem(mp_field_component__);
  Module_Param* mp_field_portindex = field_portindex.get_param(param_name);
  mp_field_portindex->set_id(new Module_Param_FieldName(mcopystr("portindex")));
  mp->add_elem(mp_field_portindex);
  return mp;
  }

void TriPortIdType::set_implicit_omit()
{
if (portName().is_bound()) portName().set_implicit_omit();
if (portTypeName().is_bound()) portTypeName().set_implicit_omit();
if (component__().is_bound()) component__().set_implicit_omit();
if (!portindex().is_bound()) portindex() = OMIT_VALUE;
else portindex().set_implicit_omit();
}

void TriPortIdType::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.TriPortIdType.");
field_portName.encode_text(text_buf);
field_portTypeName.encode_text(text_buf);
field_component__.encode_text(text_buf);
field_portindex.encode_text(text_buf);
}

void TriPortIdType::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_portName.decode_text(text_buf);
field_portTypeName.decode_text(text_buf);
field_component__.decode_text(text_buf);
field_portindex.decode_text(text_buf);
}

void TriPortIdType::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void TriPortIdType::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int TriPortIdType::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.TriPortIdType.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "portName");
    enc_len += field_portName.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "portTypeName");
    enc_len += field_portTypeName.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "component_");
    enc_len += field_component__.JSON_encode(TriComponentIdType_descr_, p_tok);
  }

  if (field_portindex.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "portindex");
    enc_len += field_portindex.JSON_encode(INTEGER_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int TriPortIdType::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "portName", name_len)) {
         int ret_val = field_portName.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "portName");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (12 == name_len && 0 == strncmp(fld_name, "portTypeName", name_len)) {
         int ret_val = field_portTypeName.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "portTypeName");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (10 == name_len && 0 == strncmp(fld_name, "component_", name_len)) {
         int ret_val = field_component__.JSON_decode(TriComponentIdType_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "component_");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "portindex", name_len)) {
         int ret_val = field_portindex.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "portindex");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_portName.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "portName");
    return JSON_ERROR_FATAL;
  }
if (!field_portTypeName.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "portTypeName");
    return JSON_ERROR_FATAL;
  }
if (!field_component__.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "component_");
    return JSON_ERROR_FATAL;
  }
if (!field_portindex.is_bound()) {
    field_portindex = OMIT_VALUE;
  }

  return dec_len;
}

struct TriPortIdType_template::single_value_struct {
CHARSTRING_template field_portName;
CHARSTRING_template field_portTypeName;
TriComponentIdType_template field_component__;
INTEGER_template field_portindex;
};

void TriPortIdType_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_portName = ANY_VALUE;
single_value->field_portTypeName = ANY_VALUE;
single_value->field_component__ = ANY_VALUE;
single_value->field_portindex = ANY_OR_OMIT;
}
}
}

void TriPortIdType_template::copy_value(const TriPortIdType& other_value)
{
single_value = new single_value_struct;
if (other_value.portName().is_bound()) {
  single_value->field_portName = other_value.portName();
} else {
  single_value->field_portName.clean_up();
}
if (other_value.portTypeName().is_bound()) {
  single_value->field_portTypeName = other_value.portTypeName();
} else {
  single_value->field_portTypeName.clean_up();
}
if (other_value.component__().is_bound()) {
  single_value->field_component__ = other_value.component__();
} else {
  single_value->field_component__.clean_up();
}
if (other_value.portindex().is_bound()) {
  if (other_value.portindex().ispresent()) single_value->field_portindex = other_value.portindex()();
  else single_value->field_portindex = OMIT_VALUE;
} else {
  single_value->field_portindex.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void TriPortIdType_template::copy_template(const TriPortIdType_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.portName().get_selection()) {
single_value->field_portName = other_value.portName();
} else {
single_value->field_portName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.portTypeName().get_selection()) {
single_value->field_portTypeName = other_value.portTypeName();
} else {
single_value->field_portTypeName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.component__().get_selection()) {
single_value->field_component__ = other_value.component__();
} else {
single_value->field_component__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.portindex().get_selection()) {
single_value->field_portindex = other_value.portindex();
} else {
single_value->field_portindex.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new TriPortIdType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.TriPortIdType.");
break;
}
set_selection(other_value);
}

TriPortIdType_template::TriPortIdType_template()
{
}

TriPortIdType_template::TriPortIdType_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

TriPortIdType_template::TriPortIdType_template(const TriPortIdType& other_value)
{
copy_value(other_value);
}

TriPortIdType_template::TriPortIdType_template(const OPTIONAL<TriPortIdType>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TriPortIdType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.TriPortIdType from an unbound optional field.");
}
}

TriPortIdType_template::TriPortIdType_template(const TriPortIdType_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

TriPortIdType_template::~TriPortIdType_template()
{
clean_up();
}

TriPortIdType_template& TriPortIdType_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

TriPortIdType_template& TriPortIdType_template::operator=(const TriPortIdType& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

TriPortIdType_template& TriPortIdType_template::operator=(const OPTIONAL<TriPortIdType>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TriPortIdType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.TriPortIdType.");
}
return *this;
}

TriPortIdType_template& TriPortIdType_template::operator=(const TriPortIdType_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean TriPortIdType_template::match(const TriPortIdType& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.portName().is_bound()) return FALSE;
if(!single_value->field_portName.match(other_value.portName(), legacy))return FALSE;
if(!other_value.portTypeName().is_bound()) return FALSE;
if(!single_value->field_portTypeName.match(other_value.portTypeName(), legacy))return FALSE;
if(!other_value.component__().is_bound()) return FALSE;
if(!single_value->field_component__.match(other_value.component__(), legacy))return FALSE;
if(!other_value.portindex().is_bound()) return FALSE;
if((other_value.portindex().ispresent() ? !single_value->field_portindex.match((const INTEGER&)other_value.portindex(), legacy) : !single_value->field_portindex.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.TriPortIdType.");
}
return FALSE;
}

boolean TriPortIdType_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_portName.is_bound()) return TRUE;
if (single_value->field_portTypeName.is_bound()) return TRUE;
if (single_value->field_component__.is_bound()) return TRUE;
if (single_value->field_portindex.is_omit() || single_value->field_portindex.is_bound()) return TRUE;
return FALSE;
}

boolean TriPortIdType_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_portName.is_value()) return FALSE;
if (!single_value->field_portTypeName.is_value()) return FALSE;
if (!single_value->field_component__.is_value()) return FALSE;
if (!single_value->field_portindex.is_omit() && !single_value->field_portindex.is_value()) return FALSE;
return TRUE;
}

void TriPortIdType_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

TriPortIdType TriPortIdType_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.TriPortIdType.");
TriPortIdType ret_val;
if (single_value->field_portName.is_bound()) {
ret_val.portName() = single_value->field_portName.valueof();
}
if (single_value->field_portTypeName.is_bound()) {
ret_val.portTypeName() = single_value->field_portTypeName.valueof();
}
if (single_value->field_component__.is_bound()) {
ret_val.component__() = single_value->field_component__.valueof();
}
if (single_value->field_portindex.is_omit()) ret_val.portindex() = OMIT_VALUE;
else if (single_value->field_portindex.is_bound()) {
ret_val.portindex() = single_value->field_portindex.valueof();
}
return ret_val;
}

void TriPortIdType_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.TriPortIdType.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new TriPortIdType_template[list_length];
}

TriPortIdType_template& TriPortIdType_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.TriPortIdType.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.TriPortIdType.");
return value_list.list_value[list_index];
}

CHARSTRING_template& TriPortIdType_template::portName()
{
set_specific();
return single_value->field_portName;
}

const CHARSTRING_template& TriPortIdType_template::portName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field portName of a non-specific template of type @TRI_interface_Types.TriPortIdType.");
return single_value->field_portName;
}

CHARSTRING_template& TriPortIdType_template::portTypeName()
{
set_specific();
return single_value->field_portTypeName;
}

const CHARSTRING_template& TriPortIdType_template::portTypeName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field portTypeName of a non-specific template of type @TRI_interface_Types.TriPortIdType.");
return single_value->field_portTypeName;
}

TriComponentIdType_template& TriPortIdType_template::component__()
{
set_specific();
return single_value->field_component__;
}

const TriComponentIdType_template& TriPortIdType_template::component__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field component_ of a non-specific template of type @TRI_interface_Types.TriPortIdType.");
return single_value->field_component__;
}

INTEGER_template& TriPortIdType_template::portindex()
{
set_specific();
return single_value->field_portindex;
}

const INTEGER_template& TriPortIdType_template::portindex() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field portindex of a non-specific template of type @TRI_interface_Types.TriPortIdType.");
return single_value->field_portindex;
}

int TriPortIdType_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriPortIdType which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 3;
      if (single_value->field_portindex.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.TriPortIdType containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriPortIdType containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriPortIdType containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriPortIdType containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriPortIdType containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.TriPortIdType.");
  }
  return 0;
}

void TriPortIdType_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ portName := ");
single_value->field_portName.log();
TTCN_Logger::log_event_str(", portTypeName := ");
single_value->field_portTypeName.log();
TTCN_Logger::log_event_str(", component_ := ");
single_value->field_component__.log();
TTCN_Logger::log_event_str(", portindex := ");
single_value->field_portindex.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void TriPortIdType_template::log_match(const TriPortIdType& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_portName.match(match_value.portName(), legacy)){
TTCN_Logger::log_logmatch_info(".portName");
single_value->field_portName.log_match(match_value.portName(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_portTypeName.match(match_value.portTypeName(), legacy)){
TTCN_Logger::log_logmatch_info(".portTypeName");
single_value->field_portTypeName.log_match(match_value.portTypeName(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_component__.match(match_value.component__(), legacy)){
TTCN_Logger::log_logmatch_info(".component_");
single_value->field_component__.log_match(match_value.component__(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.portindex().ispresent()){
if(!single_value->field_portindex.match(match_value.portindex(), legacy)){
TTCN_Logger::log_logmatch_info(".portindex");
single_value->field_portindex.log_match(match_value.portindex(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_portindex.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".portindex := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_portindex.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ portName := ");
single_value->field_portName.log_match(match_value.portName(), legacy);
TTCN_Logger::log_event_str(", portTypeName := ");
single_value->field_portTypeName.log_match(match_value.portTypeName(), legacy);
TTCN_Logger::log_event_str(", component_ := ");
single_value->field_component__.log_match(match_value.component__(), legacy);
TTCN_Logger::log_event_str(", portindex := ");
if (match_value.portindex().ispresent()) single_value->field_portindex.log_match(match_value.portindex(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_portindex.log();
if (single_value->field_portindex.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void TriPortIdType_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_portName.encode_text(text_buf);
single_value->field_portTypeName.encode_text(text_buf);
single_value->field_component__.encode_text(text_buf);
single_value->field_portindex.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.TriPortIdType.");
}
}

void TriPortIdType_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_portName.decode_text(text_buf);
single_value->field_portTypeName.decode_text(text_buf);
single_value->field_component__.decode_text(text_buf);
single_value->field_portindex.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new TriPortIdType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.TriPortIdType.");
}
}

void TriPortIdType_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.TriPortIdType'");
    }
    if (strcmp("portName", param_field) == 0) {
      portName().set_param(param);
      return;
    } else if (strcmp("portTypeName", param_field) == 0) {
      portTypeName().set_param(param);
      return;
    } else if (strcmp("component_", param_field) == 0) {
      component__().set_param(param);
      return;
    } else if (strcmp("portindex", param_field) == 0) {
      portindex().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.TriPortIdType'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    TriPortIdType_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (4<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.TriPortIdType has 4 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) portName().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) portTypeName().set_param(*mp->get_elem(1));
    if (mp->get_size()>2 && mp->get_elem(2)->get_type()!=Module_Param::MP_NotUsed) component__().set_param(*mp->get_elem(2));
    if (mp->get_size()>3 && mp->get_elem(3)->get_type()!=Module_Param::MP_NotUsed) portindex().set_param(*mp->get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portTypeName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portTypeName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "component_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          component__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portindex")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portindex().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TriPortIdType: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.TriPortIdType");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* TriPortIdType_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.TriPortIdType'");
    }
    if (strcmp("portName", param_field) == 0) {
      return portName().get_param(param_name);
    } else if (strcmp("portTypeName", param_field) == 0) {
      return portTypeName().get_param(param_name);
    } else if (strcmp("component_", param_field) == 0) {
      return component__().get_param(param_name);
    } else if (strcmp("portindex", param_field) == 0) {
      return portindex().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TriPortIdType'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_portName = single_value->field_portName.get_param(param_name);
    mp_field_portName->set_id(new Module_Param_FieldName(mcopystr("portName")));
    mp->add_elem(mp_field_portName);
    Module_Param* mp_field_portTypeName = single_value->field_portTypeName.get_param(param_name);
    mp_field_portTypeName->set_id(new Module_Param_FieldName(mcopystr("portTypeName")));
    mp->add_elem(mp_field_portTypeName);
    Module_Param* mp_field_component__ = single_value->field_component__.get_param(param_name);
    mp_field_component__->set_id(new Module_Param_FieldName(mcopystr("component_")));
    mp->add_elem(mp_field_component__);
    Module_Param* mp_field_portindex = single_value->field_portindex.get_param(param_name);
    mp_field_portindex->set_id(new Module_Param_FieldName(mcopystr("portindex")));
    mp->add_elem(mp_field_portindex);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void TriPortIdType_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_portName.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriPortIdType");
single_value->field_portTypeName.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriPortIdType");
single_value->field_component__.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriPortIdType");
single_value->field_portindex.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriPortIdType");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.TriPortIdType");
}

boolean TriPortIdType_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean TriPortIdType_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

TriAddressType::TriAddressType()
{
  bound_flag = FALSE;
}

TriAddressType::TriAddressType(const OCTETSTRING& par_sut__address)
  :   field_sut__address(par_sut__address)
{
  bound_flag = TRUE;
}

TriAddressType::TriAddressType(const TriAddressType& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.TriAddressType.");
bound_flag = TRUE;
if (other_value.sut__address().is_bound()) field_sut__address = other_value.sut__address();
else field_sut__address.clean_up();
}

void TriAddressType::clean_up()
{
field_sut__address.clean_up();
bound_flag = FALSE;
}

TriAddressType& TriAddressType::operator=(const TriAddressType& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.TriAddressType.");
  bound_flag = TRUE;
  if (other_value.sut__address().is_bound()) field_sut__address = other_value.sut__address();
  else field_sut__address.clean_up();
}
return *this;
}

boolean TriAddressType::operator==(const TriAddressType& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_sut__address==other_value.field_sut__address;
}

boolean TriAddressType::is_bound() const
{
if (bound_flag) return TRUE;
if(field_sut__address.is_bound()) return TRUE;
return FALSE;
}
boolean TriAddressType::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_sut__address.is_value()) return FALSE;
return TRUE;
}
int TriAddressType::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.TriAddressType");
  return 1;
}

void TriAddressType::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ sut_address := ");
field_sut__address.log();
TTCN_Logger::log_event_str(" }");
}

void TriAddressType::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.TriAddressType'");
    }
    if (strcmp("sut_address", param_field) == 0) {
      sut__address().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.TriAddressType'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.TriAddressType has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) sut__address().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sut_address")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sut__address().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TriAddressType: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.TriAddressType");
  }
}

Module_Param* TriAddressType::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.TriAddressType'");
    }
    if (strcmp("sut_address", param_field) == 0) {
      return sut__address().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TriAddressType'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_sut__address = field_sut__address.get_param(param_name);
  mp_field_sut__address->set_id(new Module_Param_FieldName(mcopystr("sut_address")));
  mp->add_elem(mp_field_sut__address);
  return mp;
  }

void TriAddressType::set_implicit_omit()
{
if (sut__address().is_bound()) sut__address().set_implicit_omit();
}

void TriAddressType::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.TriAddressType.");
field_sut__address.encode_text(text_buf);
}

void TriAddressType::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_sut__address.decode_text(text_buf);
}

void TriAddressType::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void TriAddressType::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int TriAddressType::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.TriAddressType.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sut_address");
    enc_len += field_sut__address.JSON_encode(OCTETSTRING_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int TriAddressType::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (11 == name_len && 0 == strncmp(fld_name, "sut_address", name_len)) {
         int ret_val = field_sut__address.JSON_decode(OCTETSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sut_address");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_sut__address.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "sut_address");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct TriAddressType_template::single_value_struct {
OCTETSTRING_template field_sut__address;
};

void TriAddressType_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_sut__address = ANY_VALUE;
}
}
}

void TriAddressType_template::copy_value(const TriAddressType& other_value)
{
single_value = new single_value_struct;
if (other_value.sut__address().is_bound()) {
  single_value->field_sut__address = other_value.sut__address();
} else {
  single_value->field_sut__address.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void TriAddressType_template::copy_template(const TriAddressType_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.sut__address().get_selection()) {
single_value->field_sut__address = other_value.sut__address();
} else {
single_value->field_sut__address.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new TriAddressType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.TriAddressType.");
break;
}
set_selection(other_value);
}

TriAddressType_template::TriAddressType_template()
{
}

TriAddressType_template::TriAddressType_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

TriAddressType_template::TriAddressType_template(const TriAddressType& other_value)
{
copy_value(other_value);
}

TriAddressType_template::TriAddressType_template(const OPTIONAL<TriAddressType>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TriAddressType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.TriAddressType from an unbound optional field.");
}
}

TriAddressType_template::TriAddressType_template(const TriAddressType_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

TriAddressType_template::~TriAddressType_template()
{
clean_up();
}

TriAddressType_template& TriAddressType_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

TriAddressType_template& TriAddressType_template::operator=(const TriAddressType& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

TriAddressType_template& TriAddressType_template::operator=(const OPTIONAL<TriAddressType>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TriAddressType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.TriAddressType.");
}
return *this;
}

TriAddressType_template& TriAddressType_template::operator=(const TriAddressType_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean TriAddressType_template::match(const TriAddressType& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.sut__address().is_bound()) return FALSE;
if(!single_value->field_sut__address.match(other_value.sut__address(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.TriAddressType.");
}
return FALSE;
}

boolean TriAddressType_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_sut__address.is_bound()) return TRUE;
return FALSE;
}

boolean TriAddressType_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_sut__address.is_value()) return FALSE;
return TRUE;
}

void TriAddressType_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

TriAddressType TriAddressType_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.TriAddressType.");
TriAddressType ret_val;
if (single_value->field_sut__address.is_bound()) {
ret_val.sut__address() = single_value->field_sut__address.valueof();
}
return ret_val;
}

void TriAddressType_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.TriAddressType.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new TriAddressType_template[list_length];
}

TriAddressType_template& TriAddressType_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.TriAddressType.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.TriAddressType.");
return value_list.list_value[list_index];
}

OCTETSTRING_template& TriAddressType_template::sut__address()
{
set_specific();
return single_value->field_sut__address;
}

const OCTETSTRING_template& TriAddressType_template::sut__address() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sut_address of a non-specific template of type @TRI_interface_Types.TriAddressType.");
return single_value->field_sut__address;
}

int TriAddressType_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriAddressType which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.TriAddressType containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriAddressType containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriAddressType containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriAddressType containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TriAddressType containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.TriAddressType.");
  }
  return 0;
}

void TriAddressType_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ sut_address := ");
single_value->field_sut__address.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void TriAddressType_template::log_match(const TriAddressType& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_sut__address.match(match_value.sut__address(), legacy)){
TTCN_Logger::log_logmatch_info(".sut_address");
single_value->field_sut__address.log_match(match_value.sut__address(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ sut_address := ");
single_value->field_sut__address.log_match(match_value.sut__address(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void TriAddressType_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_sut__address.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.TriAddressType.");
}
}

void TriAddressType_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_sut__address.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new TriAddressType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.TriAddressType.");
}
}

void TriAddressType_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.TriAddressType'");
    }
    if (strcmp("sut_address", param_field) == 0) {
      sut__address().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.TriAddressType'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    TriAddressType_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.TriAddressType has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) sut__address().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sut_address")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sut__address().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TriAddressType: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.TriAddressType");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* TriAddressType_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.TriAddressType'");
    }
    if (strcmp("sut_address", param_field) == 0) {
      return sut__address().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TriAddressType'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_sut__address = single_value->field_sut__address.get_param(param_name);
    mp_field_sut__address->set_id(new Module_Param_FieldName(mcopystr("sut_address")));
    mp->add_elem(mp_field_sut__address);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void TriAddressType_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_sut__address.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TriAddressType");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.TriAddressType");
}

boolean TriAddressType_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean TriAddressType_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void msg__data__container::copy_value(const msg__data__container& other_value)
{
switch (other_value.union_selection) {
case ALT_encoded__data:
field_encoded__data = new OCTETSTRING(*other_value.field_encoded__data);
break;
case ALT_tv__data:
field_tv__data = new Type__Value__container(*other_value.field_tv__data);
break;
default:
TTCN_error("Assignment of an unbound union value of type @TRI_interface_Types.msg_data_container.");
}
union_selection = other_value.union_selection;
}

msg__data__container::msg__data__container()
{
union_selection = UNBOUND_VALUE;
}

msg__data__container::msg__data__container(const msg__data__container& other_value)
: Base_Type(){
copy_value(other_value);
}

msg__data__container::~msg__data__container()
{
clean_up();
}

msg__data__container& msg__data__container::operator=(const msg__data__container& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean msg__data__container::operator==(const msg__data__container& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @TRI_interface_Types.msg_data_container.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @TRI_interface_Types.msg_data_container.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_encoded__data:
return *field_encoded__data == *other_value.field_encoded__data;
case ALT_tv__data:
return *field_tv__data == *other_value.field_tv__data;
default:
return FALSE;
}
}

OCTETSTRING& msg__data__container::encoded__data()
{
if (union_selection != ALT_encoded__data) {
clean_up();
field_encoded__data = new OCTETSTRING;
union_selection = ALT_encoded__data;
}
return *field_encoded__data;
}

const OCTETSTRING& msg__data__container::encoded__data() const
{
if (union_selection != ALT_encoded__data) TTCN_error("Using non-selected field encoded_data in a value of union type @TRI_interface_Types.msg_data_container.");
return *field_encoded__data;
}

Type__Value__container& msg__data__container::tv__data()
{
if (union_selection != ALT_tv__data) {
clean_up();
field_tv__data = new Type__Value__container;
union_selection = ALT_tv__data;
}
return *field_tv__data;
}

const Type__Value__container& msg__data__container::tv__data() const
{
if (union_selection != ALT_tv__data) TTCN_error("Using non-selected field tv_data in a value of union type @TRI_interface_Types.msg_data_container.");
return *field_tv__data;
}

boolean msg__data__container::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @TRI_interface_Types.msg_data_container.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @TRI_interface_Types.msg_data_container.");
return union_selection == checked_selection;
}

boolean msg__data__container::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean msg__data__container::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_encoded__data: return field_encoded__data->is_value();
case ALT_tv__data: return field_tv__data->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void msg__data__container::clean_up()
{
switch (union_selection) {
case ALT_encoded__data:
  delete field_encoded__data;
  break;
case ALT_tv__data:
  delete field_tv__data;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void msg__data__container::log() const
{
switch (union_selection) {
case ALT_encoded__data:
TTCN_Logger::log_event_str("{ encoded_data := ");
field_encoded__data->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_tv__data:
TTCN_Logger::log_event_str("{ tv_data := ");
field_tv__data->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void msg__data__container::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@TRI_interface_Types.msg_data_container'");
    }
    if (strcmp("encoded_data", param_field) == 0) {
      encoded__data().set_param(param);
      return;
    } else if (strcmp("tv_data", param_field) == 0) {
      tv__data().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@TRI_interface_Types.msg_data_container'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) return;
  if (mp->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = mp->get_elem(mp->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "encoded_data")) {
    encoded__data().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "tv_data")) {
    tv__data().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @TRI_interface_Types.msg_data_container.", mp_last->get_id()->get_name());
}

Module_Param* msg__data__container::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for union type `@TRI_interface_Types.msg_data_container'");
    }
    if (strcmp("encoded_data", param_field) == 0) {
      return encoded__data().get_param(param_name);
    } else if (strcmp("tv_data", param_field) == 0) {
      return tv__data().get_param(param_name);
    } else TTCN_error("Field `%s' not found in union type `msg__data__container'", param_field);
  }
  Module_Param* mp_field = NULL;
  switch(union_selection) {
  case ALT_encoded__data:
    mp_field = field_encoded__data->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("encoded_data")));
    break;
  case ALT_tv__data:
    mp_field = field_tv__data->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("tv_data")));
    break;
  default:
    break;
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  mp->add_elem(mp_field);
  return mp;
}

void msg__data__container::set_implicit_omit()
{
switch (union_selection) {
case ALT_encoded__data:
field_encoded__data->set_implicit_omit(); break;
case ALT_tv__data:
field_tv__data->set_implicit_omit(); break;
default: break;
}
}

void msg__data__container::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_encoded__data:
field_encoded__data->encode_text(text_buf);
break;
case ALT_tv__data:
field_tv__data->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @TRI_interface_Types.msg_data_container.");
}
}

void msg__data__container::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_encoded__data:
encoded__data().decode_text(text_buf);
break;
case ALT_tv__data:
tv__data().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @TRI_interface_Types.msg_data_container.");
}
}

void msg__data__container::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void msg__data__container::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int msg__data__container::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_encoded__data:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "encoded_data");
    enc_len += field_encoded__data->JSON_encode(OCTETSTRING_descr_, p_tok);
    break;
  case ALT_tv__data:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "tv_data");
    enc_len += field_tv__data->JSON_encode(Type__Value__container_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @TRI_interface_Types.msg_data_container.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int msg__data__container::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "encoded_data", name_len)) {
      int ret_val = encoded__data().JSON_decode(OCTETSTRING_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "encoded_data");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "tv_data", name_len)) {
      int ret_val = tv__data().JSON_decode(Type__Value__container_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "tv_data");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void msg__data__container_template::copy_value(const msg__data__container& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
single_value.field_encoded__data = new OCTETSTRING_template(other_value.encoded__data());
break;
case msg__data__container::ALT_tv__data:
single_value.field_tv__data = new Type__Value__container_template(other_value.tv__data());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @TRI_interface_Types.msg_data_container.");
}
set_selection(SPECIFIC_VALUE);
}

void msg__data__container_template::copy_template(const msg__data__container_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
single_value.field_encoded__data = new OCTETSTRING_template(*other_value.single_value.field_encoded__data);
break;
case msg__data__container::ALT_tv__data:
single_value.field_tv__data = new Type__Value__container_template(*other_value.single_value.field_tv__data);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @TRI_interface_Types.msg_data_container.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new msg__data__container_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @TRI_interface_Types.msg_data_container.");
}
set_selection(other_value);
}

msg__data__container_template::msg__data__container_template()
{
}

msg__data__container_template::msg__data__container_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

msg__data__container_template::msg__data__container_template(const msg__data__container& other_value)
{
copy_value(other_value);
}

msg__data__container_template::msg__data__container_template(const OPTIONAL<msg__data__container>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const msg__data__container&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @TRI_interface_Types.msg_data_container from an unbound optional field.");
}
}

msg__data__container_template::msg__data__container_template(const msg__data__container_template& other_value)
: Base_Template(){
copy_template(other_value);
}

msg__data__container_template::~msg__data__container_template()
{
clean_up();
}

void msg__data__container_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
delete single_value.field_encoded__data;
break;
case msg__data__container::ALT_tv__data:
delete single_value.field_tv__data;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

msg__data__container_template& msg__data__container_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

msg__data__container_template& msg__data__container_template::operator=(const msg__data__container& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

msg__data__container_template& msg__data__container_template::operator=(const OPTIONAL<msg__data__container>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const msg__data__container&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @TRI_interface_Types.msg_data_container.");
}
return *this;
}

msg__data__container_template& msg__data__container_template::operator=(const msg__data__container_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean msg__data__container_template::match(const msg__data__container& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
msg__data__container::union_selection_type value_selection = other_value.get_selection();
if (value_selection == msg__data__container::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case msg__data__container::ALT_encoded__data:
return single_value.field_encoded__data->match(other_value.encoded__data(), legacy);
case msg__data__container::ALT_tv__data:
return single_value.field_tv__data->match(other_value.tv__data(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @TRI_interface_Types.msg_data_container.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @TRI_interface_Types.msg_data_container.");
}
return FALSE;
}

boolean msg__data__container_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
return single_value.field_encoded__data->is_value();
case msg__data__container::ALT_tv__data:
return single_value.field_tv__data->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @TRI_interface_Types.msg_data_container.");
}
}

msg__data__container msg__data__container_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @TRI_interface_Types.msg_data_container.");
msg__data__container ret_val;
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
ret_val.encoded__data() = single_value.field_encoded__data->valueof();
break;
case msg__data__container::ALT_tv__data:
ret_val.tv__data() = single_value.field_tv__data->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @TRI_interface_Types.msg_data_container.");
}
return ret_val;
}

msg__data__container_template& msg__data__container_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @TRI_interface_Types.msg_data_container.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @TRI_interface_Types.msg_data_container.");
return value_list.list_value[list_index];
}
void msg__data__container_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @TRI_interface_Types.msg_data_container.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new msg__data__container_template[list_length];
}

OCTETSTRING_template& msg__data__container_template::encoded__data()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != msg__data__container::ALT_encoded__data) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_encoded__data = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_encoded__data = new OCTETSTRING_template;
single_value.union_selection = msg__data__container::ALT_encoded__data;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_encoded__data;
}

const OCTETSTRING_template& msg__data__container_template::encoded__data() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field encoded_data in a non-specific template of union type @TRI_interface_Types.msg_data_container.");
if (single_value.union_selection != msg__data__container::ALT_encoded__data) TTCN_error("Accessing non-selected field encoded_data in a template of union type @TRI_interface_Types.msg_data_container.");
return *single_value.field_encoded__data;
}

Type__Value__container_template& msg__data__container_template::tv__data()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != msg__data__container::ALT_tv__data) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_tv__data = new Type__Value__container_template(ANY_VALUE);
else single_value.field_tv__data = new Type__Value__container_template;
single_value.union_selection = msg__data__container::ALT_tv__data;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_tv__data;
}

const Type__Value__container_template& msg__data__container_template::tv__data() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field tv_data in a non-specific template of union type @TRI_interface_Types.msg_data_container.");
if (single_value.union_selection != msg__data__container::ALT_tv__data) TTCN_error("Accessing non-selected field tv_data in a template of union type @TRI_interface_Types.msg_data_container.");
return *single_value.field_tv__data;
}

boolean msg__data__container_template::ischosen(msg__data__container::union_selection_type checked_selection) const
{
if (checked_selection == msg__data__container::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @TRI_interface_Types.msg_data_container.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == msg__data__container::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @TRI_interface_Types.msg_data_container.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @TRI_interface_Types.msg_data_container containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @TRI_interface_Types.msg_data_container, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @TRI_interface_Types.msg_data_container");
}
return FALSE;
}

void msg__data__container_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
TTCN_Logger::log_event_str("{ encoded_data := ");
single_value.field_encoded__data->log();
TTCN_Logger::log_event_str(" }");
break;
case msg__data__container::ALT_tv__data:
TTCN_Logger::log_event_str("{ tv_data := ");
single_value.field_tv__data->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void msg__data__container_template::log_match(const msg__data__container& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".encoded_data");
single_value.field_encoded__data->log_match(match_value.encoded__data(), legacy);
} else {
TTCN_Logger::log_event_str("{ encoded_data := ");
single_value.field_encoded__data->log_match(match_value.encoded__data(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case msg__data__container::ALT_tv__data:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".tv_data");
single_value.field_tv__data->log_match(match_value.tv__data(), legacy);
} else {
TTCN_Logger::log_event_str("{ tv_data := ");
single_value.field_tv__data->log_match(match_value.tv__data(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void msg__data__container_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
single_value.field_encoded__data->encode_text(text_buf);
break;
case msg__data__container::ALT_tv__data:
single_value.field_tv__data->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @TRI_interface_Types.msg_data_container.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @TRI_interface_Types.msg_data_container.");
}
}

void msg__data__container_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = msg__data__container::UNBOUND_VALUE;
msg__data__container::union_selection_type new_selection = (msg__data__container::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case msg__data__container::ALT_encoded__data:
single_value.field_encoded__data = new OCTETSTRING_template;
single_value.field_encoded__data->decode_text(text_buf);
break;
case msg__data__container::ALT_tv__data:
single_value.field_tv__data = new Type__Value__container_template;
single_value.field_tv__data->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @TRI_interface_Types.msg_data_container.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new msg__data__container_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @TRI_interface_Types.msg_data_container.");
}
}

boolean msg__data__container_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean msg__data__container_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void msg__data__container_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@TRI_interface_Types.msg_data_container'");
    }
    if (strcmp("encoded_data", param_field) == 0) {
      encoded__data().set_param(param);
      return;
    } else if (strcmp("tv_data", param_field) == 0) {
      tv__data().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@TRI_interface_Types.msg_data_container'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    msg__data__container_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (mp->get_size()==0) break;
    param.type_error("union template", "@TRI_interface_Types.msg_data_container");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = mp->get_elem(mp->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "encoded_data")) {
      encoded__data().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "tv_data")) {
      tv__data().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @TRI_interface_Types.msg_data_container.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@TRI_interface_Types.msg_data_container");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* msg__data__container_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for union template type `@TRI_interface_Types.msg_data_container'");
    }
    if (strcmp("encoded_data", param_field) == 0) {
      return encoded__data().get_param(param_name);
    } else if (strcmp("tv_data", param_field) == 0) {
      return tv__data().get_param(param_name);
    } else TTCN_error("Field `%s' not found in union type `msg__data__container'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Module_Param* mp_field = NULL;
    switch(single_value.union_selection) {
    case msg__data__container::ALT_encoded__data:
      mp_field = single_value.field_encoded__data->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("encoded_data")));
      break;
    case msg__data__container::ALT_tv__data:
      mp_field = single_value.field_tv__data->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("tv_data")));
      break;
    default:
      break;
    }
    mp = new Module_Param_Assignment_List();
    mp->add_elem(mp_field);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void msg__data__container_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case msg__data__container::ALT_encoded__data:
single_value.field_encoded__data->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.msg_data_container");
return;
case msg__data__container::ALT_tv__data:
single_value.field_tv__data->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.msg_data_container");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @TRI_interface_Types.msg_data_container.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.msg_data_container");
}

Type__Value__container::Type__Value__container()
{
  bound_flag = FALSE;
}

Type__Value__container::Type__Value__container(const OCTETSTRING& par_msg__type,
    const OCTETSTRING& par_msg__value)
  :   field_msg__type(par_msg__type),
  field_msg__value(par_msg__value)
{
  bound_flag = TRUE;
}

Type__Value__container::Type__Value__container(const Type__Value__container& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.Type_Value_container.");
bound_flag = TRUE;
if (other_value.msg__type().is_bound()) field_msg__type = other_value.msg__type();
else field_msg__type.clean_up();
if (other_value.msg__value().is_bound()) field_msg__value = other_value.msg__value();
else field_msg__value.clean_up();
}

void Type__Value__container::clean_up()
{
field_msg__type.clean_up();
field_msg__value.clean_up();
bound_flag = FALSE;
}

Type__Value__container& Type__Value__container::operator=(const Type__Value__container& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.Type_Value_container.");
  bound_flag = TRUE;
  if (other_value.msg__type().is_bound()) field_msg__type = other_value.msg__type();
  else field_msg__type.clean_up();
  if (other_value.msg__value().is_bound()) field_msg__value = other_value.msg__value();
  else field_msg__value.clean_up();
}
return *this;
}

boolean Type__Value__container::operator==(const Type__Value__container& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_msg__type==other_value.field_msg__type
  && field_msg__value==other_value.field_msg__value;
}

boolean Type__Value__container::is_bound() const
{
if (bound_flag) return TRUE;
if(field_msg__type.is_bound()) return TRUE;
if(field_msg__value.is_bound()) return TRUE;
return FALSE;
}
boolean Type__Value__container::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_msg__type.is_value()) return FALSE;
if(!field_msg__value.is_value()) return FALSE;
return TRUE;
}
int Type__Value__container::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.Type_Value_container");
  return 2;
}

void Type__Value__container::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ msg_type := ");
field_msg__type.log();
TTCN_Logger::log_event_str(", msg_value := ");
field_msg__value.log();
TTCN_Logger::log_event_str(" }");
}

void Type__Value__container::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.Type_Value_container'");
    }
    if (strcmp("msg_type", param_field) == 0) {
      msg__type().set_param(param);
      return;
    } else if (strcmp("msg_value", param_field) == 0) {
      msg__value().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.Type_Value_container'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.Type_Value_container has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) msg__type().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) msg__value().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg_type")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg__type().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg_value")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg__value().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Type_Value_container: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.Type_Value_container");
  }
}

Module_Param* Type__Value__container::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.Type_Value_container'");
    }
    if (strcmp("msg_type", param_field) == 0) {
      return msg__type().get_param(param_name);
    } else if (strcmp("msg_value", param_field) == 0) {
      return msg__value().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Type_Value_container'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_msg__type = field_msg__type.get_param(param_name);
  mp_field_msg__type->set_id(new Module_Param_FieldName(mcopystr("msg_type")));
  mp->add_elem(mp_field_msg__type);
  Module_Param* mp_field_msg__value = field_msg__value.get_param(param_name);
  mp_field_msg__value->set_id(new Module_Param_FieldName(mcopystr("msg_value")));
  mp->add_elem(mp_field_msg__value);
  return mp;
  }

void Type__Value__container::set_implicit_omit()
{
if (msg__type().is_bound()) msg__type().set_implicit_omit();
if (msg__value().is_bound()) msg__value().set_implicit_omit();
}

void Type__Value__container::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.Type_Value_container.");
field_msg__type.encode_text(text_buf);
field_msg__value.encode_text(text_buf);
}

void Type__Value__container::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_msg__type.decode_text(text_buf);
field_msg__value.decode_text(text_buf);
}

void Type__Value__container::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Type__Value__container::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Type__Value__container::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.Type_Value_container.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "msg_type");
    enc_len += field_msg__type.JSON_encode(type__info_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "msg_value");
    enc_len += field_msg__value.JSON_encode(value__info_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Type__Value__container::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "msg_type", name_len)) {
         int ret_val = field_msg__type.JSON_decode(type__info_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "msg_type");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "msg_value", name_len)) {
         int ret_val = field_msg__value.JSON_decode(value__info_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "msg_value");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_msg__type.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "msg_type");
    return JSON_ERROR_FATAL;
  }
if (!field_msg__value.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "msg_value");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Type__Value__container_template::single_value_struct {
OCTETSTRING_template field_msg__type;
OCTETSTRING_template field_msg__value;
};

void Type__Value__container_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_msg__type = ANY_VALUE;
single_value->field_msg__value = ANY_VALUE;
}
}
}

void Type__Value__container_template::copy_value(const Type__Value__container& other_value)
{
single_value = new single_value_struct;
if (other_value.msg__type().is_bound()) {
  single_value->field_msg__type = other_value.msg__type();
} else {
  single_value->field_msg__type.clean_up();
}
if (other_value.msg__value().is_bound()) {
  single_value->field_msg__value = other_value.msg__value();
} else {
  single_value->field_msg__value.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Type__Value__container_template::copy_template(const Type__Value__container_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.msg__type().get_selection()) {
single_value->field_msg__type = other_value.msg__type();
} else {
single_value->field_msg__type.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.msg__value().get_selection()) {
single_value->field_msg__value = other_value.msg__value();
} else {
single_value->field_msg__value.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Type__Value__container_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.Type_Value_container.");
break;
}
set_selection(other_value);
}

Type__Value__container_template::Type__Value__container_template()
{
}

Type__Value__container_template::Type__Value__container_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Type__Value__container_template::Type__Value__container_template(const Type__Value__container& other_value)
{
copy_value(other_value);
}

Type__Value__container_template::Type__Value__container_template(const OPTIONAL<Type__Value__container>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Type__Value__container&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.Type_Value_container from an unbound optional field.");
}
}

Type__Value__container_template::Type__Value__container_template(const Type__Value__container_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Type__Value__container_template::~Type__Value__container_template()
{
clean_up();
}

Type__Value__container_template& Type__Value__container_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Type__Value__container_template& Type__Value__container_template::operator=(const Type__Value__container& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Type__Value__container_template& Type__Value__container_template::operator=(const OPTIONAL<Type__Value__container>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Type__Value__container&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.Type_Value_container.");
}
return *this;
}

Type__Value__container_template& Type__Value__container_template::operator=(const Type__Value__container_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Type__Value__container_template::match(const Type__Value__container& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.msg__type().is_bound()) return FALSE;
if(!single_value->field_msg__type.match(other_value.msg__type(), legacy))return FALSE;
if(!other_value.msg__value().is_bound()) return FALSE;
if(!single_value->field_msg__value.match(other_value.msg__value(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.Type_Value_container.");
}
return FALSE;
}

boolean Type__Value__container_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_msg__type.is_bound()) return TRUE;
if (single_value->field_msg__value.is_bound()) return TRUE;
return FALSE;
}

boolean Type__Value__container_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_msg__type.is_value()) return FALSE;
if (!single_value->field_msg__value.is_value()) return FALSE;
return TRUE;
}

void Type__Value__container_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Type__Value__container Type__Value__container_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.Type_Value_container.");
Type__Value__container ret_val;
if (single_value->field_msg__type.is_bound()) {
ret_val.msg__type() = single_value->field_msg__type.valueof();
}
if (single_value->field_msg__value.is_bound()) {
ret_val.msg__value() = single_value->field_msg__value.valueof();
}
return ret_val;
}

void Type__Value__container_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.Type_Value_container.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Type__Value__container_template[list_length];
}

Type__Value__container_template& Type__Value__container_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.Type_Value_container.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.Type_Value_container.");
return value_list.list_value[list_index];
}

OCTETSTRING_template& Type__Value__container_template::msg__type()
{
set_specific();
return single_value->field_msg__type;
}

const OCTETSTRING_template& Type__Value__container_template::msg__type() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field msg_type of a non-specific template of type @TRI_interface_Types.Type_Value_container.");
return single_value->field_msg__type;
}

OCTETSTRING_template& Type__Value__container_template::msg__value()
{
set_specific();
return single_value->field_msg__value;
}

const OCTETSTRING_template& Type__Value__container_template::msg__value() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field msg_value of a non-specific template of type @TRI_interface_Types.Type_Value_container.");
return single_value->field_msg__value;
}

int Type__Value__container_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Type_Value_container which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.Type_Value_container containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Type_Value_container containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Type_Value_container containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Type_Value_container containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Type_Value_container containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.Type_Value_container.");
  }
  return 0;
}

void Type__Value__container_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ msg_type := ");
single_value->field_msg__type.log();
TTCN_Logger::log_event_str(", msg_value := ");
single_value->field_msg__value.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Type__Value__container_template::log_match(const Type__Value__container& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_msg__type.match(match_value.msg__type(), legacy)){
TTCN_Logger::log_logmatch_info(".msg_type");
single_value->field_msg__type.log_match(match_value.msg__type(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_msg__value.match(match_value.msg__value(), legacy)){
TTCN_Logger::log_logmatch_info(".msg_value");
single_value->field_msg__value.log_match(match_value.msg__value(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ msg_type := ");
single_value->field_msg__type.log_match(match_value.msg__type(), legacy);
TTCN_Logger::log_event_str(", msg_value := ");
single_value->field_msg__value.log_match(match_value.msg__value(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Type__Value__container_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_msg__type.encode_text(text_buf);
single_value->field_msg__value.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.Type_Value_container.");
}
}

void Type__Value__container_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_msg__type.decode_text(text_buf);
single_value->field_msg__value.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Type__Value__container_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.Type_Value_container.");
}
}

void Type__Value__container_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.Type_Value_container'");
    }
    if (strcmp("msg_type", param_field) == 0) {
      msg__type().set_param(param);
      return;
    } else if (strcmp("msg_value", param_field) == 0) {
      msg__value().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.Type_Value_container'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Type__Value__container_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.Type_Value_container has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) msg__type().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) msg__value().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg_type")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg__type().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg_value")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg__value().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Type_Value_container: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.Type_Value_container");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Type__Value__container_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.Type_Value_container'");
    }
    if (strcmp("msg_type", param_field) == 0) {
      return msg__type().get_param(param_name);
    } else if (strcmp("msg_value", param_field) == 0) {
      return msg__value().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Type_Value_container'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_msg__type = single_value->field_msg__type.get_param(param_name);
    mp_field_msg__type->set_id(new Module_Param_FieldName(mcopystr("msg_type")));
    mp->add_elem(mp_field_msg__type);
    Module_Param* mp_field_msg__value = single_value->field_msg__value.get_param(param_name);
    mp_field_msg__value->set_id(new Module_Param_FieldName(mcopystr("msg_value")));
    mp->add_elem(mp_field_msg__value);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Type__Value__container_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_msg__type.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Type_Value_container");
single_value->field_msg__value.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Type_Value_container");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Type_Value_container");
}

boolean Type__Value__container_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Type__Value__container_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Result::Result()
{
  bound_flag = FALSE;
}

Result::Result(const Result__value& par_result,
    const OPTIONAL<CHARSTRING>& par_result__string)
  :   field_result(par_result),
  field_result__string(par_result__string)
{
  bound_flag = TRUE;
}

Result::Result(const Result& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.Result.");
bound_flag = TRUE;
if (other_value.result().is_bound()) field_result = other_value.result();
else field_result.clean_up();
if (other_value.result__string().is_bound()) field_result__string = other_value.result__string();
else field_result__string.clean_up();
}

void Result::clean_up()
{
field_result.clean_up();
field_result__string.clean_up();
bound_flag = FALSE;
}

Result& Result::operator=(const Result& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.Result.");
  bound_flag = TRUE;
  if (other_value.result().is_bound()) field_result = other_value.result();
  else field_result.clean_up();
  if (other_value.result__string().is_bound()) field_result__string = other_value.result__string();
  else field_result__string.clean_up();
}
return *this;
}

boolean Result::operator==(const Result& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_result==other_value.field_result
  && field_result__string==other_value.field_result__string;
}

boolean Result::is_bound() const
{
if (bound_flag) return TRUE;
if(field_result.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_result__string.get_selection() || field_result__string.is_bound()) return TRUE;
return FALSE;
}
boolean Result::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_result.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_result__string.get_selection() && !field_result__string.is_value()) return FALSE;
return TRUE;
}
int Result::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.Result");
  int ret_val = 1;
  if (field_result__string.ispresent()) ret_val++;
  return ret_val;
}

void Result::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ result := ");
field_result.log();
TTCN_Logger::log_event_str(", result_string := ");
field_result__string.log();
TTCN_Logger::log_event_str(" }");
}

void Result::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.Result'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("result_string", param_field) == 0) {
      result__string().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.Result'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.Result has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) result().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) result__string().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result_string")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result__string().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Result: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.Result");
  }
}

Module_Param* Result::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.Result'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("result_string", param_field) == 0) {
      return result__string().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Result'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_result = field_result.get_param(param_name);
  mp_field_result->set_id(new Module_Param_FieldName(mcopystr("result")));
  mp->add_elem(mp_field_result);
  Module_Param* mp_field_result__string = field_result__string.get_param(param_name);
  mp_field_result__string->set_id(new Module_Param_FieldName(mcopystr("result_string")));
  mp->add_elem(mp_field_result__string);
  return mp;
  }

void Result::set_implicit_omit()
{
if (result().is_bound()) result().set_implicit_omit();
if (!result__string().is_bound()) result__string() = OMIT_VALUE;
else result__string().set_implicit_omit();
}

void Result::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.Result.");
field_result.encode_text(text_buf);
field_result__string.encode_text(text_buf);
}

void Result::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_result.decode_text(text_buf);
field_result__string.decode_text(text_buf);
}

void Result::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Result::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Result::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.Result.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "result");
    enc_len += field_result.JSON_encode(Result__value_descr_, p_tok);
  }

  if (field_result__string.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "result_string");
    enc_len += field_result__string.JSON_encode(CHARSTRING_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Result::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "result", name_len)) {
         int ret_val = field_result.JSON_decode(Result__value_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "result");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (13 == name_len && 0 == strncmp(fld_name, "result_string", name_len)) {
         int ret_val = field_result__string.JSON_decode(CHARSTRING_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "result_string");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_result.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "result");
    return JSON_ERROR_FATAL;
  }
if (!field_result__string.is_bound()) {
    field_result__string = OMIT_VALUE;
  }

  return dec_len;
}

struct Result_template::single_value_struct {
Result__value_template field_result;
CHARSTRING_template field_result__string;
};

void Result_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_result = ANY_VALUE;
single_value->field_result__string = ANY_OR_OMIT;
}
}
}

void Result_template::copy_value(const Result& other_value)
{
single_value = new single_value_struct;
if (other_value.result().is_bound()) {
  single_value->field_result = other_value.result();
} else {
  single_value->field_result.clean_up();
}
if (other_value.result__string().is_bound()) {
  if (other_value.result__string().ispresent()) single_value->field_result__string = other_value.result__string()();
  else single_value->field_result__string = OMIT_VALUE;
} else {
  single_value->field_result__string.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Result_template::copy_template(const Result_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.result().get_selection()) {
single_value->field_result = other_value.result();
} else {
single_value->field_result.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.result__string().get_selection()) {
single_value->field_result__string = other_value.result__string();
} else {
single_value->field_result__string.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Result_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.Result.");
break;
}
set_selection(other_value);
}

Result_template::Result_template()
{
}

Result_template::Result_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Result_template::Result_template(const Result& other_value)
{
copy_value(other_value);
}

Result_template::Result_template(const OPTIONAL<Result>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Result&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.Result from an unbound optional field.");
}
}

Result_template::Result_template(const Result_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Result_template::~Result_template()
{
clean_up();
}

Result_template& Result_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Result_template& Result_template::operator=(const Result& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Result_template& Result_template::operator=(const OPTIONAL<Result>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Result&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.Result.");
}
return *this;
}

Result_template& Result_template::operator=(const Result_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Result_template::match(const Result& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.result().is_bound()) return FALSE;
if(!single_value->field_result.match(other_value.result(), legacy))return FALSE;
if(!other_value.result__string().is_bound()) return FALSE;
if((other_value.result__string().ispresent() ? !single_value->field_result__string.match((const CHARSTRING&)other_value.result__string(), legacy) : !single_value->field_result__string.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.Result.");
}
return FALSE;
}

boolean Result_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_result.is_bound()) return TRUE;
if (single_value->field_result__string.is_omit() || single_value->field_result__string.is_bound()) return TRUE;
return FALSE;
}

boolean Result_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_result.is_value()) return FALSE;
if (!single_value->field_result__string.is_omit() && !single_value->field_result__string.is_value()) return FALSE;
return TRUE;
}

void Result_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Result Result_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.Result.");
Result ret_val;
if (single_value->field_result.is_bound()) {
ret_val.result() = single_value->field_result.valueof();
}
if (single_value->field_result__string.is_omit()) ret_val.result__string() = OMIT_VALUE;
else if (single_value->field_result__string.is_bound()) {
ret_val.result__string() = single_value->field_result__string.valueof();
}
return ret_val;
}

void Result_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.Result.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Result_template[list_length];
}

Result_template& Result_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.Result.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.Result.");
return value_list.list_value[list_index];
}

Result__value_template& Result_template::result()
{
set_specific();
return single_value->field_result;
}

const Result__value_template& Result_template::result() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field result of a non-specific template of type @TRI_interface_Types.Result.");
return single_value->field_result;
}

CHARSTRING_template& Result_template::result__string()
{
set_specific();
return single_value->field_result__string;
}

const CHARSTRING_template& Result_template::result__string() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field result_string of a non-specific template of type @TRI_interface_Types.Result.");
return single_value->field_result__string;
}

int Result_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Result which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_result__string.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.Result containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Result containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Result containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Result containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Result containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.Result.");
  }
  return 0;
}

void Result_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ result := ");
single_value->field_result.log();
TTCN_Logger::log_event_str(", result_string := ");
single_value->field_result__string.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Result_template::log_match(const Result& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_result.match(match_value.result(), legacy)){
TTCN_Logger::log_logmatch_info(".result");
single_value->field_result.log_match(match_value.result(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.result__string().ispresent()){
if(!single_value->field_result__string.match(match_value.result__string(), legacy)){
TTCN_Logger::log_logmatch_info(".result_string");
single_value->field_result__string.log_match(match_value.result__string(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_result__string.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".result_string := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_result__string.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ result := ");
single_value->field_result.log_match(match_value.result(), legacy);
TTCN_Logger::log_event_str(", result_string := ");
if (match_value.result__string().ispresent()) single_value->field_result__string.log_match(match_value.result__string(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_result__string.log();
if (single_value->field_result__string.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Result_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_result.encode_text(text_buf);
single_value->field_result__string.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.Result.");
}
}

void Result_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_result.decode_text(text_buf);
single_value->field_result__string.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Result_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.Result.");
}
}

void Result_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.Result'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("result_string", param_field) == 0) {
      result__string().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.Result'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Result_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.Result has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) result().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) result__string().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "result_string")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          result__string().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Result: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.Result");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Result_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.Result'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("result_string", param_field) == 0) {
      return result__string().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Result'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_result = single_value->field_result.get_param(param_name);
    mp_field_result->set_id(new Module_Param_FieldName(mcopystr("result")));
    mp->add_elem(mp_field_result);
    Module_Param* mp_field_result__string = single_value->field_result__string.get_param(param_name);
    mp_field_result__string->set_id(new Module_Param_FieldName(mcopystr("result_string")));
    mp->add_elem(mp_field_result__string);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Result_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_result.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Result");
single_value->field_result__string.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Result");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Result");
}

boolean Result_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Result_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Register::Register()
{
  bound_flag = FALSE;
}

Register::Register(const TriPortIdType& par_portid,
    const OPTIONAL<Type__info__list>& par_type__list)
  :   field_portid(par_portid),
  field_type__list(par_type__list)
{
  bound_flag = TRUE;
}

Register::Register(const Register& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.Register.");
bound_flag = TRUE;
if (other_value.portid().is_bound()) field_portid = other_value.portid();
else field_portid.clean_up();
if (other_value.type__list().is_bound()) field_type__list = other_value.type__list();
else field_type__list.clean_up();
}

void Register::clean_up()
{
field_portid.clean_up();
field_type__list.clean_up();
bound_flag = FALSE;
}

Register& Register::operator=(const Register& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.Register.");
  bound_flag = TRUE;
  if (other_value.portid().is_bound()) field_portid = other_value.portid();
  else field_portid.clean_up();
  if (other_value.type__list().is_bound()) field_type__list = other_value.type__list();
  else field_type__list.clean_up();
}
return *this;
}

boolean Register::operator==(const Register& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_portid==other_value.field_portid
  && field_type__list==other_value.field_type__list;
}

boolean Register::is_bound() const
{
if (bound_flag) return TRUE;
if(field_portid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_type__list.get_selection() || field_type__list.is_bound()) return TRUE;
return FALSE;
}
boolean Register::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_portid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_type__list.get_selection() && !field_type__list.is_value()) return FALSE;
return TRUE;
}
int Register::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.Register");
  int ret_val = 1;
  if (field_type__list.ispresent()) ret_val++;
  return ret_val;
}

void Register::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ portid := ");
field_portid.log();
TTCN_Logger::log_event_str(", type_list := ");
field_type__list.log();
TTCN_Logger::log_event_str(" }");
}

void Register::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.Register'");
    }
    if (strcmp("portid", param_field) == 0) {
      portid().set_param(param);
      return;
    } else if (strcmp("type_list", param_field) == 0) {
      type__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.Register'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.Register has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) portid().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) type__list().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Register: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.Register");
  }
}

Module_Param* Register::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.Register'");
    }
    if (strcmp("portid", param_field) == 0) {
      return portid().get_param(param_name);
    } else if (strcmp("type_list", param_field) == 0) {
      return type__list().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Register'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_portid = field_portid.get_param(param_name);
  mp_field_portid->set_id(new Module_Param_FieldName(mcopystr("portid")));
  mp->add_elem(mp_field_portid);
  Module_Param* mp_field_type__list = field_type__list.get_param(param_name);
  mp_field_type__list->set_id(new Module_Param_FieldName(mcopystr("type_list")));
  mp->add_elem(mp_field_type__list);
  return mp;
  }

void Register::set_implicit_omit()
{
if (portid().is_bound()) portid().set_implicit_omit();
if (!type__list().is_bound()) type__list() = OMIT_VALUE;
else type__list().set_implicit_omit();
}

void Register::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.Register.");
field_portid.encode_text(text_buf);
field_type__list.encode_text(text_buf);
}

void Register::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_portid.decode_text(text_buf);
field_type__list.decode_text(text_buf);
}

void Register::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Register::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Register::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.Register.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "portid");
    enc_len += field_portid.JSON_encode(TriPortIdType_descr_, p_tok);
  }

  if (field_type__list.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_list");
    enc_len += field_type__list.JSON_encode(Type__info__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Register::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "portid", name_len)) {
         int ret_val = field_portid.JSON_decode(TriPortIdType_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "portid");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (9 == name_len && 0 == strncmp(fld_name, "type_list", name_len)) {
         int ret_val = field_type__list.JSON_decode(Type__info__list_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_list");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_portid.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "portid");
    return JSON_ERROR_FATAL;
  }
if (!field_type__list.is_bound()) {
    field_type__list = OMIT_VALUE;
  }

  return dec_len;
}

struct Register_template::single_value_struct {
TriPortIdType_template field_portid;
Type__info__list_template field_type__list;
};

void Register_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_portid = ANY_VALUE;
single_value->field_type__list = ANY_OR_OMIT;
}
}
}

void Register_template::copy_value(const Register& other_value)
{
single_value = new single_value_struct;
if (other_value.portid().is_bound()) {
  single_value->field_portid = other_value.portid();
} else {
  single_value->field_portid.clean_up();
}
if (other_value.type__list().is_bound()) {
  if (other_value.type__list().ispresent()) single_value->field_type__list = other_value.type__list()();
  else single_value->field_type__list = OMIT_VALUE;
} else {
  single_value->field_type__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Register_template::copy_template(const Register_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.portid().get_selection()) {
single_value->field_portid = other_value.portid();
} else {
single_value->field_portid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__list().get_selection()) {
single_value->field_type__list = other_value.type__list();
} else {
single_value->field_type__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Register_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.Register.");
break;
}
set_selection(other_value);
}

Register_template::Register_template()
{
}

Register_template::Register_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Register_template::Register_template(const Register& other_value)
{
copy_value(other_value);
}

Register_template::Register_template(const OPTIONAL<Register>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Register&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.Register from an unbound optional field.");
}
}

Register_template::Register_template(const Register_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Register_template::~Register_template()
{
clean_up();
}

Register_template& Register_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Register_template& Register_template::operator=(const Register& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Register_template& Register_template::operator=(const OPTIONAL<Register>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Register&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.Register.");
}
return *this;
}

Register_template& Register_template::operator=(const Register_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Register_template::match(const Register& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.portid().is_bound()) return FALSE;
if(!single_value->field_portid.match(other_value.portid(), legacy))return FALSE;
if(!other_value.type__list().is_bound()) return FALSE;
if((other_value.type__list().ispresent() ? !single_value->field_type__list.match((const Type__info__list&)other_value.type__list(), legacy) : !single_value->field_type__list.match_omit(legacy)))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.Register.");
}
return FALSE;
}

boolean Register_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_portid.is_bound()) return TRUE;
if (single_value->field_type__list.is_omit() || single_value->field_type__list.is_bound()) return TRUE;
return FALSE;
}

boolean Register_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_portid.is_value()) return FALSE;
if (!single_value->field_type__list.is_omit() && !single_value->field_type__list.is_value()) return FALSE;
return TRUE;
}

void Register_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Register Register_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.Register.");
Register ret_val;
if (single_value->field_portid.is_bound()) {
ret_val.portid() = single_value->field_portid.valueof();
}
if (single_value->field_type__list.is_omit()) ret_val.type__list() = OMIT_VALUE;
else if (single_value->field_type__list.is_bound()) {
ret_val.type__list() = single_value->field_type__list.valueof();
}
return ret_val;
}

void Register_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.Register.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Register_template[list_length];
}

Register_template& Register_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.Register.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.Register.");
return value_list.list_value[list_index];
}

TriPortIdType_template& Register_template::portid()
{
set_specific();
return single_value->field_portid;
}

const TriPortIdType_template& Register_template::portid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field portid of a non-specific template of type @TRI_interface_Types.Register.");
return single_value->field_portid;
}

Type__info__list_template& Register_template::type__list()
{
set_specific();
return single_value->field_type__list;
}

const Type__info__list_template& Register_template::type__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_list of a non-specific template of type @TRI_interface_Types.Register.");
return single_value->field_type__list;
}

int Register_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Register which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_type__list.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.Register containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Register containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Register containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Register containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Register containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.Register.");
  }
  return 0;
}

void Register_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ portid := ");
single_value->field_portid.log();
TTCN_Logger::log_event_str(", type_list := ");
single_value->field_type__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Register_template::log_match(const Register& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_portid.match(match_value.portid(), legacy)){
TTCN_Logger::log_logmatch_info(".portid");
single_value->field_portid.log_match(match_value.portid(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.type__list().ispresent()){
if(!single_value->field_type__list.match(match_value.type__list(), legacy)){
TTCN_Logger::log_logmatch_info(".type_list");
single_value->field_type__list.log_match(match_value.type__list(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_type__list.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".type_list := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_type__list.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ portid := ");
single_value->field_portid.log_match(match_value.portid(), legacy);
TTCN_Logger::log_event_str(", type_list := ");
if (match_value.type__list().ispresent()) single_value->field_type__list.log_match(match_value.type__list(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_type__list.log();
if (single_value->field_type__list.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Register_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_portid.encode_text(text_buf);
single_value->field_type__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.Register.");
}
}

void Register_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_portid.decode_text(text_buf);
single_value->field_type__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Register_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.Register.");
}
}

void Register_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.Register'");
    }
    if (strcmp("portid", param_field) == 0) {
      portid().set_param(param);
      return;
    } else if (strcmp("type_list", param_field) == 0) {
      type__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.Register'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Register_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.Register has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) portid().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) type__list().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Register: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.Register");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Register_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.Register'");
    }
    if (strcmp("portid", param_field) == 0) {
      return portid().get_param(param_name);
    } else if (strcmp("type_list", param_field) == 0) {
      return type__list().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Register'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_portid = single_value->field_portid.get_param(param_name);
    mp_field_portid->set_id(new Module_Param_FieldName(mcopystr("portid")));
    mp->add_elem(mp_field_portid);
    Module_Param* mp_field_type__list = single_value->field_type__list.get_param(param_name);
    mp_field_type__list->set_id(new Module_Param_FieldName(mcopystr("type_list")));
    mp->add_elem(mp_field_type__list);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Register_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_portid.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Register");
single_value->field_type__list.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Register");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Register");
}

boolean Register_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Register_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Map::Map()
{
  bound_flag = FALSE;
}

Map::Map(const TriPortIdType& par_portid)
  :   field_portid(par_portid)
{
  bound_flag = TRUE;
}

Map::Map(const Map& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.Map.");
bound_flag = TRUE;
if (other_value.portid().is_bound()) field_portid = other_value.portid();
else field_portid.clean_up();
}

void Map::clean_up()
{
field_portid.clean_up();
bound_flag = FALSE;
}

Map& Map::operator=(const Map& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.Map.");
  bound_flag = TRUE;
  if (other_value.portid().is_bound()) field_portid = other_value.portid();
  else field_portid.clean_up();
}
return *this;
}

boolean Map::operator==(const Map& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_portid==other_value.field_portid;
}

boolean Map::is_bound() const
{
if (bound_flag) return TRUE;
if(field_portid.is_bound()) return TRUE;
return FALSE;
}
boolean Map::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_portid.is_value()) return FALSE;
return TRUE;
}
int Map::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.Map");
  return 1;
}

void Map::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ portid := ");
field_portid.log();
TTCN_Logger::log_event_str(" }");
}

void Map::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.Map'");
    }
    if (strcmp("portid", param_field) == 0) {
      portid().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.Map'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.Map has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) portid().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Map: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.Map");
  }
}

Module_Param* Map::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.Map'");
    }
    if (strcmp("portid", param_field) == 0) {
      return portid().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Map'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_portid = field_portid.get_param(param_name);
  mp_field_portid->set_id(new Module_Param_FieldName(mcopystr("portid")));
  mp->add_elem(mp_field_portid);
  return mp;
  }

void Map::set_implicit_omit()
{
if (portid().is_bound()) portid().set_implicit_omit();
}

void Map::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.Map.");
field_portid.encode_text(text_buf);
}

void Map::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_portid.decode_text(text_buf);
}

void Map::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Map::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Map::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.Map.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "portid");
    enc_len += field_portid.JSON_encode(TriPortIdType_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Map::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "portid", name_len)) {
         int ret_val = field_portid.JSON_decode(TriPortIdType_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "portid");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_portid.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "portid");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Map_template::single_value_struct {
TriPortIdType_template field_portid;
};

void Map_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_portid = ANY_VALUE;
}
}
}

void Map_template::copy_value(const Map& other_value)
{
single_value = new single_value_struct;
if (other_value.portid().is_bound()) {
  single_value->field_portid = other_value.portid();
} else {
  single_value->field_portid.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Map_template::copy_template(const Map_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.portid().get_selection()) {
single_value->field_portid = other_value.portid();
} else {
single_value->field_portid.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Map_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.Map.");
break;
}
set_selection(other_value);
}

Map_template::Map_template()
{
}

Map_template::Map_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Map_template::Map_template(const Map& other_value)
{
copy_value(other_value);
}

Map_template::Map_template(const OPTIONAL<Map>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Map&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.Map from an unbound optional field.");
}
}

Map_template::Map_template(const Map_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Map_template::~Map_template()
{
clean_up();
}

Map_template& Map_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Map_template& Map_template::operator=(const Map& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Map_template& Map_template::operator=(const OPTIONAL<Map>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Map&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.Map.");
}
return *this;
}

Map_template& Map_template::operator=(const Map_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Map_template::match(const Map& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.portid().is_bound()) return FALSE;
if(!single_value->field_portid.match(other_value.portid(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.Map.");
}
return FALSE;
}

boolean Map_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_portid.is_bound()) return TRUE;
return FALSE;
}

boolean Map_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_portid.is_value()) return FALSE;
return TRUE;
}

void Map_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Map Map_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.Map.");
Map ret_val;
if (single_value->field_portid.is_bound()) {
ret_val.portid() = single_value->field_portid.valueof();
}
return ret_val;
}

void Map_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.Map.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Map_template[list_length];
}

Map_template& Map_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.Map.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.Map.");
return value_list.list_value[list_index];
}

TriPortIdType_template& Map_template::portid()
{
set_specific();
return single_value->field_portid;
}

const TriPortIdType_template& Map_template::portid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field portid of a non-specific template of type @TRI_interface_Types.Map.");
return single_value->field_portid;
}

int Map_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Map which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.Map containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Map containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Map containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Map containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.Map containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.Map.");
  }
  return 0;
}

void Map_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ portid := ");
single_value->field_portid.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Map_template::log_match(const Map& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_portid.match(match_value.portid(), legacy)){
TTCN_Logger::log_logmatch_info(".portid");
single_value->field_portid.log_match(match_value.portid(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ portid := ");
single_value->field_portid.log_match(match_value.portid(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Map_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_portid.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.Map.");
}
}

void Map_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_portid.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Map_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.Map.");
}
}

void Map_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.Map'");
    }
    if (strcmp("portid", param_field) == 0) {
      portid().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.Map'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Map_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (1<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.Map has 1 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) portid().set_param(*mp->get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.Map: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.Map");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Map_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.Map'");
    }
    if (strcmp("portid", param_field) == 0) {
      return portid().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.Map'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_portid = single_value->field_portid.get_param(param_name);
    mp_field_portid->set_id(new Module_Param_FieldName(mcopystr("portid")));
    mp->add_elem(mp_field_portid);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Map_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_portid.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Map");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Map");
}

boolean Map_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Map_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

UnMap::UnMap()
{
bound_flag = FALSE;
}

UnMap::UnMap(null_type)
{
bound_flag = TRUE;
}

UnMap::UnMap(const UnMap& other_value)
{
other_value.must_bound("Copying an unbound value of type @TRI_interface_Types.UnMap.");
bound_flag = TRUE;
}

UnMap& UnMap::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

UnMap& UnMap::operator=(const UnMap& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @TRI_interface_Types.UnMap.");
bound_flag = TRUE;
return *this;
}

boolean UnMap::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @TRI_interface_Types.UnMap.");
return TRUE;
}

boolean UnMap::operator==(const UnMap& other_value) const
{
must_bound("Comparison of an unbound value of type @TRI_interface_Types.UnMap.");
other_value.must_bound("Comparison of an unbound value of type @TRI_interface_Types.UnMap.");
return TRUE;
}

void UnMap::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void UnMap::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  if (mp->get_type()!=Module_Param::MP_Value_List || mp->get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@TRI_interface_Types.UnMap");
  }
  bound_flag = TRUE;
}

Module_Param* UnMap::get_param(Module_Param_Name& /* param_name */) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  return new Module_Param_Value_List();
}

void UnMap::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @TRI_interface_Types.UnMap.");
}

void UnMap::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void UnMap::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void UnMap::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int UnMap::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.UnMap.");
    return -1;
  }

  return p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL) + 
    p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
}

int UnMap::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  bound_flag = true;

  return dec_len;
}

void UnMap_template::copy_template(const UnMap_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UnMap_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.UnMap.");
break;
}
}

UnMap_template::UnMap_template()
{
}

UnMap_template::UnMap_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

UnMap_template::UnMap_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

UnMap_template::UnMap_template(const UnMap& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @TRI_interface_Types.UnMap.");
}

UnMap_template::UnMap_template(const OPTIONAL<UnMap>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.UnMap from an unbound optional field.");
}
}

UnMap_template::UnMap_template(const UnMap_template& other_value)
: Base_Template(){
copy_template(other_value);
}

UnMap_template::~UnMap_template()
{
clean_up();
}

void UnMap_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

UnMap_template& UnMap_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UnMap_template& UnMap_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

UnMap_template& UnMap_template::operator=(const UnMap& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @TRI_interface_Types.UnMap to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

UnMap_template& UnMap_template::operator=(const OPTIONAL<UnMap>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.UnMap.");
}
return *this;
}

UnMap_template& UnMap_template::operator=(const UnMap_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean UnMap_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.UnMap.");
}
return FALSE;
}

boolean UnMap_template::match(const UnMap& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;return match(NULL_VALUE);
}

UnMap UnMap_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @TRI_interface_Types.UnMap.");
return NULL_VALUE;
}

void UnMap_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.UnMap.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new UnMap_template[list_length];
}

UnMap_template& UnMap_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.UnMap.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.UnMap.");
return value_list.list_value[list_index];
}

void UnMap_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void UnMap_template::log_match(const UnMap& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void UnMap_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.UnMap.");
}
}

void UnMap_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UnMap_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.UnMap.");
}
}

void UnMap_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UnMap_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (mp->get_size()>0) param.type_error("empty record/set template", "@TRI_interface_Types.UnMap");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@TRI_interface_Types.UnMap");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* UnMap_template::get_param(Module_Param_Name& param_name) const
{
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE:
    mp = new Module_Param_Value_List();
    break;
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void UnMap_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.UnMap");
}

boolean UnMap_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UnMap_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

Unregister::Unregister()
{
bound_flag = FALSE;
}

Unregister::Unregister(null_type)
{
bound_flag = TRUE;
}

Unregister::Unregister(const Unregister& other_value)
{
other_value.must_bound("Copying an unbound value of type @TRI_interface_Types.Unregister.");
bound_flag = TRUE;
}

Unregister& Unregister::operator=(null_type)
{
bound_flag = TRUE;
return *this;
}

Unregister& Unregister::operator=(const Unregister& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @TRI_interface_Types.Unregister.");
bound_flag = TRUE;
return *this;
}

boolean Unregister::operator==(null_type) const
{
must_bound("Comparison of an unbound value of type @TRI_interface_Types.Unregister.");
return TRUE;
}

boolean Unregister::operator==(const Unregister& other_value) const
{
must_bound("Comparison of an unbound value of type @TRI_interface_Types.Unregister.");
other_value.must_bound("Comparison of an unbound value of type @TRI_interface_Types.Unregister.");
return TRUE;
}

void Unregister::log() const
{
if (bound_flag) TTCN_Logger::log_event_str("{ }");
else TTCN_Logger::log_event_unbound();
}

void Unregister::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "empty record/set value (i.e. { })");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  if (mp->get_type()!=Module_Param::MP_Value_List || mp->get_size()>0) {
    param.type_error("empty record/set value (i.e. { })", "@TRI_interface_Types.Unregister");
  }
  bound_flag = TRUE;
}

Module_Param* Unregister::get_param(Module_Param_Name& /* param_name */) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  return new Module_Param_Value_List();
}

void Unregister::encode_text(Text_Buf& /*text_buf*/) const
{
must_bound("Text encoder: Encoding an unbound value of type @TRI_interface_Types.Unregister.");
}

void Unregister::decode_text(Text_Buf& /*text_buf*/)
{
bound_flag = TRUE;
}

void Unregister::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Unregister::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Unregister::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.Unregister.");
    return -1;
  }

  return p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL) + 
    p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
}

int Unregister::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  bound_flag = true;

  return dec_len;
}

void Unregister_template::copy_template(const Unregister_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Unregister_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.Unregister.");
break;
}
}

Unregister_template::Unregister_template()
{
}

Unregister_template::Unregister_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Unregister_template::Unregister_template(null_type)
 : Base_Template(SPECIFIC_VALUE)
{
}

Unregister_template::Unregister_template(const Unregister& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
other_value.must_bound("Creating a template from an unbound value of type @TRI_interface_Types.Unregister.");
}

Unregister_template::Unregister_template(const OPTIONAL<Unregister>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.Unregister from an unbound optional field.");
}
}

Unregister_template::Unregister_template(const Unregister_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Unregister_template::~Unregister_template()
{
clean_up();
}

void Unregister_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST)
delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Unregister_template& Unregister_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Unregister_template& Unregister_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

Unregister_template& Unregister_template::operator=(const Unregister& other_value)
{
other_value.must_bound("Assignment of an unbound value of type @TRI_interface_Types.Unregister to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
return *this;
}

Unregister_template& Unregister_template::operator=(const OPTIONAL<Unregister>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.Unregister.");
}
return *this;
}

Unregister_template& Unregister_template::operator=(const Unregister_template& other_value)
{
if (&other_value != this) {
clean_up();
set_selection(other_value);
}
return *this;
}

boolean Unregister_template::match(null_type other_value,boolean) const
{
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
return TRUE;
case OMIT_VALUE:
return FALSE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.Unregister.");
}
return FALSE;
}

boolean Unregister_template::match(const Unregister& other_value, boolean) const
{
if (!other_value.is_bound()) return FALSE;return match(NULL_VALUE);
}

Unregister Unregister_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @TRI_interface_Types.Unregister.");
return NULL_VALUE;
}

void Unregister_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.Unregister.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Unregister_template[list_length];
}

Unregister_template& Unregister_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.Unregister.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.Unregister.");
return value_list.list_value[list_index];
}

void Unregister_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Unregister_template::log_match(const Unregister& match_value, boolean) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Unregister_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.Unregister.");
}
}

void Unregister_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
case SPECIFIC_VALUE:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Unregister_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.Unregister.");
}
}

void Unregister_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "empty record/set template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Unregister_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (mp->get_size()>0) param.type_error("empty record/set template", "@TRI_interface_Types.Unregister");
    *this = NULL_VALUE;
    break;
  default:
    param.type_error("empty record/set template", "@TRI_interface_Types.Unregister");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Unregister_template::get_param(Module_Param_Name& param_name) const
{
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE:
    mp = new Module_Param_Value_List();
    break;
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Unregister_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Unregister");
}

boolean Unregister_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Unregister_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

SendMsg::SendMsg()
{
  bound_flag = FALSE;
}

SendMsg::SendMsg(const OPTIONAL<TriAddressType>& par_addr,
    const msg__data__container& par_data)
  :   field_addr(par_addr),
  field_data(par_data)
{
  bound_flag = TRUE;
}

SendMsg::SendMsg(const SendMsg& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.SendMsg.");
bound_flag = TRUE;
if (other_value.addr().is_bound()) field_addr = other_value.addr();
else field_addr.clean_up();
if (other_value.data().is_bound()) field_data = other_value.data();
else field_data.clean_up();
}

void SendMsg::clean_up()
{
field_addr.clean_up();
field_data.clean_up();
bound_flag = FALSE;
}

SendMsg& SendMsg::operator=(const SendMsg& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.SendMsg.");
  bound_flag = TRUE;
  if (other_value.addr().is_bound()) field_addr = other_value.addr();
  else field_addr.clean_up();
  if (other_value.data().is_bound()) field_data = other_value.data();
  else field_data.clean_up();
}
return *this;
}

boolean SendMsg::operator==(const SendMsg& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_addr==other_value.field_addr
  && field_data==other_value.field_data;
}

boolean SendMsg::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_addr.get_selection() || field_addr.is_bound()) return TRUE;
if(field_data.is_bound()) return TRUE;
return FALSE;
}
boolean SendMsg::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_addr.get_selection() && !field_addr.is_value()) return FALSE;
if(!field_data.is_value()) return FALSE;
return TRUE;
}
int SendMsg::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.SendMsg");
  int ret_val = 1;
  if (field_addr.ispresent()) ret_val++;
  return ret_val;
}

void SendMsg::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ addr := ");
field_addr.log();
TTCN_Logger::log_event_str(", data := ");
field_data.log();
TTCN_Logger::log_event_str(" }");
}

void SendMsg::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.SendMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      addr().set_param(param);
      return;
    } else if (strcmp("data", param_field) == 0) {
      data().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.SendMsg'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.SendMsg has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) addr().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) data().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "addr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          addr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.SendMsg: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.SendMsg");
  }
}

Module_Param* SendMsg::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.SendMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      return addr().get_param(param_name);
    } else if (strcmp("data", param_field) == 0) {
      return data().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.SendMsg'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_addr = field_addr.get_param(param_name);
  mp_field_addr->set_id(new Module_Param_FieldName(mcopystr("addr")));
  mp->add_elem(mp_field_addr);
  Module_Param* mp_field_data = field_data.get_param(param_name);
  mp_field_data->set_id(new Module_Param_FieldName(mcopystr("data")));
  mp->add_elem(mp_field_data);
  return mp;
  }

void SendMsg::set_implicit_omit()
{
if (!addr().is_bound()) addr() = OMIT_VALUE;
else addr().set_implicit_omit();
if (data().is_bound()) data().set_implicit_omit();
}

void SendMsg::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.SendMsg.");
field_addr.encode_text(text_buf);
field_data.encode_text(text_buf);
}

void SendMsg::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_addr.decode_text(text_buf);
field_data.decode_text(text_buf);
}

void SendMsg::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void SendMsg::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int SendMsg::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.SendMsg.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_addr.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "addr");
    enc_len += field_addr.JSON_encode(TriAddressType_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "data");
    enc_len += field_data.JSON_encode(msg__data__container_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int SendMsg::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "addr", name_len)) {
         int ret_val = field_addr.JSON_decode(TriAddressType_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "addr");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (4 == name_len && 0 == strncmp(fld_name, "data", name_len)) {
         int ret_val = field_data.JSON_decode(msg__data__container_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "data");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_addr.is_bound()) {
    field_addr = OMIT_VALUE;
  }
if (!field_data.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "data");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct SendMsg_template::single_value_struct {
TriAddressType_template field_addr;
msg__data__container_template field_data;
};

void SendMsg_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_addr = ANY_OR_OMIT;
single_value->field_data = ANY_VALUE;
}
}
}

void SendMsg_template::copy_value(const SendMsg& other_value)
{
single_value = new single_value_struct;
if (other_value.addr().is_bound()) {
  if (other_value.addr().ispresent()) single_value->field_addr = other_value.addr()();
  else single_value->field_addr = OMIT_VALUE;
} else {
  single_value->field_addr.clean_up();
}
if (other_value.data().is_bound()) {
  single_value->field_data = other_value.data();
} else {
  single_value->field_data.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void SendMsg_template::copy_template(const SendMsg_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.addr().get_selection()) {
single_value->field_addr = other_value.addr();
} else {
single_value->field_addr.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.data().get_selection()) {
single_value->field_data = other_value.data();
} else {
single_value->field_data.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new SendMsg_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.SendMsg.");
break;
}
set_selection(other_value);
}

SendMsg_template::SendMsg_template()
{
}

SendMsg_template::SendMsg_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

SendMsg_template::SendMsg_template(const SendMsg& other_value)
{
copy_value(other_value);
}

SendMsg_template::SendMsg_template(const OPTIONAL<SendMsg>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const SendMsg&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.SendMsg from an unbound optional field.");
}
}

SendMsg_template::SendMsg_template(const SendMsg_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

SendMsg_template::~SendMsg_template()
{
clean_up();
}

SendMsg_template& SendMsg_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

SendMsg_template& SendMsg_template::operator=(const SendMsg& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

SendMsg_template& SendMsg_template::operator=(const OPTIONAL<SendMsg>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const SendMsg&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.SendMsg.");
}
return *this;
}

SendMsg_template& SendMsg_template::operator=(const SendMsg_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean SendMsg_template::match(const SendMsg& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.addr().is_bound()) return FALSE;
if((other_value.addr().ispresent() ? !single_value->field_addr.match((const TriAddressType&)other_value.addr(), legacy) : !single_value->field_addr.match_omit(legacy)))return FALSE;
if(!other_value.data().is_bound()) return FALSE;
if(!single_value->field_data.match(other_value.data(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.SendMsg.");
}
return FALSE;
}

boolean SendMsg_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_addr.is_omit() || single_value->field_addr.is_bound()) return TRUE;
if (single_value->field_data.is_bound()) return TRUE;
return FALSE;
}

boolean SendMsg_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_addr.is_omit() && !single_value->field_addr.is_value()) return FALSE;
if (!single_value->field_data.is_value()) return FALSE;
return TRUE;
}

void SendMsg_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

SendMsg SendMsg_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.SendMsg.");
SendMsg ret_val;
if (single_value->field_addr.is_omit()) ret_val.addr() = OMIT_VALUE;
else if (single_value->field_addr.is_bound()) {
ret_val.addr() = single_value->field_addr.valueof();
}
if (single_value->field_data.is_bound()) {
ret_val.data() = single_value->field_data.valueof();
}
return ret_val;
}

void SendMsg_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.SendMsg.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new SendMsg_template[list_length];
}

SendMsg_template& SendMsg_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.SendMsg.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.SendMsg.");
return value_list.list_value[list_index];
}

TriAddressType_template& SendMsg_template::addr()
{
set_specific();
return single_value->field_addr;
}

const TriAddressType_template& SendMsg_template::addr() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field addr of a non-specific template of type @TRI_interface_Types.SendMsg.");
return single_value->field_addr;
}

msg__data__container_template& SendMsg_template::data()
{
set_specific();
return single_value->field_data;
}

const msg__data__container_template& SendMsg_template::data() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field data of a non-specific template of type @TRI_interface_Types.SendMsg.");
return single_value->field_data;
}

int SendMsg_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.SendMsg which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_addr.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.SendMsg containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.SendMsg containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.SendMsg containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.SendMsg containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.SendMsg containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.SendMsg.");
  }
  return 0;
}

void SendMsg_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ addr := ");
single_value->field_addr.log();
TTCN_Logger::log_event_str(", data := ");
single_value->field_data.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void SendMsg_template::log_match(const SendMsg& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.addr().ispresent()){
if(!single_value->field_addr.match(match_value.addr(), legacy)){
TTCN_Logger::log_logmatch_info(".addr");
single_value->field_addr.log_match(match_value.addr(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_addr.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".addr := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_addr.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_data.match(match_value.data(), legacy)){
TTCN_Logger::log_logmatch_info(".data");
single_value->field_data.log_match(match_value.data(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ addr := ");
if (match_value.addr().ispresent()) single_value->field_addr.log_match(match_value.addr(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_addr.log();
if (single_value->field_addr.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", data := ");
single_value->field_data.log_match(match_value.data(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void SendMsg_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_addr.encode_text(text_buf);
single_value->field_data.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.SendMsg.");
}
}

void SendMsg_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_addr.decode_text(text_buf);
single_value->field_data.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new SendMsg_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.SendMsg.");
}
}

void SendMsg_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.SendMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      addr().set_param(param);
      return;
    } else if (strcmp("data", param_field) == 0) {
      data().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.SendMsg'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    SendMsg_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.SendMsg has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) addr().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) data().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "addr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          addr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.SendMsg: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.SendMsg");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* SendMsg_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.SendMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      return addr().get_param(param_name);
    } else if (strcmp("data", param_field) == 0) {
      return data().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.SendMsg'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_addr = single_value->field_addr.get_param(param_name);
    mp_field_addr->set_id(new Module_Param_FieldName(mcopystr("addr")));
    mp->add_elem(mp_field_addr);
    Module_Param* mp_field_data = single_value->field_data.get_param(param_name);
    mp_field_data->set_id(new Module_Param_FieldName(mcopystr("data")));
    mp->add_elem(mp_field_data);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void SendMsg_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_addr.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.SendMsg");
single_value->field_data.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.SendMsg");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.SendMsg");
}

boolean SendMsg_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean SendMsg_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

EnqueueMsg::EnqueueMsg()
{
  bound_flag = FALSE;
}

EnqueueMsg::EnqueueMsg(const OPTIONAL<TriAddressType>& par_addr,
    const msg__data__container& par_data)
  :   field_addr(par_addr),
  field_data(par_data)
{
  bound_flag = TRUE;
}

EnqueueMsg::EnqueueMsg(const EnqueueMsg& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.EnqueueMsg.");
bound_flag = TRUE;
if (other_value.addr().is_bound()) field_addr = other_value.addr();
else field_addr.clean_up();
if (other_value.data().is_bound()) field_data = other_value.data();
else field_data.clean_up();
}

void EnqueueMsg::clean_up()
{
field_addr.clean_up();
field_data.clean_up();
bound_flag = FALSE;
}

EnqueueMsg& EnqueueMsg::operator=(const EnqueueMsg& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.EnqueueMsg.");
  bound_flag = TRUE;
  if (other_value.addr().is_bound()) field_addr = other_value.addr();
  else field_addr.clean_up();
  if (other_value.data().is_bound()) field_data = other_value.data();
  else field_data.clean_up();
}
return *this;
}

boolean EnqueueMsg::operator==(const EnqueueMsg& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_addr==other_value.field_addr
  && field_data==other_value.field_data;
}

boolean EnqueueMsg::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_addr.get_selection() || field_addr.is_bound()) return TRUE;
if(field_data.is_bound()) return TRUE;
return FALSE;
}
boolean EnqueueMsg::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_addr.get_selection() && !field_addr.is_value()) return FALSE;
if(!field_data.is_value()) return FALSE;
return TRUE;
}
int EnqueueMsg::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.EnqueueMsg");
  int ret_val = 1;
  if (field_addr.ispresent()) ret_val++;
  return ret_val;
}

void EnqueueMsg::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ addr := ");
field_addr.log();
TTCN_Logger::log_event_str(", data := ");
field_data.log();
TTCN_Logger::log_event_str(" }");
}

void EnqueueMsg::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.EnqueueMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      addr().set_param(param);
      return;
    } else if (strcmp("data", param_field) == 0) {
      data().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.EnqueueMsg'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.EnqueueMsg has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) addr().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) data().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "addr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          addr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.EnqueueMsg: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.EnqueueMsg");
  }
}

Module_Param* EnqueueMsg::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.EnqueueMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      return addr().get_param(param_name);
    } else if (strcmp("data", param_field) == 0) {
      return data().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.EnqueueMsg'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_addr = field_addr.get_param(param_name);
  mp_field_addr->set_id(new Module_Param_FieldName(mcopystr("addr")));
  mp->add_elem(mp_field_addr);
  Module_Param* mp_field_data = field_data.get_param(param_name);
  mp_field_data->set_id(new Module_Param_FieldName(mcopystr("data")));
  mp->add_elem(mp_field_data);
  return mp;
  }

void EnqueueMsg::set_implicit_omit()
{
if (!addr().is_bound()) addr() = OMIT_VALUE;
else addr().set_implicit_omit();
if (data().is_bound()) data().set_implicit_omit();
}

void EnqueueMsg::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.EnqueueMsg.");
field_addr.encode_text(text_buf);
field_data.encode_text(text_buf);
}

void EnqueueMsg::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_addr.decode_text(text_buf);
field_data.decode_text(text_buf);
}

void EnqueueMsg::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void EnqueueMsg::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int EnqueueMsg::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.EnqueueMsg.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_addr.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "addr");
    enc_len += field_addr.JSON_encode(TriAddressType_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "data");
    enc_len += field_data.JSON_encode(msg__data__container_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int EnqueueMsg::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "addr", name_len)) {
         int ret_val = field_addr.JSON_decode(TriAddressType_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "addr");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (4 == name_len && 0 == strncmp(fld_name, "data", name_len)) {
         int ret_val = field_data.JSON_decode(msg__data__container_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "data");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_addr.is_bound()) {
    field_addr = OMIT_VALUE;
  }
if (!field_data.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "data");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct EnqueueMsg_template::single_value_struct {
TriAddressType_template field_addr;
msg__data__container_template field_data;
};

void EnqueueMsg_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_addr = ANY_OR_OMIT;
single_value->field_data = ANY_VALUE;
}
}
}

void EnqueueMsg_template::copy_value(const EnqueueMsg& other_value)
{
single_value = new single_value_struct;
if (other_value.addr().is_bound()) {
  if (other_value.addr().ispresent()) single_value->field_addr = other_value.addr()();
  else single_value->field_addr = OMIT_VALUE;
} else {
  single_value->field_addr.clean_up();
}
if (other_value.data().is_bound()) {
  single_value->field_data = other_value.data();
} else {
  single_value->field_data.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void EnqueueMsg_template::copy_template(const EnqueueMsg_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.addr().get_selection()) {
single_value->field_addr = other_value.addr();
} else {
single_value->field_addr.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.data().get_selection()) {
single_value->field_data = other_value.data();
} else {
single_value->field_data.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new EnqueueMsg_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.EnqueueMsg.");
break;
}
set_selection(other_value);
}

EnqueueMsg_template::EnqueueMsg_template()
{
}

EnqueueMsg_template::EnqueueMsg_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

EnqueueMsg_template::EnqueueMsg_template(const EnqueueMsg& other_value)
{
copy_value(other_value);
}

EnqueueMsg_template::EnqueueMsg_template(const OPTIONAL<EnqueueMsg>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const EnqueueMsg&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.EnqueueMsg from an unbound optional field.");
}
}

EnqueueMsg_template::EnqueueMsg_template(const EnqueueMsg_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

EnqueueMsg_template::~EnqueueMsg_template()
{
clean_up();
}

EnqueueMsg_template& EnqueueMsg_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

EnqueueMsg_template& EnqueueMsg_template::operator=(const EnqueueMsg& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

EnqueueMsg_template& EnqueueMsg_template::operator=(const OPTIONAL<EnqueueMsg>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const EnqueueMsg&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.EnqueueMsg.");
}
return *this;
}

EnqueueMsg_template& EnqueueMsg_template::operator=(const EnqueueMsg_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean EnqueueMsg_template::match(const EnqueueMsg& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.addr().is_bound()) return FALSE;
if((other_value.addr().ispresent() ? !single_value->field_addr.match((const TriAddressType&)other_value.addr(), legacy) : !single_value->field_addr.match_omit(legacy)))return FALSE;
if(!other_value.data().is_bound()) return FALSE;
if(!single_value->field_data.match(other_value.data(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.EnqueueMsg.");
}
return FALSE;
}

boolean EnqueueMsg_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_addr.is_omit() || single_value->field_addr.is_bound()) return TRUE;
if (single_value->field_data.is_bound()) return TRUE;
return FALSE;
}

boolean EnqueueMsg_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_addr.is_omit() && !single_value->field_addr.is_value()) return FALSE;
if (!single_value->field_data.is_value()) return FALSE;
return TRUE;
}

void EnqueueMsg_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

EnqueueMsg EnqueueMsg_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.EnqueueMsg.");
EnqueueMsg ret_val;
if (single_value->field_addr.is_omit()) ret_val.addr() = OMIT_VALUE;
else if (single_value->field_addr.is_bound()) {
ret_val.addr() = single_value->field_addr.valueof();
}
if (single_value->field_data.is_bound()) {
ret_val.data() = single_value->field_data.valueof();
}
return ret_val;
}

void EnqueueMsg_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.EnqueueMsg.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new EnqueueMsg_template[list_length];
}

EnqueueMsg_template& EnqueueMsg_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.EnqueueMsg.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.EnqueueMsg.");
return value_list.list_value[list_index];
}

TriAddressType_template& EnqueueMsg_template::addr()
{
set_specific();
return single_value->field_addr;
}

const TriAddressType_template& EnqueueMsg_template::addr() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field addr of a non-specific template of type @TRI_interface_Types.EnqueueMsg.");
return single_value->field_addr;
}

msg__data__container_template& EnqueueMsg_template::data()
{
set_specific();
return single_value->field_data;
}

const msg__data__container_template& EnqueueMsg_template::data() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field data of a non-specific template of type @TRI_interface_Types.EnqueueMsg.");
return single_value->field_data;
}

int EnqueueMsg_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.EnqueueMsg which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_addr.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.EnqueueMsg containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.EnqueueMsg containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.EnqueueMsg containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.EnqueueMsg containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.EnqueueMsg containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.EnqueueMsg.");
  }
  return 0;
}

void EnqueueMsg_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ addr := ");
single_value->field_addr.log();
TTCN_Logger::log_event_str(", data := ");
single_value->field_data.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void EnqueueMsg_template::log_match(const EnqueueMsg& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.addr().ispresent()){
if(!single_value->field_addr.match(match_value.addr(), legacy)){
TTCN_Logger::log_logmatch_info(".addr");
single_value->field_addr.log_match(match_value.addr(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_addr.match_omit(legacy)){
 TTCN_Logger::log_logmatch_info(".addr := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_addr.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_data.match(match_value.data(), legacy)){
TTCN_Logger::log_logmatch_info(".data");
single_value->field_data.log_match(match_value.data(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ addr := ");
if (match_value.addr().ispresent()) single_value->field_addr.log_match(match_value.addr(), legacy);
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_addr.log();
if (single_value->field_addr.match_omit(legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", data := ");
single_value->field_data.log_match(match_value.data(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void EnqueueMsg_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_addr.encode_text(text_buf);
single_value->field_data.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.EnqueueMsg.");
}
}

void EnqueueMsg_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_addr.decode_text(text_buf);
single_value->field_data.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new EnqueueMsg_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.EnqueueMsg.");
}
}

void EnqueueMsg_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.EnqueueMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      addr().set_param(param);
      return;
    } else if (strcmp("data", param_field) == 0) {
      data().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.EnqueueMsg'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    EnqueueMsg_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.EnqueueMsg has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) addr().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) data().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "addr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          addr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.EnqueueMsg: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.EnqueueMsg");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* EnqueueMsg_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.EnqueueMsg'");
    }
    if (strcmp("addr", param_field) == 0) {
      return addr().get_param(param_name);
    } else if (strcmp("data", param_field) == 0) {
      return data().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.EnqueueMsg'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_addr = single_value->field_addr.get_param(param_name);
    mp_field_addr->set_id(new Module_Param_FieldName(mcopystr("addr")));
    mp->add_elem(mp_field_addr);
    Module_Param* mp_field_data = single_value->field_data.get_param(param_name);
    mp_field_data->set_id(new Module_Param_FieldName(mcopystr("data")));
    mp->add_elem(mp_field_data);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void EnqueueMsg_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_addr.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.EnqueueMsg");
single_value->field_data.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.EnqueueMsg");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.EnqueueMsg");
}

boolean EnqueueMsg_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean EnqueueMsg_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Msg__union::copy_value(const Msg__union& other_value)
{
switch (other_value.union_selection) {
case ALT_result:
field_result = new Result(*other_value.field_result);
break;
case ALT_reg:
field_reg = new Register(*other_value.field_reg);
break;
case ALT_mapped:
field_mapped = new Map(*other_value.field_mapped);
break;
case ALT_unmapped:
field_unmapped = new UnMap(*other_value.field_unmapped);
break;
case ALT_unregister:
field_unregister = new Unregister(*other_value.field_unregister);
break;
case ALT_sendmsg:
field_sendmsg = new SendMsg(*other_value.field_sendmsg);
break;
case ALT_enqueue__msg:
field_enqueue__msg = new EnqueueMsg(*other_value.field_enqueue__msg);
break;
default:
TTCN_error("Assignment of an unbound union value of type @TRI_interface_Types.Msg_union.");
}
union_selection = other_value.union_selection;
}

Msg__union::Msg__union()
{
union_selection = UNBOUND_VALUE;
}

Msg__union::Msg__union(const Msg__union& other_value)
: Base_Type(){
copy_value(other_value);
}

Msg__union::~Msg__union()
{
clean_up();
}

Msg__union& Msg__union::operator=(const Msg__union& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Msg__union::operator==(const Msg__union& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @TRI_interface_Types.Msg_union.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @TRI_interface_Types.Msg_union.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_result:
return *field_result == *other_value.field_result;
case ALT_reg:
return *field_reg == *other_value.field_reg;
case ALT_mapped:
return *field_mapped == *other_value.field_mapped;
case ALT_unmapped:
return *field_unmapped == *other_value.field_unmapped;
case ALT_unregister:
return *field_unregister == *other_value.field_unregister;
case ALT_sendmsg:
return *field_sendmsg == *other_value.field_sendmsg;
case ALT_enqueue__msg:
return *field_enqueue__msg == *other_value.field_enqueue__msg;
default:
return FALSE;
}
}

Result& Msg__union::result()
{
if (union_selection != ALT_result) {
clean_up();
field_result = new Result;
union_selection = ALT_result;
}
return *field_result;
}

const Result& Msg__union::result() const
{
if (union_selection != ALT_result) TTCN_error("Using non-selected field result in a value of union type @TRI_interface_Types.Msg_union.");
return *field_result;
}

Register& Msg__union::reg()
{
if (union_selection != ALT_reg) {
clean_up();
field_reg = new Register;
union_selection = ALT_reg;
}
return *field_reg;
}

const Register& Msg__union::reg() const
{
if (union_selection != ALT_reg) TTCN_error("Using non-selected field reg in a value of union type @TRI_interface_Types.Msg_union.");
return *field_reg;
}

Map& Msg__union::mapped()
{
if (union_selection != ALT_mapped) {
clean_up();
field_mapped = new Map;
union_selection = ALT_mapped;
}
return *field_mapped;
}

const Map& Msg__union::mapped() const
{
if (union_selection != ALT_mapped) TTCN_error("Using non-selected field mapped in a value of union type @TRI_interface_Types.Msg_union.");
return *field_mapped;
}

UnMap& Msg__union::unmapped()
{
if (union_selection != ALT_unmapped) {
clean_up();
field_unmapped = new UnMap;
union_selection = ALT_unmapped;
}
return *field_unmapped;
}

const UnMap& Msg__union::unmapped() const
{
if (union_selection != ALT_unmapped) TTCN_error("Using non-selected field unmapped in a value of union type @TRI_interface_Types.Msg_union.");
return *field_unmapped;
}

Unregister& Msg__union::unregister()
{
if (union_selection != ALT_unregister) {
clean_up();
field_unregister = new Unregister;
union_selection = ALT_unregister;
}
return *field_unregister;
}

const Unregister& Msg__union::unregister() const
{
if (union_selection != ALT_unregister) TTCN_error("Using non-selected field unregister in a value of union type @TRI_interface_Types.Msg_union.");
return *field_unregister;
}

SendMsg& Msg__union::sendmsg()
{
if (union_selection != ALT_sendmsg) {
clean_up();
field_sendmsg = new SendMsg;
union_selection = ALT_sendmsg;
}
return *field_sendmsg;
}

const SendMsg& Msg__union::sendmsg() const
{
if (union_selection != ALT_sendmsg) TTCN_error("Using non-selected field sendmsg in a value of union type @TRI_interface_Types.Msg_union.");
return *field_sendmsg;
}

EnqueueMsg& Msg__union::enqueue__msg()
{
if (union_selection != ALT_enqueue__msg) {
clean_up();
field_enqueue__msg = new EnqueueMsg;
union_selection = ALT_enqueue__msg;
}
return *field_enqueue__msg;
}

const EnqueueMsg& Msg__union::enqueue__msg() const
{
if (union_selection != ALT_enqueue__msg) TTCN_error("Using non-selected field enqueue_msg in a value of union type @TRI_interface_Types.Msg_union.");
return *field_enqueue__msg;
}

boolean Msg__union::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @TRI_interface_Types.Msg_union.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @TRI_interface_Types.Msg_union.");
return union_selection == checked_selection;
}

boolean Msg__union::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Msg__union::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_result: return field_result->is_value();
case ALT_reg: return field_reg->is_value();
case ALT_mapped: return field_mapped->is_value();
case ALT_unmapped: return field_unmapped->is_value();
case ALT_unregister: return field_unregister->is_value();
case ALT_sendmsg: return field_sendmsg->is_value();
case ALT_enqueue__msg: return field_enqueue__msg->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Msg__union::clean_up()
{
switch (union_selection) {
case ALT_result:
  delete field_result;
  break;
case ALT_reg:
  delete field_reg;
  break;
case ALT_mapped:
  delete field_mapped;
  break;
case ALT_unmapped:
  delete field_unmapped;
  break;
case ALT_unregister:
  delete field_unregister;
  break;
case ALT_sendmsg:
  delete field_sendmsg;
  break;
case ALT_enqueue__msg:
  delete field_enqueue__msg;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Msg__union::log() const
{
switch (union_selection) {
case ALT_result:
TTCN_Logger::log_event_str("{ result := ");
field_result->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_reg:
TTCN_Logger::log_event_str("{ reg := ");
field_reg->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mapped:
TTCN_Logger::log_event_str("{ mapped := ");
field_mapped->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_unmapped:
TTCN_Logger::log_event_str("{ unmapped := ");
field_unmapped->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_unregister:
TTCN_Logger::log_event_str("{ unregister := ");
field_unregister->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_sendmsg:
TTCN_Logger::log_event_str("{ sendmsg := ");
field_sendmsg->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_enqueue__msg:
TTCN_Logger::log_event_str("{ enqueue_msg := ");
field_enqueue__msg->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Msg__union::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@TRI_interface_Types.Msg_union'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("reg", param_field) == 0) {
      reg().set_param(param);
      return;
    } else if (strcmp("mapped", param_field) == 0) {
      mapped().set_param(param);
      return;
    } else if (strcmp("unmapped", param_field) == 0) {
      unmapped().set_param(param);
      return;
    } else if (strcmp("unregister", param_field) == 0) {
      unregister().set_param(param);
      return;
    } else if (strcmp("sendmsg", param_field) == 0) {
      sendmsg().set_param(param);
      return;
    } else if (strcmp("enqueue_msg", param_field) == 0) {
      enqueue__msg().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@TRI_interface_Types.Msg_union'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) return;
  if (mp->get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = mp->get_elem(mp->get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "result")) {
    result().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "reg")) {
    reg().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mapped")) {
    mapped().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "unmapped")) {
    unmapped().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "unregister")) {
    unregister().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "sendmsg")) {
    sendmsg().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "enqueue_msg")) {
    enqueue__msg().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @TRI_interface_Types.Msg_union.", mp_last->get_id()->get_name());
}

Module_Param* Msg__union::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for union type `@TRI_interface_Types.Msg_union'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("reg", param_field) == 0) {
      return reg().get_param(param_name);
    } else if (strcmp("mapped", param_field) == 0) {
      return mapped().get_param(param_name);
    } else if (strcmp("unmapped", param_field) == 0) {
      return unmapped().get_param(param_name);
    } else if (strcmp("unregister", param_field) == 0) {
      return unregister().get_param(param_name);
    } else if (strcmp("sendmsg", param_field) == 0) {
      return sendmsg().get_param(param_name);
    } else if (strcmp("enqueue_msg", param_field) == 0) {
      return enqueue__msg().get_param(param_name);
    } else TTCN_error("Field `%s' not found in union type `Msg__union'", param_field);
  }
  Module_Param* mp_field = NULL;
  switch(union_selection) {
  case ALT_result:
    mp_field = field_result->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("result")));
    break;
  case ALT_reg:
    mp_field = field_reg->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("reg")));
    break;
  case ALT_mapped:
    mp_field = field_mapped->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("mapped")));
    break;
  case ALT_unmapped:
    mp_field = field_unmapped->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("unmapped")));
    break;
  case ALT_unregister:
    mp_field = field_unregister->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("unregister")));
    break;
  case ALT_sendmsg:
    mp_field = field_sendmsg->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("sendmsg")));
    break;
  case ALT_enqueue__msg:
    mp_field = field_enqueue__msg->get_param(param_name);
    mp_field->set_id(new Module_Param_FieldName(mcopystr("enqueue_msg")));
    break;
  default:
    break;
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  mp->add_elem(mp_field);
  return mp;
}

void Msg__union::set_implicit_omit()
{
switch (union_selection) {
case ALT_result:
field_result->set_implicit_omit(); break;
case ALT_reg:
field_reg->set_implicit_omit(); break;
case ALT_mapped:
field_mapped->set_implicit_omit(); break;
case ALT_unmapped:
field_unmapped->set_implicit_omit(); break;
case ALT_unregister:
field_unregister->set_implicit_omit(); break;
case ALT_sendmsg:
field_sendmsg->set_implicit_omit(); break;
case ALT_enqueue__msg:
field_enqueue__msg->set_implicit_omit(); break;
default: break;
}
}

void Msg__union::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_result:
field_result->encode_text(text_buf);
break;
case ALT_reg:
field_reg->encode_text(text_buf);
break;
case ALT_mapped:
field_mapped->encode_text(text_buf);
break;
case ALT_unmapped:
field_unmapped->encode_text(text_buf);
break;
case ALT_unregister:
field_unregister->encode_text(text_buf);
break;
case ALT_sendmsg:
field_sendmsg->encode_text(text_buf);
break;
case ALT_enqueue__msg:
field_enqueue__msg->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @TRI_interface_Types.Msg_union.");
}
}

void Msg__union::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_result:
result().decode_text(text_buf);
break;
case ALT_reg:
reg().decode_text(text_buf);
break;
case ALT_mapped:
mapped().decode_text(text_buf);
break;
case ALT_unmapped:
unmapped().decode_text(text_buf);
break;
case ALT_unregister:
unregister().decode_text(text_buf);
break;
case ALT_sendmsg:
sendmsg().decode_text(text_buf);
break;
case ALT_enqueue__msg:
enqueue__msg().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @TRI_interface_Types.Msg_union.");
}
}

void Msg__union::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Msg__union::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int Msg__union::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_result:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "result");
    enc_len += field_result->JSON_encode(Result_descr_, p_tok);
    break;
  case ALT_reg:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "reg");
    enc_len += field_reg->JSON_encode(Register_descr_, p_tok);
    break;
  case ALT_mapped:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "mapped");
    enc_len += field_mapped->JSON_encode(Map_descr_, p_tok);
    break;
  case ALT_unmapped:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "unmapped");
    enc_len += field_unmapped->JSON_encode(UnMap_descr_, p_tok);
    break;
  case ALT_unregister:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "unregister");
    enc_len += field_unregister->JSON_encode(Unregister_descr_, p_tok);
    break;
  case ALT_sendmsg:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sendmsg");
    enc_len += field_sendmsg->JSON_encode(SendMsg_descr_, p_tok);
    break;
  case ALT_enqueue__msg:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "enqueue_msg");
    enc_len += field_enqueue__msg->JSON_encode(EnqueueMsg_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @TRI_interface_Types.Msg_union.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Msg__union::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "result", name_len)) {
      int ret_val = result().JSON_decode(Result_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "result");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "reg", name_len)) {
      int ret_val = reg().JSON_decode(Register_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "reg");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "mapped", name_len)) {
      int ret_val = mapped().JSON_decode(Map_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "mapped");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "unmapped", name_len)) {
      int ret_val = unmapped().JSON_decode(UnMap_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "unmapped");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "unregister", name_len)) {
      int ret_val = unregister().JSON_decode(Unregister_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "unregister");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "sendmsg", name_len)) {
      int ret_val = sendmsg().JSON_decode(SendMsg_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sendmsg");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "enqueue_msg", name_len)) {
      int ret_val = enqueue__msg().JSON_decode(EnqueueMsg_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "enqueue_msg");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Msg__union_template::copy_value(const Msg__union& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Msg__union::ALT_result:
single_value.field_result = new Result_template(other_value.result());
break;
case Msg__union::ALT_reg:
single_value.field_reg = new Register_template(other_value.reg());
break;
case Msg__union::ALT_mapped:
single_value.field_mapped = new Map_template(other_value.mapped());
break;
case Msg__union::ALT_unmapped:
single_value.field_unmapped = new UnMap_template(other_value.unmapped());
break;
case Msg__union::ALT_unregister:
single_value.field_unregister = new Unregister_template(other_value.unregister());
break;
case Msg__union::ALT_sendmsg:
single_value.field_sendmsg = new SendMsg_template(other_value.sendmsg());
break;
case Msg__union::ALT_enqueue__msg:
single_value.field_enqueue__msg = new EnqueueMsg_template(other_value.enqueue__msg());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @TRI_interface_Types.Msg_union.");
}
set_selection(SPECIFIC_VALUE);
}

void Msg__union_template::copy_template(const Msg__union_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Msg__union::ALT_result:
single_value.field_result = new Result_template(*other_value.single_value.field_result);
break;
case Msg__union::ALT_reg:
single_value.field_reg = new Register_template(*other_value.single_value.field_reg);
break;
case Msg__union::ALT_mapped:
single_value.field_mapped = new Map_template(*other_value.single_value.field_mapped);
break;
case Msg__union::ALT_unmapped:
single_value.field_unmapped = new UnMap_template(*other_value.single_value.field_unmapped);
break;
case Msg__union::ALT_unregister:
single_value.field_unregister = new Unregister_template(*other_value.single_value.field_unregister);
break;
case Msg__union::ALT_sendmsg:
single_value.field_sendmsg = new SendMsg_template(*other_value.single_value.field_sendmsg);
break;
case Msg__union::ALT_enqueue__msg:
single_value.field_enqueue__msg = new EnqueueMsg_template(*other_value.single_value.field_enqueue__msg);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @TRI_interface_Types.Msg_union.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Msg__union_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @TRI_interface_Types.Msg_union.");
}
set_selection(other_value);
}

Msg__union_template::Msg__union_template()
{
}

Msg__union_template::Msg__union_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Msg__union_template::Msg__union_template(const Msg__union& other_value)
{
copy_value(other_value);
}

Msg__union_template::Msg__union_template(const OPTIONAL<Msg__union>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Msg__union&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @TRI_interface_Types.Msg_union from an unbound optional field.");
}
}

Msg__union_template::Msg__union_template(const Msg__union_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Msg__union_template::~Msg__union_template()
{
clean_up();
}

void Msg__union_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Msg__union::ALT_result:
delete single_value.field_result;
break;
case Msg__union::ALT_reg:
delete single_value.field_reg;
break;
case Msg__union::ALT_mapped:
delete single_value.field_mapped;
break;
case Msg__union::ALT_unmapped:
delete single_value.field_unmapped;
break;
case Msg__union::ALT_unregister:
delete single_value.field_unregister;
break;
case Msg__union::ALT_sendmsg:
delete single_value.field_sendmsg;
break;
case Msg__union::ALT_enqueue__msg:
delete single_value.field_enqueue__msg;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Msg__union_template& Msg__union_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Msg__union_template& Msg__union_template::operator=(const Msg__union& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Msg__union_template& Msg__union_template::operator=(const OPTIONAL<Msg__union>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Msg__union&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @TRI_interface_Types.Msg_union.");
}
return *this;
}

Msg__union_template& Msg__union_template::operator=(const Msg__union_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Msg__union_template::match(const Msg__union& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Msg__union::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Msg__union::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Msg__union::ALT_result:
return single_value.field_result->match(other_value.result(), legacy);
case Msg__union::ALT_reg:
return single_value.field_reg->match(other_value.reg(), legacy);
case Msg__union::ALT_mapped:
return single_value.field_mapped->match(other_value.mapped(), legacy);
case Msg__union::ALT_unmapped:
return single_value.field_unmapped->match(other_value.unmapped(), legacy);
case Msg__union::ALT_unregister:
return single_value.field_unregister->match(other_value.unregister(), legacy);
case Msg__union::ALT_sendmsg:
return single_value.field_sendmsg->match(other_value.sendmsg(), legacy);
case Msg__union::ALT_enqueue__msg:
return single_value.field_enqueue__msg->match(other_value.enqueue__msg(), legacy);
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @TRI_interface_Types.Msg_union.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @TRI_interface_Types.Msg_union.");
}
return FALSE;
}

boolean Msg__union_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Msg__union::ALT_result:
return single_value.field_result->is_value();
case Msg__union::ALT_reg:
return single_value.field_reg->is_value();
case Msg__union::ALT_mapped:
return single_value.field_mapped->is_value();
case Msg__union::ALT_unmapped:
return single_value.field_unmapped->is_value();
case Msg__union::ALT_unregister:
return single_value.field_unregister->is_value();
case Msg__union::ALT_sendmsg:
return single_value.field_sendmsg->is_value();
case Msg__union::ALT_enqueue__msg:
return single_value.field_enqueue__msg->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @TRI_interface_Types.Msg_union.");
}
}

Msg__union Msg__union_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @TRI_interface_Types.Msg_union.");
Msg__union ret_val;
switch (single_value.union_selection) {
case Msg__union::ALT_result:
ret_val.result() = single_value.field_result->valueof();
break;
case Msg__union::ALT_reg:
ret_val.reg() = single_value.field_reg->valueof();
break;
case Msg__union::ALT_mapped:
ret_val.mapped() = single_value.field_mapped->valueof();
break;
case Msg__union::ALT_unmapped:
ret_val.unmapped() = single_value.field_unmapped->valueof();
break;
case Msg__union::ALT_unregister:
ret_val.unregister() = single_value.field_unregister->valueof();
break;
case Msg__union::ALT_sendmsg:
ret_val.sendmsg() = single_value.field_sendmsg->valueof();
break;
case Msg__union::ALT_enqueue__msg:
ret_val.enqueue__msg() = single_value.field_enqueue__msg->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @TRI_interface_Types.Msg_union.");
}
return ret_val;
}

Msg__union_template& Msg__union_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @TRI_interface_Types.Msg_union.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @TRI_interface_Types.Msg_union.");
return value_list.list_value[list_index];
}
void Msg__union_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @TRI_interface_Types.Msg_union.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Msg__union_template[list_length];
}

Result_template& Msg__union_template::result()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_result) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_result = new Result_template(ANY_VALUE);
else single_value.field_result = new Result_template;
single_value.union_selection = Msg__union::ALT_result;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_result;
}

const Result_template& Msg__union_template::result() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field result in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_result) TTCN_error("Accessing non-selected field result in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_result;
}

Register_template& Msg__union_template::reg()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_reg) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_reg = new Register_template(ANY_VALUE);
else single_value.field_reg = new Register_template;
single_value.union_selection = Msg__union::ALT_reg;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_reg;
}

const Register_template& Msg__union_template::reg() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field reg in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_reg) TTCN_error("Accessing non-selected field reg in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_reg;
}

Map_template& Msg__union_template::mapped()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_mapped) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mapped = new Map_template(ANY_VALUE);
else single_value.field_mapped = new Map_template;
single_value.union_selection = Msg__union::ALT_mapped;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mapped;
}

const Map_template& Msg__union_template::mapped() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mapped in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_mapped) TTCN_error("Accessing non-selected field mapped in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_mapped;
}

UnMap_template& Msg__union_template::unmapped()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_unmapped) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_unmapped = new UnMap_template(ANY_VALUE);
else single_value.field_unmapped = new UnMap_template;
single_value.union_selection = Msg__union::ALT_unmapped;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_unmapped;
}

const UnMap_template& Msg__union_template::unmapped() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field unmapped in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_unmapped) TTCN_error("Accessing non-selected field unmapped in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_unmapped;
}

Unregister_template& Msg__union_template::unregister()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_unregister) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_unregister = new Unregister_template(ANY_VALUE);
else single_value.field_unregister = new Unregister_template;
single_value.union_selection = Msg__union::ALT_unregister;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_unregister;
}

const Unregister_template& Msg__union_template::unregister() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field unregister in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_unregister) TTCN_error("Accessing non-selected field unregister in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_unregister;
}

SendMsg_template& Msg__union_template::sendmsg()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_sendmsg) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_sendmsg = new SendMsg_template(ANY_VALUE);
else single_value.field_sendmsg = new SendMsg_template;
single_value.union_selection = Msg__union::ALT_sendmsg;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_sendmsg;
}

const SendMsg_template& Msg__union_template::sendmsg() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field sendmsg in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_sendmsg) TTCN_error("Accessing non-selected field sendmsg in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_sendmsg;
}

EnqueueMsg_template& Msg__union_template::enqueue__msg()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Msg__union::ALT_enqueue__msg) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_enqueue__msg = new EnqueueMsg_template(ANY_VALUE);
else single_value.field_enqueue__msg = new EnqueueMsg_template;
single_value.union_selection = Msg__union::ALT_enqueue__msg;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_enqueue__msg;
}

const EnqueueMsg_template& Msg__union_template::enqueue__msg() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field enqueue_msg in a non-specific template of union type @TRI_interface_Types.Msg_union.");
if (single_value.union_selection != Msg__union::ALT_enqueue__msg) TTCN_error("Accessing non-selected field enqueue_msg in a template of union type @TRI_interface_Types.Msg_union.");
return *single_value.field_enqueue__msg;
}

boolean Msg__union_template::ischosen(Msg__union::union_selection_type checked_selection) const
{
if (checked_selection == Msg__union::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @TRI_interface_Types.Msg_union.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Msg__union::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @TRI_interface_Types.Msg_union.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @TRI_interface_Types.Msg_union containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @TRI_interface_Types.Msg_union, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @TRI_interface_Types.Msg_union");
}
return FALSE;
}

void Msg__union_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Msg__union::ALT_result:
TTCN_Logger::log_event_str("{ result := ");
single_value.field_result->log();
TTCN_Logger::log_event_str(" }");
break;
case Msg__union::ALT_reg:
TTCN_Logger::log_event_str("{ reg := ");
single_value.field_reg->log();
TTCN_Logger::log_event_str(" }");
break;
case Msg__union::ALT_mapped:
TTCN_Logger::log_event_str("{ mapped := ");
single_value.field_mapped->log();
TTCN_Logger::log_event_str(" }");
break;
case Msg__union::ALT_unmapped:
TTCN_Logger::log_event_str("{ unmapped := ");
single_value.field_unmapped->log();
TTCN_Logger::log_event_str(" }");
break;
case Msg__union::ALT_unregister:
TTCN_Logger::log_event_str("{ unregister := ");
single_value.field_unregister->log();
TTCN_Logger::log_event_str(" }");
break;
case Msg__union::ALT_sendmsg:
TTCN_Logger::log_event_str("{ sendmsg := ");
single_value.field_sendmsg->log();
TTCN_Logger::log_event_str(" }");
break;
case Msg__union::ALT_enqueue__msg:
TTCN_Logger::log_event_str("{ enqueue_msg := ");
single_value.field_enqueue__msg->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Msg__union_template::log_match(const Msg__union& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Msg__union::ALT_result:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".result");
single_value.field_result->log_match(match_value.result(), legacy);
} else {
TTCN_Logger::log_event_str("{ result := ");
single_value.field_result->log_match(match_value.result(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Msg__union::ALT_reg:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".reg");
single_value.field_reg->log_match(match_value.reg(), legacy);
} else {
TTCN_Logger::log_event_str("{ reg := ");
single_value.field_reg->log_match(match_value.reg(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Msg__union::ALT_mapped:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mapped");
single_value.field_mapped->log_match(match_value.mapped(), legacy);
} else {
TTCN_Logger::log_event_str("{ mapped := ");
single_value.field_mapped->log_match(match_value.mapped(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Msg__union::ALT_unmapped:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".unmapped");
single_value.field_unmapped->log_match(match_value.unmapped(), legacy);
} else {
TTCN_Logger::log_event_str("{ unmapped := ");
single_value.field_unmapped->log_match(match_value.unmapped(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Msg__union::ALT_unregister:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".unregister");
single_value.field_unregister->log_match(match_value.unregister(), legacy);
} else {
TTCN_Logger::log_event_str("{ unregister := ");
single_value.field_unregister->log_match(match_value.unregister(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Msg__union::ALT_sendmsg:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".sendmsg");
single_value.field_sendmsg->log_match(match_value.sendmsg(), legacy);
} else {
TTCN_Logger::log_event_str("{ sendmsg := ");
single_value.field_sendmsg->log_match(match_value.sendmsg(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
case Msg__union::ALT_enqueue__msg:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".enqueue_msg");
single_value.field_enqueue__msg->log_match(match_value.enqueue__msg(), legacy);
} else {
TTCN_Logger::log_event_str("{ enqueue_msg := ");
single_value.field_enqueue__msg->log_match(match_value.enqueue__msg(), legacy);
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Msg__union_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Msg__union::ALT_result:
single_value.field_result->encode_text(text_buf);
break;
case Msg__union::ALT_reg:
single_value.field_reg->encode_text(text_buf);
break;
case Msg__union::ALT_mapped:
single_value.field_mapped->encode_text(text_buf);
break;
case Msg__union::ALT_unmapped:
single_value.field_unmapped->encode_text(text_buf);
break;
case Msg__union::ALT_unregister:
single_value.field_unregister->encode_text(text_buf);
break;
case Msg__union::ALT_sendmsg:
single_value.field_sendmsg->encode_text(text_buf);
break;
case Msg__union::ALT_enqueue__msg:
single_value.field_enqueue__msg->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @TRI_interface_Types.Msg_union.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @TRI_interface_Types.Msg_union.");
}
}

void Msg__union_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Msg__union::UNBOUND_VALUE;
Msg__union::union_selection_type new_selection = (Msg__union::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Msg__union::ALT_result:
single_value.field_result = new Result_template;
single_value.field_result->decode_text(text_buf);
break;
case Msg__union::ALT_reg:
single_value.field_reg = new Register_template;
single_value.field_reg->decode_text(text_buf);
break;
case Msg__union::ALT_mapped:
single_value.field_mapped = new Map_template;
single_value.field_mapped->decode_text(text_buf);
break;
case Msg__union::ALT_unmapped:
single_value.field_unmapped = new UnMap_template;
single_value.field_unmapped->decode_text(text_buf);
break;
case Msg__union::ALT_unregister:
single_value.field_unregister = new Unregister_template;
single_value.field_unregister->decode_text(text_buf);
break;
case Msg__union::ALT_sendmsg:
single_value.field_sendmsg = new SendMsg_template;
single_value.field_sendmsg->decode_text(text_buf);
break;
case Msg__union::ALT_enqueue__msg:
single_value.field_enqueue__msg = new EnqueueMsg_template;
single_value.field_enqueue__msg->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @TRI_interface_Types.Msg_union.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Msg__union_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @TRI_interface_Types.Msg_union.");
}
}

boolean Msg__union_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean Msg__union_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void Msg__union_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@TRI_interface_Types.Msg_union'");
    }
    if (strcmp("result", param_field) == 0) {
      result().set_param(param);
      return;
    } else if (strcmp("reg", param_field) == 0) {
      reg().set_param(param);
      return;
    } else if (strcmp("mapped", param_field) == 0) {
      mapped().set_param(param);
      return;
    } else if (strcmp("unmapped", param_field) == 0) {
      unmapped().set_param(param);
      return;
    } else if (strcmp("unregister", param_field) == 0) {
      unregister().set_param(param);
      return;
    } else if (strcmp("sendmsg", param_field) == 0) {
      sendmsg().set_param(param);
      return;
    } else if (strcmp("enqueue_msg", param_field) == 0) {
      enqueue__msg().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@TRI_interface_Types.Msg_union'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    Msg__union_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (mp->get_size()==0) break;
    param.type_error("union template", "@TRI_interface_Types.Msg_union");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = mp->get_elem(mp->get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "result")) {
      result().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "reg")) {
      reg().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mapped")) {
      mapped().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "unmapped")) {
      unmapped().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "unregister")) {
      unregister().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "sendmsg")) {
      sendmsg().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "enqueue_msg")) {
      enqueue__msg().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @TRI_interface_Types.Msg_union.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@TRI_interface_Types.Msg_union");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* Msg__union_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for union template type `@TRI_interface_Types.Msg_union'");
    }
    if (strcmp("result", param_field) == 0) {
      return result().get_param(param_name);
    } else if (strcmp("reg", param_field) == 0) {
      return reg().get_param(param_name);
    } else if (strcmp("mapped", param_field) == 0) {
      return mapped().get_param(param_name);
    } else if (strcmp("unmapped", param_field) == 0) {
      return unmapped().get_param(param_name);
    } else if (strcmp("unregister", param_field) == 0) {
      return unregister().get_param(param_name);
    } else if (strcmp("sendmsg", param_field) == 0) {
      return sendmsg().get_param(param_name);
    } else if (strcmp("enqueue_msg", param_field) == 0) {
      return enqueue__msg().get_param(param_name);
    } else TTCN_error("Field `%s' not found in union type `Msg__union'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Module_Param* mp_field = NULL;
    switch(single_value.union_selection) {
    case Msg__union::ALT_result:
      mp_field = single_value.field_result->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("result")));
      break;
    case Msg__union::ALT_reg:
      mp_field = single_value.field_reg->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("reg")));
      break;
    case Msg__union::ALT_mapped:
      mp_field = single_value.field_mapped->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("mapped")));
      break;
    case Msg__union::ALT_unmapped:
      mp_field = single_value.field_unmapped->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("unmapped")));
      break;
    case Msg__union::ALT_unregister:
      mp_field = single_value.field_unregister->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("unregister")));
      break;
    case Msg__union::ALT_sendmsg:
      mp_field = single_value.field_sendmsg->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("sendmsg")));
      break;
    case Msg__union::ALT_enqueue__msg:
      mp_field = single_value.field_enqueue__msg->get_param(param_name);
      mp_field->set_id(new Module_Param_FieldName(mcopystr("enqueue_msg")));
      break;
    default:
      break;
    }
    mp = new Module_Param_Assignment_List();
    mp->add_elem(mp_field);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void Msg__union_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Msg__union::ALT_result:
single_value.field_result->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
case Msg__union::ALT_reg:
single_value.field_reg->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
case Msg__union::ALT_mapped:
single_value.field_mapped->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
case Msg__union::ALT_unmapped:
single_value.field_unmapped->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
case Msg__union::ALT_unregister:
single_value.field_unregister->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
case Msg__union::ALT_sendmsg:
single_value.field_sendmsg->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
case Msg__union::ALT_enqueue__msg:
single_value.field_enqueue__msg->check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.Msg_union");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @TRI_interface_Types.Msg_union.");
}
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.Msg_union");
}

TRI__mapper__PDU::TRI__mapper__PDU()
{
  bound_flag = FALSE;
}

TRI__mapper__PDU::TRI__mapper__PDU(const INTEGER& par_msg__id,
    const Msg__union& par_msg)
  :   field_msg__id(par_msg__id),
  field_msg(par_msg)
{
  bound_flag = TRUE;
}

TRI__mapper__PDU::TRI__mapper__PDU(const TRI__mapper__PDU& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TRI_interface_Types.TRI_mapper_PDU.");
bound_flag = TRUE;
if (other_value.msg__id().is_bound()) field_msg__id = other_value.msg__id();
else field_msg__id.clean_up();
if (other_value.msg().is_bound()) field_msg = other_value.msg();
else field_msg.clean_up();
}

void TRI__mapper__PDU::clean_up()
{
field_msg__id.clean_up();
field_msg.clean_up();
bound_flag = FALSE;
}

TRI__mapper__PDU& TRI__mapper__PDU::operator=(const TRI__mapper__PDU& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TRI_interface_Types.TRI_mapper_PDU.");
  bound_flag = TRUE;
  if (other_value.msg__id().is_bound()) field_msg__id = other_value.msg__id();
  else field_msg__id.clean_up();
  if (other_value.msg().is_bound()) field_msg = other_value.msg();
  else field_msg.clean_up();
}
return *this;
}

boolean TRI__mapper__PDU::operator==(const TRI__mapper__PDU& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_msg__id==other_value.field_msg__id
  && field_msg==other_value.field_msg;
}

boolean TRI__mapper__PDU::is_bound() const
{
if (bound_flag) return TRUE;
if(field_msg__id.is_bound()) return TRUE;
if(field_msg.is_bound()) return TRUE;
return FALSE;
}
boolean TRI__mapper__PDU::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_msg__id.is_value()) return FALSE;
if(!field_msg.is_value()) return FALSE;
return TRUE;
}
int TRI__mapper__PDU::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TRI_interface_Types.TRI_mapper_PDU");
  return 2;
}

void TRI__mapper__PDU::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ msg_id := ");
field_msg__id.log();
TTCN_Logger::log_event_str(", msg := ");
field_msg.log();
TTCN_Logger::log_event_str(" }");
}

void TRI__mapper__PDU::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TRI_interface_Types.TRI_mapper_PDU'");
    }
    if (strcmp("msg_id", param_field) == 0) {
      msg__id().set_param(param);
      return;
    } else if (strcmp("msg", param_field) == 0) {
      msg().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TRI_interface_Types.TRI_mapper_PDU'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record value of type @TRI_interface_Types.TRI_mapper_PDU has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) msg__id().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) msg().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg_id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg__id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TRI_mapper_PDU: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TRI_interface_Types.TRI_mapper_PDU");
  }
}

Module_Param* TRI__mapper__PDU::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record type `@TRI_interface_Types.TRI_mapper_PDU'");
    }
    if (strcmp("msg_id", param_field) == 0) {
      return msg__id().get_param(param_name);
    } else if (strcmp("msg", param_field) == 0) {
      return msg().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TRI_mapper_PDU'", param_field);
  }
  Module_Param_Assignment_List* mp = new Module_Param_Assignment_List();
  Module_Param* mp_field_msg__id = field_msg__id.get_param(param_name);
  mp_field_msg__id->set_id(new Module_Param_FieldName(mcopystr("msg_id")));
  mp->add_elem(mp_field_msg__id);
  Module_Param* mp_field_msg = field_msg.get_param(param_name);
  mp_field_msg->set_id(new Module_Param_FieldName(mcopystr("msg")));
  mp->add_elem(mp_field_msg);
  return mp;
  }

void TRI__mapper__PDU::set_implicit_omit()
{
if (msg__id().is_bound()) msg__id().set_implicit_omit();
if (msg().is_bound()) msg().set_implicit_omit();
}

void TRI__mapper__PDU::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TRI_interface_Types.TRI_mapper_PDU.");
field_msg__id.encode_text(text_buf);
field_msg.encode_text(text_buf);
}

void TRI__mapper__PDU::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_msg__id.decode_text(text_buf);
field_msg.decode_text(text_buf);
}

void TRI__mapper__PDU::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void TRI__mapper__PDU::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int TRI__mapper__PDU::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TRI_interface_Types.TRI_mapper_PDU.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "msg_id");
    enc_len += field_msg__id.JSON_encode(INTEGER_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "msg");
    enc_len += field_msg.JSON_encode(Msg__union_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int TRI__mapper__PDU::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;


  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "msg_id", name_len)) {
         int ret_val = field_msg__id.JSON_decode(INTEGER_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "msg_id");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else if (3 == name_len && 0 == strncmp(fld_name, "msg", name_len)) {
         int ret_val = field_msg.JSON_decode(Msg__union_descr_, p_tok, p_silent);
         if (0 > ret_val) {
           if (JSON_ERROR_INVALID_TOKEN == ret_val) {
             JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "msg");
           }
           return JSON_ERROR_FATAL;
         }
         dec_len += ret_val;
      }
      else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_msg__id.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "msg_id");
    return JSON_ERROR_FATAL;
  }
if (!field_msg.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "msg");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct TRI__mapper__PDU_template::single_value_struct {
INTEGER_template field_msg__id;
Msg__union_template field_msg;
};

void TRI__mapper__PDU_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_msg__id = ANY_VALUE;
single_value->field_msg = ANY_VALUE;
}
}
}

void TRI__mapper__PDU_template::copy_value(const TRI__mapper__PDU& other_value)
{
single_value = new single_value_struct;
if (other_value.msg__id().is_bound()) {
  single_value->field_msg__id = other_value.msg__id();
} else {
  single_value->field_msg__id.clean_up();
}
if (other_value.msg().is_bound()) {
  single_value->field_msg = other_value.msg();
} else {
  single_value->field_msg.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void TRI__mapper__PDU_template::copy_template(const TRI__mapper__PDU_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.msg__id().get_selection()) {
single_value->field_msg__id = other_value.msg__id();
} else {
single_value->field_msg__id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.msg().get_selection()) {
single_value->field_msg = other_value.msg();
} else {
single_value->field_msg.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new TRI__mapper__PDU_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TRI_interface_Types.TRI_mapper_PDU.");
break;
}
set_selection(other_value);
}

TRI__mapper__PDU_template::TRI__mapper__PDU_template()
{
}

TRI__mapper__PDU_template::TRI__mapper__PDU_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

TRI__mapper__PDU_template::TRI__mapper__PDU_template(const TRI__mapper__PDU& other_value)
{
copy_value(other_value);
}

TRI__mapper__PDU_template::TRI__mapper__PDU_template(const OPTIONAL<TRI__mapper__PDU>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TRI__mapper__PDU&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TRI_interface_Types.TRI_mapper_PDU from an unbound optional field.");
}
}

TRI__mapper__PDU_template::TRI__mapper__PDU_template(const TRI__mapper__PDU_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

TRI__mapper__PDU_template::~TRI__mapper__PDU_template()
{
clean_up();
}

TRI__mapper__PDU_template& TRI__mapper__PDU_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

TRI__mapper__PDU_template& TRI__mapper__PDU_template::operator=(const TRI__mapper__PDU& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

TRI__mapper__PDU_template& TRI__mapper__PDU_template::operator=(const OPTIONAL<TRI__mapper__PDU>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TRI__mapper__PDU&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TRI_interface_Types.TRI_mapper_PDU.");
}
return *this;
}

TRI__mapper__PDU_template& TRI__mapper__PDU_template::operator=(const TRI__mapper__PDU_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean TRI__mapper__PDU_template::match(const TRI__mapper__PDU& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.msg__id().is_bound()) return FALSE;
if(!single_value->field_msg__id.match(other_value.msg__id(), legacy))return FALSE;
if(!other_value.msg().is_bound()) return FALSE;
if(!single_value->field_msg.match(other_value.msg(), legacy))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TRI_interface_Types.TRI_mapper_PDU.");
}
return FALSE;
}

boolean TRI__mapper__PDU_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_msg__id.is_bound()) return TRUE;
if (single_value->field_msg.is_bound()) return TRUE;
return FALSE;
}

boolean TRI__mapper__PDU_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_msg__id.is_value()) return FALSE;
if (!single_value->field_msg.is_value()) return FALSE;
return TRUE;
}

void TRI__mapper__PDU_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

TRI__mapper__PDU TRI__mapper__PDU_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TRI_interface_Types.TRI_mapper_PDU.");
TRI__mapper__PDU ret_val;
if (single_value->field_msg__id.is_bound()) {
ret_val.msg__id() = single_value->field_msg__id.valueof();
}
if (single_value->field_msg.is_bound()) {
ret_val.msg() = single_value->field_msg.valueof();
}
return ret_val;
}

void TRI__mapper__PDU_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TRI_interface_Types.TRI_mapper_PDU.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new TRI__mapper__PDU_template[list_length];
}

TRI__mapper__PDU_template& TRI__mapper__PDU_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TRI_interface_Types.TRI_mapper_PDU.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TRI_interface_Types.TRI_mapper_PDU.");
return value_list.list_value[list_index];
}

INTEGER_template& TRI__mapper__PDU_template::msg__id()
{
set_specific();
return single_value->field_msg__id;
}

const INTEGER_template& TRI__mapper__PDU_template::msg__id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field msg_id of a non-specific template of type @TRI_interface_Types.TRI_mapper_PDU.");
return single_value->field_msg__id;
}

Msg__union_template& TRI__mapper__PDU_template::msg()
{
set_specific();
return single_value->field_msg;
}

const Msg__union_template& TRI__mapper__PDU_template::msg() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field msg of a non-specific template of type @TRI_interface_Types.TRI_mapper_PDU.");
return single_value->field_msg;
}

int TRI__mapper__PDU_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TRI_mapper_PDU which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TRI_interface_Types.TRI_mapper_PDU containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TRI_mapper_PDU containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TRI_mapper_PDU containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TRI_mapper_PDU containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TRI_interface_Types.TRI_mapper_PDU containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TRI_interface_Types.TRI_mapper_PDU.");
  }
  return 0;
}

void TRI__mapper__PDU_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ msg_id := ");
single_value->field_msg__id.log();
TTCN_Logger::log_event_str(", msg := ");
single_value->field_msg.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void TRI__mapper__PDU_template::log_match(const TRI__mapper__PDU& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_msg__id.match(match_value.msg__id(), legacy)){
TTCN_Logger::log_logmatch_info(".msg_id");
single_value->field_msg__id.log_match(match_value.msg__id(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_msg.match(match_value.msg(), legacy)){
TTCN_Logger::log_logmatch_info(".msg");
single_value->field_msg.log_match(match_value.msg(), legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ msg_id := ");
single_value->field_msg__id.log_match(match_value.msg__id(), legacy);
TTCN_Logger::log_event_str(", msg := ");
single_value->field_msg.log_match(match_value.msg(), legacy);
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void TRI__mapper__PDU_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_msg__id.encode_text(text_buf);
single_value->field_msg.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TRI_interface_Types.TRI_mapper_PDU.");
}
}

void TRI__mapper__PDU_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_msg__id.decode_text(text_buf);
single_value->field_msg.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new TRI__mapper__PDU_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TRI_interface_Types.TRI_mapper_PDU.");
}
}

void TRI__mapper__PDU_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TRI_interface_Types.TRI_mapper_PDU'");
    }
    if (strcmp("msg_id", param_field) == 0) {
      msg__id().set_param(param);
      return;
    } else if (strcmp("msg", param_field) == 0) {
      msg().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TRI_interface_Types.TRI_mapper_PDU'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    TRI__mapper__PDU_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Value_List:
    if (2<mp->get_size()) {
      param.error("record template of type @TRI_interface_Types.TRI_mapper_PDU has 2 fields but list value has %d fields", (int)mp->get_size());
    }
    if (mp->get_size()>0 && mp->get_elem(0)->get_type()!=Module_Param::MP_NotUsed) msg__id().set_param(*mp->get_elem(0));
    if (mp->get_size()>1 && mp->get_elem(1)->get_type()!=Module_Param::MP_NotUsed) msg().set_param(*mp->get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(mp->get_size());
    value_used.resize(mp->get_size(), false);
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg_id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg__id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) {
      Module_Param* const curr_param = mp->get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "msg")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          msg().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<mp->get_size(); val_idx++) if (!value_used[val_idx]) {
      mp->get_elem(val_idx)->error("Non existent field name in type @TRI_interface_Types.TRI_mapper_PDU: %s", mp->get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TRI_interface_Types.TRI_mapper_PDU");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
}

Module_Param* TRI__mapper__PDU_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      TTCN_error("Unexpected array index in module parameter reference, "
        "expected a valid field name for record template type `@TRI_interface_Types.TRI_mapper_PDU'");
    }
    if (strcmp("msg_id", param_field) == 0) {
      return msg__id().get_param(param_name);
    } else if (strcmp("msg", param_field) == 0) {
      return msg().get_param(param_name);
    } else TTCN_error("Field `%s' not found in record type `@TRI_interface_Types.TRI_mapper_PDU'", param_field);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    mp = new Module_Param_Assignment_List();
    Module_Param* mp_field_msg__id = single_value->field_msg__id.get_param(param_name);
    mp_field_msg__id->set_id(new Module_Param_FieldName(mcopystr("msg_id")));
    mp->add_elem(mp_field_msg__id);
    Module_Param* mp_field_msg = single_value->field_msg.get_param(param_name);
    mp_field_msg->set_id(new Module_Param_FieldName(mcopystr("msg")));
    mp->add_elem(mp_field_msg);
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  return mp;
}

void TRI__mapper__PDU_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_msg__id.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TRI_mapper_PDU");
single_value->field_msg.check_restriction(t_res, t_name ? t_name : "@TRI_interface_Types.TRI_mapper_PDU");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TRI_interface_Types.TRI_mapper_PDU");
}

boolean TRI__mapper__PDU_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean TRI__mapper__PDU_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

OCTETSTRING TRI__encode(const TRI__mapper__PDU& pdu)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("TRI_encode(): Encoding @TRI_interface_Types.TRI_mapper_PDU: ");
pdu.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_DEFAULT);
TTCN_Buffer ttcn_buffer;
pdu.encode(TRI__mapper__PDU_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON, 0);
OCTETSTRING ret_val;
ttcn_buffer.get_string(ret_val);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("TRI_encode(): Stream after encoding: ");
ret_val.log();
TTCN_Logger::end_event();
}
return ret_val;
}

INTEGER TRI__decode(const OCTETSTRING& stream, TRI__mapper__PDU& pdu)
{
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("TRI_decode(): Stream before decoding: ");
stream.log();
TTCN_Logger::end_event();
}
TTCN_EncDec::set_error_behavior(TTCN_EncDec::ET_ALL, TTCN_EncDec::EB_WARNING);
TTCN_EncDec::clear_error();
TTCN_Buffer ttcn_buffer(stream);
pdu.decode(TRI__mapper__PDU_descr_, ttcn_buffer, TTCN_EncDec::CT_JSON);
if (TTCN_Logger::log_this_event(TTCN_Logger::DEBUG_ENCDEC)) {
TTCN_Logger::begin_event(TTCN_Logger::DEBUG_ENCDEC);
TTCN_Logger::log_event_str("TRI_decode(): Decoded @TRI_interface_Types.TRI_mapper_PDU: ");
pdu.log();
TTCN_Logger::end_event();
}
if (TTCN_EncDec::get_last_error_type() == TTCN_EncDec::ET_NONE) {
if (ttcn_buffer.get_pos() < ttcn_buffer.get_len()-1 && TTCN_Logger::log_this_event(TTCN_WARNING)) {
ttcn_buffer.cut();
OCTETSTRING remaining_stream;
ttcn_buffer.get_string(remaining_stream);
TTCN_Logger::begin_event(TTCN_WARNING);
TTCN_Logger::log_event_str("TRI_decode(): Warning: Data remained at the end of the stream after successful decoding: ");
remaining_stream.log();
TTCN_Logger::end_event();
}
return 0;
} else return 1;
}

boolean operator==(null_type, const UnMap& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @TRI_interface_Types.UnMap.");
return TRUE;
}

boolean operator==(null_type, const Unregister& other_value)
{
other_value.must_bound("Comparison of an unbound value of type @TRI_interface_Types.Unregister.");
return TRUE;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("TRI_interface_Types.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "TRI_interface_Types");
module_object.add_function("TRI_encode", (genericfunc_t)&TRI__encode, NULL);
module_object.add_function("TRI_decode", (genericfunc_t)&TRI__decode, NULL);
}


} /* end of namespace */
