// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsGeoNetworking_Functions.hh"

namespace LibItsGeoNetworking__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const unsigned char bs_2_bits[] = { 0 },
bs_0_bits[] = { 1 },
bs_1_bits[] = { 1 };
static const BITSTRING bs_2(8, bs_2_bits),
bs_0(1, bs_0_bits),
bs_1(8, bs_1_bits);
static const unsigned char os_0_octets[] = { 255, 255, 255, 255, 255, 255, 255, 255 };
static const OCTETSTRING os_0(8, os_0_octets);
static const CHARSTRING cs_4(4, " ***"),
cs_1(4, "*** "),
cs_3(51, "*** f_getTsGnLocalAddress: INFO: Unknown component "),
cs_2(51, ": INFO: Received unexpected UT message from IUT ***"),
cs_0(5, "error");
static const unsigned char module_checksum[] = { 0x6c, 0x8c, 0xd0, 0x66, 0x20, 0x67, 0x8a, 0x78, 0x6d, 0x65, 0x4c, 0x0e, 0x85, 0x8e, 0x1d, 0xb8 };

/* Class definitions for internal use */

class a__default_Default : public Default_Base {
public:
a__default_Default();
alt_status call_altstep();
};

class a__neighbourDefault_Default : public Default_Base {
public:
a__neighbourDefault_Default();
alt_status call_altstep();
};

class a__utDefault_Default : public Default_Base {
public:
a__utDefault_Default();
alt_status call_altstep();
};

class a__cf01Down_Default : public Default_Base {
public:
a__cf01Down_Default();
alt_status call_altstep();
};

class a__cf02Down_Default : public Default_Base {
public:
a__cf02Down_Default();
alt_status call_altstep();
};

class a__cf03Down_Default : public Default_Base {
public:
a__cf03Down_Default();
alt_status call_altstep();
};

class a__cf04Down_Default : public Default_Base {
public:
a__cf04Down_Default();
alt_status call_altstep();
};

class a__cf05Down_Default : public Default_Base {
public:
a__cf05Down_Default();
alt_status call_altstep();
};

class a__cf06Down_Default : public Default_Base {
public:
a__cf06Down_Default();
alt_status call_altstep();
};

class a__cf07Down_Default : public Default_Base {
public:
a__cf07Down_Default();
alt_status call_altstep();
};

class a__receiveGeoUnicast_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::ShortPosVector_template par_p__destinationShortPosVec;
INTEGER_template par_p__seqNumber;
public:
a__receiveGeoUnicast_Default(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber);
alt_status call_altstep();
};

class a__receiveGeoUnicastWithDestination_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::ShortPosVector_template par_p__destinationShortPosVec;
public:
a__receiveGeoUnicastWithDestination_Default(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec);
alt_status call_altstep();
};

class a__receiveAnyGeoUnicast_Default : public Default_Base {
public:
a__receiveAnyGeoUnicast_Default();
alt_status call_altstep();
};

class a__receiveGeoBroadcast_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__srcLongPosVec;
INTEGER_template par_p__seqNumber;
public:
a__receiveGeoBroadcast_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber);
alt_status call_altstep();
};

class a__receiveGeoBroadcastWithAreaWithHopLimit_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__srcLongPosVec;
INTEGER_template par_p__seqNumber;
LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template par_p__broadcastArea;
INTEGER_template par_p__routerHopLimit;
INTEGER_template par_p__maxHopLimit;
public:
a__receiveGeoBroadcastWithAreaWithHopLimit_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit);
alt_status call_altstep();
};

class a__receiveGeoBroadcastWithArea_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__srcLongPosVec;
INTEGER_template par_p__seqNumber;
LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template par_p__broadcastArea;
public:
a__receiveGeoBroadcastWithArea_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea);
alt_status call_altstep();
};

class a__receiveGeoAnycast_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__srcLongPosVec;
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__senderLongPosVec;
INTEGER_template par_p__seqNumber;
public:
a__receiveGeoAnycast_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber);
alt_status call_altstep();
};

class a__receiveGeoAnycastWithAreaWithHopLimit_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__srcLongPosVec;
INTEGER_template par_p__seqNumber;
LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template par_p__anycastArea;
INTEGER_template par_p__hopLimit;
INTEGER_template par_p__maxHopLimit;
public:
a__receiveGeoAnycastWithAreaWithHopLimit_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit);
alt_status call_altstep();
};

class a__receiveGeoAnycastWithArea_Default : public Default_Base {
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__srcLongPosVec;
INTEGER_template par_p__seqNumber;
LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template par_p__anycastArea;
public:
a__receiveGeoAnycastWithArea_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea);
alt_status call_altstep();
};

class a__receiveLsRequest_Default : public Default_Base {
INTEGER_template par_p__seqNumber;
OCTETSTRING_template par_p__mid;
LibItsGeoNetworking__TypesAndValues::LongPosVector& par_p__reqSrcPosVector;
public:
a__receiveLsRequest_Default(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector);
alt_status call_altstep();
};

class a__receiveAnyLsRequest_Default : public Default_Base {
public:
a__receiveAnyLsRequest_Default();
alt_status call_altstep();
};

class a__receiveAnyLsReply_Default : public Default_Base {
public:
a__receiveAnyLsReply_Default();
alt_status call_altstep();
};

class a__receiveLsRequestAndReply_Default : public Default_Base {
INTEGER_template par_p__reqSeqNumber;
OCTETSTRING_template par_p__mid;
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__repSrcPosVector;
LibItsGeoNetworking__TypesAndValues::LongPosVector_template par_p__repSenderPosVector;
public:
a__receiveLsRequestAndReply_Default(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector);
alt_status call_altstep();
};

class a__securedMessage_Default : public Default_Base {
LibItsSecurity__TypesAndValues::SecuredMessage_template par_p__InSecMsg;
LibItsSecurity__TypesAndValues::SecuredMessage& par_p__received;
public:
a__securedMessage_Default(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
alt_status call_altstep();
};

class a__securedMessageWithCertificate_Default : public Default_Base {
LibItsSecurity__TypesAndValues::SecuredMessage& par_p__received;
public:
a__securedMessageWithCertificate_Default(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
alt_status call_altstep();
};

class a__securedMessageWithCertificateChain_Default : public Default_Base {
LibItsSecurity__TypesAndValues::SecuredMessage& par_p__received;
public:
a__securedMessageWithCertificateChain_Default(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
alt_status call_altstep();
};

class a__securedMessageWithDigest_Default : public Default_Base {
LibItsSecurity__TypesAndValues::SecuredMessage& par_p__received;
public:
a__securedMessageWithDigest_Default(LibItsSecurity__TypesAndValues::SecuredMessage& p__received);
alt_status call_altstep();
};


/* Global variable definitions */

static CHARSTRING const_f__cf02Up_p__mainUtComponent_defval;
const CHARSTRING& f__cf02Up_p__mainUtComponent_defval = const_f__cf02Up_p__mainUtComponent_defval;
static CHARSTRING const_f__cf03Up_p__mainUtComponent_defval;
const CHARSTRING& f__cf03Up_p__mainUtComponent_defval = const_f__cf03Up_p__mainUtComponent_defval;
static CHARSTRING const_f__cf04Up_p__mainUtComponent_defval;
const CHARSTRING& f__cf04Up_p__mainUtComponent_defval = const_f__cf04Up_p__mainUtComponent_defval;
static CHARSTRING const_f__cf05Up_p__mainUtComponent_defval;
const CHARSTRING& f__cf05Up_p__mainUtComponent_defval = const_f__cf05Up_p__mainUtComponent_defval;
static CHARSTRING const_f__cf06Up_p__mainUtComponent_defval;
const CHARSTRING& f__cf06Up_p__mainUtComponent_defval = const_f__cf06Up_p__mainUtComponent_defval;
static CHARSTRING const_f__cf07Up_p__mainUtComponent_defval;
const CHARSTRING& f__cf07Up_p__mainUtComponent_defval = const_f__cf07Up_p__mainUtComponent_defval;
static INTEGER_template template_a__receiveGeoBroadcastWithAreaWithHopLimit_p__maxHopLimit_defval;
const INTEGER_template& a__receiveGeoBroadcastWithAreaWithHopLimit_p__maxHopLimit_defval = template_a__receiveGeoBroadcastWithAreaWithHopLimit_p__maxHopLimit_defval;
static INTEGER_template template_a__receiveGeoAnycastWithAreaWithHopLimit_p__maxHopLimit_defval;
const INTEGER_template& a__receiveGeoAnycastWithAreaWithHopLimit_p__maxHopLimit_defval = template_a__receiveGeoAnycastWithAreaWithHopLimit_p__maxHopLimit_defval;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsGeoNetworking_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

a__default_Default::a__default_Default()
 : Default_Base("a_default")
{
}

alt_status a__default_Default::call_altstep()
{
return a__default_instance();
}

a__neighbourDefault_Default::a__neighbourDefault_Default()
 : Default_Base("a_neighbourDefault")
{
}

alt_status a__neighbourDefault_Default::call_altstep()
{
return a__neighbourDefault_instance();
}

a__utDefault_Default::a__utDefault_Default()
 : Default_Base("a_utDefault")
{
}

alt_status a__utDefault_Default::call_altstep()
{
return a__utDefault_instance();
}

a__cf01Down_Default::a__cf01Down_Default()
 : Default_Base("a_cf01Down")
{
}

alt_status a__cf01Down_Default::call_altstep()
{
return a__cf01Down_instance();
}

a__cf02Down_Default::a__cf02Down_Default()
 : Default_Base("a_cf02Down")
{
}

alt_status a__cf02Down_Default::call_altstep()
{
return a__cf02Down_instance();
}

a__cf03Down_Default::a__cf03Down_Default()
 : Default_Base("a_cf03Down")
{
}

alt_status a__cf03Down_Default::call_altstep()
{
return a__cf03Down_instance();
}

a__cf04Down_Default::a__cf04Down_Default()
 : Default_Base("a_cf04Down")
{
}

alt_status a__cf04Down_Default::call_altstep()
{
return a__cf04Down_instance();
}

a__cf05Down_Default::a__cf05Down_Default()
 : Default_Base("a_cf05Down")
{
}

alt_status a__cf05Down_Default::call_altstep()
{
return a__cf05Down_instance();
}

a__cf06Down_Default::a__cf06Down_Default()
 : Default_Base("a_cf06Down")
{
}

alt_status a__cf06Down_Default::call_altstep()
{
return a__cf06Down_instance();
}

a__cf07Down_Default::a__cf07Down_Default()
 : Default_Base("a_cf07Down")
{
}

alt_status a__cf07Down_Default::call_altstep()
{
return a__cf07Down_instance();
}

a__receiveGeoUnicast_Default::a__receiveGeoUnicast_Default(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber)
 : Default_Base("a_receiveGeoUnicast"), par_p__destinationShortPosVec(p__destinationShortPosVec), par_p__seqNumber(p__seqNumber)
{
}

alt_status a__receiveGeoUnicast_Default::call_altstep()
{
return a__receiveGeoUnicast_instance(par_p__destinationShortPosVec, par_p__seqNumber);
}

a__receiveGeoUnicastWithDestination_Default::a__receiveGeoUnicastWithDestination_Default(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec)
 : Default_Base("a_receiveGeoUnicastWithDestination"), par_p__destinationShortPosVec(p__destinationShortPosVec)
{
}

alt_status a__receiveGeoUnicastWithDestination_Default::call_altstep()
{
return a__receiveGeoUnicastWithDestination_instance(par_p__destinationShortPosVec);
}

a__receiveAnyGeoUnicast_Default::a__receiveAnyGeoUnicast_Default()
 : Default_Base("a_receiveAnyGeoUnicast")
{
}

alt_status a__receiveAnyGeoUnicast_Default::call_altstep()
{
return a__receiveAnyGeoUnicast_instance();
}

a__receiveGeoBroadcast_Default::a__receiveGeoBroadcast_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber)
 : Default_Base("a_receiveGeoBroadcast"), par_p__srcLongPosVec(p__srcLongPosVec), par_p__seqNumber(p__seqNumber)
{
}

alt_status a__receiveGeoBroadcast_Default::call_altstep()
{
return a__receiveGeoBroadcast_instance(par_p__srcLongPosVec, par_p__seqNumber);
}

a__receiveGeoBroadcastWithAreaWithHopLimit_Default::a__receiveGeoBroadcastWithAreaWithHopLimit_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit)
 : Default_Base("a_receiveGeoBroadcastWithAreaWithHopLimit"), par_p__srcLongPosVec(p__srcLongPosVec), par_p__seqNumber(p__seqNumber), par_p__broadcastArea(p__broadcastArea), par_p__routerHopLimit(p__routerHopLimit), par_p__maxHopLimit(p__maxHopLimit)
{
}

alt_status a__receiveGeoBroadcastWithAreaWithHopLimit_Default::call_altstep()
{
return a__receiveGeoBroadcastWithAreaWithHopLimit_instance(par_p__srcLongPosVec, par_p__seqNumber, par_p__broadcastArea, par_p__routerHopLimit, par_p__maxHopLimit);
}

a__receiveGeoBroadcastWithArea_Default::a__receiveGeoBroadcastWithArea_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea)
 : Default_Base("a_receiveGeoBroadcastWithArea"), par_p__srcLongPosVec(p__srcLongPosVec), par_p__seqNumber(p__seqNumber), par_p__broadcastArea(p__broadcastArea)
{
}

alt_status a__receiveGeoBroadcastWithArea_Default::call_altstep()
{
return a__receiveGeoBroadcastWithArea_instance(par_p__srcLongPosVec, par_p__seqNumber, par_p__broadcastArea);
}

a__receiveGeoAnycast_Default::a__receiveGeoAnycast_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber)
 : Default_Base("a_receiveGeoAnycast"), par_p__srcLongPosVec(p__srcLongPosVec), par_p__senderLongPosVec(p__senderLongPosVec), par_p__seqNumber(p__seqNumber)
{
}

alt_status a__receiveGeoAnycast_Default::call_altstep()
{
return a__receiveGeoAnycast_instance(par_p__srcLongPosVec, par_p__senderLongPosVec, par_p__seqNumber);
}

a__receiveGeoAnycastWithAreaWithHopLimit_Default::a__receiveGeoAnycastWithAreaWithHopLimit_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit)
 : Default_Base("a_receiveGeoAnycastWithAreaWithHopLimit"), par_p__srcLongPosVec(p__srcLongPosVec), par_p__seqNumber(p__seqNumber), par_p__anycastArea(p__anycastArea), par_p__hopLimit(p__hopLimit), par_p__maxHopLimit(p__maxHopLimit)
{
}

alt_status a__receiveGeoAnycastWithAreaWithHopLimit_Default::call_altstep()
{
return a__receiveGeoAnycastWithAreaWithHopLimit_instance(par_p__srcLongPosVec, par_p__seqNumber, par_p__anycastArea, par_p__hopLimit, par_p__maxHopLimit);
}

a__receiveGeoAnycastWithArea_Default::a__receiveGeoAnycastWithArea_Default(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea)
 : Default_Base("a_receiveGeoAnycastWithArea"), par_p__srcLongPosVec(p__srcLongPosVec), par_p__seqNumber(p__seqNumber), par_p__anycastArea(p__anycastArea)
{
}

alt_status a__receiveGeoAnycastWithArea_Default::call_altstep()
{
return a__receiveGeoAnycastWithArea_instance(par_p__srcLongPosVec, par_p__seqNumber, par_p__anycastArea);
}

a__receiveLsRequest_Default::a__receiveLsRequest_Default(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector)
 : Default_Base("a_receiveLsRequest"), par_p__seqNumber(p__seqNumber), par_p__mid(p__mid), par_p__reqSrcPosVector(p__reqSrcPosVector)
{
}

alt_status a__receiveLsRequest_Default::call_altstep()
{
return a__receiveLsRequest_instance(par_p__seqNumber, par_p__mid, par_p__reqSrcPosVector);
}

a__receiveAnyLsRequest_Default::a__receiveAnyLsRequest_Default()
 : Default_Base("a_receiveAnyLsRequest")
{
}

alt_status a__receiveAnyLsRequest_Default::call_altstep()
{
return a__receiveAnyLsRequest_instance();
}

a__receiveAnyLsReply_Default::a__receiveAnyLsReply_Default()
 : Default_Base("a_receiveAnyLsReply")
{
}

alt_status a__receiveAnyLsReply_Default::call_altstep()
{
return a__receiveAnyLsReply_instance();
}

a__receiveLsRequestAndReply_Default::a__receiveLsRequestAndReply_Default(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector)
 : Default_Base("a_receiveLsRequestAndReply"), par_p__reqSeqNumber(p__reqSeqNumber), par_p__mid(p__mid), par_p__repSrcPosVector(p__repSrcPosVector), par_p__repSenderPosVector(p__repSenderPosVector)
{
}

alt_status a__receiveLsRequestAndReply_Default::call_altstep()
{
return a__receiveLsRequestAndReply_instance(par_p__reqSeqNumber, par_p__mid, par_p__repSrcPosVector, par_p__repSenderPosVector);
}

a__securedMessage_Default::a__securedMessage_Default(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
 : Default_Base("a_securedMessage"), par_p__InSecMsg(p__InSecMsg), par_p__received(p__received)
{
}

alt_status a__securedMessage_Default::call_altstep()
{
return a__securedMessage_instance(par_p__InSecMsg, par_p__received);
}

a__securedMessageWithCertificate_Default::a__securedMessageWithCertificate_Default(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
 : Default_Base("a_securedMessageWithCertificate"), par_p__received(p__received)
{
}

alt_status a__securedMessageWithCertificate_Default::call_altstep()
{
return a__securedMessageWithCertificate_instance(par_p__received);
}

a__securedMessageWithCertificateChain_Default::a__securedMessageWithCertificateChain_Default(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
 : Default_Base("a_securedMessageWithCertificateChain"), par_p__received(p__received)
{
}

alt_status a__securedMessageWithCertificateChain_Default::call_altstep()
{
return a__securedMessageWithCertificateChain_instance(par_p__received);
}

a__securedMessageWithDigest_Default::a__securedMessageWithDigest_Default(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
 : Default_Base("a_securedMessageWithDigest"), par_p__received(p__received)
{
}

alt_status a__securedMessageWithDigest_Default::call_altstep()
{
return a__securedMessageWithDigest_instance(par_p__received);
}


/* Bodies of functions, altsteps and testcases */

void f__utInitializeIut(const LibItsCommon__TypesAndValues::UtInitialize_template& p__init)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 45, TTCN_Location::LOCATION_FUNCTION, "f_utInitializeIut");
current_location.update_lineno(46);
/* LibItsGeoNetworking_Functions.ttcn, line 46 */
LibItsCommon__TypesAndValues::UtInitializeResult v__UtInitializeResult;
current_location.update_lineno(47);
/* LibItsGeoNetworking_Functions.ttcn, line 47 */
v__UtInitializeResult.utInitializeResult() = TRUE;
current_location.update_lineno(49);
/* LibItsGeoNetworking_Functions.ttcn, line 49 */
LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.send(p__init);
current_location.update_lineno(50);
/* LibItsGeoNetworking_Functions.ttcn, line 50 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(51);
/* LibItsGeoNetworking_Functions.ttcn, line 51 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
alt_status tmp_1_alt_flag_2 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(52);
/* LibItsGeoNetworking_Functions.ttcn, line 52 */
tmp_1_alt_flag_0 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(LibItsCommon__TypesAndValues::UtInitializeResult_template(v__UtInitializeResult), NULL, any_compref, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(53);
/* LibItsGeoNetworking_Functions.ttcn, line 53 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(54);
/* LibItsGeoNetworking_Functions.ttcn, line 54 */
TTCN_Logger::log_str(TTCN_USER, "*** f_utInitializeIut: INFO: IUT initialized ***");
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(56);
/* LibItsGeoNetworking_Functions.ttcn, line 56 */
tmp_1_alt_flag_1 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(any_compref, NULL);
if (tmp_1_alt_flag_1 == ALT_YES) {
current_location.update_lineno(57);
/* LibItsGeoNetworking_Functions.ttcn, line 57 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(58);
/* LibItsGeoNetworking_Functions.ttcn, line 58 */
TTCN_Logger::log_str(TTCN_USER, "*** f_utInitializeIut: INFO: IUT could not be initialized ***");
current_location.update_lineno(59);
/* LibItsGeoNetworking_Functions.ttcn, line 59 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_1_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(61);
/* LibItsGeoNetworking_Functions.ttcn, line 61 */
tmp_1_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_1_alt_flag_2 == ALT_YES) {
current_location.update_lineno(62);
/* LibItsGeoNetworking_Functions.ttcn, line 62 */
TTCN_Logger::log_str(TTCN_USER, "*** f_utInitializeIut: INFO: IUT could not be initialized in time ***");
current_location.update_lineno(63);
/* LibItsGeoNetworking_Functions.ttcn, line 63 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(67);
/* LibItsGeoNetworking_Functions.ttcn, line 67 */
goto tmp_1;
}
}
}
}

void start_f__utInitializeIut(const COMPONENT& component_reference, const LibItsCommon__TypesAndValues::UtInitialize_template& p__init)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utInitializeIut(");
p__init.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_utInitializeIut", text_buf);
p__init.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__utChangePosition()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 75, TTCN_Location::LOCATION_FUNCTION, "f_utChangePosition");
current_location.update_lineno(76);
/* LibItsGeoNetworking_Functions.ttcn, line 76 */
LibItsCommon__TypesAndValues::UtChangePositionResult v__UtChangePositionResult;
current_location.update_lineno(77);
/* LibItsGeoNetworking_Functions.ttcn, line 77 */
v__UtChangePositionResult.utChangePositionResult() = TRUE;
current_location.update_lineno(79);
/* LibItsGeoNetworking_Functions.ttcn, line 79 */
LibItsCommon__TypesAndValues::UtChangePositionResult v__UtChangePositionResult__false;
current_location.update_lineno(80);
/* LibItsGeoNetworking_Functions.ttcn, line 80 */
v__UtChangePositionResult__false.utChangePositionResult() = FALSE;
current_location.update_lineno(82);
/* LibItsGeoNetworking_Functions.ttcn, line 82 */
LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.send(LibItsGeoNetworking__Templates::m__changePosition);
current_location.update_lineno(83);
/* LibItsGeoNetworking_Functions.ttcn, line 83 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(84);
/* LibItsGeoNetworking_Functions.ttcn, line 84 */
{
tmp_4:
alt_status tmp_4_alt_flag_0 = ALT_MAYBE;
alt_status tmp_4_alt_flag_1 = ALT_MAYBE;
alt_status tmp_4_alt_flag_2 = ALT_MAYBE;
alt_status tmp_4_alt_flag_3 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_4_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(85);
/* LibItsGeoNetworking_Functions.ttcn, line 85 */
tmp_4_alt_flag_0 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(LibItsCommon__TypesAndValues::UtChangePositionResult_template(v__UtChangePositionResult), NULL, any_compref, NULL);
if (tmp_4_alt_flag_0 == ALT_YES) {
current_location.update_lineno(86);
/* LibItsGeoNetworking_Functions.ttcn, line 86 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(87);
/* LibItsGeoNetworking_Functions.ttcn, line 87 */
TTCN_Logger::log_str(TTCN_USER, "*** f_utChangePosition: INFO: IUT position changed ***");
break;
}
}
if (tmp_4_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(89);
/* LibItsGeoNetworking_Functions.ttcn, line 89 */
tmp_4_alt_flag_1 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(LibItsCommon__TypesAndValues::UtChangePositionResult_template(v__UtChangePositionResult__false), NULL, any_compref, NULL);
if (tmp_4_alt_flag_1 == ALT_YES) {
current_location.update_lineno(90);
/* LibItsGeoNetworking_Functions.ttcn, line 90 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(91);
/* LibItsGeoNetworking_Functions.ttcn, line 91 */
TTCN_Logger::log_str(TTCN_USER, "*** f_utChangePosition: INFO: IUT position change was not successful ***");
current_location.update_lineno(92);
/* LibItsGeoNetworking_Functions.ttcn, line 92 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_4_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(94);
/* LibItsGeoNetworking_Functions.ttcn, line 94 */
tmp_4_alt_flag_2 = a__utDefault_instance();
if (tmp_4_alt_flag_2 == ALT_REPEAT) goto tmp_4;
if (tmp_4_alt_flag_2 == ALT_BREAK) break;
if (tmp_4_alt_flag_2 == ALT_YES) break;
}
if (tmp_4_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(96);
/* LibItsGeoNetworking_Functions.ttcn, line 96 */
tmp_4_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_4_alt_flag_3 == ALT_YES) {
current_location.update_lineno(97);
/* LibItsGeoNetworking_Functions.ttcn, line 97 */
TTCN_Logger::log_str(TTCN_USER, "*** f_utChangePosition: INFO: IUT position not changed in time ***");
current_location.update_lineno(98);
/* LibItsGeoNetworking_Functions.ttcn, line 98 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(102);
/* LibItsGeoNetworking_Functions.ttcn, line 102 */
goto tmp_4;
}
}
}
}

void start_f__utChangePosition(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utChangePosition(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_utChangePosition", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__utTriggerEvent(const LibItsGeoNetworking__TypesAndValues::UtGnTrigger_template& p__event)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 111, TTCN_Location::LOCATION_FUNCTION, "f_utTriggerEvent");
current_location.update_lineno(112);
/* LibItsGeoNetworking_Functions.ttcn, line 112 */
LibItsGeoNetworking__TypesAndValues::UtGnTriggerResult v__UtGnTriggerResult__true;
current_location.update_lineno(113);
/* LibItsGeoNetworking_Functions.ttcn, line 113 */
v__UtGnTriggerResult__true.utGnTriggerResult() = TRUE;
current_location.update_lineno(115);
/* LibItsGeoNetworking_Functions.ttcn, line 115 */
LibItsGeoNetworking__TypesAndValues::UtGnTriggerResult v__UtGnTriggerResult__false;
current_location.update_lineno(116);
/* LibItsGeoNetworking_Functions.ttcn, line 116 */
v__UtGnTriggerResult__false.utGnTriggerResult() = FALSE;
current_location.update_lineno(118);
/* LibItsGeoNetworking_Functions.ttcn, line 118 */
BOOLEAN v__return(TRUE);
current_location.update_lineno(120);
/* LibItsGeoNetworking_Functions.ttcn, line 120 */
LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.send(p__event);
current_location.update_lineno(121);
/* LibItsGeoNetworking_Functions.ttcn, line 121 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(122);
/* LibItsGeoNetworking_Functions.ttcn, line 122 */
{
tmp_7:
alt_status tmp_7_alt_flag_0 = ALT_MAYBE;
alt_status tmp_7_alt_flag_1 = ALT_MAYBE;
alt_status tmp_7_alt_flag_2 = ALT_MAYBE;
alt_status tmp_7_alt_flag_3 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_7_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(123);
/* LibItsGeoNetworking_Functions.ttcn, line 123 */
tmp_7_alt_flag_0 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(LibItsGeoNetworking__TypesAndValues::UtGnTriggerResult_template(v__UtGnTriggerResult__true), NULL, any_compref, NULL);
if (tmp_7_alt_flag_0 == ALT_YES) {
current_location.update_lineno(124);
/* LibItsGeoNetworking_Functions.ttcn, line 124 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
break;
}
}
if (tmp_7_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(126);
/* LibItsGeoNetworking_Functions.ttcn, line 126 */
tmp_7_alt_flag_1 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(LibItsGeoNetworking__TypesAndValues::UtGnTriggerResult_template(v__UtGnTriggerResult__false), NULL, any_compref, NULL);
if (tmp_7_alt_flag_1 == ALT_YES) {
current_location.update_lineno(127);
/* LibItsGeoNetworking_Functions.ttcn, line 127 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(128);
/* LibItsGeoNetworking_Functions.ttcn, line 128 */
TTCN_Logger::log_str(TTCN_USER, "*** UtGnTriggerResult: INFO: UT trigger was not successful ***");
current_location.update_lineno(129);
/* LibItsGeoNetworking_Functions.ttcn, line 129 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_7_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(131);
/* LibItsGeoNetworking_Functions.ttcn, line 131 */
tmp_7_alt_flag_2 = a__utDefault_instance();
if (tmp_7_alt_flag_2 == ALT_REPEAT) goto tmp_7;
if (tmp_7_alt_flag_2 == ALT_BREAK) break;
if (tmp_7_alt_flag_2 == ALT_YES) break;
}
if (tmp_7_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(133);
/* LibItsGeoNetworking_Functions.ttcn, line 133 */
tmp_7_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_7_alt_flag_3 == ALT_YES) {
current_location.update_lineno(134);
/* LibItsGeoNetworking_Functions.ttcn, line 134 */
v__return = FALSE;
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(138);
/* LibItsGeoNetworking_Functions.ttcn, line 138 */
goto tmp_7;
}
}
}
current_location.update_lineno(141);
/* LibItsGeoNetworking_Functions.ttcn, line 141 */
return v__return;
}

void start_f__utTriggerEvent(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::UtGnTrigger_template& p__event)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_utTriggerEvent", text_buf);
p__event.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf01Up()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 156, TTCN_Location::LOCATION_FUNCTION, "f_cf01Up");
current_location.update_lineno(159);
/* LibItsGeoNetworking_Functions.ttcn, line 159 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(160);
/* LibItsGeoNetworking_Functions.ttcn, line 160 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(163);
/* LibItsGeoNetworking_Functions.ttcn, line 163 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(164);
/* LibItsGeoNetworking_Functions.ttcn, line 164 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(165);
/* LibItsGeoNetworking_Functions.ttcn, line 165 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(168);
/* LibItsGeoNetworking_Functions.ttcn, line 168 */
LibCommon__Sync::f__connect4SelfOrClientSync();
current_location.update_lineno(169);
/* LibItsGeoNetworking_Functions.ttcn, line 169 */
activate_a__cf01Down();
current_location.update_lineno(172);
/* LibItsGeoNetworking_Functions.ttcn, line 172 */
f__initialiseSecuredMode();
current_location.update_lineno(175);
/* LibItsGeoNetworking_Functions.ttcn, line 175 */
f__initialState();
current_location.update_lineno(178);
/* LibItsGeoNetworking_Functions.ttcn, line 178 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(180);
/* LibItsGeoNetworking_Functions.ttcn, line 180 */
f__initialiseComponent(v__positionTable, v__areaTable, LibItsGeoNetworking__TypesAndValues::c__compNodeB);
}

void start_f__cf01Up(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf01Up(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf01Up", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf01Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 184, TTCN_Location::LOCATION_FUNCTION, "f_cf01Down");
current_location.update_lineno(186);
/* LibItsGeoNetworking_Functions.ttcn, line 186 */
f__uninitialiseSecuredMode();
current_location.update_lineno(189);
/* LibItsGeoNetworking_Functions.ttcn, line 189 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(190);
/* LibItsGeoNetworking_Functions.ttcn, line 190 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(191);
/* LibItsGeoNetworking_Functions.ttcn, line 191 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(194);
/* LibItsGeoNetworking_Functions.ttcn, line 194 */
LibCommon__Sync::f__disconnect4SelfOrClientSync();
}

void start_f__cf01Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf01Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf01Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf02Up(const CHARSTRING& p__mainUtComponent)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 209, TTCN_Location::LOCATION_FUNCTION, "f_cf02Up");
current_location.update_lineno(212);
/* LibItsGeoNetworking_Functions.ttcn, line 212 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(213);
/* LibItsGeoNetworking_Functions.ttcn, line 213 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(214);
/* LibItsGeoNetworking_Functions.ttcn, line 214 */
COMPONENT v__component;
current_location.update_lineno(215);
/* LibItsGeoNetworking_Functions.ttcn, line 215 */
INTEGER i;
current_location.update_lineno(218);
/* LibItsGeoNetworking_Functions.ttcn, line 218 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.set_size(2);
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_10 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[0];
tmp_10.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeB;
tmp_10.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_11 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[1];
tmp_11.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeD;
tmp_11.gnComponent() = OMIT_VALUE;
}
current_location.update_lineno(221);
/* LibItsGeoNetworking_Functions.ttcn, line 221 */
i = 0;
current_location.update_lineno(221);
/* LibItsGeoNetworking_Functions.ttcn, line 221 */
for ( ; ; ) {
current_location.update_lineno(221);
/* LibItsGeoNetworking_Functions.ttcn, line 221 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(222);
/* LibItsGeoNetworking_Functions.ttcn, line 222 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[i].gnComponent() = TTCN_Runtime::create_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName(), NULL, TRUE);
current_location.update_lineno(221);
/* LibItsGeoNetworking_Functions.ttcn, line 221 */
{
INTEGER tmp_14;
++i;
}
}
current_location.update_lineno(226);
/* LibItsGeoNetworking_Functions.ttcn, line 226 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(227);
/* LibItsGeoNetworking_Functions.ttcn, line 227 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(228);
/* LibItsGeoNetworking_Functions.ttcn, line 228 */
TTCN_Runtime::connect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
current_location.update_lineno(229);
/* LibItsGeoNetworking_Functions.ttcn, line 229 */
i = 0;
current_location.update_lineno(229);
/* LibItsGeoNetworking_Functions.ttcn, line 229 */
for ( ; ; ) {
current_location.update_lineno(229);
/* LibItsGeoNetworking_Functions.ttcn, line 229 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(230);
/* LibItsGeoNetworking_Functions.ttcn, line 230 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(231);
/* LibItsGeoNetworking_Functions.ttcn, line 231 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(232);
/* LibItsGeoNetworking_Functions.ttcn, line 232 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(233);
/* LibItsGeoNetworking_Functions.ttcn, line 233 */
TTCN_Runtime::connect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(229);
/* LibItsGeoNetworking_Functions.ttcn, line 229 */
{
INTEGER tmp_16;
++i;
}
}
current_location.update_lineno(236);
/* LibItsGeoNetworking_Functions.ttcn, line 236 */
activate_a__cf02Down();
current_location.update_lineno(239);
/* LibItsGeoNetworking_Functions.ttcn, line 239 */
if ((p__mainUtComponent == LibItsGeoNetworking__TypesAndValues::c__compMTC)) {
current_location.update_lineno(241);
/* LibItsGeoNetworking_Functions.ttcn, line 241 */
f__initialiseSecuredMode();
current_location.update_lineno(244);
/* LibItsGeoNetworking_Functions.ttcn, line 244 */
f__initialState();
}
else {
current_location.update_lineno(247);
/* LibItsGeoNetworking_Functions.ttcn, line 247 */
v__component = f__getComponent(p__mainUtComponent);
current_location.update_lineno(248);
/* LibItsGeoNetworking_Functions.ttcn, line 248 */
start_f__initialState(v__component);
current_location.update_lineno(249);
/* LibItsGeoNetworking_Functions.ttcn, line 249 */
{
tmp_18:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = v__component.done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_18;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_18;
}
current_location.update_lineno(249);
/* LibItsGeoNetworking_Functions.ttcn, line 249 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 249.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
current_location.update_lineno(253);
/* LibItsGeoNetworking_Functions.ttcn, line 253 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(256);
/* LibItsGeoNetworking_Functions.ttcn, line 256 */
i = 0;
current_location.update_lineno(256);
/* LibItsGeoNetworking_Functions.ttcn, line 256 */
for ( ; ; ) {
current_location.update_lineno(256);
/* LibItsGeoNetworking_Functions.ttcn, line 256 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(257);
/* LibItsGeoNetworking_Functions.ttcn, line 257 */
start_f__initialiseComponent(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), v__positionTable, v__areaTable, const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName());
current_location.update_lineno(256);
/* LibItsGeoNetworking_Functions.ttcn, line 256 */
{
INTEGER tmp_20;
++i;
}
}
current_location.update_lineno(259);
/* LibItsGeoNetworking_Functions.ttcn, line 259 */
i = 0;
current_location.update_lineno(259);
/* LibItsGeoNetworking_Functions.ttcn, line 259 */
for ( ; ; ) {
current_location.update_lineno(259);
/* LibItsGeoNetworking_Functions.ttcn, line 259 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(260);
/* LibItsGeoNetworking_Functions.ttcn, line 260 */
{
tmp_22:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent()().done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_22;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_22;
}
current_location.update_lineno(260);
/* LibItsGeoNetworking_Functions.ttcn, line 260 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 260.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(259);
/* LibItsGeoNetworking_Functions.ttcn, line 259 */
{
INTEGER tmp_23;
++i;
}
}
}

void start_f__cf02Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf02Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf02Up", text_buf);
p__mainUtComponent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf02Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 268, TTCN_Location::LOCATION_FUNCTION, "f_cf02Down");
current_location.update_lineno(271);
/* LibItsGeoNetworking_Functions.ttcn, line 271 */
INTEGER i;
current_location.update_lineno(273);
/* LibItsGeoNetworking_Functions.ttcn, line 273 */
f__uninitialiseSecuredMode();
current_location.update_lineno(276);
/* LibItsGeoNetworking_Functions.ttcn, line 276 */
i = 0;
current_location.update_lineno(276);
/* LibItsGeoNetworking_Functions.ttcn, line 276 */
for ( ; ; ) {
current_location.update_lineno(276);
/* LibItsGeoNetworking_Functions.ttcn, line 276 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(277);
/* LibItsGeoNetworking_Functions.ttcn, line 277 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(278);
/* LibItsGeoNetworking_Functions.ttcn, line 278 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(279);
/* LibItsGeoNetworking_Functions.ttcn, line 279 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(280);
/* LibItsGeoNetworking_Functions.ttcn, line 280 */
TTCN_Runtime::disconnect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(276);
/* LibItsGeoNetworking_Functions.ttcn, line 276 */
{
INTEGER tmp_25;
++i;
}
}
current_location.update_lineno(282);
/* LibItsGeoNetworking_Functions.ttcn, line 282 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(283);
/* LibItsGeoNetworking_Functions.ttcn, line 283 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(284);
/* LibItsGeoNetworking_Functions.ttcn, line 284 */
TTCN_Runtime::disconnect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
}

void start_f__cf02Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf02Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf02Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf03Up(const CHARSTRING& p__mainUtComponent)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 299, TTCN_Location::LOCATION_FUNCTION, "f_cf03Up");
current_location.update_lineno(302);
/* LibItsGeoNetworking_Functions.ttcn, line 302 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(303);
/* LibItsGeoNetworking_Functions.ttcn, line 303 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(304);
/* LibItsGeoNetworking_Functions.ttcn, line 304 */
COMPONENT v__component;
current_location.update_lineno(305);
/* LibItsGeoNetworking_Functions.ttcn, line 305 */
INTEGER i;
current_location.update_lineno(308);
/* LibItsGeoNetworking_Functions.ttcn, line 308 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.set_size(2);
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_27 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[0];
tmp_27.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeB;
tmp_27.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_28 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[1];
tmp_28.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeC;
tmp_28.gnComponent() = OMIT_VALUE;
}
current_location.update_lineno(311);
/* LibItsGeoNetworking_Functions.ttcn, line 311 */
i = 0;
current_location.update_lineno(311);
/* LibItsGeoNetworking_Functions.ttcn, line 311 */
for ( ; ; ) {
current_location.update_lineno(311);
/* LibItsGeoNetworking_Functions.ttcn, line 311 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(312);
/* LibItsGeoNetworking_Functions.ttcn, line 312 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[i].gnComponent() = TTCN_Runtime::create_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName(), NULL, TRUE);
current_location.update_lineno(311);
/* LibItsGeoNetworking_Functions.ttcn, line 311 */
{
INTEGER tmp_31;
++i;
}
}
current_location.update_lineno(316);
/* LibItsGeoNetworking_Functions.ttcn, line 316 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(317);
/* LibItsGeoNetworking_Functions.ttcn, line 317 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(318);
/* LibItsGeoNetworking_Functions.ttcn, line 318 */
TTCN_Runtime::connect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
current_location.update_lineno(319);
/* LibItsGeoNetworking_Functions.ttcn, line 319 */
i = 0;
current_location.update_lineno(319);
/* LibItsGeoNetworking_Functions.ttcn, line 319 */
for ( ; ; ) {
current_location.update_lineno(319);
/* LibItsGeoNetworking_Functions.ttcn, line 319 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(320);
/* LibItsGeoNetworking_Functions.ttcn, line 320 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(321);
/* LibItsGeoNetworking_Functions.ttcn, line 321 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(322);
/* LibItsGeoNetworking_Functions.ttcn, line 322 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(323);
/* LibItsGeoNetworking_Functions.ttcn, line 323 */
TTCN_Runtime::connect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(319);
/* LibItsGeoNetworking_Functions.ttcn, line 319 */
{
INTEGER tmp_33;
++i;
}
}
current_location.update_lineno(326);
/* LibItsGeoNetworking_Functions.ttcn, line 326 */
activate_a__cf03Down();
current_location.update_lineno(329);
/* LibItsGeoNetworking_Functions.ttcn, line 329 */
if ((p__mainUtComponent == LibItsGeoNetworking__TypesAndValues::c__compMTC)) {
current_location.update_lineno(331);
/* LibItsGeoNetworking_Functions.ttcn, line 331 */
f__initialiseSecuredMode();
current_location.update_lineno(334);
/* LibItsGeoNetworking_Functions.ttcn, line 334 */
f__initialState();
}
else {
current_location.update_lineno(337);
/* LibItsGeoNetworking_Functions.ttcn, line 337 */
v__component = f__getComponent(p__mainUtComponent);
current_location.update_lineno(338);
/* LibItsGeoNetworking_Functions.ttcn, line 338 */
start_f__initialState(v__component);
current_location.update_lineno(339);
/* LibItsGeoNetworking_Functions.ttcn, line 339 */
{
tmp_35:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = v__component.done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_35;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_35;
}
current_location.update_lineno(339);
/* LibItsGeoNetworking_Functions.ttcn, line 339 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 339.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
current_location.update_lineno(343);
/* LibItsGeoNetworking_Functions.ttcn, line 343 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(346);
/* LibItsGeoNetworking_Functions.ttcn, line 346 */
i = 0;
current_location.update_lineno(346);
/* LibItsGeoNetworking_Functions.ttcn, line 346 */
for ( ; ; ) {
current_location.update_lineno(346);
/* LibItsGeoNetworking_Functions.ttcn, line 346 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(347);
/* LibItsGeoNetworking_Functions.ttcn, line 347 */
start_f__initialiseComponent(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), v__positionTable, v__areaTable, const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName());
current_location.update_lineno(346);
/* LibItsGeoNetworking_Functions.ttcn, line 346 */
{
INTEGER tmp_37;
++i;
}
}
current_location.update_lineno(349);
/* LibItsGeoNetworking_Functions.ttcn, line 349 */
i = 0;
current_location.update_lineno(349);
/* LibItsGeoNetworking_Functions.ttcn, line 349 */
for ( ; ; ) {
current_location.update_lineno(349);
/* LibItsGeoNetworking_Functions.ttcn, line 349 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(350);
/* LibItsGeoNetworking_Functions.ttcn, line 350 */
{
tmp_39:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent()().done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_39;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_39;
}
current_location.update_lineno(350);
/* LibItsGeoNetworking_Functions.ttcn, line 350 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 350.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(349);
/* LibItsGeoNetworking_Functions.ttcn, line 349 */
{
INTEGER tmp_40;
++i;
}
}
}

void start_f__cf03Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf03Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf03Up", text_buf);
p__mainUtComponent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf03Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 358, TTCN_Location::LOCATION_FUNCTION, "f_cf03Down");
current_location.update_lineno(361);
/* LibItsGeoNetworking_Functions.ttcn, line 361 */
INTEGER i;
current_location.update_lineno(363);
/* LibItsGeoNetworking_Functions.ttcn, line 363 */
f__uninitialiseSecuredMode();
current_location.update_lineno(366);
/* LibItsGeoNetworking_Functions.ttcn, line 366 */
i = 0;
current_location.update_lineno(366);
/* LibItsGeoNetworking_Functions.ttcn, line 366 */
for ( ; ; ) {
current_location.update_lineno(366);
/* LibItsGeoNetworking_Functions.ttcn, line 366 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(367);
/* LibItsGeoNetworking_Functions.ttcn, line 367 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(368);
/* LibItsGeoNetworking_Functions.ttcn, line 368 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(369);
/* LibItsGeoNetworking_Functions.ttcn, line 369 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(370);
/* LibItsGeoNetworking_Functions.ttcn, line 370 */
TTCN_Runtime::disconnect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(366);
/* LibItsGeoNetworking_Functions.ttcn, line 366 */
{
INTEGER tmp_42;
++i;
}
}
current_location.update_lineno(372);
/* LibItsGeoNetworking_Functions.ttcn, line 372 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(373);
/* LibItsGeoNetworking_Functions.ttcn, line 373 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(374);
/* LibItsGeoNetworking_Functions.ttcn, line 374 */
TTCN_Runtime::disconnect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
}

void start_f__cf03Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf03Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf03Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf04Up(const CHARSTRING& p__mainUtComponent)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 391, TTCN_Location::LOCATION_FUNCTION, "f_cf04Up");
current_location.update_lineno(394);
/* LibItsGeoNetworking_Functions.ttcn, line 394 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(395);
/* LibItsGeoNetworking_Functions.ttcn, line 395 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(396);
/* LibItsGeoNetworking_Functions.ttcn, line 396 */
COMPONENT v__component;
current_location.update_lineno(397);
/* LibItsGeoNetworking_Functions.ttcn, line 397 */
INTEGER i;
current_location.update_lineno(400);
/* LibItsGeoNetworking_Functions.ttcn, line 400 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.set_size(3);
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_44 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[0];
tmp_44.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeB;
tmp_44.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_45 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[1];
tmp_45.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeC;
tmp_45.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_46 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[2];
tmp_46.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeD;
tmp_46.gnComponent() = OMIT_VALUE;
}
current_location.update_lineno(403);
/* LibItsGeoNetworking_Functions.ttcn, line 403 */
i = 0;
current_location.update_lineno(403);
/* LibItsGeoNetworking_Functions.ttcn, line 403 */
for ( ; ; ) {
current_location.update_lineno(403);
/* LibItsGeoNetworking_Functions.ttcn, line 403 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(404);
/* LibItsGeoNetworking_Functions.ttcn, line 404 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[i].gnComponent() = TTCN_Runtime::create_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName(), NULL, TRUE);
current_location.update_lineno(403);
/* LibItsGeoNetworking_Functions.ttcn, line 403 */
{
INTEGER tmp_49;
++i;
}
}
current_location.update_lineno(408);
/* LibItsGeoNetworking_Functions.ttcn, line 408 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(409);
/* LibItsGeoNetworking_Functions.ttcn, line 409 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(410);
/* LibItsGeoNetworking_Functions.ttcn, line 410 */
TTCN_Runtime::connect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
current_location.update_lineno(411);
/* LibItsGeoNetworking_Functions.ttcn, line 411 */
i = 0;
current_location.update_lineno(411);
/* LibItsGeoNetworking_Functions.ttcn, line 411 */
for ( ; ; ) {
current_location.update_lineno(411);
/* LibItsGeoNetworking_Functions.ttcn, line 411 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(412);
/* LibItsGeoNetworking_Functions.ttcn, line 412 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(413);
/* LibItsGeoNetworking_Functions.ttcn, line 413 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(414);
/* LibItsGeoNetworking_Functions.ttcn, line 414 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(415);
/* LibItsGeoNetworking_Functions.ttcn, line 415 */
TTCN_Runtime::connect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(411);
/* LibItsGeoNetworking_Functions.ttcn, line 411 */
{
INTEGER tmp_51;
++i;
}
}
current_location.update_lineno(418);
/* LibItsGeoNetworking_Functions.ttcn, line 418 */
activate_a__cf04Down();
current_location.update_lineno(421);
/* LibItsGeoNetworking_Functions.ttcn, line 421 */
if ((p__mainUtComponent == LibItsGeoNetworking__TypesAndValues::c__compMTC)) {
current_location.update_lineno(423);
/* LibItsGeoNetworking_Functions.ttcn, line 423 */
f__initialiseSecuredMode();
current_location.update_lineno(426);
/* LibItsGeoNetworking_Functions.ttcn, line 426 */
f__initialState();
}
else {
current_location.update_lineno(429);
/* LibItsGeoNetworking_Functions.ttcn, line 429 */
v__component = f__getComponent(p__mainUtComponent);
current_location.update_lineno(430);
/* LibItsGeoNetworking_Functions.ttcn, line 430 */
start_f__initialState(v__component);
current_location.update_lineno(431);
/* LibItsGeoNetworking_Functions.ttcn, line 431 */
{
tmp_53:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = v__component.done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_53;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_53;
}
current_location.update_lineno(431);
/* LibItsGeoNetworking_Functions.ttcn, line 431 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 431.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
current_location.update_lineno(435);
/* LibItsGeoNetworking_Functions.ttcn, line 435 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(438);
/* LibItsGeoNetworking_Functions.ttcn, line 438 */
i = 0;
current_location.update_lineno(438);
/* LibItsGeoNetworking_Functions.ttcn, line 438 */
for ( ; ; ) {
current_location.update_lineno(438);
/* LibItsGeoNetworking_Functions.ttcn, line 438 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(439);
/* LibItsGeoNetworking_Functions.ttcn, line 439 */
start_f__initialiseComponent(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), v__positionTable, v__areaTable, const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName());
current_location.update_lineno(438);
/* LibItsGeoNetworking_Functions.ttcn, line 438 */
{
INTEGER tmp_55;
++i;
}
}
current_location.update_lineno(441);
/* LibItsGeoNetworking_Functions.ttcn, line 441 */
i = 0;
current_location.update_lineno(441);
/* LibItsGeoNetworking_Functions.ttcn, line 441 */
for ( ; ; ) {
current_location.update_lineno(441);
/* LibItsGeoNetworking_Functions.ttcn, line 441 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(442);
/* LibItsGeoNetworking_Functions.ttcn, line 442 */
{
tmp_57:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent()().done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_57;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_57;
}
current_location.update_lineno(442);
/* LibItsGeoNetworking_Functions.ttcn, line 442 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 442.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(441);
/* LibItsGeoNetworking_Functions.ttcn, line 441 */
{
INTEGER tmp_58;
++i;
}
}
}

void start_f__cf04Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf04Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf04Up", text_buf);
p__mainUtComponent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf04Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 450, TTCN_Location::LOCATION_FUNCTION, "f_cf04Down");
current_location.update_lineno(453);
/* LibItsGeoNetworking_Functions.ttcn, line 453 */
INTEGER i;
current_location.update_lineno(455);
/* LibItsGeoNetworking_Functions.ttcn, line 455 */
f__uninitialiseSecuredMode();
current_location.update_lineno(458);
/* LibItsGeoNetworking_Functions.ttcn, line 458 */
i = 0;
current_location.update_lineno(458);
/* LibItsGeoNetworking_Functions.ttcn, line 458 */
for ( ; ; ) {
current_location.update_lineno(458);
/* LibItsGeoNetworking_Functions.ttcn, line 458 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(459);
/* LibItsGeoNetworking_Functions.ttcn, line 459 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(460);
/* LibItsGeoNetworking_Functions.ttcn, line 460 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(461);
/* LibItsGeoNetworking_Functions.ttcn, line 461 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(462);
/* LibItsGeoNetworking_Functions.ttcn, line 462 */
TTCN_Runtime::disconnect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(458);
/* LibItsGeoNetworking_Functions.ttcn, line 458 */
{
INTEGER tmp_60;
++i;
}
}
current_location.update_lineno(464);
/* LibItsGeoNetworking_Functions.ttcn, line 464 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(465);
/* LibItsGeoNetworking_Functions.ttcn, line 465 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(466);
/* LibItsGeoNetworking_Functions.ttcn, line 466 */
TTCN_Runtime::disconnect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
}

void start_f__cf04Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf04Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf04Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf05Up(const CHARSTRING& p__mainUtComponent)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 479, TTCN_Location::LOCATION_FUNCTION, "f_cf05Up");
current_location.update_lineno(482);
/* LibItsGeoNetworking_Functions.ttcn, line 482 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(483);
/* LibItsGeoNetworking_Functions.ttcn, line 483 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(484);
/* LibItsGeoNetworking_Functions.ttcn, line 484 */
COMPONENT v__component;
current_location.update_lineno(485);
/* LibItsGeoNetworking_Functions.ttcn, line 485 */
INTEGER i;
current_location.update_lineno(488);
/* LibItsGeoNetworking_Functions.ttcn, line 488 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.set_size(2);
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_62 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[0];
tmp_62.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeB;
tmp_62.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_63 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[1];
tmp_63.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeE;
tmp_63.gnComponent() = OMIT_VALUE;
}
current_location.update_lineno(491);
/* LibItsGeoNetworking_Functions.ttcn, line 491 */
i = 0;
current_location.update_lineno(491);
/* LibItsGeoNetworking_Functions.ttcn, line 491 */
for ( ; ; ) {
current_location.update_lineno(491);
/* LibItsGeoNetworking_Functions.ttcn, line 491 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(492);
/* LibItsGeoNetworking_Functions.ttcn, line 492 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[i].gnComponent() = TTCN_Runtime::create_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName(), NULL, TRUE);
current_location.update_lineno(491);
/* LibItsGeoNetworking_Functions.ttcn, line 491 */
{
INTEGER tmp_66;
++i;
}
}
current_location.update_lineno(496);
/* LibItsGeoNetworking_Functions.ttcn, line 496 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(497);
/* LibItsGeoNetworking_Functions.ttcn, line 497 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(498);
/* LibItsGeoNetworking_Functions.ttcn, line 498 */
TTCN_Runtime::connect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
current_location.update_lineno(499);
/* LibItsGeoNetworking_Functions.ttcn, line 499 */
i = 0;
current_location.update_lineno(499);
/* LibItsGeoNetworking_Functions.ttcn, line 499 */
for ( ; ; ) {
current_location.update_lineno(499);
/* LibItsGeoNetworking_Functions.ttcn, line 499 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(500);
/* LibItsGeoNetworking_Functions.ttcn, line 500 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(501);
/* LibItsGeoNetworking_Functions.ttcn, line 501 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(502);
/* LibItsGeoNetworking_Functions.ttcn, line 502 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(503);
/* LibItsGeoNetworking_Functions.ttcn, line 503 */
TTCN_Runtime::connect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(499);
/* LibItsGeoNetworking_Functions.ttcn, line 499 */
{
INTEGER tmp_68;
++i;
}
}
current_location.update_lineno(506);
/* LibItsGeoNetworking_Functions.ttcn, line 506 */
activate_a__cf05Down();
current_location.update_lineno(509);
/* LibItsGeoNetworking_Functions.ttcn, line 509 */
if ((p__mainUtComponent == LibItsGeoNetworking__TypesAndValues::c__compMTC)) {
current_location.update_lineno(511);
/* LibItsGeoNetworking_Functions.ttcn, line 511 */
f__initialiseSecuredMode();
current_location.update_lineno(514);
/* LibItsGeoNetworking_Functions.ttcn, line 514 */
f__initialState();
}
else {
current_location.update_lineno(517);
/* LibItsGeoNetworking_Functions.ttcn, line 517 */
v__component = f__getComponent(p__mainUtComponent);
current_location.update_lineno(518);
/* LibItsGeoNetworking_Functions.ttcn, line 518 */
start_f__initialState(v__component);
current_location.update_lineno(519);
/* LibItsGeoNetworking_Functions.ttcn, line 519 */
{
tmp_70:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = v__component.done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_70;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_70;
}
current_location.update_lineno(519);
/* LibItsGeoNetworking_Functions.ttcn, line 519 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 519.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
current_location.update_lineno(523);
/* LibItsGeoNetworking_Functions.ttcn, line 523 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(526);
/* LibItsGeoNetworking_Functions.ttcn, line 526 */
i = 0;
current_location.update_lineno(526);
/* LibItsGeoNetworking_Functions.ttcn, line 526 */
for ( ; ; ) {
current_location.update_lineno(526);
/* LibItsGeoNetworking_Functions.ttcn, line 526 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(527);
/* LibItsGeoNetworking_Functions.ttcn, line 527 */
start_f__initialiseComponent(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), v__positionTable, v__areaTable, const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName());
current_location.update_lineno(526);
/* LibItsGeoNetworking_Functions.ttcn, line 526 */
{
INTEGER tmp_72;
++i;
}
}
current_location.update_lineno(529);
/* LibItsGeoNetworking_Functions.ttcn, line 529 */
i = 0;
current_location.update_lineno(529);
/* LibItsGeoNetworking_Functions.ttcn, line 529 */
for ( ; ; ) {
current_location.update_lineno(529);
/* LibItsGeoNetworking_Functions.ttcn, line 529 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(530);
/* LibItsGeoNetworking_Functions.ttcn, line 530 */
{
tmp_74:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent()().done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_74;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_74;
}
current_location.update_lineno(530);
/* LibItsGeoNetworking_Functions.ttcn, line 530 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 530.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(529);
/* LibItsGeoNetworking_Functions.ttcn, line 529 */
{
INTEGER tmp_75;
++i;
}
}
}

void start_f__cf05Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf05Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf05Up", text_buf);
p__mainUtComponent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf05Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 537, TTCN_Location::LOCATION_FUNCTION, "f_cf05Down");
current_location.update_lineno(540);
/* LibItsGeoNetworking_Functions.ttcn, line 540 */
INTEGER i;
current_location.update_lineno(542);
/* LibItsGeoNetworking_Functions.ttcn, line 542 */
f__uninitialiseSecuredMode();
current_location.update_lineno(545);
/* LibItsGeoNetworking_Functions.ttcn, line 545 */
i = 0;
current_location.update_lineno(545);
/* LibItsGeoNetworking_Functions.ttcn, line 545 */
for ( ; ; ) {
current_location.update_lineno(545);
/* LibItsGeoNetworking_Functions.ttcn, line 545 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(546);
/* LibItsGeoNetworking_Functions.ttcn, line 546 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(547);
/* LibItsGeoNetworking_Functions.ttcn, line 547 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(548);
/* LibItsGeoNetworking_Functions.ttcn, line 548 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(549);
/* LibItsGeoNetworking_Functions.ttcn, line 549 */
TTCN_Runtime::disconnect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(545);
/* LibItsGeoNetworking_Functions.ttcn, line 545 */
{
INTEGER tmp_77;
++i;
}
}
current_location.update_lineno(551);
/* LibItsGeoNetworking_Functions.ttcn, line 551 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(552);
/* LibItsGeoNetworking_Functions.ttcn, line 552 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(553);
/* LibItsGeoNetworking_Functions.ttcn, line 553 */
TTCN_Runtime::disconnect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
}

void start_f__cf05Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf05Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf05Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf06Up(const CHARSTRING& p__mainUtComponent)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 567, TTCN_Location::LOCATION_FUNCTION, "f_cf06Up");
current_location.update_lineno(570);
/* LibItsGeoNetworking_Functions.ttcn, line 570 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(571);
/* LibItsGeoNetworking_Functions.ttcn, line 571 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(572);
/* LibItsGeoNetworking_Functions.ttcn, line 572 */
COMPONENT v__component;
current_location.update_lineno(573);
/* LibItsGeoNetworking_Functions.ttcn, line 573 */
INTEGER i;
current_location.update_lineno(576);
/* LibItsGeoNetworking_Functions.ttcn, line 576 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.set_size(2);
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_79 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[0];
tmp_79.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeB;
tmp_79.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_80 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[1];
tmp_80.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeF;
tmp_80.gnComponent() = OMIT_VALUE;
}
current_location.update_lineno(579);
/* LibItsGeoNetworking_Functions.ttcn, line 579 */
i = 0;
current_location.update_lineno(579);
/* LibItsGeoNetworking_Functions.ttcn, line 579 */
for ( ; ; ) {
current_location.update_lineno(579);
/* LibItsGeoNetworking_Functions.ttcn, line 579 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(580);
/* LibItsGeoNetworking_Functions.ttcn, line 580 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[i].gnComponent() = TTCN_Runtime::create_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName(), NULL, TRUE);
current_location.update_lineno(579);
/* LibItsGeoNetworking_Functions.ttcn, line 579 */
{
INTEGER tmp_83;
++i;
}
}
current_location.update_lineno(584);
/* LibItsGeoNetworking_Functions.ttcn, line 584 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(585);
/* LibItsGeoNetworking_Functions.ttcn, line 585 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(586);
/* LibItsGeoNetworking_Functions.ttcn, line 586 */
TTCN_Runtime::connect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
current_location.update_lineno(587);
/* LibItsGeoNetworking_Functions.ttcn, line 587 */
i = 0;
current_location.update_lineno(587);
/* LibItsGeoNetworking_Functions.ttcn, line 587 */
for ( ; ; ) {
current_location.update_lineno(587);
/* LibItsGeoNetworking_Functions.ttcn, line 587 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(588);
/* LibItsGeoNetworking_Functions.ttcn, line 588 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(589);
/* LibItsGeoNetworking_Functions.ttcn, line 589 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(590);
/* LibItsGeoNetworking_Functions.ttcn, line 590 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(591);
/* LibItsGeoNetworking_Functions.ttcn, line 591 */
TTCN_Runtime::connect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(587);
/* LibItsGeoNetworking_Functions.ttcn, line 587 */
{
INTEGER tmp_85;
++i;
}
}
current_location.update_lineno(594);
/* LibItsGeoNetworking_Functions.ttcn, line 594 */
activate_a__cf06Down();
current_location.update_lineno(597);
/* LibItsGeoNetworking_Functions.ttcn, line 597 */
if ((p__mainUtComponent == LibItsGeoNetworking__TypesAndValues::c__compMTC)) {
current_location.update_lineno(599);
/* LibItsGeoNetworking_Functions.ttcn, line 599 */
f__initialiseSecuredMode();
current_location.update_lineno(602);
/* LibItsGeoNetworking_Functions.ttcn, line 602 */
f__initialState();
}
else {
current_location.update_lineno(605);
/* LibItsGeoNetworking_Functions.ttcn, line 605 */
v__component = f__getComponent(p__mainUtComponent);
current_location.update_lineno(606);
/* LibItsGeoNetworking_Functions.ttcn, line 606 */
start_f__initialState(v__component);
current_location.update_lineno(607);
/* LibItsGeoNetworking_Functions.ttcn, line 607 */
{
tmp_87:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = v__component.done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_87;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_87;
}
current_location.update_lineno(607);
/* LibItsGeoNetworking_Functions.ttcn, line 607 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 607.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
current_location.update_lineno(611);
/* LibItsGeoNetworking_Functions.ttcn, line 611 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(614);
/* LibItsGeoNetworking_Functions.ttcn, line 614 */
i = 0;
current_location.update_lineno(614);
/* LibItsGeoNetworking_Functions.ttcn, line 614 */
for ( ; ; ) {
current_location.update_lineno(614);
/* LibItsGeoNetworking_Functions.ttcn, line 614 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(615);
/* LibItsGeoNetworking_Functions.ttcn, line 615 */
start_f__initialiseComponent(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), v__positionTable, v__areaTable, const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName());
current_location.update_lineno(614);
/* LibItsGeoNetworking_Functions.ttcn, line 614 */
{
INTEGER tmp_89;
++i;
}
}
current_location.update_lineno(617);
/* LibItsGeoNetworking_Functions.ttcn, line 617 */
i = 0;
current_location.update_lineno(617);
/* LibItsGeoNetworking_Functions.ttcn, line 617 */
for ( ; ; ) {
current_location.update_lineno(617);
/* LibItsGeoNetworking_Functions.ttcn, line 617 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(618);
/* LibItsGeoNetworking_Functions.ttcn, line 618 */
{
tmp_91:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent()().done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_91;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_91;
}
current_location.update_lineno(618);
/* LibItsGeoNetworking_Functions.ttcn, line 618 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 618.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(617);
/* LibItsGeoNetworking_Functions.ttcn, line 617 */
{
INTEGER tmp_92;
++i;
}
}
}

void start_f__cf06Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf06Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf06Up", text_buf);
p__mainUtComponent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf06Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 625, TTCN_Location::LOCATION_FUNCTION, "f_cf06Down");
current_location.update_lineno(628);
/* LibItsGeoNetworking_Functions.ttcn, line 628 */
INTEGER i;
current_location.update_lineno(630);
/* LibItsGeoNetworking_Functions.ttcn, line 630 */
f__uninitialiseSecuredMode();
current_location.update_lineno(633);
/* LibItsGeoNetworking_Functions.ttcn, line 633 */
i = 0;
current_location.update_lineno(633);
/* LibItsGeoNetworking_Functions.ttcn, line 633 */
for ( ; ; ) {
current_location.update_lineno(633);
/* LibItsGeoNetworking_Functions.ttcn, line 633 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(634);
/* LibItsGeoNetworking_Functions.ttcn, line 634 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(635);
/* LibItsGeoNetworking_Functions.ttcn, line 635 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(636);
/* LibItsGeoNetworking_Functions.ttcn, line 636 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(637);
/* LibItsGeoNetworking_Functions.ttcn, line 637 */
TTCN_Runtime::disconnect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(633);
/* LibItsGeoNetworking_Functions.ttcn, line 633 */
{
INTEGER tmp_94;
++i;
}
}
current_location.update_lineno(639);
/* LibItsGeoNetworking_Functions.ttcn, line 639 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(640);
/* LibItsGeoNetworking_Functions.ttcn, line 640 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(641);
/* LibItsGeoNetworking_Functions.ttcn, line 641 */
TTCN_Runtime::disconnect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
}

void start_f__cf06Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf06Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf06Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf07Up(const CHARSTRING& p__mainUtComponent)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 654, TTCN_Location::LOCATION_FUNCTION, "f_cf07Up");
current_location.update_lineno(657);
/* LibItsGeoNetworking_Functions.ttcn, line 657 */
LibItsGeoNetworking__TypesAndValues::PositionTable v__positionTable(NULL_VALUE);
current_location.update_lineno(658);
/* LibItsGeoNetworking_Functions.ttcn, line 658 */
LibItsGeoNetworking__TypesAndValues::GeoAreaTable v__areaTable(NULL_VALUE);
current_location.update_lineno(659);
/* LibItsGeoNetworking_Functions.ttcn, line 659 */
COMPONENT v__component;
current_location.update_lineno(660);
/* LibItsGeoNetworking_Functions.ttcn, line 660 */
INTEGER i;
current_location.update_lineno(663);
/* LibItsGeoNetworking_Functions.ttcn, line 663 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.set_size(2);
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_96 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[0];
tmp_96.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeB;
tmp_96.gnComponent() = OMIT_VALUE;
}
{
LibItsGeoNetworking__TestSystem::ComponentEntry& tmp_97 = LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[1];
tmp_97.componentName() = LibItsGeoNetworking__TypesAndValues::c__compNodeD;
tmp_97.gnComponent() = OMIT_VALUE;
}
current_location.update_lineno(666);
/* LibItsGeoNetworking_Functions.ttcn, line 666 */
i = 0;
current_location.update_lineno(666);
/* LibItsGeoNetworking_Functions.ttcn, line 666 */
for ( ; ; ) {
current_location.update_lineno(666);
/* LibItsGeoNetworking_Functions.ttcn, line 666 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(667);
/* LibItsGeoNetworking_Functions.ttcn, line 667 */
LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable[i].gnComponent() = TTCN_Runtime::create_component("LibItsGeoNetworking_TestSystem", "ItsGeoNetworking", const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName(), NULL, TRUE);
current_location.update_lineno(666);
/* LibItsGeoNetworking_Functions.ttcn, line 666 */
{
INTEGER tmp_100;
++i;
}
}
current_location.update_lineno(671);
/* LibItsGeoNetworking_Functions.ttcn, line 671 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(672);
/* LibItsGeoNetworking_Functions.ttcn, line 672 */
TTCN_Runtime::map_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(673);
/* LibItsGeoNetworking_Functions.ttcn, line 673 */
TTCN_Runtime::connect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
current_location.update_lineno(674);
/* LibItsGeoNetworking_Functions.ttcn, line 674 */
i = 0;
current_location.update_lineno(674);
/* LibItsGeoNetworking_Functions.ttcn, line 674 */
for ( ; ; ) {
current_location.update_lineno(674);
/* LibItsGeoNetworking_Functions.ttcn, line 674 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(675);
/* LibItsGeoNetworking_Functions.ttcn, line 675 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(676);
/* LibItsGeoNetworking_Functions.ttcn, line 676 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(677);
/* LibItsGeoNetworking_Functions.ttcn, line 677 */
TTCN_Runtime::map_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(678);
/* LibItsGeoNetworking_Functions.ttcn, line 678 */
TTCN_Runtime::connect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(674);
/* LibItsGeoNetworking_Functions.ttcn, line 674 */
{
INTEGER tmp_102;
++i;
}
}
current_location.update_lineno(681);
/* LibItsGeoNetworking_Functions.ttcn, line 681 */
activate_a__cf07Down();
current_location.update_lineno(684);
/* LibItsGeoNetworking_Functions.ttcn, line 684 */
if ((p__mainUtComponent == LibItsGeoNetworking__TypesAndValues::c__compMTC)) {
current_location.update_lineno(686);
/* LibItsGeoNetworking_Functions.ttcn, line 686 */
f__initialiseSecuredMode();
current_location.update_lineno(689);
/* LibItsGeoNetworking_Functions.ttcn, line 689 */
f__initialState();
}
else {
current_location.update_lineno(692);
/* LibItsGeoNetworking_Functions.ttcn, line 692 */
v__component = f__getComponent(p__mainUtComponent);
current_location.update_lineno(693);
/* LibItsGeoNetworking_Functions.ttcn, line 693 */
start_f__initialState(v__component);
current_location.update_lineno(694);
/* LibItsGeoNetworking_Functions.ttcn, line 694 */
{
tmp_104:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = v__component.done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_104;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_104;
}
current_location.update_lineno(694);
/* LibItsGeoNetworking_Functions.ttcn, line 694 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 694.");
TTCN_Snapshot::take_new(TRUE);
}
}
}
current_location.update_lineno(698);
/* LibItsGeoNetworking_Functions.ttcn, line 698 */
f__preparePositionsAndAreas(v__positionTable, v__areaTable);
current_location.update_lineno(701);
/* LibItsGeoNetworking_Functions.ttcn, line 701 */
i = 0;
current_location.update_lineno(701);
/* LibItsGeoNetworking_Functions.ttcn, line 701 */
for ( ; ; ) {
current_location.update_lineno(701);
/* LibItsGeoNetworking_Functions.ttcn, line 701 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(702);
/* LibItsGeoNetworking_Functions.ttcn, line 702 */
start_f__initialiseComponent(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), v__positionTable, v__areaTable, const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName());
current_location.update_lineno(701);
/* LibItsGeoNetworking_Functions.ttcn, line 701 */
{
INTEGER tmp_106;
++i;
}
}
current_location.update_lineno(704);
/* LibItsGeoNetworking_Functions.ttcn, line 704 */
i = 0;
current_location.update_lineno(704);
/* LibItsGeoNetworking_Functions.ttcn, line 704 */
for ( ; ; ) {
current_location.update_lineno(704);
/* LibItsGeoNetworking_Functions.ttcn, line 704 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(705);
/* LibItsGeoNetworking_Functions.ttcn, line 705 */
{
tmp_108:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent()().done();
if (alt_flag == ALT_YES) break;
else if (alt_flag == ALT_REPEAT) goto tmp_108;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_108;
}
current_location.update_lineno(705);
/* LibItsGeoNetworking_Functions.ttcn, line 705 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone done statement failed in file LibItsGeoNetworking_Functions.ttcn, line 705.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(704);
/* LibItsGeoNetworking_Functions.ttcn, line 704 */
{
INTEGER tmp_109;
++i;
}
}
}

void start_f__cf07Up(const COMPONENT& component_reference, const CHARSTRING& p__mainUtComponent)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf07Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf07Up", text_buf);
p__mainUtComponent.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf07Down()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 712, TTCN_Location::LOCATION_FUNCTION, "f_cf07Down");
current_location.update_lineno(715);
/* LibItsGeoNetworking_Functions.ttcn, line 715 */
INTEGER i;
current_location.update_lineno(717);
/* LibItsGeoNetworking_Functions.ttcn, line 717 */
f__uninitialiseSecuredMode();
current_location.update_lineno(720);
/* LibItsGeoNetworking_Functions.ttcn, line 720 */
i = 0;
current_location.update_lineno(720);
/* LibItsGeoNetworking_Functions.ttcn, line 720 */
for ( ; ; ) {
current_location.update_lineno(720);
/* LibItsGeoNetworking_Functions.ttcn, line 720 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(721);
/* LibItsGeoNetworking_Functions.ttcn, line 721 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(722);
/* LibItsGeoNetworking_Functions.ttcn, line 722 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(723);
/* LibItsGeoNetworking_Functions.ttcn, line 723 */
TTCN_Runtime::unmap_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.get_name(), SYSTEM_COMPREF, "geoNetworkingPort");
current_location.update_lineno(724);
/* LibItsGeoNetworking_Functions.ttcn, line 724 */
TTCN_Runtime::disconnect_port(const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent(), LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name());
current_location.update_lineno(720);
/* LibItsGeoNetworking_Functions.ttcn, line 720 */
{
INTEGER tmp_111;
++i;
}
}
current_location.update_lineno(726);
/* LibItsGeoNetworking_Functions.ttcn, line 726 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.get_name(), SYSTEM_COMPREF, "acPort");
current_location.update_lineno(727);
/* LibItsGeoNetworking_Functions.ttcn, line 727 */
TTCN_Runtime::unmap_port(self, LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(728);
/* LibItsGeoNetworking_Functions.ttcn, line 728 */
TTCN_Runtime::disconnect_port(self, LibCommon__Sync::BaseSyncComp_component_syncPort.get_name(), MTC_COMPREF, "syncPort");
}

void start_f__cf07Down(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf07Down(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_cf07Down", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__initialiseComponent(const LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, const LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable, const CHARSTRING& p__componentName)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 738, TTCN_Location::LOCATION_FUNCTION, "f_initialiseComponent");
current_location.update_lineno(744);
/* LibItsGeoNetworking_Functions.ttcn, line 744 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable = p__positionTable;
current_location.update_lineno(745);
/* LibItsGeoNetworking_Functions.ttcn, line 745 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable = p__areaTable;
current_location.update_lineno(746);
/* LibItsGeoNetworking_Functions.ttcn, line 746 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName = p__componentName;
current_location.update_lineno(748);
/* LibItsGeoNetworking_Functions.ttcn, line 748 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__localSeqNumber = f__getInitialSequenceNumber();
current_location.update_lineno(749);
/* LibItsGeoNetworking_Functions.ttcn, line 749 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__multipleMessagesCount = f__getMessageCount();
}

void start_f__initialiseComponent(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, const LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable, const CHARSTRING& p__componentName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_initialiseComponent(");
p__positionTable.log();
TTCN_Logger::log_event_str(", ");
p__areaTable.log();
TTCN_Logger::log_event_str(", ");
p__componentName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_initialiseComponent", text_buf);
p__positionTable.encode_text(text_buf);
p__areaTable.encode_text(text_buf);
p__componentName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__startBeingNeighbour()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 756, TTCN_Location::LOCATION_FUNCTION, "f_startBeingNeighbour");
current_location.update_lineno(757);
/* LibItsGeoNetworking_Functions.ttcn, line 757 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__LongPosVector__compName(f__getPosition(CHARSTRING(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName)));
current_location.update_lineno(758);
/* LibItsGeoNetworking_Functions.ttcn, line 758 */
LibItsGeoNetworking__TypesAndValues::ExtendedHeader v__m__beaconHeader(LibItsGeoNetworking__Templates::m__beaconHeader(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(v__LongPosVector__compName)).valueof());
current_location.update_lineno(761);
/* LibItsGeoNetworking_Functions.ttcn, line 761 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__neighbourDefault = activate_a__neighbourDefault();
current_location.update_lineno(762);
/* LibItsGeoNetworking_Functions.ttcn, line 762 */
f__acTriggerEvent(LibItsGeoNetworking__Templates::m__startBeaconing(LibItsGeoNetworking__TypesAndValues::BeaconHeader_template(const_cast< const LibItsGeoNetworking__TypesAndValues::ExtendedHeader&>(v__m__beaconHeader).beaconHeader())));
current_location.update_lineno(763);
/* LibItsGeoNetworking_Functions.ttcn, line 763 */
LibCommon__Time::f__sleepIgnoreDef(LibItsGeoNetworking__Pixits::PX__NEIGHBOUR__DISCOVERY__DELAY);
}

void start_f__startBeingNeighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_startBeingNeighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_startBeingNeighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__stopBeingNeighbour()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 769, TTCN_Location::LOCATION_FUNCTION, "f_stopBeingNeighbour");
current_location.update_lineno(771);
/* LibItsGeoNetworking_Functions.ttcn, line 771 */
f__acTriggerEvent(LibItsGeoNetworking__Templates::m__stopBeaconing);
current_location.update_lineno(772);
/* LibItsGeoNetworking_Functions.ttcn, line 772 */
if ((LibItsGeoNetworking__Pics::PICS__GN__SECURITY == TRUE)) {
current_location.update_lineno(773);
/* LibItsGeoNetworking_Functions.ttcn, line 773 */
TTCN_Default::deactivate(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__neighbourDefault);
;
}
}

void start_f__stopBeingNeighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_stopBeingNeighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_stopBeingNeighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__initialiseSecuredMode()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 780, TTCN_Location::LOCATION_FUNCTION, "f_initialiseSecuredMode");
current_location.update_lineno(781);
/* LibItsGeoNetworking_Functions.ttcn, line 781 */
if ((LibItsGeoNetworking__Pics::PICS__GN__SECURITY == TRUE)) {
current_location.update_lineno(782);
/* LibItsGeoNetworking_Functions.ttcn, line 782 */
if ((LibCommon__VerdictControl::FncRetCode::e__success != f__acEnableSecurity())) {
current_location.update_lineno(783);
/* LibItsGeoNetworking_Functions.ttcn, line 783 */
TTCN_Logger::log_str(TTCN_USER, "*** INFO: TEST CASE NOW STOPPING ITSELF! ***");
current_location.update_lineno(784);
/* LibItsGeoNetworking_Functions.ttcn, line 784 */
TTCN_Runtime::stop_execution();
}
}
}

void start_f__initialiseSecuredMode(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_initialiseSecuredMode(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_initialiseSecuredMode", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__uninitialiseSecuredMode()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 789, TTCN_Location::LOCATION_FUNCTION, "f_uninitialiseSecuredMode");
current_location.update_lineno(790);
/* LibItsGeoNetworking_Functions.ttcn, line 790 */
if ((LibItsGeoNetworking__Pics::PICS__GN__SECURITY == TRUE)) {
current_location.update_lineno(792);
/* LibItsGeoNetworking_Functions.ttcn, line 792 */
f__acDisableSecurity();
}
}

void start_f__uninitialiseSecuredMode(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_uninitialiseSecuredMode(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_uninitialiseSecuredMode", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

COMPONENT f__getComponent(const CHARSTRING& p__componentName)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 804, TTCN_Location::LOCATION_FUNCTION, "f_getComponent");
current_location.update_lineno(809);
/* LibItsGeoNetworking_Functions.ttcn, line 809 */
COMPONENT v__return(NULL_COMPREF);
current_location.update_lineno(810);
/* LibItsGeoNetworking_Functions.ttcn, line 810 */
INTEGER i(0);
current_location.update_lineno(812);
/* LibItsGeoNetworking_Functions.ttcn, line 812 */
i = 0;
current_location.update_lineno(812);
/* LibItsGeoNetworking_Functions.ttcn, line 812 */
for ( ; ; ) {
current_location.update_lineno(812);
/* LibItsGeoNetworking_Functions.ttcn, line 812 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable.lengthof())) break;
current_location.update_lineno(813);
/* LibItsGeoNetworking_Functions.ttcn, line 813 */
if ((const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].componentName() == p__componentName)) {
current_location.update_lineno(814);
/* LibItsGeoNetworking_Functions.ttcn, line 814 */
v__return = const_cast< const LibItsGeoNetworking__TestSystem::ComponentTable&>(LibItsGeoNetworking__TestSystem::ItsMtc_component_vc__componentTable)[i].gnComponent();
}
current_location.update_lineno(812);
/* LibItsGeoNetworking_Functions.ttcn, line 812 */
{
INTEGER tmp_120;
++i;
}
}
current_location.update_lineno(818);
/* LibItsGeoNetworking_Functions.ttcn, line 818 */
return v__return;
}

void start_f__getComponent(const COMPONENT& component_reference, const CHARSTRING& p__componentName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getComponent(");
p__componentName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getComponent", text_buf);
p__componentName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__preparePositionsAndAreas(LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 829, TTCN_Location::LOCATION_FUNCTION, "f_preparePositionsAndAreas");
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorIut;
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorNodeA;
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorNodeB;
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorNodeC;
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorNodeD;
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorNodeE;
current_location.update_lineno(834);
/* LibItsGeoNetworking_Functions.ttcn, line 834 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorNodeF;
current_location.update_lineno(837);
/* LibItsGeoNetworking_Functions.ttcn, line 837 */
v__longPosVectorIut = f__getIutLongPosVector();
current_location.update_lineno(838);
/* LibItsGeoNetworking_Functions.ttcn, line 838 */
v__longPosVectorNodeA = f__computePosition(v__longPosVectorIut, LibItsGeoNetworking__TypesAndValues::c__longitudeFactorNodeA, LibItsGeoNetworking__TypesAndValues::c__latitudeFactorNodeA);
current_location.update_lineno(839);
/* LibItsGeoNetworking_Functions.ttcn, line 839 */
v__longPosVectorNodeB = f__computePosition(v__longPosVectorIut, LibItsGeoNetworking__TypesAndValues::c__longitudeFactorNodeB, LibItsGeoNetworking__TypesAndValues::c__latitudeFactorNodeB);
current_location.update_lineno(840);
/* LibItsGeoNetworking_Functions.ttcn, line 840 */
v__longPosVectorNodeC = f__computePosition(v__longPosVectorIut, LibItsGeoNetworking__TypesAndValues::c__longitudeFactorNodeC, LibItsGeoNetworking__TypesAndValues::c__latitudeFactorNodeC);
current_location.update_lineno(841);
/* LibItsGeoNetworking_Functions.ttcn, line 841 */
v__longPosVectorNodeD = f__computePosition(v__longPosVectorIut, LibItsGeoNetworking__TypesAndValues::c__longitudeFactorNodeD, LibItsGeoNetworking__TypesAndValues::c__latitudeFactorNodeD);
current_location.update_lineno(842);
/* LibItsGeoNetworking_Functions.ttcn, line 842 */
v__longPosVectorNodeE = f__computePosition(v__longPosVectorIut, LibItsGeoNetworking__TypesAndValues::c__longitudeFactorNodeE, LibItsGeoNetworking__TypesAndValues::c__latitudeFactorNodeE);
current_location.update_lineno(843);
/* LibItsGeoNetworking_Functions.ttcn, line 843 */
v__longPosVectorNodeF = f__computePosition(v__longPosVectorIut, LibItsGeoNetworking__TypesAndValues::c__longitudeFactorNodeF, LibItsGeoNetworking__TypesAndValues::c__latitudeFactorNodeF);
current_location.update_lineno(846);
/* LibItsGeoNetworking_Functions.ttcn, line 846 */
v__longPosVectorNodeA.gnAddr() = f__getTsGnLocalAddress(LibItsGeoNetworking__TypesAndValues::c__compNodeA);
current_location.update_lineno(847);
/* LibItsGeoNetworking_Functions.ttcn, line 847 */
v__longPosVectorNodeB.gnAddr() = f__getTsGnLocalAddress(LibItsGeoNetworking__TypesAndValues::c__compNodeB);
current_location.update_lineno(848);
/* LibItsGeoNetworking_Functions.ttcn, line 848 */
v__longPosVectorNodeC.gnAddr() = f__getTsGnLocalAddress(LibItsGeoNetworking__TypesAndValues::c__compNodeC);
current_location.update_lineno(849);
/* LibItsGeoNetworking_Functions.ttcn, line 849 */
v__longPosVectorNodeD.gnAddr() = f__getTsGnLocalAddress(LibItsGeoNetworking__TypesAndValues::c__compNodeD);
current_location.update_lineno(850);
/* LibItsGeoNetworking_Functions.ttcn, line 850 */
v__longPosVectorNodeE.gnAddr() = f__getTsGnLocalAddress(LibItsGeoNetworking__TypesAndValues::c__compNodeE);
current_location.update_lineno(851);
/* LibItsGeoNetworking_Functions.ttcn, line 851 */
v__longPosVectorNodeF.gnAddr() = f__getTsGnLocalAddress(LibItsGeoNetworking__TypesAndValues::c__compNodeF);
current_location.update_lineno(854);
/* LibItsGeoNetworking_Functions.ttcn, line 854 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compIut, v__longPosVectorIut);
current_location.update_lineno(855);
/* LibItsGeoNetworking_Functions.ttcn, line 855 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compNodeA, v__longPosVectorNodeA);
current_location.update_lineno(856);
/* LibItsGeoNetworking_Functions.ttcn, line 856 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compNodeB, v__longPosVectorNodeB);
current_location.update_lineno(857);
/* LibItsGeoNetworking_Functions.ttcn, line 857 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compNodeC, v__longPosVectorNodeC);
current_location.update_lineno(858);
/* LibItsGeoNetworking_Functions.ttcn, line 858 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compNodeD, v__longPosVectorNodeD);
current_location.update_lineno(859);
/* LibItsGeoNetworking_Functions.ttcn, line 859 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compNodeE, v__longPosVectorNodeE);
current_location.update_lineno(860);
/* LibItsGeoNetworking_Functions.ttcn, line 860 */
f__addPosition(p__positionTable, LibItsGeoNetworking__TypesAndValues::c__compNodeF, v__longPosVectorNodeF);
current_location.update_lineno(863);
/* LibItsGeoNetworking_Functions.ttcn, line 863 */
f__addArea(p__areaTable, LibItsGeoNetworking__TypesAndValues::c__area1, f__computeCircularArea(v__longPosVectorNodeD, float2int((5.0 * f__distance(v__longPosVectorNodeB, v__longPosVectorNodeD)))));
current_location.update_lineno(865);
/* LibItsGeoNetworking_Functions.ttcn, line 865 */
f__addArea(p__areaTable, LibItsGeoNetworking__TypesAndValues::c__area2, f__computeCircularArea(v__longPosVectorNodeB, float2int((1.5 * f__distance(v__longPosVectorNodeB, v__longPosVectorNodeD)))));
}

void start_f__preparePositionsAndAreas(const COMPONENT& component_reference, LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__areaTable)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_preparePositionsAndAreas(");
p__positionTable.log();
TTCN_Logger::log_event_str(", ");
p__areaTable.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_preparePositionsAndAreas", text_buf);
p__positionTable.encode_text(text_buf);
p__areaTable.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__addPosition(LibItsGeoNetworking__TypesAndValues::PositionTable& p__positionTable, const CHARSTRING& p__positionKey, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__positionValue)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 876, TTCN_Location::LOCATION_FUNCTION, "f_addPosition");
current_location.update_lineno(882);
/* LibItsGeoNetworking_Functions.ttcn, line 882 */
{
LibItsGeoNetworking__TypesAndValues::PositionEntry& tmp_135 = p__positionTable[p__positionTable.lengthof()]; /* 7388 */
tmp_135.key() = p__positionKey;
tmp_135.position() = p__positionValue;
}
}

LibItsGeoNetworking__TypesAndValues::LongPosVector f__getPosition(const CHARSTRING& p__positionKey)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 893, TTCN_Location::LOCATION_FUNCTION, "f_getPosition");
current_location.update_lineno(898);
/* LibItsGeoNetworking_Functions.ttcn, line 898 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__return;
current_location.update_lineno(899);
/* LibItsGeoNetworking_Functions.ttcn, line 899 */
INTEGER i(0);
current_location.update_lineno(901);
/* LibItsGeoNetworking_Functions.ttcn, line 901 */
i = 0;
current_location.update_lineno(901);
/* LibItsGeoNetworking_Functions.ttcn, line 901 */
for ( ; ; ) {
current_location.update_lineno(901);
/* LibItsGeoNetworking_Functions.ttcn, line 901 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable.lengthof())) break;
current_location.update_lineno(902);
/* LibItsGeoNetworking_Functions.ttcn, line 902 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::PositionTable&>(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable)[i].key() == p__positionKey)) {
current_location.update_lineno(903);
/* LibItsGeoNetworking_Functions.ttcn, line 903 */
v__return = const_cast< const LibItsGeoNetworking__TypesAndValues::PositionTable&>(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable)[i].position();
}
current_location.update_lineno(901);
/* LibItsGeoNetworking_Functions.ttcn, line 901 */
{
INTEGER tmp_138;
++i;
}
}
current_location.update_lineno(907);
/* LibItsGeoNetworking_Functions.ttcn, line 907 */
{
boolean tmp_139;
tmp_139 = v__return.is_bound();
if (tmp_139) tmp_139 = (const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(v__return).timestamp() == 0);
if (tmp_139) {
current_location.update_lineno(908);
/* LibItsGeoNetworking_Functions.ttcn, line 908 */
v__return.timestamp() = f__computeGnTimestamp();
}
}
current_location.update_lineno(910);
/* LibItsGeoNetworking_Functions.ttcn, line 910 */
return v__return;
}

void start_f__getPosition(const COMPONENT& component_reference, const CHARSTRING& p__positionKey)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getPosition(");
p__positionKey.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getPosition", text_buf);
p__positionKey.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__changePositon(const CHARSTRING& p__compNode, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__longPosVector)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 918, TTCN_Location::LOCATION_FUNCTION, "f_changePositon");
current_location.update_lineno(923);
/* LibItsGeoNetworking_Functions.ttcn, line 923 */
INTEGER i(0);
current_location.update_lineno(925);
/* LibItsGeoNetworking_Functions.ttcn, line 925 */
i = 0;
current_location.update_lineno(925);
/* LibItsGeoNetworking_Functions.ttcn, line 925 */
for ( ; ; ) {
current_location.update_lineno(925);
/* LibItsGeoNetworking_Functions.ttcn, line 925 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable.lengthof())) break;
current_location.update_lineno(926);
/* LibItsGeoNetworking_Functions.ttcn, line 926 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::PositionTable&>(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable)[i].key() == p__compNode)) {
current_location.update_lineno(927);
/* LibItsGeoNetworking_Functions.ttcn, line 927 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__positionTable[i].position() = p__longPosVector;
current_location.update_lineno(928);
/* LibItsGeoNetworking_Functions.ttcn, line 928 */
break;
}
current_location.update_lineno(925);
/* LibItsGeoNetworking_Functions.ttcn, line 925 */
{
INTEGER tmp_143;
++i;
}
}
}

void start_f__changePositon(const COMPONENT& component_reference, const CHARSTRING& p__compNode, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__longPosVector)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_changePositon(");
p__compNode.log();
TTCN_Logger::log_event_str(", ");
p__longPosVector.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_changePositon", text_buf);
p__compNode.encode_text(text_buf);
p__longPosVector.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::LongPosVector f__computePosition(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__refPosition, const INTEGER& p__longitudeFactor, const INTEGER& p__latitudeFactor)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 941, TTCN_Location::LOCATION_FUNCTION, "f_computePosition");
current_location.update_lineno(947);
/* LibItsGeoNetworking_Functions.ttcn, line 947 */
INTEGER c__distance2Gps(100);
current_location.update_lineno(948);
/* LibItsGeoNetworking_Functions.ttcn, line 948 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__return(p__refPosition);
current_location.update_lineno(949);
/* LibItsGeoNetworking_Functions.ttcn, line 949 */
INTEGER v__distanceUnit(((100 * LibItsGeoNetworking__Pics::PICS__GN__DEFAULT__MAX__COMMUNICATION__RANGE) / 10));
current_location.update_lineno(951);
/* LibItsGeoNetworking_Functions.ttcn, line 951 */
{
INTEGER tmp_144;
tmp_144 = (const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(v__return).latitude() + (p__latitudeFactor * v__distanceUnit));
v__return.latitude() = tmp_144;
}
current_location.update_lineno(952);
/* LibItsGeoNetworking_Functions.ttcn, line 952 */
{
INTEGER tmp_145;
tmp_145 = (const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(v__return).longitude() + (p__longitudeFactor * v__distanceUnit));
v__return.longitude() = tmp_145;
}
current_location.update_lineno(953);
/* LibItsGeoNetworking_Functions.ttcn, line 953 */
v__return.timestamp() = f__computeGnTimestamp();
current_location.update_lineno(954);
/* LibItsGeoNetworking_Functions.ttcn, line 954 */
v__return.pai() = bs_0;
current_location.update_lineno(956);
/* LibItsGeoNetworking_Functions.ttcn, line 956 */
return v__return;
}

void f__addArea(LibItsGeoNetworking__TypesAndValues::GeoAreaTable& p__geoAreaTable, const CHARSTRING& p__areaKey, const LibItsGeoNetworking__TypesAndValues::GeoArea& p__geoArea)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 965, TTCN_Location::LOCATION_FUNCTION, "f_addArea");
current_location.update_lineno(970);
/* LibItsGeoNetworking_Functions.ttcn, line 970 */
{
LibItsGeoNetworking__TypesAndValues::GeoAreaEntry& tmp_149 = p__geoAreaTable[p__geoAreaTable.lengthof()]; /* 7388 */
tmp_149.key() = p__areaKey;
tmp_149.geoArea() = p__geoArea;
}
}

LibItsGeoNetworking__TypesAndValues::GeoArea f__getArea(const CHARSTRING& p__areaName)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 981, TTCN_Location::LOCATION_FUNCTION, "f_getArea");
current_location.update_lineno(985);
/* LibItsGeoNetworking_Functions.ttcn, line 985 */
LibItsGeoNetworking__TypesAndValues::GeoArea v__return;
current_location.update_lineno(986);
/* LibItsGeoNetworking_Functions.ttcn, line 986 */
INTEGER i(0);
current_location.update_lineno(988);
/* LibItsGeoNetworking_Functions.ttcn, line 988 */
i = 0;
current_location.update_lineno(988);
/* LibItsGeoNetworking_Functions.ttcn, line 988 */
for ( ; ; ) {
current_location.update_lineno(988);
/* LibItsGeoNetworking_Functions.ttcn, line 988 */
if (!(i < LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable.lengthof())) break;
current_location.update_lineno(989);
/* LibItsGeoNetworking_Functions.ttcn, line 989 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoAreaTable&>(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable)[i].key() == p__areaName)) {
current_location.update_lineno(990);
/* LibItsGeoNetworking_Functions.ttcn, line 990 */
v__return = const_cast< const LibItsGeoNetworking__TypesAndValues::GeoAreaTable&>(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable)[i].geoArea();
}
current_location.update_lineno(988);
/* LibItsGeoNetworking_Functions.ttcn, line 988 */
{
INTEGER tmp_152;
++i;
}
}
current_location.update_lineno(994);
/* LibItsGeoNetworking_Functions.ttcn, line 994 */
return v__return;
}

void start_f__getArea(const COMPONENT& component_reference, const CHARSTRING& p__areaName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getArea(");
p__areaName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getArea", text_buf);
p__areaName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea f__getGeoBroadcastArea(const CHARSTRING& p__areaName)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1002, TTCN_Location::LOCATION_FUNCTION, "f_getGeoBroadcastArea");
current_location.update_lineno(1004);
/* LibItsGeoNetworking_Functions.ttcn, line 1004 */
return f__geoArea2GeoBroadcastArea(f__getArea(p__areaName));
}

void start_f__getGeoBroadcastArea(const COMPONENT& component_reference, const CHARSTRING& p__areaName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGeoBroadcastArea(");
p__areaName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getGeoBroadcastArea", text_buf);
p__areaName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::GeoAnycastArea f__getGeoAnycastArea(const CHARSTRING& p__areaName)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1012, TTCN_Location::LOCATION_FUNCTION, "f_getGeoAnycastArea");
current_location.update_lineno(1014);
/* LibItsGeoNetworking_Functions.ttcn, line 1014 */
return f__geoArea2GeoAnycastArea(f__getArea(p__areaName));
}

void start_f__getGeoAnycastArea(const COMPONENT& component_reference, const CHARSTRING& p__areaName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGeoAnycastArea(");
p__areaName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getGeoAnycastArea", text_buf);
p__areaName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea f__geoArea2GeoBroadcastArea(const LibItsGeoNetworking__TypesAndValues::GeoArea& p__area)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1022, TTCN_Location::LOCATION_FUNCTION, "f_geoArea2GeoBroadcastArea");
current_location.update_lineno(1024);
/* LibItsGeoNetworking_Functions.ttcn, line 1024 */
LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea v__broadcastArea;
current_location.update_lineno(1026);
/* LibItsGeoNetworking_Functions.ttcn, line 1026 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).shape() == LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoCircle)) {
current_location.update_lineno(1027);
/* LibItsGeoNetworking_Functions.ttcn, line 1027 */
v__broadcastArea.geoBroadcastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoBroadcast::e__geoBroadcastCircle;
}
else {
current_location.update_lineno(1029);
/* LibItsGeoNetworking_Functions.ttcn, line 1029 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).shape() == LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoRect)) {
current_location.update_lineno(1030);
/* LibItsGeoNetworking_Functions.ttcn, line 1030 */
v__broadcastArea.geoBroadcastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoBroadcast::e__geoBroadcastRect;
}
else {
current_location.update_lineno(1032);
/* LibItsGeoNetworking_Functions.ttcn, line 1032 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).shape() == LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoElip)) {
current_location.update_lineno(1033);
/* LibItsGeoNetworking_Functions.ttcn, line 1033 */
v__broadcastArea.geoBroadcastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoBroadcast::e__geoBroadcastElip;
}
else {
current_location.update_lineno(1036);
/* LibItsGeoNetworking_Functions.ttcn, line 1036 */
v__broadcastArea.geoBroadcastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoBroadcast::e__reserved;
}
}
}
current_location.update_lineno(1039);
/* LibItsGeoNetworking_Functions.ttcn, line 1039 */
v__broadcastArea.geoBroadcastArea() = const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).area();
current_location.update_lineno(1041);
/* LibItsGeoNetworking_Functions.ttcn, line 1041 */
return v__broadcastArea;
}

LibItsGeoNetworking__TypesAndValues::GeoAnycastArea f__geoArea2GeoAnycastArea(const LibItsGeoNetworking__TypesAndValues::GeoArea& p__area)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1049, TTCN_Location::LOCATION_FUNCTION, "f_geoArea2GeoAnycastArea");
current_location.update_lineno(1051);
/* LibItsGeoNetworking_Functions.ttcn, line 1051 */
LibItsGeoNetworking__TypesAndValues::GeoAnycastArea v__anycastArea;
current_location.update_lineno(1053);
/* LibItsGeoNetworking_Functions.ttcn, line 1053 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).shape() == LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoCircle)) {
current_location.update_lineno(1054);
/* LibItsGeoNetworking_Functions.ttcn, line 1054 */
v__anycastArea.geoAnycastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoAnycast::e__geoAnycastCircle;
}
else {
current_location.update_lineno(1056);
/* LibItsGeoNetworking_Functions.ttcn, line 1056 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).shape() == LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoRect)) {
current_location.update_lineno(1057);
/* LibItsGeoNetworking_Functions.ttcn, line 1057 */
v__anycastArea.geoAnycastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoAnycast::e__geoAnycastRect;
}
else {
current_location.update_lineno(1059);
/* LibItsGeoNetworking_Functions.ttcn, line 1059 */
if ((const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).shape() == LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoElip)) {
current_location.update_lineno(1060);
/* LibItsGeoNetworking_Functions.ttcn, line 1060 */
v__anycastArea.geoAnycastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoAnycast::e__geoAnycastElip;
}
else {
current_location.update_lineno(1063);
/* LibItsGeoNetworking_Functions.ttcn, line 1063 */
v__anycastArea.geoAnycastSubType() = LibItsGeoNetworking__TypesAndValues::HeaderSubTypeGeoAnycast::e__reserved;
}
}
}
current_location.update_lineno(1066);
/* LibItsGeoNetworking_Functions.ttcn, line 1066 */
v__anycastArea.geoAnycastArea() = const_cast< const LibItsGeoNetworking__TypesAndValues::GeoArea&>(p__area).area();
current_location.update_lineno(1068);
/* LibItsGeoNetworking_Functions.ttcn, line 1068 */
return v__anycastArea;
}

LibItsGeoNetworking__TypesAndValues::GeoArea f__computeSquareArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__centerLongPosVector, const INTEGER& p__distanceA)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1077, TTCN_Location::LOCATION_FUNCTION, "f_computeSquareArea");
current_location.update_lineno(1082);
/* LibItsGeoNetworking_Functions.ttcn, line 1082 */
LibItsGeoNetworking__TypesAndValues::GeoArea v__geoArea;
current_location.update_lineno(1084);
/* LibItsGeoNetworking_Functions.ttcn, line 1084 */
v__geoArea.shape() = LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoRect;
{
LibItsGeoNetworking__TypesAndValues::Area& tmp_164 = v__geoArea.area();
tmp_164.geoAreaPosLatitude() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__centerLongPosVector).latitude();
tmp_164.geoAreaPosLongitude() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__centerLongPosVector).longitude();
tmp_164.distanceA() = p__distanceA;
tmp_164.distanceB() = p__distanceA;
tmp_164.angle() = 0;
}
current_location.update_lineno(1095);
/* LibItsGeoNetworking_Functions.ttcn, line 1095 */
return v__geoArea;
}

LibItsGeoNetworking__TypesAndValues::GeoArea f__computeCircularArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__centerLongPosVector, const INTEGER& p__distanceA)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1104, TTCN_Location::LOCATION_FUNCTION, "f_computeCircularArea");
current_location.update_lineno(1109);
/* LibItsGeoNetworking_Functions.ttcn, line 1109 */
LibItsGeoNetworking__TypesAndValues::GeoArea v__geoArea;
current_location.update_lineno(1111);
/* LibItsGeoNetworking_Functions.ttcn, line 1111 */
v__geoArea.shape() = LibItsGeoNetworking__TypesAndValues::GeoShape::e__geoCircle;
{
LibItsGeoNetworking__TypesAndValues::Area& tmp_166 = v__geoArea.area();
tmp_166.geoAreaPosLatitude() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__centerLongPosVector).latitude();
tmp_166.geoAreaPosLongitude() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__centerLongPosVector).longitude();
tmp_166.distanceA() = p__distanceA;
tmp_166.distanceB() = 0;
tmp_166.angle() = 0;
}
current_location.update_lineno(1122);
/* LibItsGeoNetworking_Functions.ttcn, line 1122 */
return v__geoArea;
}

FLOAT f__radiusFromCircularArea(const FLOAT& p__squareMeters)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1131, TTCN_Location::LOCATION_FUNCTION, "f_radiusFromCircularArea");
current_location.update_lineno(1136);
/* LibItsGeoNetworking_Functions.ttcn, line 1136 */
return LibItsCommon__Functions::fx__computeRadiusFromCircularArea(p__squareMeters);
}

FLOAT f__distance(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__pointA, const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__pointB)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1146, TTCN_Location::LOCATION_FUNCTION, "f_distance");
current_location.update_lineno(1152);
/* LibItsGeoNetworking_Functions.ttcn, line 1152 */
return LibItsCommon__Functions::fx__computeDistance(const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__pointA).latitude(), const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__pointA).longitude(), const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__pointB).latitude(), const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__pointB).longitude());
}

alt_status a__default_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1162, TTCN_Location::LOCATION_ALTSTEP, "a_default");
current_location.update_lineno(1164);
/* LibItsGeoNetworking_Functions.ttcn, line 1164 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorIut;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1166);
/* LibItsGeoNetworking_Functions.ttcn, line 1166 */
switch (a__receiveLsRequest_instance(INTEGER_template(ANY_VALUE), OCTETSTRING_template(ANY_VALUE), v__longPosVectorIut)) {
case ALT_YES:
{
current_location.update_lineno(1169);
/* LibItsGeoNetworking_Functions.ttcn, line 1169 */
return ALT_REPEAT;
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1171);
/* LibItsGeoNetworking_Functions.ttcn, line 1171 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwSecPdu(LibItsSecurity__Templates::mdw__securedMessage__CAMs(LibItsSecurity__Templates::mdw__securedMessage__CAMs_p__header_defval, LibItsSecurity__Templates::mdw__securedMessage__CAMs_p__payload_defval, LibItsSecurity__Templates::mdw__securedMessage__CAMs_p__trailer_defval), LibItsGeoNetworking__TypesAndValues::GnNonSecuredPacket_template(ANY_VALUE))), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1178);
/* LibItsGeoNetworking_Functions.ttcn, line 1178 */
TTCN_Logger::log_str(TTCN_USER, "*** a_default: WARNING: Skip secured CAM messages ***");
current_location.update_lineno(1179);
/* LibItsGeoNetworking_Functions.ttcn, line 1179 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1181);
/* LibItsGeoNetworking_Functions.ttcn, line 1181 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1182);
/* LibItsGeoNetworking_Functions.ttcn, line 1182 */
TTCN_Logger::log_str(TTCN_USER, "*** a_default: WARNING: Received an unexpected message ***");
current_location.update_lineno(1183);
/* LibItsGeoNetworking_Functions.ttcn, line 1183 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1185);
/* LibItsGeoNetworking_Functions.ttcn, line 1185 */
switch (LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout()) {
case ALT_YES:
{
current_location.update_lineno(1186);
/* LibItsGeoNetworking_Functions.ttcn, line 1186 */
TTCN_Logger::log_str(TTCN_USER, "*** a_default: ERROR: Timeout while awaiting reaction of the IUT prior to Upper Tester action ***");
current_location.update_lineno(1187);
/* LibItsGeoNetworking_Functions.ttcn, line 1187 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1189);
/* LibItsGeoNetworking_Functions.ttcn, line 1189 */
switch (LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout()) {
case ALT_YES:
{
current_location.update_lineno(1190);
/* LibItsGeoNetworking_Functions.ttcn, line 1190 */
TTCN_Logger::log_str(TTCN_USER, "*** a_default: ERROR: Timeout while awaiting the reception of a message ***");
current_location.update_lineno(1191);
/* LibItsGeoNetworking_Functions.ttcn, line 1191 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1193);
/* LibItsGeoNetworking_Functions.ttcn, line 1193 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1194);
/* LibItsGeoNetworking_Functions.ttcn, line 1194 */
TTCN_Logger::log_str(TTCN_USER, "*** a_default: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1195);
/* LibItsGeoNetworking_Functions.ttcn, line 1195 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_default.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__default()
{
return new a__default_Default();
}

alt_status a__neighbourDefault_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1202, TTCN_Location::LOCATION_ALTSTEP, "a_neighbourDefault");
current_location.update_lineno(1203);
/* LibItsGeoNetworking_Functions.ttcn, line 1203 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__LongPosVector__compName(f__getPosition(CHARSTRING(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName)));
current_location.update_lineno(1204);
/* LibItsGeoNetworking_Functions.ttcn, line 1204 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__LongPosVector__compNodeA(f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compNodeA));
alt_status ret_val = ALT_NO;
current_location.update_lineno(1207);
/* LibItsGeoNetworking_Functions.ttcn, line 1207 */
switch (a__receiveLsRequestAndReply_instance(INTEGER_template(ANY_VALUE), OCTETSTRING_template(const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(v__LongPosVector__compName).gnAddr().mid()), LibItsGeoNetworking__TypesAndValues::LongPosVector_template(f__getPosition(CHARSTRING(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName))), LibItsGeoNetworking__TypesAndValues::LongPosVector_template(f__getPosition(CHARSTRING(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName))))) {
case ALT_YES:
{
current_location.update_lineno(1212);
/* LibItsGeoNetworking_Functions.ttcn, line 1212 */
return ALT_REPEAT;
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1214);
/* LibItsGeoNetworking_Functions.ttcn, line 1214 */
if ((LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName == LibItsGeoNetworking__TypesAndValues::c__compNodeB)) {
current_location.update_lineno(1214);
/* LibItsGeoNetworking_Functions.ttcn, line 1214 */
switch (a__receiveLsRequestAndReply_instance(INTEGER_template(ANY_VALUE), OCTETSTRING_template(const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(v__LongPosVector__compNodeA).gnAddr().mid()), LibItsGeoNetworking__TypesAndValues::LongPosVector_template(f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compNodeA)), LibItsGeoNetworking__TypesAndValues::LongPosVector_template(f__getPosition(CHARSTRING(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName))))) {
case ALT_YES:
{
current_location.update_lineno(1219);
/* LibItsGeoNetworking_Functions.ttcn, line 1219 */
return ALT_REPEAT;
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
}
current_location.update_lineno(1221);
/* LibItsGeoNetworking_Functions.ttcn, line 1221 */
switch (a__default_instance()) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__neighbourDefault()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__neighbourDefault_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_neighbourDefault.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__neighbourDefault()
{
return new a__neighbourDefault_Default();
}

alt_status a__utDefault_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1228, TTCN_Location::LOCATION_ALTSTEP, "a_utDefault");
current_location.update_lineno(1229);
/* LibItsGeoNetworking_Functions.ttcn, line 1229 */
LibItsGeoNetworking__TypesAndValues::UtGnEventInd v__ind;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1230);
/* LibItsGeoNetworking_Functions.ttcn, line 1230 */
switch (LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(LibItsGeoNetworking__TypesAndValues::UtGnEventInd_template(ANY_VALUE), &(v__ind), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1232);
/* LibItsGeoNetworking_Functions.ttcn, line 1232 */
LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_vc__utInds[LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_vc__utInds.lengthof()] = v__ind;
current_location.update_lineno(1233);
/* LibItsGeoNetworking_Functions.ttcn, line 1233 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(1235);
/* LibItsGeoNetworking_Functions.ttcn, line 1235 */
switch (LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_utPort.receive(any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1236);
/* LibItsGeoNetworking_Functions.ttcn, line 1236 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1237);
/* LibItsGeoNetworking_Functions.ttcn, line 1237 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__utDefault()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__utDefault_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_utDefault.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__utDefault()
{
return new a__utDefault_Default();
}

alt_status a__cf01Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1244, TTCN_Location::LOCATION_ALTSTEP, "a_cf01Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1245);
/* LibItsGeoNetworking_Functions.ttcn, line 1245 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1246);
/* LibItsGeoNetworking_Functions.ttcn, line 1246 */
f__poDefault();
current_location.update_lineno(1247);
/* LibItsGeoNetworking_Functions.ttcn, line 1247 */
f__cf01Down();
current_location.update_lineno(1248);
/* LibItsGeoNetworking_Functions.ttcn, line 1248 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf01Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1249);
/* LibItsGeoNetworking_Functions.ttcn, line 1249 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf01Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf01Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf01Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf01Down()
{
return new a__cf01Down_Default();
}

alt_status a__cf02Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1256, TTCN_Location::LOCATION_ALTSTEP, "a_cf02Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1257);
/* LibItsGeoNetworking_Functions.ttcn, line 1257 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1258);
/* LibItsGeoNetworking_Functions.ttcn, line 1258 */
f__cf02Down();
current_location.update_lineno(1259);
/* LibItsGeoNetworking_Functions.ttcn, line 1259 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf02Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1260);
/* LibItsGeoNetworking_Functions.ttcn, line 1260 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf02Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf02Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf02Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf02Down()
{
return new a__cf02Down_Default();
}

alt_status a__cf03Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1267, TTCN_Location::LOCATION_ALTSTEP, "a_cf03Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1268);
/* LibItsGeoNetworking_Functions.ttcn, line 1268 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1269);
/* LibItsGeoNetworking_Functions.ttcn, line 1269 */
f__cf03Down();
current_location.update_lineno(1270);
/* LibItsGeoNetworking_Functions.ttcn, line 1270 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf03Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1271);
/* LibItsGeoNetworking_Functions.ttcn, line 1271 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf03Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf03Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf03Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf03Down()
{
return new a__cf03Down_Default();
}

alt_status a__cf04Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1278, TTCN_Location::LOCATION_ALTSTEP, "a_cf04Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1279);
/* LibItsGeoNetworking_Functions.ttcn, line 1279 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1280);
/* LibItsGeoNetworking_Functions.ttcn, line 1280 */
f__cf04Down();
current_location.update_lineno(1281);
/* LibItsGeoNetworking_Functions.ttcn, line 1281 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf04Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1282);
/* LibItsGeoNetworking_Functions.ttcn, line 1282 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf04Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf04Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf04Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf04Down()
{
return new a__cf04Down_Default();
}

alt_status a__cf05Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1289, TTCN_Location::LOCATION_ALTSTEP, "a_cf05Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1290);
/* LibItsGeoNetworking_Functions.ttcn, line 1290 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1291);
/* LibItsGeoNetworking_Functions.ttcn, line 1291 */
f__cf05Down();
current_location.update_lineno(1292);
/* LibItsGeoNetworking_Functions.ttcn, line 1292 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf05Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1293);
/* LibItsGeoNetworking_Functions.ttcn, line 1293 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf05Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf05Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf05Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf05Down()
{
return new a__cf05Down_Default();
}

alt_status a__cf06Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1300, TTCN_Location::LOCATION_ALTSTEP, "a_cf06Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1301);
/* LibItsGeoNetworking_Functions.ttcn, line 1301 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1302);
/* LibItsGeoNetworking_Functions.ttcn, line 1302 */
f__cf06Down();
current_location.update_lineno(1303);
/* LibItsGeoNetworking_Functions.ttcn, line 1303 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf06Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1304);
/* LibItsGeoNetworking_Functions.ttcn, line 1304 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf06Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf06Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf06Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf06Down()
{
return new a__cf06Down_Default();
}

alt_status a__cf07Down_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1311, TTCN_Location::LOCATION_ALTSTEP, "a_cf07Down");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1312);
/* LibItsGeoNetworking_Functions.ttcn, line 1312 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(1313);
/* LibItsGeoNetworking_Functions.ttcn, line 1313 */
f__cf07Down();
current_location.update_lineno(1314);
/* LibItsGeoNetworking_Functions.ttcn, line 1314 */
TTCN_Logger::log_str(TTCN_USER, "*** a_cf07Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
current_location.update_lineno(1315);
/* LibItsGeoNetworking_Functions.ttcn, line 1315 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__cf07Down()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__cf07Down_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_cf07Down.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__cf07Down()
{
return new a__cf07Down_Default();
}

alt_status a__receiveGeoUnicast_instance(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1326, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoUnicast");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1331);
/* LibItsGeoNetworking_Functions.ttcn, line 1331 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwUnicastPacket(p__destinationShortPosVec, p__seqNumber), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoUnicast(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoUnicast_instance(p__destinationShortPosVec, p__seqNumber);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoUnicast.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoUnicast(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec, const INTEGER_template& p__seqNumber)
{
return new a__receiveGeoUnicast_Default(p__destinationShortPosVec, p__seqNumber);
}

alt_status a__receiveGeoUnicastWithDestination_instance(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1341, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoUnicastWithDestination");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1343);
/* LibItsGeoNetworking_Functions.ttcn, line 1343 */
switch (a__receiveGeoUnicast_instance(p__destinationShortPosVec, INTEGER_template(ANY_VALUE))) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoUnicastWithDestination(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoUnicastWithDestination_instance(p__destinationShortPosVec);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoUnicastWithDestination.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoUnicastWithDestination(const LibItsGeoNetworking__TypesAndValues::ShortPosVector_template& p__destinationShortPosVec)
{
return new a__receiveGeoUnicastWithDestination_Default(p__destinationShortPosVec);
}

alt_status a__receiveAnyGeoUnicast_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1349, TTCN_Location::LOCATION_ALTSTEP, "a_receiveAnyGeoUnicast");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1351);
/* LibItsGeoNetworking_Functions.ttcn, line 1351 */
switch (a__receiveGeoUnicast_instance(LibItsGeoNetworking__TypesAndValues::ShortPosVector_template(ANY_VALUE), INTEGER_template(ANY_VALUE))) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveAnyGeoUnicast()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveAnyGeoUnicast_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveAnyGeoUnicast.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveAnyGeoUnicast()
{
return new a__receiveAnyGeoUnicast_Default();
}

alt_status a__receiveGeoBroadcast_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1363, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoBroadcast");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1368);
/* LibItsGeoNetworking_Functions.ttcn, line 1368 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwBroadcastPacket(p__srcLongPosVec, p__seqNumber), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoBroadcast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoBroadcast_instance(p__srcLongPosVec, p__seqNumber);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoBroadcast.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoBroadcast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber)
{
return new a__receiveGeoBroadcast_Default(p__srcLongPosVec, p__seqNumber);
}

alt_status a__receiveGeoBroadcastWithAreaWithHopLimit_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1383, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoBroadcastWithAreaWithHopLimit");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1391);
/* LibItsGeoNetworking_Functions.ttcn, line 1391 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwBroadcastPacketWithAreaAndHl(p__srcLongPosVec, p__seqNumber, p__broadcastArea, p__maxHopLimit), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, p__routerHopLimit)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoBroadcastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoBroadcastWithAreaWithHopLimit_instance(p__srcLongPosVec, p__seqNumber, p__broadcastArea, p__routerHopLimit, p__maxHopLimit);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoBroadcastWithAreaWithHopLimit.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoBroadcastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea, const INTEGER_template& p__routerHopLimit, const INTEGER_template& p__maxHopLimit)
{
return new a__receiveGeoBroadcastWithAreaWithHopLimit_Default(p__srcLongPosVec, p__seqNumber, p__broadcastArea, p__routerHopLimit, p__maxHopLimit);
}

alt_status a__receiveGeoBroadcastWithArea_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1409, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoBroadcastWithArea");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1415);
/* LibItsGeoNetworking_Functions.ttcn, line 1415 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwBroadcastPacketWithArea(p__srcLongPosVec, p__seqNumber, p__broadcastArea), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoBroadcastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoBroadcastWithArea_instance(p__srcLongPosVec, p__seqNumber, p__broadcastArea);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoBroadcastWithArea.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoBroadcastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template& p__broadcastArea)
{
return new a__receiveGeoBroadcastWithArea_Default(p__srcLongPosVec, p__seqNumber, p__broadcastArea);
}

alt_status a__receiveGeoAnycast_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1433, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoAnycast");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1439);
/* LibItsGeoNetworking_Functions.ttcn, line 1439 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwAnycastPacket(p__srcLongPosVec, p__seqNumber), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoAnycast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoAnycast_instance(p__srcLongPosVec, p__senderLongPosVec, p__seqNumber);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoAnycast.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoAnycast(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__senderLongPosVec, const INTEGER_template& p__seqNumber)
{
return new a__receiveGeoAnycast_Default(p__srcLongPosVec, p__senderLongPosVec, p__seqNumber);
}

alt_status a__receiveGeoAnycastWithAreaWithHopLimit_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1455, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoAnycastWithAreaWithHopLimit");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1463);
/* LibItsGeoNetworking_Functions.ttcn, line 1463 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwAnycastPacketWithArea(p__srcLongPosVec, p__seqNumber, p__anycastArea), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, p__hopLimit)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoAnycastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoAnycastWithAreaWithHopLimit_instance(p__srcLongPosVec, p__seqNumber, p__anycastArea, p__hopLimit, p__maxHopLimit);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoAnycastWithAreaWithHopLimit.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoAnycastWithAreaWithHopLimit(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea, const INTEGER_template& p__hopLimit, const INTEGER_template& p__maxHopLimit)
{
return new a__receiveGeoAnycastWithAreaWithHopLimit_Default(p__srcLongPosVec, p__seqNumber, p__anycastArea, p__hopLimit, p__maxHopLimit);
}

alt_status a__receiveGeoAnycastWithArea_instance(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1481, TTCN_Location::LOCATION_ALTSTEP, "a_receiveGeoAnycastWithArea");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1487);
/* LibItsGeoNetworking_Functions.ttcn, line 1487 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwAnycastPacketWithArea(p__srcLongPosVec, p__seqNumber, p__anycastArea), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveGeoAnycastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveGeoAnycastWithArea_instance(p__srcLongPosVec, p__seqNumber, p__anycastArea);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveGeoAnycastWithArea.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveGeoAnycastWithArea(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__srcLongPosVec, const INTEGER_template& p__seqNumber, const LibItsGeoNetworking__TypesAndValues::GeoAnycastArea_template& p__anycastArea)
{
return new a__receiveGeoAnycastWithArea_Default(p__srcLongPosVec, p__seqNumber, p__anycastArea);
}

alt_status a__receiveLsRequest_instance(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1505, TTCN_Location::LOCATION_ALTSTEP, "a_receiveLsRequest");
current_location.update_lineno(1510);
/* LibItsGeoNetworking_Functions.ttcn, line 1510 */
LibItsGeoNetworking__TestSystem::GeoNetworkingInd v__msg;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1512);
/* LibItsGeoNetworking_Functions.ttcn, line 1512 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwLsRequestPacket(p__seqNumber, p__mid), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), &(v__msg), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1522);
/* LibItsGeoNetworking_Functions.ttcn, line 1522 */
p__reqSrcPosVector = const_cast< const LibItsGeoNetworking__TestSystem::GeoNetworkingInd&>(v__msg).msgIn().gnPacket().packet().extendedHeader()().lsRequestHeader().srcPosVector();
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveLsRequest(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveLsRequest_instance(p__seqNumber, p__mid, p__reqSrcPosVector);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveLsRequest.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveLsRequest(const INTEGER_template& p__seqNumber, const OCTETSTRING_template& p__mid, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__reqSrcPosVector)
{
return new a__receiveLsRequest_Default(p__seqNumber, p__mid, p__reqSrcPosVector);
}

alt_status a__receiveAnyLsRequest_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1529, TTCN_Location::LOCATION_ALTSTEP, "a_receiveAnyLsRequest");
current_location.update_lineno(1530);
/* LibItsGeoNetworking_Functions.ttcn, line 1530 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__reqSrcPosVector;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1532);
/* LibItsGeoNetworking_Functions.ttcn, line 1532 */
switch (a__receiveLsRequest_instance(INTEGER_template(ANY_VALUE), OCTETSTRING_template(ANY_VALUE), v__reqSrcPosVector)) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveAnyLsRequest()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveAnyLsRequest_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveAnyLsRequest.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveAnyLsRequest()
{
return new a__receiveAnyLsRequest_Default();
}

alt_status a__receiveAnyLsReply_instance()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1538, TTCN_Location::LOCATION_ALTSTEP, "a_receiveAnyLsReply");
alt_status ret_val = ALT_NO;
current_location.update_lineno(1539);
/* LibItsGeoNetworking_Functions.ttcn, line 1539 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwLsReplyPacket(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(ANY_VALUE), LibItsGeoNetworking__TypesAndValues::ShortPosVector_template(ANY_VALUE)), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(1541);
/* LibItsGeoNetworking_Functions.ttcn, line 1541 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveAnyLsReply()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveAnyLsReply_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveAnyLsReply.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveAnyLsReply()
{
return new a__receiveAnyLsReply_Default();
}

alt_status a__receiveLsRequestAndReply_instance(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1552, TTCN_Location::LOCATION_ALTSTEP, "a_receiveLsRequestAndReply");
current_location.update_lineno(1558);
/* LibItsGeoNetworking_Functions.ttcn, line 1558 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__repDstPosVector;
alt_status ret_val = ALT_NO;
current_location.update_lineno(1560);
/* LibItsGeoNetworking_Functions.ttcn, line 1560 */
switch (a__receiveLsRequest_instance(p__reqSeqNumber, p__mid, v__repDstPosVector)) {
case ALT_YES:
{
current_location.update_lineno(1561);
/* LibItsGeoNetworking_Functions.ttcn, line 1561 */
f__sendGeoNetMessage(LibItsGeoNetworking__Templates::m__geoNwReq__linkLayerBroadcast(LibItsGeoNetworking__Templates::m__geoNwPdu(LibItsGeoNetworking__Templates::m__geoNwLsReplyPacket(p__repSrcPosVector, LibItsGeoNetworking__TypesAndValues::ShortPosVector_template(f__longPosVector2ShortPosVector(v__repDstPosVector)), INTEGER_template(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__localSeqNumber)), LibItsGeoNetworking__Templates::m__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::m__geoNwPdu_p__hopLimit_defval)));
}
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__receiveLsRequestAndReply(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__receiveLsRequestAndReply_instance(p__reqSeqNumber, p__mid, p__repSrcPosVector, p__repSenderPosVector);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_receiveLsRequestAndReply.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__receiveLsRequestAndReply(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector)
{
return new a__receiveLsRequestAndReply_Default(p__reqSeqNumber, p__mid, p__repSrcPosVector, p__repSenderPosVector);
}

void f__prDefault()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1580, TTCN_Location::LOCATION_FUNCTION, "f_prDefault");
current_location.update_lineno(1581);
/* LibItsGeoNetworking_Functions.ttcn, line 1581 */
activate_a__default();
current_location.update_lineno(1582);
/* LibItsGeoNetworking_Functions.ttcn, line 1582 */
activate_a__utDefault();
}

void start_f__prDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_prDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__prNonNeighbour()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1588, TTCN_Location::LOCATION_FUNCTION, "f_prNonNeighbour");
current_location.update_lineno(1589);
/* LibItsGeoNetworking_Functions.ttcn, line 1589 */
f__prDefault();
}

void start_f__prNonNeighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prNonNeighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_prNonNeighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__prNeighbour()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1595, TTCN_Location::LOCATION_FUNCTION, "f_prNeighbour");
current_location.update_lineno(1596);
/* LibItsGeoNetworking_Functions.ttcn, line 1596 */
f__prDefault();
current_location.update_lineno(1597);
/* LibItsGeoNetworking_Functions.ttcn, line 1597 */
f__startBeingNeighbour();
current_location.update_lineno(1598);
/* LibItsGeoNetworking_Functions.ttcn, line 1598 */
LibCommon__Time::f__sleep(5.0e-1);
}

void start_f__prNeighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prNeighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_prNeighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__initialState()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1605, TTCN_Location::LOCATION_FUNCTION, "f_initialState");
current_location.update_lineno(1607);
/* LibItsGeoNetworking_Functions.ttcn, line 1607 */
if (LibItsGeoNetworking__Pics::PICS__GN__SECURITY) {
current_location.update_lineno(1608);
/* LibItsGeoNetworking_Functions.ttcn, line 1608 */
OCTETSTRING v__hashedId8ToBeUsed(os_0);
current_location.update_lineno(1609);
/* LibItsGeoNetworking_Functions.ttcn, line 1609 */
if ((oct2int(v__hashedId8ToBeUsed) == 0)) {
current_location.update_lineno(1610);
/* LibItsGeoNetworking_Functions.ttcn, line 1610 */
v__hashedId8ToBeUsed = os_0;
}
current_location.update_lineno(1612);
/* LibItsGeoNetworking_Functions.ttcn, line 1612 */
f__utInitializeIut(LibItsSecurity__Templates::m__secGnInitialize(v__hashedId8ToBeUsed));
current_location.update_lineno(1613);
/* LibItsGeoNetworking_Functions.ttcn, line 1613 */
return;
}
current_location.update_lineno(1615);
/* LibItsGeoNetworking_Functions.ttcn, line 1615 */
f__utInitializeIut(LibItsGeoNetworking__Templates::m__gnInitialize);
}

void start_f__initialState(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_initialState(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_initialState", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__handleLocationService(const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1625, TTCN_Location::LOCATION_FUNCTION, "f_handleLocationService");
current_location.update_lineno(1632);
/* LibItsGeoNetworking_Functions.ttcn, line 1632 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1633);
/* LibItsGeoNetworking_Functions.ttcn, line 1633 */
{
tmp_170:
alt_status tmp_170_alt_flag_0 = ALT_MAYBE;
alt_status tmp_170_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_170_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1634);
/* LibItsGeoNetworking_Functions.ttcn, line 1634 */
tmp_170_alt_flag_0 = a__receiveLsRequestAndReply_instance(p__reqSeqNumber, p__mid, p__repSrcPosVector, p__repSenderPosVector);
if (tmp_170_alt_flag_0 == ALT_REPEAT) goto tmp_170;
if (tmp_170_alt_flag_0 == ALT_BREAK) break;
if (tmp_170_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1635);
/* LibItsGeoNetworking_Functions.ttcn, line 1635 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
break;
}
}
if (tmp_170_default_flag == ALT_MAYBE) {
tmp_170_default_flag = TTCN_Default::try_altsteps();
if (tmp_170_default_flag == ALT_YES || tmp_170_default_flag == ALT_BREAK) break;
else if (tmp_170_default_flag == ALT_REPEAT) goto tmp_170;
}
current_location.update_lineno(1633);
/* LibItsGeoNetworking_Functions.ttcn, line 1633 */
if (tmp_170_alt_flag_0 == ALT_NO && tmp_170_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 1633 and 1637.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_f__handleLocationService(const COMPONENT& component_reference, const INTEGER_template& p__reqSeqNumber, const OCTETSTRING_template& p__mid, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSrcPosVector, const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__repSenderPosVector)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_handleLocationService(");
p__reqSeqNumber.log();
TTCN_Logger::log_event_str(", ");
p__mid.log();
TTCN_Logger::log_event_str(", ");
p__repSrcPosVector.log();
TTCN_Logger::log_event_str(", ");
p__repSenderPosVector.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_handleLocationService", text_buf);
p__reqSeqNumber.encode_text(text_buf);
p__mid.encode_text(text_buf);
p__repSrcPosVector.encode_text(text_buf);
p__repSenderPosVector.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__processLocationService(const LibItsGeoNetworking__TypesAndValues::LongPosVector_template& p__reqSrcPosVector, const INTEGER_template& p__reqSeqNumber, const LibItsGeoNetworking__TypesAndValues::GN__Address_template& p__gnAddress, LibItsGeoNetworking__TypesAndValues::LongPosVector& p__repSrcPosVector)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1649, TTCN_Location::LOCATION_FUNCTION, "f_processLocationService");
p__repSrcPosVector.clean_up();
current_location.update_lineno(1655);
/* LibItsGeoNetworking_Functions.ttcn, line 1655 */
LibCommon__VerdictControl::FncRetCode v__ret(LibCommon__VerdictControl::FncRetCode::e__error);
current_location.update_lineno(1656);
/* LibItsGeoNetworking_Functions.ttcn, line 1656 */
LibItsGeoNetworking__TestSystem::GeoNetworkingInd v__msg;
current_location.update_lineno(1658);
/* LibItsGeoNetworking_Functions.ttcn, line 1658 */
f__sendGeoNetMessage(LibItsGeoNetworking__Templates::m__geoNwReq__linkLayerBroadcast(LibItsGeoNetworking__Templates::m__geoNwPdu(LibItsGeoNetworking__Templates::m__geoNwLsRequestPacket(p__reqSrcPosVector, p__reqSeqNumber, p__gnAddress), LibItsGeoNetworking__Templates::m__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::m__geoNwPdu_p__hopLimit_defval)));
current_location.update_lineno(1670);
/* LibItsGeoNetworking_Functions.ttcn, line 1670 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1671);
/* LibItsGeoNetworking_Functions.ttcn, line 1671 */
{
tmp_171:
alt_status tmp_171_alt_flag_0 = ALT_MAYBE;
alt_status tmp_171_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_171_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1672);
/* LibItsGeoNetworking_Functions.ttcn, line 1672 */
tmp_171_alt_flag_0 = LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwLsReplyPacket(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(ANY_VALUE), LibItsGeoNetworking__Templates::mw__shortPosVectorPosition(LibItsGeoNetworking__TypesAndValues::ShortPosVector_template(f__longPosVector2ShortPosVector(p__reqSrcPosVector.valueof())))), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), &(v__msg), any_compref, NULL);
if (tmp_171_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1682);
/* LibItsGeoNetworking_Functions.ttcn, line 1682 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1683);
/* LibItsGeoNetworking_Functions.ttcn, line 1683 */
p__repSrcPosVector = const_cast< const LibItsGeoNetworking__TestSystem::GeoNetworkingInd&>(v__msg).msgIn().gnPacket().packet().extendedHeader()().lsReplyHeader().srcPosVector();
current_location.update_lineno(1684);
/* LibItsGeoNetworking_Functions.ttcn, line 1684 */
v__ret = LibCommon__VerdictControl::FncRetCode::e__success;
break;
}
}
if (tmp_171_default_flag == ALT_MAYBE) {
tmp_171_default_flag = TTCN_Default::try_altsteps();
if (tmp_171_default_flag == ALT_YES || tmp_171_default_flag == ALT_BREAK) break;
else if (tmp_171_default_flag == ALT_REPEAT) goto tmp_171;
}
current_location.update_lineno(1671);
/* LibItsGeoNetworking_Functions.ttcn, line 1671 */
if (tmp_171_alt_flag_0 == ALT_NO && tmp_171_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 1671 and 1686.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1688);
/* LibItsGeoNetworking_Functions.ttcn, line 1688 */
return v__ret;
}

void f__poDefault()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1698, TTCN_Location::LOCATION_FUNCTION, "f_poDefault");
}

void start_f__poDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_poDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__poNeighbour()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1705, TTCN_Location::LOCATION_FUNCTION, "f_poNeighbour");
current_location.update_lineno(1706);
/* LibItsGeoNetworking_Functions.ttcn, line 1706 */
f__stopBeingNeighbour();
current_location.update_lineno(1707);
/* LibItsGeoNetworking_Functions.ttcn, line 1707 */
f__poDefault();
}

void start_f__poNeighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poNeighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_poNeighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__acTriggerEvent(const LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template& p__event)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1719, TTCN_Location::LOCATION_FUNCTION, "f_acTriggerEvent");
current_location.update_lineno(1720);
/* LibItsGeoNetworking_Functions.ttcn, line 1720 */
LibCommon__VerdictControl::FncRetCode v__ret(LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1722);
/* LibItsGeoNetworking_Functions.ttcn, line 1722 */
LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.send(p__event);
current_location.update_lineno(1724);
/* LibItsGeoNetworking_Functions.ttcn, line 1724 */
return v__ret;
}

void start_f__acTriggerEvent(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template& p__event)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_acTriggerEvent", text_buf);
p__event.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::LongPosVector f__acGetLongPosVector(const LibItsGeoNetworking__TypesAndValues::GN__Address& p__gnAddress)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1732, TTCN_Location::LOCATION_FUNCTION, "f_acGetLongPosVector");
current_location.update_lineno(1733);
/* LibItsGeoNetworking_Functions.ttcn, line 1733 */
LibItsGeoNetworking__TypesAndValues::AcGnResponse v__result;
current_location.update_lineno(1735);
/* LibItsGeoNetworking_Functions.ttcn, line 1735 */
f__acTriggerEvent(LibItsGeoNetworking__Templates::m__getLongPosVector(p__gnAddress));
current_location.update_lineno(1736);
/* LibItsGeoNetworking_Functions.ttcn, line 1736 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1738);
/* LibItsGeoNetworking_Functions.ttcn, line 1738 */
TTCN_Logger::log_str(TTCN_USER, "ELNRNAG f_acGetLongPosVector:");
current_location.update_lineno(1739);
/* LibItsGeoNetworking_Functions.ttcn, line 1739 */
try {
TTCN_Logger::begin_event(TTCN_USER);
LibItsGeoNetworking__Templates::mw__getLongPosVectorAny(LibItsGeoNetworking__TypesAndValues::GN__Address_template(p__gnAddress)).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1741);
/* LibItsGeoNetworking_Functions.ttcn, line 1741 */
{
tmp_174:
alt_status tmp_174_alt_flag_0 = ALT_MAYBE;
alt_status tmp_174_alt_flag_1 = ALT_MAYBE;
alt_status tmp_174_alt_flag_2 = ALT_MAYBE;
alt_status tmp_174_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_174_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1742);
/* LibItsGeoNetworking_Functions.ttcn, line 1742 */
tmp_174_alt_flag_0 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.receive(LibItsGeoNetworking__Templates::mw__getLongPosVectorAny(LibItsGeoNetworking__TypesAndValues::GN__Address_template(p__gnAddress)), &(v__result), any_compref, NULL);
if (tmp_174_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1743);
/* LibItsGeoNetworking_Functions.ttcn, line 1743 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
break;
}
}
if (tmp_174_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1745);
/* LibItsGeoNetworking_Functions.ttcn, line 1745 */
tmp_174_alt_flag_1 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.receive(any_compref, NULL);
if (tmp_174_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1746);
/* LibItsGeoNetworking_Functions.ttcn, line 1746 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1747);
/* LibItsGeoNetworking_Functions.ttcn, line 1747 */
TTCN_Logger::log_str(TTCN_USER, "*** f_acGetLongPosVector: ERROR: Received unexpected message ***");
current_location.update_lineno(1748);
/* LibItsGeoNetworking_Functions.ttcn, line 1748 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_174_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(1750);
/* LibItsGeoNetworking_Functions.ttcn, line 1750 */
tmp_174_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_174_alt_flag_2 == ALT_YES) {
current_location.update_lineno(1751);
/* LibItsGeoNetworking_Functions.ttcn, line 1751 */
TTCN_Logger::log_str(TTCN_USER, "*** f_acGetLongPosVector: ERROR: Timeout while waiting for adapter control event result ***");
current_location.update_lineno(1752);
/* LibItsGeoNetworking_Functions.ttcn, line 1752 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_0, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_174_default_flag == ALT_MAYBE) {
tmp_174_default_flag = TTCN_Default::try_altsteps();
if (tmp_174_default_flag == ALT_YES || tmp_174_default_flag == ALT_BREAK) break;
else if (tmp_174_default_flag == ALT_REPEAT) goto tmp_174;
}
current_location.update_lineno(1741);
/* LibItsGeoNetworking_Functions.ttcn, line 1741 */
if (tmp_174_alt_flag_0 == ALT_NO && tmp_174_alt_flag_1 == ALT_NO && tmp_174_alt_flag_2 == ALT_NO && tmp_174_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 1741 and 1754.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1756);
/* LibItsGeoNetworking_Functions.ttcn, line 1756 */
return const_cast< const LibItsGeoNetworking__TypesAndValues::AcGnResponse&>(v__result).getLongPosVector();
}

void start_f__acGetLongPosVector(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::GN__Address& p__gnAddress)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acGetLongPosVector(");
p__gnAddress.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_acGetLongPosVector", text_buf);
p__gnAddress.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__acStartBeaconingMultipleNeighbour(const INTEGER& p__numberOfNeighbour)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1764, TTCN_Location::LOCATION_FUNCTION, "f_acStartBeaconingMultipleNeighbour");
current_location.update_lineno(1765);
/* LibItsGeoNetworking_Functions.ttcn, line 1765 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__LongPosVector__compName(f__getPosition(CHARSTRING(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__componentName)));
current_location.update_lineno(1766);
/* LibItsGeoNetworking_Functions.ttcn, line 1766 */
LibItsGeoNetworking__TypesAndValues::ExtendedHeader v__m__beaconHeader(LibItsGeoNetworking__Templates::m__beaconHeader(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(v__LongPosVector__compName)).valueof());
current_location.update_lineno(1768);
/* LibItsGeoNetworking_Functions.ttcn, line 1768 */
return f__acTriggerEvent(LibItsGeoNetworking__Templates::m__startBeaconingMultipleNeighbour(LibItsGeoNetworking__TypesAndValues::BeaconHeader_template(const_cast< const LibItsGeoNetworking__TypesAndValues::ExtendedHeader&>(v__m__beaconHeader).beaconHeader()), p__numberOfNeighbour));
}

void start_f__acStartBeaconingMultipleNeighbour(const COMPONENT& component_reference, const INTEGER& p__numberOfNeighbour)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acStartBeaconingMultipleNeighbour(");
p__numberOfNeighbour.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_acStartBeaconingMultipleNeighbour", text_buf);
p__numberOfNeighbour.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__acEnableSecurity()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1776, TTCN_Location::LOCATION_FUNCTION, "f_acEnableSecurity");
current_location.update_lineno(1782);
/* LibItsGeoNetworking_Functions.ttcn, line 1782 */
return LibCommon__VerdictControl::FncRetCode::e__error;
current_location.update_lineno(1791);
/* LibItsGeoNetworking_Functions.ttcn, line 1791 */
{
LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template tmp_175;
tmp_175.acEnableSecurity() = LibItsSecurity__Templates::m__enableSecurity(LibItsSecurity__TestSystem::ItsSecurityBaseComponent_component_cc__taCert__A);
return f__acTriggerEvent(tmp_175);
}
}

void start_f__acEnableSecurity(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acEnableSecurity(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_acEnableSecurity", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__acDisableSecurity()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1802, TTCN_Location::LOCATION_FUNCTION, "f_acDisableSecurity");
current_location.update_lineno(1806);
/* LibItsGeoNetworking_Functions.ttcn, line 1806 */
{
LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template tmp_176;
tmp_176.acDisableSecurity() = LibItsSecurity__Templates::m__disableSecurity;
return f__acTriggerEvent(tmp_176);
}
}

void start_f__acDisableSecurity(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acDisableSecurity(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_acDisableSecurity", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

FLOAT f__getLifetimeValue(const LibItsGeoNetworking__TypesAndValues::Lifetime& p__lifetime)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1819, TTCN_Location::LOCATION_FUNCTION, "f_getLifetimeValue");
current_location.update_lineno(1820);
/* LibItsGeoNetworking_Functions.ttcn, line 1820 */
FLOAT v__lifetime(0.0);
current_location.update_lineno(1823);
/* LibItsGeoNetworking_Functions.ttcn, line 1823 */
if(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).ltBase() == LibItsGeoNetworking__TypesAndValues::LtBase::e__50ms) goto tmp_177_0;
current_location.update_lineno(1826);
/* LibItsGeoNetworking_Functions.ttcn, line 1826 */
if(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).ltBase() == LibItsGeoNetworking__TypesAndValues::LtBase::e__1s) goto tmp_177_1;
current_location.update_lineno(1829);
/* LibItsGeoNetworking_Functions.ttcn, line 1829 */
if(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).ltBase() == LibItsGeoNetworking__TypesAndValues::LtBase::e__10s) goto tmp_177_2;
current_location.update_lineno(1832);
/* LibItsGeoNetworking_Functions.ttcn, line 1832 */
if(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).ltBase() == LibItsGeoNetworking__TypesAndValues::LtBase::e__100s) goto tmp_177_3;
goto tmp_177_end;
tmp_177_0:
{
current_location.update_lineno(1824);
/* LibItsGeoNetworking_Functions.ttcn, line 1824 */
v__lifetime = (int2float(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).multiplier()) * 5.0e-1);
goto tmp_177_end;
}
tmp_177_1:
{
current_location.update_lineno(1827);
/* LibItsGeoNetworking_Functions.ttcn, line 1827 */
v__lifetime = (int2float(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).multiplier()) * 1.0);
goto tmp_177_end;
}
tmp_177_2:
{
current_location.update_lineno(1830);
/* LibItsGeoNetworking_Functions.ttcn, line 1830 */
v__lifetime = (int2float(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).multiplier()) * 1.0e1);
goto tmp_177_end;
}
tmp_177_3:
{
current_location.update_lineno(1833);
/* LibItsGeoNetworking_Functions.ttcn, line 1833 */
v__lifetime = (int2float(const_cast< const LibItsGeoNetworking__TypesAndValues::Lifetime&>(p__lifetime).multiplier()) * 1.0e2);
goto tmp_177_end;
}
tmp_177_end: /* empty */;
current_location.update_lineno(1837);
/* LibItsGeoNetworking_Functions.ttcn, line 1837 */
return v__lifetime;
}

void start_f__getLifetimeValue(const COMPONENT& component_reference, const LibItsGeoNetworking__TypesAndValues::Lifetime& p__lifetime)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getLifetimeValue(");
p__lifetime.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getLifetimeValue", text_buf);
p__lifetime.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__computeGnTimestamp()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1844, TTCN_Location::LOCATION_FUNCTION, "f_computeGnTimestamp");
current_location.update_lineno(1847);
/* LibItsGeoNetworking_Functions.ttcn, line 1847 */
INTEGER v__timestamp((fx__computeGnTimestamp() - 1000));
current_location.update_lineno(1848);
/* LibItsGeoNetworking_Functions.ttcn, line 1848 */
return v__timestamp;
}

LibItsGeoNetworking__TypesAndValues::GN__Address f__getTsGnLocalAddress(const CHARSTRING& p__node)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1860, TTCN_Location::LOCATION_FUNCTION, "f_getTsGnLocalAddress");
current_location.update_lineno(1861);
/* LibItsGeoNetworking_Functions.ttcn, line 1861 */
LibItsGeoNetworking__TypesAndValues::GN__Address v__gnAddr(LibItsGeoNetworking__Templates::m__dummyGnAddr.valueof());
current_location.update_lineno(1864);
/* LibItsGeoNetworking_Functions.ttcn, line 1864 */
if(p__node == LibItsGeoNetworking__TypesAndValues::c__compNodeA) goto tmp_182_0;
current_location.update_lineno(1867);
/* LibItsGeoNetworking_Functions.ttcn, line 1867 */
if(p__node == LibItsGeoNetworking__TypesAndValues::c__compNodeB) goto tmp_182_1;
current_location.update_lineno(1870);
/* LibItsGeoNetworking_Functions.ttcn, line 1870 */
if(p__node == LibItsGeoNetworking__TypesAndValues::c__compNodeC) goto tmp_182_2;
current_location.update_lineno(1873);
/* LibItsGeoNetworking_Functions.ttcn, line 1873 */
if(p__node == LibItsGeoNetworking__TypesAndValues::c__compNodeD) goto tmp_182_3;
current_location.update_lineno(1876);
/* LibItsGeoNetworking_Functions.ttcn, line 1876 */
if(p__node == LibItsGeoNetworking__TypesAndValues::c__compNodeE) goto tmp_182_4;
current_location.update_lineno(1879);
/* LibItsGeoNetworking_Functions.ttcn, line 1879 */
if(p__node == LibItsGeoNetworking__TypesAndValues::c__compNodeF) goto tmp_182_5;
goto tmp_182_6;
tmp_182_0:
{
current_location.update_lineno(1865);
/* LibItsGeoNetworking_Functions.ttcn, line 1865 */
v__gnAddr = LibItsGeoNetworking__Pixits::PX__TS__NODE__A__LOCAL__GN__ADDR;
goto tmp_182_end;
}
tmp_182_1:
{
current_location.update_lineno(1868);
/* LibItsGeoNetworking_Functions.ttcn, line 1868 */
v__gnAddr = LibItsGeoNetworking__Pixits::PX__TS__NODE__B__LOCAL__GN__ADDR;
goto tmp_182_end;
}
tmp_182_2:
{
current_location.update_lineno(1871);
/* LibItsGeoNetworking_Functions.ttcn, line 1871 */
v__gnAddr = LibItsGeoNetworking__Pixits::PX__TS__NODE__C__LOCAL__GN__ADDR;
goto tmp_182_end;
}
tmp_182_3:
{
current_location.update_lineno(1874);
/* LibItsGeoNetworking_Functions.ttcn, line 1874 */
v__gnAddr = LibItsGeoNetworking__Pixits::PX__TS__NODE__D__LOCAL__GN__ADDR;
goto tmp_182_end;
}
tmp_182_4:
{
current_location.update_lineno(1877);
/* LibItsGeoNetworking_Functions.ttcn, line 1877 */
v__gnAddr = LibItsGeoNetworking__Pixits::PX__TS__NODE__E__LOCAL__GN__ADDR;
goto tmp_182_end;
}
tmp_182_5:
{
current_location.update_lineno(1880);
/* LibItsGeoNetworking_Functions.ttcn, line 1880 */
v__gnAddr = LibItsGeoNetworking__Pixits::PX__TS__NODE__F__LOCAL__GN__ADDR;
goto tmp_182_end;
}
tmp_182_6:
{
current_location.update_lineno(1883);
/* LibItsGeoNetworking_Functions.ttcn, line 1883 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_3 + p__node) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
goto tmp_182_end;
}
tmp_182_end: /* empty */;
current_location.update_lineno(1887);
/* LibItsGeoNetworking_Functions.ttcn, line 1887 */
return v__gnAddr;
}

void f__sendGeoNetMessage(const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1895, TTCN_Location::LOCATION_FUNCTION, "f_sendGeoNetMessage");
current_location.update_lineno(1896);
/* LibItsGeoNetworking_Functions.ttcn, line 1896 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.send(p__geoNetReq);
current_location.update_lineno(1897);
/* LibItsGeoNetworking_Functions.ttcn, line 1897 */
{
boolean tmp_190;
{
boolean tmp_189;
tmp_189 = p__geoNetReq.msgOut().gnPacket().packet().extendedHeader().ischosen(LibItsGeoNetworking__TypesAndValues::ExtendedHeader::ALT_shbHeader);
if (!tmp_189) tmp_189 = p__geoNetReq.msgOut().gnPacket().packet().extendedHeader().ischosen(LibItsGeoNetworking__TypesAndValues::ExtendedHeader::ALT_beaconHeader);
tmp_190 = (!(tmp_189));
}
if (tmp_190) {
current_location.update_lineno(1899);
/* LibItsGeoNetworking_Functions.ttcn, line 1899 */
f__setLocalSequenceNumber();
}
}
}

void start_f__sendGeoNetMessage(const COMPONENT& component_reference, const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendGeoNetMessage(");
p__geoNetReq.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_sendGeoNetMessage", text_buf);
p__geoNetReq.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__sendGeoNetMessageWithPayload(const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq, const LibItsGeoNetworking__TypesAndValues::Payload_template& p__payload)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1909, TTCN_Location::LOCATION_FUNCTION, "f_sendGeoNetMessageWithPayload");
LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template p__geoNetReq_shadow(p__geoNetReq);
current_location.update_lineno(1913);
/* LibItsGeoNetworking_Functions.ttcn, line 1913 */
p__geoNetReq_shadow.msgOut().gnPacket().packet().payload() = p__payload;
current_location.update_lineno(1914);
/* LibItsGeoNetworking_Functions.ttcn, line 1914 */
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.send(p__geoNetReq_shadow);
current_location.update_lineno(1915);
/* LibItsGeoNetworking_Functions.ttcn, line 1915 */
{
boolean tmp_193;
{
boolean tmp_192;
tmp_192 = p__geoNetReq_shadow.msgOut().gnPacket().packet().extendedHeader().ischosen(LibItsGeoNetworking__TypesAndValues::ExtendedHeader::ALT_shbHeader);
if (!tmp_192) tmp_192 = p__geoNetReq_shadow.msgOut().gnPacket().packet().extendedHeader().ischosen(LibItsGeoNetworking__TypesAndValues::ExtendedHeader::ALT_beaconHeader);
tmp_193 = (!(tmp_192));
}
if (tmp_193) {
current_location.update_lineno(1917);
/* LibItsGeoNetworking_Functions.ttcn, line 1917 */
f__setLocalSequenceNumber();
}
}
}

void start_f__sendGeoNetMessageWithPayload(const COMPONENT& component_reference, const LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template& p__geoNetReq, const LibItsGeoNetworking__TypesAndValues::Payload_template& p__payload)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendGeoNetMessageWithPayload(");
p__geoNetReq.log();
TTCN_Logger::log_event_str(", ");
p__payload.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_sendGeoNetMessageWithPayload", text_buf);
p__geoNetReq.encode_text(text_buf);
p__payload.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TestSystem::GeoNetworkingInd_template f__receiveGeoNetMessageWithPayload(const LibItsGeoNetworking__TestSystem::GeoNetworkingInd_template& p__geoNetInd, const LibItsGeoNetworking__TypesAndValues::Payload_template& p__payload)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1927, TTCN_Location::LOCATION_FUNCTION, "f_receiveGeoNetMessageWithPayload");
current_location.update_lineno(1931);
/* LibItsGeoNetworking_Functions.ttcn, line 1931 */
LibItsGeoNetworking__TestSystem::GeoNetworkingInd_template v__geoNetInd(p__geoNetInd);
current_location.update_lineno(1933);
/* LibItsGeoNetworking_Functions.ttcn, line 1933 */
v__geoNetInd.msgIn().gnPacket().packet().payload() = p__payload;
current_location.update_lineno(1935);
/* LibItsGeoNetworking_Functions.ttcn, line 1935 */
return v__geoNetInd;
}

void f__setLocalSequenceNumber()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1941, TTCN_Location::LOCATION_FUNCTION, "f_setLocalSequenceNumber");
current_location.update_lineno(1942);
/* LibItsGeoNetworking_Functions.ttcn, line 1942 */
{
INTEGER tmp_195;
tmp_195 = mod((LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__localSeqNumber + 1), LibCommon__BasicTypesAndValues::c__uInt16Max);
LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__localSeqNumber = tmp_195;
}
}

void start_f__setLocalSequenceNumber(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setLocalSequenceNumber(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_setLocalSequenceNumber", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

INTEGER f__getInitialSequenceNumber()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1949, TTCN_Location::LOCATION_FUNCTION, "f_getInitialSequenceNumber");
current_location.update_lineno(1951);
/* LibItsGeoNetworking_Functions.ttcn, line 1951 */
return mod((f__computeGnTimestamp() / 1000), LibCommon__BasicTypesAndValues::c__uInt16Max);
}

INTEGER f__getMessageCount()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1958, TTCN_Location::LOCATION_FUNCTION, "f_getMessageCount");
current_location.update_lineno(1959);
/* LibItsGeoNetworking_Functions.ttcn, line 1959 */
return LibItsGeoNetworking__Pixits::PX__MESSAGE__COUNT;
}

LibItsGeoNetworking__TypesAndValues::GN__Address f__getIutGnLocalAddress()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1971, TTCN_Location::LOCATION_FUNCTION, "f_getIutGnLocalAddress");
current_location.update_lineno(1973);
/* LibItsGeoNetworking_Functions.ttcn, line 1973 */
return LibItsGeoNetworking__Pics::PICS__GN__LOCAL__GN__ADDR;
}

LibItsGeoNetworking__TypesAndValues::GnAddressConfigurationMethod f__getIutGnLocalAddressConfigurationMethod()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1981, TTCN_Location::LOCATION_FUNCTION, "f_getIutGnLocalAddressConfigurationMethod");
current_location.update_lineno(1982);
/* LibItsGeoNetworking_Functions.ttcn, line 1982 */
return LibItsGeoNetworking__Pics::PICS__GN__LOCAL__ADDR__CONF__METHOD;
}

OCTETSTRING f__getIutMacAddress()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1990, TTCN_Location::LOCATION_FUNCTION, "f_getIutMacAddress");
current_location.update_lineno(1991);
/* LibItsGeoNetworking_Functions.ttcn, line 1991 */
return LibItsGeoNetworking__Pics::PICS__IUT__MAC__ADDRESS;
}

LibItsGeoNetworking__TypesAndValues::GeoUnicastForwardingAlgorithm f__getGeoUnicastForwardingAlgorithm()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 1999, TTCN_Location::LOCATION_FUNCTION, "f_getGeoUnicastForwardingAlgorithm");
current_location.update_lineno(2000);
/* LibItsGeoNetworking_Functions.ttcn, line 2000 */
return LibItsGeoNetworking__Pics::PICS__GN__GEOUNICAST__FORWARDING__ALGORITHM;
}

LibItsGeoNetworking__TypesAndValues::GeoBroadcastForwardingAlgorithm f__getGeoBroadcastForwardingAlgorithm()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2008, TTCN_Location::LOCATION_FUNCTION, "f_getGeoBroadcastForwardingAlgorithm");
current_location.update_lineno(2009);
/* LibItsGeoNetworking_Functions.ttcn, line 2009 */
return LibItsGeoNetworking__Pics::PICS__GN__GEOBROADCAST__FORWARDING__ALGORITHM;
}

INTEGER f__getDefaultHopLimit()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2017, TTCN_Location::LOCATION_FUNCTION, "f_getDefaultHopLimit");
current_location.update_lineno(2018);
/* LibItsGeoNetworking_Functions.ttcn, line 2018 */
return LibItsGeoNetworking__Pics::PICS__GN__DEFAULT__HOP__LIMIT;
}

BITSTRING f__isMobile()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2026, TTCN_Location::LOCATION_FUNCTION, "f_isMobile");
current_location.update_lineno(2027);
/* LibItsGeoNetworking_Functions.ttcn, line 2027 */
if (LibItsGeoNetworking__Pics::PICS__GN__IS__MOBILE) {
current_location.update_lineno(2028);
/* LibItsGeoNetworking_Functions.ttcn, line 2028 */
return bs_1;
}
current_location.update_lineno(2030);
/* LibItsGeoNetworking_Functions.ttcn, line 2030 */
return bs_2;
}

FLOAT f__getLsRetransmitTimer()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2038, TTCN_Location::LOCATION_FUNCTION, "f_getLsRetransmitTimer");
current_location.update_lineno(2039);
/* LibItsGeoNetworking_Functions.ttcn, line 2039 */
FLOAT v__itsGnLocationServiceRetransmitTimer(int2float((LibItsGeoNetworking__Pics::PICS__GN__LOCATION__SERVICE__RETRANSMIT__TIMER / 1000)));
current_location.update_lineno(2041);
/* LibItsGeoNetworking_Functions.ttcn, line 2041 */
return v__itsGnLocationServiceRetransmitTimer;
}

FLOAT f__getLsRetransmitTimerMedium()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2049, TTCN_Location::LOCATION_FUNCTION, "f_getLsRetransmitTimerMedium");
current_location.update_lineno(2050);
/* LibItsGeoNetworking_Functions.ttcn, line 2050 */
FLOAT v__itsGnLocationServiceRetransmitTimerMedium(int2float((LibItsGeoNetworking__Pixits::PX__GN__LOCATION__SERVICE__TIMER__MEDIUM / 1000)));
current_location.update_lineno(2052);
/* LibItsGeoNetworking_Functions.ttcn, line 2052 */
return v__itsGnLocationServiceRetransmitTimerMedium;
}

FLOAT f__getLsRetransmitTimerMaximum()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2060, TTCN_Location::LOCATION_FUNCTION, "f_getLsRetransmitTimerMaximum");
current_location.update_lineno(2061);
/* LibItsGeoNetworking_Functions.ttcn, line 2061 */
FLOAT v__itsGnLocationServiceRetransmitTimerMaximum(int2float((LibItsGeoNetworking__Pixits::PX__GN__LOCATION__SERVICE__TIMER__MAXIMUM / 1000)));
current_location.update_lineno(2063);
/* LibItsGeoNetworking_Functions.ttcn, line 2063 */
return v__itsGnLocationServiceRetransmitTimerMaximum;
}

FLOAT f__getAppRetransmitTimer()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2071, TTCN_Location::LOCATION_FUNCTION, "f_getAppRetransmitTimer");
current_location.update_lineno(2072);
/* LibItsGeoNetworking_Functions.ttcn, line 2072 */
FLOAT v__itsGnLocationApplicationRetransmitTimer(int2float((LibItsGeoNetworking__Pixits::PX__GN__APPLICATION__RETRANSMIT__TIMER / 1000)));
current_location.update_lineno(2074);
/* LibItsGeoNetworking_Functions.ttcn, line 2074 */
return v__itsGnLocationApplicationRetransmitTimer;
}

FLOAT f__getAppRetransmitTimerMedium()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2082, TTCN_Location::LOCATION_FUNCTION, "f_getAppRetransmitTimerMedium");
current_location.update_lineno(2083);
/* LibItsGeoNetworking_Functions.ttcn, line 2083 */
FLOAT v__itsGnLocationApplicationRetransmitTimerMedium(int2float((LibItsGeoNetworking__Pixits::PX__GN__APPLICATION__RETRANSMIT__TIMER__MEDIUM / 1000)));
current_location.update_lineno(2085);
/* LibItsGeoNetworking_Functions.ttcn, line 2085 */
return v__itsGnLocationApplicationRetransmitTimerMedium;
}

FLOAT f__getAppRetransmitTimerMaximum()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2093, TTCN_Location::LOCATION_FUNCTION, "f_getAppRetransmitTimerMaximum");
current_location.update_lineno(2094);
/* LibItsGeoNetworking_Functions.ttcn, line 2094 */
FLOAT v__itsGnLocationApplicationRetransmitTimerMaximum(int2float((LibItsGeoNetworking__Pixits::PX__GN__APPLICATION__RETRANSMIT__TIMER__MAXIMUM / 1000)));
current_location.update_lineno(2096);
/* LibItsGeoNetworking_Functions.ttcn, line 2096 */
return v__itsGnLocationApplicationRetransmitTimerMaximum;
}

INTEGER f__getLsMaxRetrans()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2104, TTCN_Location::LOCATION_FUNCTION, "f_getLsMaxRetrans");
current_location.update_lineno(2105);
/* LibItsGeoNetworking_Functions.ttcn, line 2105 */
INTEGER v__itsGnLocationServiceMaxRetrans(LibItsGeoNetworking__Pics::PICS__GN__LOCATION__SERVICE__MAX__RETRANS);
current_location.update_lineno(2107);
/* LibItsGeoNetworking_Functions.ttcn, line 2107 */
return v__itsGnLocationServiceMaxRetrans;
}

INTEGER f__getAppMaxRetrans()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2115, TTCN_Location::LOCATION_FUNCTION, "f_getAppMaxRetrans");
current_location.update_lineno(2116);
/* LibItsGeoNetworking_Functions.ttcn, line 2116 */
INTEGER v__itsGnApplicationMaxRetrans(LibItsGeoNetworking__Pixits::PX__GN__APPLICATION__MAX__RETRANS);
current_location.update_lineno(2118);
/* LibItsGeoNetworking_Functions.ttcn, line 2118 */
return v__itsGnApplicationMaxRetrans;
}

INTEGER f__getLsPacketBufferSize()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2126, TTCN_Location::LOCATION_FUNCTION, "f_getLsPacketBufferSize");
current_location.update_lineno(2127);
/* LibItsGeoNetworking_Functions.ttcn, line 2127 */
INTEGER v__itsGnLocationServicePacketBufferSize(LibItsGeoNetworking__Pics::PICS__GN__LOCATION__SERVICE__PACKET__BUFFER__SIZE);
current_location.update_lineno(2129);
/* LibItsGeoNetworking_Functions.ttcn, line 2129 */
return v__itsGnLocationServicePacketBufferSize;
}

INTEGER f__getUcForwardingPacketBufferSize()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2137, TTCN_Location::LOCATION_FUNCTION, "f_getUcForwardingPacketBufferSize");
current_location.update_lineno(2138);
/* LibItsGeoNetworking_Functions.ttcn, line 2138 */
INTEGER v__itsGnUcForwardingPacketBufferSize(LibItsGeoNetworking__Pics::PICS__GN__UC__FORWARDING__PACKET__BUFFER__SIZE);
current_location.update_lineno(2140);
/* LibItsGeoNetworking_Functions.ttcn, line 2140 */
return (v__itsGnUcForwardingPacketBufferSize * 1024);
}

INTEGER f__getBcForwardingPacketBufferSize()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2148, TTCN_Location::LOCATION_FUNCTION, "f_getBcForwardingPacketBufferSize");
current_location.update_lineno(2149);
/* LibItsGeoNetworking_Functions.ttcn, line 2149 */
INTEGER v__itsGnBcForwardingPacketBufferSize(LibItsGeoNetworking__Pics::PICS__GN__BC__FORWARDING__PACKET__BUFFER__SIZE);
current_location.update_lineno(2151);
/* LibItsGeoNetworking_Functions.ttcn, line 2151 */
return (v__itsGnBcForwardingPacketBufferSize * 1024);
}

FLOAT f__getMaxPacketLifeTime()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2159, TTCN_Location::LOCATION_FUNCTION, "f_getMaxPacketLifeTime");
current_location.update_lineno(2160);
/* LibItsGeoNetworking_Functions.ttcn, line 2160 */
FLOAT v__itsGnMaxPacketLifetime(int2float(LibItsGeoNetworking__Pics::PICS__GN__MAX__PACKET__LIFETIME));
current_location.update_lineno(2162);
/* LibItsGeoNetworking_Functions.ttcn, line 2162 */
return v__itsGnMaxPacketLifetime;
}

FLOAT f__getDeltaTimer()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2170, TTCN_Location::LOCATION_FUNCTION, "f_getDeltaTimer");
current_location.update_lineno(2171);
/* LibItsGeoNetworking_Functions.ttcn, line 2171 */
FLOAT v__deltaTimer(LibItsGeoNetworking__Pixits::PX__T__DELTA);
current_location.update_lineno(2173);
/* LibItsGeoNetworking_Functions.ttcn, line 2173 */
return v__deltaTimer;
}

FLOAT f__getBsRetransmitTimer()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2180, TTCN_Location::LOCATION_FUNCTION, "f_getBsRetransmitTimer");
current_location.update_lineno(2181);
/* LibItsGeoNetworking_Functions.ttcn, line 2181 */
FLOAT v__itsGnBeaconServiceRetransmitTimer;
current_location.update_lineno(2183);
/* LibItsGeoNetworking_Functions.ttcn, line 2183 */
v__itsGnBeaconServiceRetransmitTimer = int2float((LibItsGeoNetworking__Pics::PICS__GN__BEACON__SERVICE__RETRANSMIT__TIMER / 1000));
current_location.update_lineno(2186);
/* LibItsGeoNetworking_Functions.ttcn, line 2186 */
return v__itsGnBeaconServiceRetransmitTimer;
}

FLOAT f__getBsRetransmitTimerMedium()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2193, TTCN_Location::LOCATION_FUNCTION, "f_getBsRetransmitTimerMedium");
current_location.update_lineno(2194);
/* LibItsGeoNetworking_Functions.ttcn, line 2194 */
FLOAT v__itsGnBeaconServiceRetransmitTimerMedium;
current_location.update_lineno(2196);
/* LibItsGeoNetworking_Functions.ttcn, line 2196 */
v__itsGnBeaconServiceRetransmitTimerMedium = int2float((((LibItsGeoNetworking__Pixits::PX__GN__BEACON__SERVICE__TIMER__MEDIUM + float2int((((f__getBsMaxJitter() - 0.0) + 1.0) * rnd()))) + 0) / 1000));
current_location.update_lineno(2199);
/* LibItsGeoNetworking_Functions.ttcn, line 2199 */
return v__itsGnBeaconServiceRetransmitTimerMedium;
}

FLOAT f__getBsRetransmitTimerMaximum()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2206, TTCN_Location::LOCATION_FUNCTION, "f_getBsRetransmitTimerMaximum");
current_location.update_lineno(2207);
/* LibItsGeoNetworking_Functions.ttcn, line 2207 */
FLOAT v__itsGnBeaconServiceRetransmitTimerMaximum;
current_location.update_lineno(2209);
/* LibItsGeoNetworking_Functions.ttcn, line 2209 */
v__itsGnBeaconServiceRetransmitTimerMaximum = int2float((((LibItsGeoNetworking__Pixits::PX__GN__BEACON__SERVICE__TIMER__MAXIMUM + float2int((((f__getBsMaxJitter() - 0.0) + 1.0) * rnd()))) + 0) / 1000));
current_location.update_lineno(2212);
/* LibItsGeoNetworking_Functions.ttcn, line 2212 */
return v__itsGnBeaconServiceRetransmitTimerMaximum;
}

FLOAT f__getBsMaxJitter()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2219, TTCN_Location::LOCATION_FUNCTION, "f_getBsMaxJitter");
current_location.update_lineno(2220);
/* LibItsGeoNetworking_Functions.ttcn, line 2220 */
FLOAT v__itsGnBeaconServiceMaxJitter((int2float(LibItsGeoNetworking__Pics::PICS__GN__BEACON__SERVICE__MAX__JITTER) / 1.0e3));
current_location.update_lineno(2222);
/* LibItsGeoNetworking_Functions.ttcn, line 2222 */
return v__itsGnBeaconServiceMaxJitter;
}

FLOAT f__getLifetimeLocTableEntry()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2230, TTCN_Location::LOCATION_FUNCTION, "f_getLifetimeLocTableEntry");
current_location.update_lineno(2231);
/* LibItsGeoNetworking_Functions.ttcn, line 2231 */
FLOAT v__itsGnLifetimeLocTableEntry(int2float(LibItsGeoNetworking__Pics::PICS__GN__LIFETIME__LOC__TE));
current_location.update_lineno(2233);
/* LibItsGeoNetworking_Functions.ttcn, line 2233 */
return v__itsGnLifetimeLocTableEntry;
}

INTEGER f__getCbfMaxCommunicationRange()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2241, TTCN_Location::LOCATION_FUNCTION, "f_getCbfMaxCommunicationRange");
current_location.update_lineno(2242);
/* LibItsGeoNetworking_Functions.ttcn, line 2242 */
INTEGER v__maxCommunicationRange(LibItsGeoNetworking__Pics::PICS__GN__DEFAULT__MAX__COMMUNICATION__RANGE);
current_location.update_lineno(2244);
/* LibItsGeoNetworking_Functions.ttcn, line 2244 */
return v__maxCommunicationRange;
}

INTEGER f__getGeoUnicastCbfMaxTime()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2247, TTCN_Location::LOCATION_FUNCTION, "f_getGeoUnicastCbfMaxTime");
current_location.update_lineno(2248);
/* LibItsGeoNetworking_Functions.ttcn, line 2248 */
INTEGER v__cbfMaxTime(LibItsGeoNetworking__Pics::PICS__GN__GEOUNICAST__CBF__MAX__TIME);
current_location.update_lineno(2250);
/* LibItsGeoNetworking_Functions.ttcn, line 2250 */
return v__cbfMaxTime;
}

INTEGER f__getGeoUnicastCbfMinTime()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2253, TTCN_Location::LOCATION_FUNCTION, "f_getGeoUnicastCbfMinTime");
current_location.update_lineno(2254);
/* LibItsGeoNetworking_Functions.ttcn, line 2254 */
INTEGER v__cbfMinTime(LibItsGeoNetworking__Pics::PICS__GN__GEOUNICAST__CBF__MIN__TIME);
current_location.update_lineno(2256);
/* LibItsGeoNetworking_Functions.ttcn, line 2256 */
return v__cbfMinTime;
}

INTEGER f__getGeoBroadcastCbfMaxTime()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2259, TTCN_Location::LOCATION_FUNCTION, "f_getGeoBroadcastCbfMaxTime");
current_location.update_lineno(2260);
/* LibItsGeoNetworking_Functions.ttcn, line 2260 */
INTEGER v__cbfMaxTime(LibItsGeoNetworking__Pics::PICS__GN__GEOBROADCAST__CBF__MAX__TIME);
current_location.update_lineno(2262);
/* LibItsGeoNetworking_Functions.ttcn, line 2262 */
return v__cbfMaxTime;
}

INTEGER f__getGeoBroadcastCbfMinTime()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2265, TTCN_Location::LOCATION_FUNCTION, "f_getGeoBroadcastCbfMinTime");
current_location.update_lineno(2266);
/* LibItsGeoNetworking_Functions.ttcn, line 2266 */
INTEGER v__cbfMinTime(LibItsGeoNetworking__Pics::PICS__GN__GEOBROADCAST__CBF__MIN__TIME);
current_location.update_lineno(2268);
/* LibItsGeoNetworking_Functions.ttcn, line 2268 */
return v__cbfMinTime;
}

FLOAT f__getGnMaxAreaSize()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2271, TTCN_Location::LOCATION_FUNCTION, "f_getGnMaxAreaSize");
current_location.update_lineno(2272);
/* LibItsGeoNetworking_Functions.ttcn, line 2272 */
FLOAT v__maxAreaSize(LibItsGeoNetworking__Pics::PICS__GN__MAX__GEO__AREA__SIZE);
current_location.update_lineno(2274);
/* LibItsGeoNetworking_Functions.ttcn, line 2274 */
return v__maxAreaSize;
}

INTEGER f__getAdvancedGbcForwardingMaxCounter()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2277, TTCN_Location::LOCATION_FUNCTION, "f_getAdvancedGbcForwardingMaxCounter");
current_location.update_lineno(2278);
/* LibItsGeoNetworking_Functions.ttcn, line 2278 */
INTEGER v__maxCounter(LibItsGeoNetworking__Pics::PICS__GN__ADVANCED__BC__FORWARDING__MAX__COUNTER);
current_location.update_lineno(2280);
/* LibItsGeoNetworking_Functions.ttcn, line 2280 */
return v__maxCounter;
}

void f__setNrNeighbourLocTableDefault()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2287, TTCN_Location::LOCATION_FUNCTION, "f_setNrNeighbourLocTableDefault");
current_location.update_lineno(2288);
/* LibItsGeoNetworking_Functions.ttcn, line 2288 */
INTEGER v__nrNeighbour(LibItsCommon__Functions::f__random(0, LibItsGeoNetworking__Pixits::PX__MIN__NR__NEIGHBOUR));
current_location.update_lineno(2290);
/* LibItsGeoNetworking_Functions.ttcn, line 2290 */
f__acStartBeaconingMultipleNeighbour(v__nrNeighbour);
}

void start_f__setNrNeighbourLocTableDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setNrNeighbourLocTableDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_setNrNeighbourLocTableDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__setNrNeighbourLocTableMedium()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2299, TTCN_Location::LOCATION_FUNCTION, "f_setNrNeighbourLocTableMedium");
current_location.update_lineno(2300);
/* LibItsGeoNetworking_Functions.ttcn, line 2300 */
INTEGER v__nrNeighbour(LibItsCommon__Functions::f__random(LibItsGeoNetworking__Pixits::PX__MIN__NR__NEIGHBOUR, LibItsGeoNetworking__Pixits::PX__MAX__NR__NEIGHBOUR));
current_location.update_lineno(2302);
/* LibItsGeoNetworking_Functions.ttcn, line 2302 */
f__acStartBeaconingMultipleNeighbour(v__nrNeighbour);
}

void start_f__setNrNeighbourLocTableMedium(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setNrNeighbourLocTableMedium(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_setNrNeighbourLocTableMedium", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__setNrNeighbourLocTableMaximum()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2311, TTCN_Location::LOCATION_FUNCTION, "f_setNrNeighbourLocTableMaximum");
current_location.update_lineno(2312);
/* LibItsGeoNetworking_Functions.ttcn, line 2312 */
INTEGER v__nrNeighbour(LibItsCommon__Functions::f__random(LibItsGeoNetworking__Pixits::PX__MAX__NR__NEIGHBOUR, (2 * LibItsGeoNetworking__Pixits::PX__MIN__NR__NEIGHBOUR)));
current_location.update_lineno(2314);
/* LibItsGeoNetworking_Functions.ttcn, line 2314 */
f__acStartBeaconingMultipleNeighbour(v__nrNeighbour);
}

void start_f__setNrNeighbourLocTableMaximum(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_setNrNeighbourLocTableMaximum(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_setNrNeighbourLocTableMaximum", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::ShortPosVector f__longPosVector2ShortPosVector(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__longPosVector)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2327, TTCN_Location::LOCATION_FUNCTION, "f_longPosVector2ShortPosVector");
current_location.update_lineno(2328);
/* LibItsGeoNetworking_Functions.ttcn, line 2328 */
LibItsGeoNetworking__TypesAndValues::ShortPosVector v__shortPosVector;
current_location.update_lineno(2330);
/* LibItsGeoNetworking_Functions.ttcn, line 2330 */
v__shortPosVector.gnAddr() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__longPosVector).gnAddr();
v__shortPosVector.timestamp() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__longPosVector).timestamp();
v__shortPosVector.latitude() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__longPosVector).latitude();
v__shortPosVector.longitude() = const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__longPosVector).longitude();
current_location.update_lineno(2337);
/* LibItsGeoNetworking_Functions.ttcn, line 2337 */
return v__shortPosVector;
}

LibItsGeoNetworking__TypesAndValues::LongPosVector f__getIutLongPosVector()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2344, TTCN_Location::LOCATION_FUNCTION, "f_getIutLongPosVector");
current_location.update_lineno(2345);
/* LibItsGeoNetworking_Functions.ttcn, line 2345 */
return f__acGetLongPosVector(f__getIutGnLocalAddress());
}

void start_f__getIutLongPosVector(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getIutLongPosVector(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getIutLongPosVector", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::ShortPosVector f__getIutShortPosVector()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2352, TTCN_Location::LOCATION_FUNCTION, "f_getIutShortPosVector");
current_location.update_lineno(2353);
/* LibItsGeoNetworking_Functions.ttcn, line 2353 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__longPosVectorIut(f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compIut));
current_location.update_lineno(2355);
/* LibItsGeoNetworking_Functions.ttcn, line 2355 */
if ((!(v__longPosVectorIut.is_bound()))) {
current_location.update_lineno(2356);
/* LibItsGeoNetworking_Functions.ttcn, line 2356 */
v__longPosVectorIut = f__getIutLongPosVector();
}
current_location.update_lineno(2358);
/* LibItsGeoNetworking_Functions.ttcn, line 2358 */
return f__longPosVector2ShortPosVector(v__longPosVectorIut);
}

void start_f__getIutShortPosVector(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getIutShortPosVector(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_getIutShortPosVector", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsGeoNetworking__TypesAndValues::LongPosVector f__computePositionUsingDistance(const LibItsGeoNetworking__TypesAndValues::LongPosVector& p__iutLongPosVector, const INTEGER& p__distance, const INTEGER& p__orientation)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2368, TTCN_Location::LOCATION_FUNCTION, "f_computePositionUsingDistance");
current_location.update_lineno(2370);
/* LibItsGeoNetworking_Functions.ttcn, line 2370 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__result(p__iutLongPosVector);
current_location.update_lineno(2372);
/* LibItsGeoNetworking_Functions.ttcn, line 2372 */
TTCN_Logger::log_str(TTCN_USER, "*** f_computePositionUsingDistance: INFO: calling fx_computePositionUsingDistance() ***");
current_location.update_lineno(2373);
/* LibItsGeoNetworking_Functions.ttcn, line 2373 */
LibItsCommon__Functions::fx__computePositionUsingDistance(const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__iutLongPosVector).latitude(), const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(p__iutLongPosVector).longitude(), p__distance, p__orientation, v__result.latitude(), v__result.longitude());
current_location.update_lineno(2375);
/* LibItsGeoNetworking_Functions.ttcn, line 2375 */
return v__result;
}

alt_status a__securedMessage_instance(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2397, TTCN_Location::LOCATION_ALTSTEP, "a_securedMessage");
current_location.update_lineno(2401);
/* LibItsGeoNetworking_Functions.ttcn, line 2401 */
LibItsGeoNetworking__TestSystem::GeoNetworkingInd v__geoNw;
alt_status ret_val = ALT_NO;
current_location.update_lineno(2402);
/* LibItsGeoNetworking_Functions.ttcn, line 2402 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwSecPdu(p__InSecMsg, LibItsGeoNetworking__Templates::mw__geoNwAnyPacket__withPayload(LibItsGeoNetworking__TypesAndValues::Payload_template(ANY_VALUE)))), &(v__geoNw), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(2407);
/* LibItsGeoNetworking_Functions.ttcn, line 2407 */
p__received = f__getSecuredMessage(const_cast< const LibItsGeoNetworking__TestSystem::GeoNetworkingInd&>(v__geoNw).msgIn());
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__securedMessage(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__securedMessage_instance(p__InSecMsg, p__received);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_securedMessage.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__securedMessage(const LibItsSecurity__TypesAndValues::SecuredMessage_template& p__InSecMsg, LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
return new a__securedMessage_Default(p__InSecMsg, p__received);
}

alt_status a__securedMessageWithCertificate_instance(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2415, TTCN_Location::LOCATION_ALTSTEP, "a_securedMessageWithCertificate");
alt_status ret_val = ALT_NO;
current_location.update_lineno(2419);
/* LibItsGeoNetworking_Functions.ttcn, line 2419 */
{
alt_status tmp_203;
{
LibItsSecurity__TypesAndValues::HeaderFields_template tmp_202;
tmp_202.set_type(SUPERSET_MATCH, 1);
tmp_202.set_item(0) = LibItsSecurity__Templates::mw__header__field__signer__info__certificate(LibItsSecurity__Templates::mw__header__field__signer__info__certificate_p__cert_defval);
tmp_203 = a__securedMessage_instance(LibItsSecurity__Templates::mdw__securedMessage(tmp_202, LibItsSecurity__Templates::mdw__securedMessage_p__payload_defval, LibItsSecurity__Templates::mdw__securedMessage_p__trailer_defval), p__received);
}
switch (tmp_203) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
}
return ret_val;
}

void a__securedMessageWithCertificate(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__securedMessageWithCertificate_instance(p__received);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_securedMessageWithCertificate.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__securedMessageWithCertificate(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
return new a__securedMessageWithCertificate_Default(p__received);
}

alt_status a__securedMessageWithCertificateChain_instance(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2431, TTCN_Location::LOCATION_ALTSTEP, "a_securedMessageWithCertificateChain");
alt_status ret_val = ALT_NO;
current_location.update_lineno(2434);
/* LibItsGeoNetworking_Functions.ttcn, line 2434 */
{
alt_status tmp_205;
{
LibItsSecurity__TypesAndValues::HeaderFields_template tmp_204;
tmp_204.set_type(SUPERSET_MATCH, 1);
tmp_204.set_item(0) = LibItsSecurity__Templates::mw__header__field__signer__info__certificate__chain(LibItsSecurity__Templates::mw__header__field__signer__info__certificate__chain_p__certs_defval);
tmp_205 = a__securedMessage_instance(LibItsSecurity__Templates::mdw__securedMessage(tmp_204, LibItsSecurity__Templates::mdw__securedMessage_p__payload_defval, LibItsSecurity__Templates::mdw__securedMessage_p__trailer_defval), p__received);
}
switch (tmp_205) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
}
return ret_val;
}

void a__securedMessageWithCertificateChain(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__securedMessageWithCertificateChain_instance(p__received);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_securedMessageWithCertificateChain.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__securedMessageWithCertificateChain(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
return new a__securedMessageWithCertificateChain_Default(p__received);
}

alt_status a__securedMessageWithDigest_instance(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2449, TTCN_Location::LOCATION_ALTSTEP, "a_securedMessageWithDigest");
alt_status ret_val = ALT_NO;
current_location.update_lineno(2452);
/* LibItsGeoNetworking_Functions.ttcn, line 2452 */
{
alt_status tmp_207;
{
LibItsSecurity__TypesAndValues::HeaderFields_template tmp_206;
tmp_206.set_type(SUPERSET_MATCH, 1);
tmp_206.set_item(0) = LibItsSecurity__Templates::mw__header__field__signer__info__digest(LibItsSecurity__Templates::mw__header__field__signer__info__digest_p__digest_defval);
tmp_207 = a__securedMessage_instance(LibItsSecurity__Templates::mdw__securedMessage(tmp_206, LibItsSecurity__Templates::mdw__securedMessage_p__payload_defval, LibItsSecurity__Templates::mdw__securedMessage_p__trailer_defval), p__received);
}
switch (tmp_207) {
case ALT_YES:
return ALT_YES;
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
}
return ret_val;
}

void a__securedMessageWithDigest(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__securedMessageWithDigest_instance(p__received);
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_securedMessageWithDigest.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__securedMessageWithDigest(LibItsSecurity__TypesAndValues::SecuredMessage& p__received)
{
return new a__securedMessageWithDigest_Default(p__received);
}

BOOLEAN f__waitForCertificate(LibItsSecurity__TypesAndValues::Certificate& p__cert)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2471, TTCN_Location::LOCATION_FUNCTION, "f_waitForCertificate");
p__cert.clean_up();
current_location.update_lineno(2474);
/* LibItsGeoNetworking_Functions.ttcn, line 2474 */
LibItsSecurity__TypesAndValues::SecuredMessage v__recv;
current_location.update_lineno(2475);
/* LibItsGeoNetworking_Functions.ttcn, line 2475 */
BOOLEAN v__ret(FALSE);
current_location.update_lineno(2477);
/* LibItsGeoNetworking_Functions.ttcn, line 2477 */
{
tmp_208:
alt_status tmp_208_alt_flag_0 = ALT_MAYBE;
alt_status tmp_208_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_208_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2478);
/* LibItsGeoNetworking_Functions.ttcn, line 2478 */
tmp_208_alt_flag_0 = a__securedMessageWithCertificate_instance(v__recv);
if (tmp_208_alt_flag_0 == ALT_REPEAT) goto tmp_208;
if (tmp_208_alt_flag_0 == ALT_BREAK) break;
if (tmp_208_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2479);
/* LibItsGeoNetworking_Functions.ttcn, line 2479 */
LibItsSecurity__TypesAndValues::SignerInfo v__si;
break;
}
}
if (tmp_208_default_flag == ALT_MAYBE) {
tmp_208_default_flag = TTCN_Default::try_altsteps();
if (tmp_208_default_flag == ALT_YES || tmp_208_default_flag == ALT_BREAK) break;
else if (tmp_208_default_flag == ALT_REPEAT) goto tmp_208;
}
current_location.update_lineno(2477);
/* LibItsGeoNetworking_Functions.ttcn, line 2477 */
if (tmp_208_alt_flag_0 == ALT_NO && tmp_208_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 2477 and 2486.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2488);
/* LibItsGeoNetworking_Functions.ttcn, line 2488 */
return v__ret;
}

BOOLEAN f__waitForCertificateChain(LibItsSecurity__TypesAndValues::CertificateChain& p__chain)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2495, TTCN_Location::LOCATION_FUNCTION, "f_waitForCertificateChain");
p__chain.clean_up();
current_location.update_lineno(2498);
/* LibItsGeoNetworking_Functions.ttcn, line 2498 */
LibItsSecurity__TypesAndValues::SecuredMessage v__recv;
current_location.update_lineno(2499);
/* LibItsGeoNetworking_Functions.ttcn, line 2499 */
BOOLEAN v__ret(FALSE);
current_location.update_lineno(2501);
/* LibItsGeoNetworking_Functions.ttcn, line 2501 */
{
tmp_209:
alt_status tmp_209_alt_flag_0 = ALT_MAYBE;
alt_status tmp_209_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_209_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2502);
/* LibItsGeoNetworking_Functions.ttcn, line 2502 */
tmp_209_alt_flag_0 = a__securedMessageWithCertificateChain_instance(v__recv);
if (tmp_209_alt_flag_0 == ALT_REPEAT) goto tmp_209;
if (tmp_209_alt_flag_0 == ALT_BREAK) break;
if (tmp_209_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2503);
/* LibItsGeoNetworking_Functions.ttcn, line 2503 */
LibItsSecurity__TypesAndValues::SignerInfo v__si;
break;
}
}
if (tmp_209_default_flag == ALT_MAYBE) {
tmp_209_default_flag = TTCN_Default::try_altsteps();
if (tmp_209_default_flag == ALT_YES || tmp_209_default_flag == ALT_BREAK) break;
else if (tmp_209_default_flag == ALT_REPEAT) goto tmp_209;
}
current_location.update_lineno(2501);
/* LibItsGeoNetworking_Functions.ttcn, line 2501 */
if (tmp_209_alt_flag_0 == ALT_NO && tmp_209_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 2501 and 2509.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2510);
/* LibItsGeoNetworking_Functions.ttcn, line 2510 */
return v__ret;
}

BOOLEAN f__askForCertificateChain(const OCTETSTRING_template& p__CamPayload)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2517, TTCN_Location::LOCATION_FUNCTION, "f_askForCertificateChain");
current_location.update_lineno(2520);
/* LibItsGeoNetworking_Functions.ttcn, line 2520 */
LibItsSecurity__TypesAndValues::SecuredMessage v__recv;
current_location.update_lineno(2521);
/* LibItsGeoNetworking_Functions.ttcn, line 2521 */
LibItsSecurity__TypesAndValues::SignerInfo v__si;
current_location.update_lineno(2522);
/* LibItsGeoNetworking_Functions.ttcn, line 2522 */
BOOLEAN v__ret(FALSE);
current_location.update_lineno(2523);
/* LibItsGeoNetworking_Functions.ttcn, line 2523 */
{
tmp_210:
alt_status tmp_210_alt_flag_0 = ALT_MAYBE;
alt_status tmp_210_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_210_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2524);
/* LibItsGeoNetworking_Functions.ttcn, line 2524 */
tmp_210_alt_flag_0 = a__securedMessageWithCertificate_instance(v__recv);
if (tmp_210_alt_flag_0 == ALT_REPEAT) goto tmp_210;
if (tmp_210_alt_flag_0 == ALT_BREAK) break;
if (tmp_210_alt_flag_0 == ALT_YES) break;
}
if (tmp_210_default_flag == ALT_MAYBE) {
tmp_210_default_flag = TTCN_Default::try_altsteps();
if (tmp_210_default_flag == ALT_YES || tmp_210_default_flag == ALT_BREAK) break;
else if (tmp_210_default_flag == ALT_REPEAT) goto tmp_210;
}
current_location.update_lineno(2523);
/* LibItsGeoNetworking_Functions.ttcn, line 2523 */
if (tmp_210_alt_flag_0 == ALT_NO && tmp_210_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 2523 and 2537.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2538);
/* LibItsGeoNetworking_Functions.ttcn, line 2538 */
return v__ret;
}

void start_f__askForCertificateChain(const COMPONENT& component_reference, const OCTETSTRING_template& p__CamPayload)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_askForCertificateChain(");
p__CamPayload.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_askForCertificateChain", text_buf);
p__CamPayload.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

BOOLEAN f__askAndWaitForCertificateChain(LibItsSecurity__TypesAndValues::CertificateChain& p__chain, const OCTETSTRING_template& p__CamPayload)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2544, TTCN_Location::LOCATION_FUNCTION, "f_askAndWaitForCertificateChain");
p__chain.clean_up();
current_location.update_lineno(2549);
/* LibItsGeoNetworking_Functions.ttcn, line 2549 */
LibItsSecurity__TypesAndValues::SecuredMessage v__recv;
current_location.update_lineno(2550);
/* LibItsGeoNetworking_Functions.ttcn, line 2550 */
LibItsSecurity__TypesAndValues::SignerInfo v__si;
current_location.update_lineno(2551);
/* LibItsGeoNetworking_Functions.ttcn, line 2551 */
BOOLEAN v__ret(FALSE);
current_location.update_lineno(2553);
/* LibItsGeoNetworking_Functions.ttcn, line 2553 */
{
tmp_211:
alt_status tmp_211_alt_flag_0 = ALT_MAYBE;
alt_status tmp_211_alt_flag_1 = ALT_MAYBE;
alt_status tmp_211_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_211_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2554);
/* LibItsGeoNetworking_Functions.ttcn, line 2554 */
tmp_211_alt_flag_0 = a__securedMessageWithCertificate_instance(v__recv);
if (tmp_211_alt_flag_0 == ALT_REPEAT) goto tmp_211;
if (tmp_211_alt_flag_0 == ALT_BREAK) break;
if (tmp_211_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2555);
/* LibItsGeoNetworking_Functions.ttcn, line 2555 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
break;
}
}
if (tmp_211_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2566);
/* LibItsGeoNetworking_Functions.ttcn, line 2566 */
tmp_211_alt_flag_1 = a__securedMessageWithCertificateChain_instance(v__recv);
if (tmp_211_alt_flag_1 == ALT_REPEAT) goto tmp_211;
if (tmp_211_alt_flag_1 == ALT_BREAK) break;
if (tmp_211_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2567);
/* LibItsGeoNetworking_Functions.ttcn, line 2567 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
break;
}
}
if (tmp_211_default_flag == ALT_MAYBE) {
tmp_211_default_flag = TTCN_Default::try_altsteps();
if (tmp_211_default_flag == ALT_YES || tmp_211_default_flag == ALT_BREAK) break;
else if (tmp_211_default_flag == ALT_REPEAT) goto tmp_211;
}
current_location.update_lineno(2553);
/* LibItsGeoNetworking_Functions.ttcn, line 2553 */
if (tmp_211_alt_flag_0 == ALT_NO && tmp_211_alt_flag_1 == ALT_NO && tmp_211_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 2553 and 2573.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2575);
/* LibItsGeoNetworking_Functions.ttcn, line 2575 */
return v__ret;
}

BOOLEAN f__waitForDigest(OCTETSTRING& p__digest)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2582, TTCN_Location::LOCATION_FUNCTION, "f_waitForDigest");
p__digest.clean_up();
current_location.update_lineno(2585);
/* LibItsGeoNetworking_Functions.ttcn, line 2585 */
LibItsSecurity__TypesAndValues::SecuredMessage v__recv;
current_location.update_lineno(2586);
/* LibItsGeoNetworking_Functions.ttcn, line 2586 */
BOOLEAN v__ret(FALSE);
current_location.update_lineno(2588);
/* LibItsGeoNetworking_Functions.ttcn, line 2588 */
{
tmp_212:
alt_status tmp_212_alt_flag_0 = ALT_MAYBE;
alt_status tmp_212_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_212_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2589);
/* LibItsGeoNetworking_Functions.ttcn, line 2589 */
tmp_212_alt_flag_0 = a__securedMessageWithDigest_instance(v__recv);
if (tmp_212_alt_flag_0 == ALT_REPEAT) goto tmp_212;
if (tmp_212_alt_flag_0 == ALT_BREAK) break;
if (tmp_212_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2590);
/* LibItsGeoNetworking_Functions.ttcn, line 2590 */
LibItsSecurity__TypesAndValues::SignerInfo v__si;
break;
}
}
if (tmp_212_default_flag == ALT_MAYBE) {
tmp_212_default_flag = TTCN_Default::try_altsteps();
if (tmp_212_default_flag == ALT_YES || tmp_212_default_flag == ALT_BREAK) break;
else if (tmp_212_default_flag == ALT_REPEAT) goto tmp_212;
}
current_location.update_lineno(2588);
/* LibItsGeoNetworking_Functions.ttcn, line 2588 */
if (tmp_212_alt_flag_0 == ALT_NO && tmp_212_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsGeoNetworking_Functions.ttcn between lines 2588 and 2596.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2598);
/* LibItsGeoNetworking_Functions.ttcn, line 2598 */
return v__ret;
}

void f__sendCertificateRequest(const OCTETSTRING_template& p__digest, const OCTETSTRING_template& p__payload)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2605, TTCN_Location::LOCATION_FUNCTION, "f_sendCertificateRequest");
current_location.update_lineno(2611);
/* LibItsGeoNetworking_Functions.ttcn, line 2611 */
LibItsGeoNetworking__TestSystem::GeoNetworkingReq v__gnReq;
current_location.update_lineno(2612);
/* LibItsGeoNetworking_Functions.ttcn, line 2612 */
LibItsGeoNetworking__TypesAndValues::GnNonSecuredPacket v__gnNonSecuredPacket;
current_location.update_lineno(2613);
/* LibItsGeoNetworking_Functions.ttcn, line 2613 */
LibItsSecurity__TypesAndValues::ToBeSignedSecuredMessage_template v__toBeSignedSecuredMessage;
current_location.update_lineno(2614);
/* LibItsGeoNetworking_Functions.ttcn, line 2614 */
LibItsSecurity__TypesAndValues::SecuredMessage_template v__securedMessage;
current_location.update_lineno(2617);
/* LibItsGeoNetworking_Functions.ttcn, line 2617 */
v__gnNonSecuredPacket = LibItsGeoNetworking__Templates::m__geoNwShbPacket(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compNodeC))).valueof();
current_location.update_lineno(2621);
/* LibItsGeoNetworking_Functions.ttcn, line 2621 */
v__gnNonSecuredPacket.payload() = LibItsGeoNetworking__Templates::f__adaptPayload__m(p__payload).valueof();
current_location.update_lineno(2636);
/* LibItsGeoNetworking_Functions.ttcn, line 2636 */
v__gnReq = LibItsGeoNetworking__Templates::m__geoNwReq__linkLayerBroadcast(LibItsGeoNetworking__Templates::m__geoNwSecPdu(LibItsGeoNetworking__TypesAndValues::GnNonSecuredPacket_template(v__gnNonSecuredPacket), v__securedMessage)).valueof();
current_location.update_lineno(2644);
/* LibItsGeoNetworking_Functions.ttcn, line 2644 */
f__sendGeoNetMessage(LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template(v__gnReq));
}

void start_f__sendCertificateRequest(const COMPONENT& component_reference, const OCTETSTRING_template& p__digest, const OCTETSTRING_template& p__payload)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendCertificateRequest(");
p__digest.log();
TTCN_Logger::log_event_str(", ");
p__payload.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsGeoNetworking_Functions", "f_sendCertificateRequest", text_buf);
p__digest.encode_text(text_buf);
p__payload.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsSecurity__TypesAndValues::SecuredMessage f__getSecuredMessage(const LibItsGeoNetworking__TypesAndValues::GeoNetworkingPdu& p__msg)
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 2657, TTCN_Location::LOCATION_FUNCTION, "f_getSecuredMessage");
current_location.update_lineno(2659);
/* LibItsGeoNetworking_Functions.ttcn, line 2659 */
return const_cast< const LibItsGeoNetworking__TypesAndValues::GeoNetworkingPdu&>(p__msg).gnPacket().securedMsg()();
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsGeoNetworking_Functions");
LibItsCommon__Functions::module_object.pre_init_module();
LibItsSecurity__Templates::module_object.pre_init_module();
LibItsGeoNetworking__Templates::module_object.pre_init_module();
LibItsGeoNetworking__Pics::module_object.pre_init_module();
module_object.add_function("f_utInitializeIut", (genericfunc_t)&f__utInitializeIut, (genericfunc_t)&start_f__utInitializeIut);
module_object.add_function("f_utChangePosition", (genericfunc_t)&f__utChangePosition, (genericfunc_t)&start_f__utChangePosition);
module_object.add_function("f_utTriggerEvent", (genericfunc_t)&f__utTriggerEvent, (genericfunc_t)&start_f__utTriggerEvent);
module_object.add_function("f_cf01Up", (genericfunc_t)&f__cf01Up, (genericfunc_t)&start_f__cf01Up);
module_object.add_function("f_cf01Down", (genericfunc_t)&f__cf01Down, (genericfunc_t)&start_f__cf01Down);
module_object.add_function("f_cf02Up", (genericfunc_t)&f__cf02Up, (genericfunc_t)&start_f__cf02Up);
module_object.add_function("f_cf02Down", (genericfunc_t)&f__cf02Down, (genericfunc_t)&start_f__cf02Down);
module_object.add_function("f_cf03Up", (genericfunc_t)&f__cf03Up, (genericfunc_t)&start_f__cf03Up);
module_object.add_function("f_cf03Down", (genericfunc_t)&f__cf03Down, (genericfunc_t)&start_f__cf03Down);
module_object.add_function("f_cf04Up", (genericfunc_t)&f__cf04Up, (genericfunc_t)&start_f__cf04Up);
module_object.add_function("f_cf04Down", (genericfunc_t)&f__cf04Down, (genericfunc_t)&start_f__cf04Down);
module_object.add_function("f_cf05Up", (genericfunc_t)&f__cf05Up, (genericfunc_t)&start_f__cf05Up);
module_object.add_function("f_cf05Down", (genericfunc_t)&f__cf05Down, (genericfunc_t)&start_f__cf05Down);
module_object.add_function("f_cf06Up", (genericfunc_t)&f__cf06Up, (genericfunc_t)&start_f__cf06Up);
module_object.add_function("f_cf06Down", (genericfunc_t)&f__cf06Down, (genericfunc_t)&start_f__cf06Down);
module_object.add_function("f_cf07Up", (genericfunc_t)&f__cf07Up, (genericfunc_t)&start_f__cf07Up);
module_object.add_function("f_cf07Down", (genericfunc_t)&f__cf07Down, (genericfunc_t)&start_f__cf07Down);
module_object.add_function("f_initialiseComponent", (genericfunc_t)&f__initialiseComponent, (genericfunc_t)&start_f__initialiseComponent);
module_object.add_function("f_startBeingNeighbour", (genericfunc_t)&f__startBeingNeighbour, (genericfunc_t)&start_f__startBeingNeighbour);
module_object.add_function("f_stopBeingNeighbour", (genericfunc_t)&f__stopBeingNeighbour, (genericfunc_t)&start_f__stopBeingNeighbour);
module_object.add_function("f_initialiseSecuredMode", (genericfunc_t)&f__initialiseSecuredMode, (genericfunc_t)&start_f__initialiseSecuredMode);
module_object.add_function("f_uninitialiseSecuredMode", (genericfunc_t)&f__uninitialiseSecuredMode, (genericfunc_t)&start_f__uninitialiseSecuredMode);
module_object.add_function("f_getComponent", (genericfunc_t)&f__getComponent, (genericfunc_t)&start_f__getComponent);
module_object.add_function("f_preparePositionsAndAreas", (genericfunc_t)&f__preparePositionsAndAreas, (genericfunc_t)&start_f__preparePositionsAndAreas);
module_object.add_function("f_addPosition", (genericfunc_t)&f__addPosition, NULL);
module_object.add_function("f_getPosition", (genericfunc_t)&f__getPosition, (genericfunc_t)&start_f__getPosition);
module_object.add_function("f_changePositon", (genericfunc_t)&f__changePositon, (genericfunc_t)&start_f__changePositon);
module_object.add_function("f_computePosition", (genericfunc_t)&f__computePosition, NULL);
module_object.add_function("f_addArea", (genericfunc_t)&f__addArea, NULL);
module_object.add_function("f_getArea", (genericfunc_t)&f__getArea, (genericfunc_t)&start_f__getArea);
module_object.add_function("f_getGeoBroadcastArea", (genericfunc_t)&f__getGeoBroadcastArea, (genericfunc_t)&start_f__getGeoBroadcastArea);
module_object.add_function("f_getGeoAnycastArea", (genericfunc_t)&f__getGeoAnycastArea, (genericfunc_t)&start_f__getGeoAnycastArea);
module_object.add_function("f_geoArea2GeoBroadcastArea", (genericfunc_t)&f__geoArea2GeoBroadcastArea, NULL);
module_object.add_function("f_geoArea2GeoAnycastArea", (genericfunc_t)&f__geoArea2GeoAnycastArea, NULL);
module_object.add_function("f_computeSquareArea", (genericfunc_t)&f__computeSquareArea, NULL);
module_object.add_function("f_computeCircularArea", (genericfunc_t)&f__computeCircularArea, NULL);
module_object.add_function("f_radiusFromCircularArea", (genericfunc_t)&f__radiusFromCircularArea, NULL);
module_object.add_function("f_distance", (genericfunc_t)&f__distance, NULL);
module_object.add_altstep("a_default", (genericfunc_t)&a__default_instance, (genericfunc_t )&activate_a__default, (genericfunc_t )&a__default);
module_object.add_altstep("a_neighbourDefault", (genericfunc_t)&a__neighbourDefault_instance, (genericfunc_t )&activate_a__neighbourDefault, (genericfunc_t )&a__neighbourDefault);
module_object.add_altstep("a_utDefault", (genericfunc_t)&a__utDefault_instance, (genericfunc_t )&activate_a__utDefault, (genericfunc_t )&a__utDefault);
module_object.add_altstep("a_cf01Down", (genericfunc_t)&a__cf01Down_instance, (genericfunc_t )&activate_a__cf01Down, (genericfunc_t )&a__cf01Down);
module_object.add_altstep("a_cf02Down", (genericfunc_t)&a__cf02Down_instance, (genericfunc_t )&activate_a__cf02Down, (genericfunc_t )&a__cf02Down);
module_object.add_altstep("a_cf03Down", (genericfunc_t)&a__cf03Down_instance, (genericfunc_t )&activate_a__cf03Down, (genericfunc_t )&a__cf03Down);
module_object.add_altstep("a_cf04Down", (genericfunc_t)&a__cf04Down_instance, (genericfunc_t )&activate_a__cf04Down, (genericfunc_t )&a__cf04Down);
module_object.add_altstep("a_cf05Down", (genericfunc_t)&a__cf05Down_instance, (genericfunc_t )&activate_a__cf05Down, (genericfunc_t )&a__cf05Down);
module_object.add_altstep("a_cf06Down", (genericfunc_t)&a__cf06Down_instance, (genericfunc_t )&activate_a__cf06Down, (genericfunc_t )&a__cf06Down);
module_object.add_altstep("a_cf07Down", (genericfunc_t)&a__cf07Down_instance, (genericfunc_t )&activate_a__cf07Down, (genericfunc_t )&a__cf07Down);
module_object.add_altstep("a_receiveGeoUnicast", (genericfunc_t)&a__receiveGeoUnicast_instance, (genericfunc_t )&activate_a__receiveGeoUnicast, (genericfunc_t )&a__receiveGeoUnicast);
module_object.add_altstep("a_receiveGeoUnicastWithDestination", (genericfunc_t)&a__receiveGeoUnicastWithDestination_instance, (genericfunc_t )&activate_a__receiveGeoUnicastWithDestination, (genericfunc_t )&a__receiveGeoUnicastWithDestination);
module_object.add_altstep("a_receiveAnyGeoUnicast", (genericfunc_t)&a__receiveAnyGeoUnicast_instance, (genericfunc_t )&activate_a__receiveAnyGeoUnicast, (genericfunc_t )&a__receiveAnyGeoUnicast);
module_object.add_altstep("a_receiveGeoBroadcast", (genericfunc_t)&a__receiveGeoBroadcast_instance, (genericfunc_t )&activate_a__receiveGeoBroadcast, (genericfunc_t )&a__receiveGeoBroadcast);
module_object.add_altstep("a_receiveGeoBroadcastWithAreaWithHopLimit", (genericfunc_t)&a__receiveGeoBroadcastWithAreaWithHopLimit_instance, (genericfunc_t )&activate_a__receiveGeoBroadcastWithAreaWithHopLimit, (genericfunc_t )&a__receiveGeoBroadcastWithAreaWithHopLimit);
module_object.add_altstep("a_receiveGeoBroadcastWithArea", (genericfunc_t)&a__receiveGeoBroadcastWithArea_instance, (genericfunc_t )&activate_a__receiveGeoBroadcastWithArea, (genericfunc_t )&a__receiveGeoBroadcastWithArea);
module_object.add_altstep("a_receiveGeoAnycast", (genericfunc_t)&a__receiveGeoAnycast_instance, (genericfunc_t )&activate_a__receiveGeoAnycast, (genericfunc_t )&a__receiveGeoAnycast);
module_object.add_altstep("a_receiveGeoAnycastWithAreaWithHopLimit", (genericfunc_t)&a__receiveGeoAnycastWithAreaWithHopLimit_instance, (genericfunc_t )&activate_a__receiveGeoAnycastWithAreaWithHopLimit, (genericfunc_t )&a__receiveGeoAnycastWithAreaWithHopLimit);
module_object.add_altstep("a_receiveGeoAnycastWithArea", (genericfunc_t)&a__receiveGeoAnycastWithArea_instance, (genericfunc_t )&activate_a__receiveGeoAnycastWithArea, (genericfunc_t )&a__receiveGeoAnycastWithArea);
module_object.add_altstep("a_receiveLsRequest", (genericfunc_t)&a__receiveLsRequest_instance, (genericfunc_t )&activate_a__receiveLsRequest, (genericfunc_t )&a__receiveLsRequest);
module_object.add_altstep("a_receiveAnyLsRequest", (genericfunc_t)&a__receiveAnyLsRequest_instance, (genericfunc_t )&activate_a__receiveAnyLsRequest, (genericfunc_t )&a__receiveAnyLsRequest);
module_object.add_altstep("a_receiveAnyLsReply", (genericfunc_t)&a__receiveAnyLsReply_instance, (genericfunc_t )&activate_a__receiveAnyLsReply, (genericfunc_t )&a__receiveAnyLsReply);
module_object.add_altstep("a_receiveLsRequestAndReply", (genericfunc_t)&a__receiveLsRequestAndReply_instance, (genericfunc_t )&activate_a__receiveLsRequestAndReply, (genericfunc_t )&a__receiveLsRequestAndReply);
module_object.add_function("f_prDefault", (genericfunc_t)&f__prDefault, (genericfunc_t)&start_f__prDefault);
module_object.add_function("f_prNonNeighbour", (genericfunc_t)&f__prNonNeighbour, (genericfunc_t)&start_f__prNonNeighbour);
module_object.add_function("f_prNeighbour", (genericfunc_t)&f__prNeighbour, (genericfunc_t)&start_f__prNeighbour);
module_object.add_function("f_initialState", (genericfunc_t)&f__initialState, (genericfunc_t)&start_f__initialState);
module_object.add_function("f_handleLocationService", (genericfunc_t)&f__handleLocationService, (genericfunc_t)&start_f__handleLocationService);
module_object.add_function("f_processLocationService", (genericfunc_t)&f__processLocationService, NULL);
module_object.add_function("f_poDefault", (genericfunc_t)&f__poDefault, (genericfunc_t)&start_f__poDefault);
module_object.add_function("f_poNeighbour", (genericfunc_t)&f__poNeighbour, (genericfunc_t)&start_f__poNeighbour);
module_object.add_function("f_acTriggerEvent", (genericfunc_t)&f__acTriggerEvent, (genericfunc_t)&start_f__acTriggerEvent);
module_object.add_function("f_acGetLongPosVector", (genericfunc_t)&f__acGetLongPosVector, (genericfunc_t)&start_f__acGetLongPosVector);
module_object.add_function("f_acStartBeaconingMultipleNeighbour", (genericfunc_t)&f__acStartBeaconingMultipleNeighbour, (genericfunc_t)&start_f__acStartBeaconingMultipleNeighbour);
module_object.add_function("f_acEnableSecurity", (genericfunc_t)&f__acEnableSecurity, (genericfunc_t)&start_f__acEnableSecurity);
module_object.add_function("f_acDisableSecurity", (genericfunc_t)&f__acDisableSecurity, (genericfunc_t)&start_f__acDisableSecurity);
module_object.add_function("f_getLifetimeValue", (genericfunc_t)&f__getLifetimeValue, (genericfunc_t)&start_f__getLifetimeValue);
module_object.add_function("f_computeGnTimestamp", (genericfunc_t)&f__computeGnTimestamp, NULL);
module_object.add_function("f_getTsGnLocalAddress", (genericfunc_t)&f__getTsGnLocalAddress, NULL);
module_object.add_function("f_sendGeoNetMessage", (genericfunc_t)&f__sendGeoNetMessage, (genericfunc_t)&start_f__sendGeoNetMessage);
module_object.add_function("f_sendGeoNetMessageWithPayload", (genericfunc_t)&f__sendGeoNetMessageWithPayload, (genericfunc_t)&start_f__sendGeoNetMessageWithPayload);
module_object.add_function("f_receiveGeoNetMessageWithPayload", (genericfunc_t)&f__receiveGeoNetMessageWithPayload, NULL);
module_object.add_function("f_setLocalSequenceNumber", (genericfunc_t)&f__setLocalSequenceNumber, (genericfunc_t)&start_f__setLocalSequenceNumber);
module_object.add_function("f_getInitialSequenceNumber", (genericfunc_t)&f__getInitialSequenceNumber, NULL);
module_object.add_function("f_getMessageCount", (genericfunc_t)&f__getMessageCount, NULL);
module_object.add_function("f_getIutGnLocalAddress", (genericfunc_t)&f__getIutGnLocalAddress, NULL);
module_object.add_function("f_getIutGnLocalAddressConfigurationMethod", (genericfunc_t)&f__getIutGnLocalAddressConfigurationMethod, NULL);
module_object.add_function("f_getIutMacAddress", (genericfunc_t)&f__getIutMacAddress, NULL);
module_object.add_function("f_getGeoUnicastForwardingAlgorithm", (genericfunc_t)&f__getGeoUnicastForwardingAlgorithm, NULL);
module_object.add_function("f_getGeoBroadcastForwardingAlgorithm", (genericfunc_t)&f__getGeoBroadcastForwardingAlgorithm, NULL);
module_object.add_function("f_getDefaultHopLimit", (genericfunc_t)&f__getDefaultHopLimit, NULL);
module_object.add_function("f_isMobile", (genericfunc_t)&f__isMobile, NULL);
module_object.add_function("f_getLsRetransmitTimer", (genericfunc_t)&f__getLsRetransmitTimer, NULL);
module_object.add_function("f_getLsRetransmitTimerMedium", (genericfunc_t)&f__getLsRetransmitTimerMedium, NULL);
module_object.add_function("f_getLsRetransmitTimerMaximum", (genericfunc_t)&f__getLsRetransmitTimerMaximum, NULL);
module_object.add_function("f_getAppRetransmitTimer", (genericfunc_t)&f__getAppRetransmitTimer, NULL);
module_object.add_function("f_getAppRetransmitTimerMedium", (genericfunc_t)&f__getAppRetransmitTimerMedium, NULL);
module_object.add_function("f_getAppRetransmitTimerMaximum", (genericfunc_t)&f__getAppRetransmitTimerMaximum, NULL);
module_object.add_function("f_getLsMaxRetrans", (genericfunc_t)&f__getLsMaxRetrans, NULL);
module_object.add_function("f_getAppMaxRetrans", (genericfunc_t)&f__getAppMaxRetrans, NULL);
module_object.add_function("f_getLsPacketBufferSize", (genericfunc_t)&f__getLsPacketBufferSize, NULL);
module_object.add_function("f_getUcForwardingPacketBufferSize", (genericfunc_t)&f__getUcForwardingPacketBufferSize, NULL);
module_object.add_function("f_getBcForwardingPacketBufferSize", (genericfunc_t)&f__getBcForwardingPacketBufferSize, NULL);
module_object.add_function("f_getMaxPacketLifeTime", (genericfunc_t)&f__getMaxPacketLifeTime, NULL);
module_object.add_function("f_getDeltaTimer", (genericfunc_t)&f__getDeltaTimer, NULL);
module_object.add_function("f_getBsRetransmitTimer", (genericfunc_t)&f__getBsRetransmitTimer, NULL);
module_object.add_function("f_getBsRetransmitTimerMedium", (genericfunc_t)&f__getBsRetransmitTimerMedium, NULL);
module_object.add_function("f_getBsRetransmitTimerMaximum", (genericfunc_t)&f__getBsRetransmitTimerMaximum, NULL);
module_object.add_function("f_getBsMaxJitter", (genericfunc_t)&f__getBsMaxJitter, NULL);
module_object.add_function("f_getLifetimeLocTableEntry", (genericfunc_t)&f__getLifetimeLocTableEntry, NULL);
module_object.add_function("f_getCbfMaxCommunicationRange", (genericfunc_t)&f__getCbfMaxCommunicationRange, NULL);
module_object.add_function("f_getGeoUnicastCbfMaxTime", (genericfunc_t)&f__getGeoUnicastCbfMaxTime, NULL);
module_object.add_function("f_getGeoUnicastCbfMinTime", (genericfunc_t)&f__getGeoUnicastCbfMinTime, NULL);
module_object.add_function("f_getGeoBroadcastCbfMaxTime", (genericfunc_t)&f__getGeoBroadcastCbfMaxTime, NULL);
module_object.add_function("f_getGeoBroadcastCbfMinTime", (genericfunc_t)&f__getGeoBroadcastCbfMinTime, NULL);
module_object.add_function("f_getGnMaxAreaSize", (genericfunc_t)&f__getGnMaxAreaSize, NULL);
module_object.add_function("f_getAdvancedGbcForwardingMaxCounter", (genericfunc_t)&f__getAdvancedGbcForwardingMaxCounter, NULL);
module_object.add_function("f_setNrNeighbourLocTableDefault", (genericfunc_t)&f__setNrNeighbourLocTableDefault, (genericfunc_t)&start_f__setNrNeighbourLocTableDefault);
module_object.add_function("f_setNrNeighbourLocTableMedium", (genericfunc_t)&f__setNrNeighbourLocTableMedium, (genericfunc_t)&start_f__setNrNeighbourLocTableMedium);
module_object.add_function("f_setNrNeighbourLocTableMaximum", (genericfunc_t)&f__setNrNeighbourLocTableMaximum, (genericfunc_t)&start_f__setNrNeighbourLocTableMaximum);
module_object.add_function("f_longPosVector2ShortPosVector", (genericfunc_t)&f__longPosVector2ShortPosVector, NULL);
module_object.add_function("f_getIutLongPosVector", (genericfunc_t)&f__getIutLongPosVector, (genericfunc_t)&start_f__getIutLongPosVector);
module_object.add_function("f_getIutShortPosVector", (genericfunc_t)&f__getIutShortPosVector, (genericfunc_t)&start_f__getIutShortPosVector);
module_object.add_function("f_computePositionUsingDistance", (genericfunc_t)&f__computePositionUsingDistance, NULL);
module_object.add_function("fx_computeGnTimestamp", (genericfunc_t)&fx__computeGnTimestamp, NULL);
module_object.add_altstep("a_securedMessage", (genericfunc_t)&a__securedMessage_instance, (genericfunc_t )&activate_a__securedMessage, (genericfunc_t )&a__securedMessage);
module_object.add_altstep("a_securedMessageWithCertificate", (genericfunc_t)&a__securedMessageWithCertificate_instance, (genericfunc_t )&activate_a__securedMessageWithCertificate, (genericfunc_t )&a__securedMessageWithCertificate);
module_object.add_altstep("a_securedMessageWithCertificateChain", (genericfunc_t)&a__securedMessageWithCertificateChain_instance, (genericfunc_t )&activate_a__securedMessageWithCertificateChain, (genericfunc_t )&a__securedMessageWithCertificateChain);
module_object.add_altstep("a_securedMessageWithDigest", (genericfunc_t)&a__securedMessageWithDigest_instance, (genericfunc_t )&activate_a__securedMessageWithDigest, (genericfunc_t )&a__securedMessageWithDigest);
module_object.add_function("f_waitForCertificate", (genericfunc_t)&f__waitForCertificate, NULL);
module_object.add_function("f_waitForCertificateChain", (genericfunc_t)&f__waitForCertificateChain, NULL);
module_object.add_function("f_askForCertificateChain", (genericfunc_t)&f__askForCertificateChain, (genericfunc_t)&start_f__askForCertificateChain);
module_object.add_function("f_askAndWaitForCertificateChain", (genericfunc_t)&f__askAndWaitForCertificateChain, NULL);
module_object.add_function("f_waitForDigest", (genericfunc_t)&f__waitForDigest, NULL);
module_object.add_function("f_sendCertificateRequest", (genericfunc_t)&f__sendCertificateRequest, (genericfunc_t)&start_f__sendCertificateRequest);
module_object.add_function("f_getSecuredMessage", (genericfunc_t)&f__getSecuredMessage, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("LibItsGeoNetworking_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsGeoNetworking_Functions");
LibItsCommon__Functions::module_object.post_init_module();
LibItsSecurity__Templates::module_object.post_init_module();
LibItsGeoNetworking__Templates::module_object.post_init_module();
LibItsGeoNetworking__Pics::module_object.post_init_module();
const_f__cf02Up_p__mainUtComponent_defval = LibItsGeoNetworking__TypesAndValues::c__compMTC;
const_f__cf03Up_p__mainUtComponent_defval = LibItsGeoNetworking__TypesAndValues::c__compMTC;
const_f__cf04Up_p__mainUtComponent_defval = LibItsGeoNetworking__TypesAndValues::c__compMTC;
const_f__cf05Up_p__mainUtComponent_defval = LibItsGeoNetworking__TypesAndValues::c__compMTC;
const_f__cf06Up_p__mainUtComponent_defval = LibItsGeoNetworking__TypesAndValues::c__compMTC;
const_f__cf07Up_p__mainUtComponent_defval = LibItsGeoNetworking__TypesAndValues::c__compMTC;
template_a__receiveGeoBroadcastWithAreaWithHopLimit_p__maxHopLimit_defval = ANY_VALUE;
template_a__receiveGeoAnycastWithAreaWithHopLimit_p__maxHopLimit_defval = ANY_VALUE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_utInitializeIut")) {
LibItsCommon__TypesAndValues::UtInitialize_template p__init;
p__init.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utInitializeIut(");
p__init.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utInitializeIut(p__init);
TTCN_Runtime::function_finished("f_utInitializeIut");
return TRUE;
} else if (!strcmp(function_name, "f_utChangePosition")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_utChangePosition().");
TTCN_Runtime::function_started(function_arguments);
f__utChangePosition();
TTCN_Runtime::function_finished("f_utChangePosition");
return TRUE;
} else if (!strcmp(function_name, "f_utTriggerEvent")) {
LibItsGeoNetworking__TypesAndValues::UtGnTrigger_template p__event;
p__event.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utTriggerEvent(p__event);
TTCN_Runtime::function_finished("f_utTriggerEvent");
return TRUE;
} else if (!strcmp(function_name, "f_cf01Up")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf01Up().");
TTCN_Runtime::function_started(function_arguments);
f__cf01Up();
TTCN_Runtime::function_finished("f_cf01Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf01Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf01Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf01Down();
TTCN_Runtime::function_finished("f_cf01Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf02Up")) {
CHARSTRING p__mainUtComponent;
p__mainUtComponent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf02Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cf02Up(p__mainUtComponent);
TTCN_Runtime::function_finished("f_cf02Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf02Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf02Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf02Down();
TTCN_Runtime::function_finished("f_cf02Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf03Up")) {
CHARSTRING p__mainUtComponent;
p__mainUtComponent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf03Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cf03Up(p__mainUtComponent);
TTCN_Runtime::function_finished("f_cf03Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf03Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf03Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf03Down();
TTCN_Runtime::function_finished("f_cf03Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf04Up")) {
CHARSTRING p__mainUtComponent;
p__mainUtComponent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf04Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cf04Up(p__mainUtComponent);
TTCN_Runtime::function_finished("f_cf04Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf04Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf04Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf04Down();
TTCN_Runtime::function_finished("f_cf04Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf05Up")) {
CHARSTRING p__mainUtComponent;
p__mainUtComponent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf05Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cf05Up(p__mainUtComponent);
TTCN_Runtime::function_finished("f_cf05Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf05Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf05Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf05Down();
TTCN_Runtime::function_finished("f_cf05Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf06Up")) {
CHARSTRING p__mainUtComponent;
p__mainUtComponent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf06Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cf06Up(p__mainUtComponent);
TTCN_Runtime::function_finished("f_cf06Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf06Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf06Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf06Down();
TTCN_Runtime::function_finished("f_cf06Down");
return TRUE;
} else if (!strcmp(function_name, "f_cf07Up")) {
CHARSTRING p__mainUtComponent;
p__mainUtComponent.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf07Up(");
p__mainUtComponent.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__cf07Up(p__mainUtComponent);
TTCN_Runtime::function_finished("f_cf07Up");
return TRUE;
} else if (!strcmp(function_name, "f_cf07Down")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf07Down().");
TTCN_Runtime::function_started(function_arguments);
f__cf07Down();
TTCN_Runtime::function_finished("f_cf07Down");
return TRUE;
} else if (!strcmp(function_name, "f_initialiseComponent")) {
LibItsGeoNetworking__TypesAndValues::PositionTable p__positionTable;
LibItsGeoNetworking__TypesAndValues::GeoAreaTable p__areaTable;
CHARSTRING p__componentName;
p__positionTable.decode_text(function_arguments);
p__areaTable.decode_text(function_arguments);
p__componentName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_initialiseComponent(");
p__positionTable.log();
TTCN_Logger::log_event_str(", ");
p__areaTable.log();
TTCN_Logger::log_event_str(", ");
p__componentName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__initialiseComponent(p__positionTable, p__areaTable, p__componentName);
TTCN_Runtime::function_finished("f_initialiseComponent");
return TRUE;
} else if (!strcmp(function_name, "f_startBeingNeighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_startBeingNeighbour().");
TTCN_Runtime::function_started(function_arguments);
f__startBeingNeighbour();
TTCN_Runtime::function_finished("f_startBeingNeighbour");
return TRUE;
} else if (!strcmp(function_name, "f_stopBeingNeighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_stopBeingNeighbour().");
TTCN_Runtime::function_started(function_arguments);
f__stopBeingNeighbour();
TTCN_Runtime::function_finished("f_stopBeingNeighbour");
return TRUE;
} else if (!strcmp(function_name, "f_initialiseSecuredMode")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_initialiseSecuredMode().");
TTCN_Runtime::function_started(function_arguments);
f__initialiseSecuredMode();
TTCN_Runtime::function_finished("f_initialiseSecuredMode");
return TRUE;
} else if (!strcmp(function_name, "f_uninitialiseSecuredMode")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_uninitialiseSecuredMode().");
TTCN_Runtime::function_started(function_arguments);
f__uninitialiseSecuredMode();
TTCN_Runtime::function_finished("f_uninitialiseSecuredMode");
return TRUE;
} else if (!strcmp(function_name, "f_getComponent")) {
CHARSTRING p__componentName;
p__componentName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getComponent(");
p__componentName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getComponent(p__componentName);
TTCN_Runtime::function_finished("f_getComponent");
return TRUE;
} else if (!strcmp(function_name, "f_preparePositionsAndAreas")) {
LibItsGeoNetworking__TypesAndValues::PositionTable  p__positionTable;
LibItsGeoNetworking__TypesAndValues::GeoAreaTable  p__areaTable;
p__positionTable.decode_text(function_arguments);
p__areaTable.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_preparePositionsAndAreas(");
p__positionTable.log();
TTCN_Logger::log_event_str(", ");
p__areaTable.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__preparePositionsAndAreas(p__positionTable, p__areaTable);
TTCN_Runtime::function_finished("f_preparePositionsAndAreas");
return TRUE;
} else if (!strcmp(function_name, "f_getPosition")) {
CHARSTRING p__positionKey;
p__positionKey.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getPosition(");
p__positionKey.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getPosition(p__positionKey);
TTCN_Runtime::function_finished("f_getPosition");
return TRUE;
} else if (!strcmp(function_name, "f_changePositon")) {
CHARSTRING p__compNode;
LibItsGeoNetworking__TypesAndValues::LongPosVector p__longPosVector;
p__compNode.decode_text(function_arguments);
p__longPosVector.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_changePositon(");
p__compNode.log();
TTCN_Logger::log_event_str(", ");
p__longPosVector.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__changePositon(p__compNode, p__longPosVector);
TTCN_Runtime::function_finished("f_changePositon");
return TRUE;
} else if (!strcmp(function_name, "f_getArea")) {
CHARSTRING p__areaName;
p__areaName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getArea(");
p__areaName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getArea(p__areaName);
TTCN_Runtime::function_finished("f_getArea");
return TRUE;
} else if (!strcmp(function_name, "f_getGeoBroadcastArea")) {
CHARSTRING p__areaName;
p__areaName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGeoBroadcastArea(");
p__areaName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getGeoBroadcastArea(p__areaName);
TTCN_Runtime::function_finished("f_getGeoBroadcastArea");
return TRUE;
} else if (!strcmp(function_name, "f_getGeoAnycastArea")) {
CHARSTRING p__areaName;
p__areaName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGeoAnycastArea(");
p__areaName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getGeoAnycastArea(p__areaName);
TTCN_Runtime::function_finished("f_getGeoAnycastArea");
return TRUE;
} else if (!strcmp(function_name, "f_prDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prDefault().");
TTCN_Runtime::function_started(function_arguments);
f__prDefault();
TTCN_Runtime::function_finished("f_prDefault");
return TRUE;
} else if (!strcmp(function_name, "f_prNonNeighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prNonNeighbour().");
TTCN_Runtime::function_started(function_arguments);
f__prNonNeighbour();
TTCN_Runtime::function_finished("f_prNonNeighbour");
return TRUE;
} else if (!strcmp(function_name, "f_prNeighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prNeighbour().");
TTCN_Runtime::function_started(function_arguments);
f__prNeighbour();
TTCN_Runtime::function_finished("f_prNeighbour");
return TRUE;
} else if (!strcmp(function_name, "f_initialState")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_initialState().");
TTCN_Runtime::function_started(function_arguments);
f__initialState();
TTCN_Runtime::function_finished("f_initialState");
return TRUE;
} else if (!strcmp(function_name, "f_handleLocationService")) {
INTEGER_template p__reqSeqNumber;
OCTETSTRING_template p__mid;
LibItsGeoNetworking__TypesAndValues::LongPosVector_template p__repSrcPosVector;
LibItsGeoNetworking__TypesAndValues::LongPosVector_template p__repSenderPosVector;
p__reqSeqNumber.decode_text(function_arguments);
p__mid.decode_text(function_arguments);
p__repSrcPosVector.decode_text(function_arguments);
p__repSenderPosVector.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_handleLocationService(");
p__reqSeqNumber.log();
TTCN_Logger::log_event_str(", ");
p__mid.log();
TTCN_Logger::log_event_str(", ");
p__repSrcPosVector.log();
TTCN_Logger::log_event_str(", ");
p__repSenderPosVector.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__handleLocationService(p__reqSeqNumber, p__mid, p__repSrcPosVector, p__repSenderPosVector);
TTCN_Runtime::function_finished("f_handleLocationService");
return TRUE;
} else if (!strcmp(function_name, "f_poDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_poDefault().");
TTCN_Runtime::function_started(function_arguments);
f__poDefault();
TTCN_Runtime::function_finished("f_poDefault");
return TRUE;
} else if (!strcmp(function_name, "f_poNeighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_poNeighbour().");
TTCN_Runtime::function_started(function_arguments);
f__poNeighbour();
TTCN_Runtime::function_finished("f_poNeighbour");
return TRUE;
} else if (!strcmp(function_name, "f_acTriggerEvent")) {
LibItsGeoNetworking__TypesAndValues::AcGnPrimitive_template p__event;
p__event.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__acTriggerEvent(p__event);
TTCN_Runtime::function_finished("f_acTriggerEvent");
return TRUE;
} else if (!strcmp(function_name, "f_acGetLongPosVector")) {
LibItsGeoNetworking__TypesAndValues::GN__Address p__gnAddress;
p__gnAddress.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acGetLongPosVector(");
p__gnAddress.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__acGetLongPosVector(p__gnAddress);
TTCN_Runtime::function_finished("f_acGetLongPosVector");
return TRUE;
} else if (!strcmp(function_name, "f_acStartBeaconingMultipleNeighbour")) {
INTEGER p__numberOfNeighbour;
p__numberOfNeighbour.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acStartBeaconingMultipleNeighbour(");
p__numberOfNeighbour.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__acStartBeaconingMultipleNeighbour(p__numberOfNeighbour);
TTCN_Runtime::function_finished("f_acStartBeaconingMultipleNeighbour");
return TRUE;
} else if (!strcmp(function_name, "f_acEnableSecurity")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_acEnableSecurity().");
TTCN_Runtime::function_started(function_arguments);
f__acEnableSecurity();
TTCN_Runtime::function_finished("f_acEnableSecurity");
return TRUE;
} else if (!strcmp(function_name, "f_acDisableSecurity")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_acDisableSecurity().");
TTCN_Runtime::function_started(function_arguments);
f__acDisableSecurity();
TTCN_Runtime::function_finished("f_acDisableSecurity");
return TRUE;
} else if (!strcmp(function_name, "f_getLifetimeValue")) {
LibItsGeoNetworking__TypesAndValues::Lifetime p__lifetime;
p__lifetime.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getLifetimeValue(");
p__lifetime.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getLifetimeValue(p__lifetime);
TTCN_Runtime::function_finished("f_getLifetimeValue");
return TRUE;
} else if (!strcmp(function_name, "f_sendGeoNetMessage")) {
LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template p__geoNetReq;
p__geoNetReq.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendGeoNetMessage(");
p__geoNetReq.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sendGeoNetMessage(p__geoNetReq);
TTCN_Runtime::function_finished("f_sendGeoNetMessage");
return TRUE;
} else if (!strcmp(function_name, "f_sendGeoNetMessageWithPayload")) {
LibItsGeoNetworking__TestSystem::GeoNetworkingReq_template p__geoNetReq;
LibItsGeoNetworking__TypesAndValues::Payload_template p__payload;
p__geoNetReq.decode_text(function_arguments);
p__payload.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendGeoNetMessageWithPayload(");
p__geoNetReq.log();
TTCN_Logger::log_event_str(", ");
p__payload.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sendGeoNetMessageWithPayload(p__geoNetReq, p__payload);
TTCN_Runtime::function_finished("f_sendGeoNetMessageWithPayload");
return TRUE;
} else if (!strcmp(function_name, "f_setLocalSequenceNumber")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_setLocalSequenceNumber().");
TTCN_Runtime::function_started(function_arguments);
f__setLocalSequenceNumber();
TTCN_Runtime::function_finished("f_setLocalSequenceNumber");
return TRUE;
} else if (!strcmp(function_name, "f_setNrNeighbourLocTableDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_setNrNeighbourLocTableDefault().");
TTCN_Runtime::function_started(function_arguments);
f__setNrNeighbourLocTableDefault();
TTCN_Runtime::function_finished("f_setNrNeighbourLocTableDefault");
return TRUE;
} else if (!strcmp(function_name, "f_setNrNeighbourLocTableMedium")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_setNrNeighbourLocTableMedium().");
TTCN_Runtime::function_started(function_arguments);
f__setNrNeighbourLocTableMedium();
TTCN_Runtime::function_finished("f_setNrNeighbourLocTableMedium");
return TRUE;
} else if (!strcmp(function_name, "f_setNrNeighbourLocTableMaximum")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_setNrNeighbourLocTableMaximum().");
TTCN_Runtime::function_started(function_arguments);
f__setNrNeighbourLocTableMaximum();
TTCN_Runtime::function_finished("f_setNrNeighbourLocTableMaximum");
return TRUE;
} else if (!strcmp(function_name, "f_getIutLongPosVector")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_getIutLongPosVector().");
TTCN_Runtime::function_started(function_arguments);
f__getIutLongPosVector();
TTCN_Runtime::function_finished("f_getIutLongPosVector");
return TRUE;
} else if (!strcmp(function_name, "f_getIutShortPosVector")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_getIutShortPosVector().");
TTCN_Runtime::function_started(function_arguments);
f__getIutShortPosVector();
TTCN_Runtime::function_finished("f_getIutShortPosVector");
return TRUE;
} else if (!strcmp(function_name, "f_askForCertificateChain")) {
OCTETSTRING_template p__CamPayload;
p__CamPayload.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_askForCertificateChain(");
p__CamPayload.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__askForCertificateChain(p__CamPayload);
TTCN_Runtime::function_finished("f_askForCertificateChain");
return TRUE;
} else if (!strcmp(function_name, "f_sendCertificateRequest")) {
OCTETSTRING_template p__digest;
OCTETSTRING_template p__payload;
p__digest.decode_text(function_arguments);
p__payload.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendCertificateRequest(");
p__digest.log();
TTCN_Logger::log_event_str(", ");
p__payload.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sendCertificateRequest(p__digest, p__payload);
TTCN_Runtime::function_finished("f_sendCertificateRequest");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
