// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsDenm_Functions.hh"

namespace LibItsDenm__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const CHARSTRING cs_0(4, "*** "),
cs_7(43, ": ERROR: Received an unexpected message ***"),
cs_8(85, ": INCONC: Timeout while awaiting reaction of the IUT prior to Upper Tester action ***"),
cs_9(63, ": INCONC: Timeout while awaiting the reception of a message ***"),
cs_2(66, ": INFO: Could not receive expected UT message from IUT in time ***"),
cs_6(44, ": INFO: DENM message received in default ***"),
cs_1(27, ": INFO: IUT initialized ***"),
cs_4(33, ": INFO: IUT pseudonym changed ***"),
cs_11(58, ": INFO: Received unhandled/unknown UT message from IUT ***"),
cs_10(47, ": INFO: TEST COMPONENT NOW STOPPING ITSELF! ***"),
cs_12(61, ": INFO: Timeout while awaiting the reception of a message ***"),
cs_5(19, "DENM Trigger failed"),
cs_3(5, "error");
static const unsigned char module_checksum[] = { 0x34, 0xa4, 0xe5, 0x95, 0xb6, 0x16, 0x67, 0x37, 0x8e, 0x8d, 0x63, 0xeb, 0x67, 0x23, 0xe5, 0xe4 };

/* Class definitions for internal use */

class a__default_Default : public Default_Base {
public:
a__default_Default();
alt_status call_altstep();
};

class a__utDefault_Default : public Default_Base {
public:
a__utDefault_Default();
alt_status call_altstep();
};


/* Global variable definitions */

static BOOLEAN const_f__sendDenMessage_p__overrideSeqNo_defval;
const BOOLEAN& f__sendDenMessage_p__overrideSeqNo_defval = const_f__sendDenMessage_p__overrideSeqNo_defval;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsDenm_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

a__default_Default::a__default_Default()
 : Default_Base("a_default")
{
}

alt_status a__default_Default::call_altstep()
{
return a__default_instance();
}

a__utDefault_Default::a__utDefault_Default()
 : Default_Base("a_utDefault")
{
}

alt_status a__utDefault_Default::call_altstep()
{
return a__utDefault_instance();
}


/* Bodies of functions, altsteps and testcases */

void f__utInitializeIut(const LibItsCommon__TypesAndValues::UtInitialize_template& p__init)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 36, TTCN_Location::LOCATION_FUNCTION, "f_utInitializeIut");
current_location.update_lineno(37);
/* LibItsDenm_Functions.ttcn, line 37 */
LibItsCommon__TypesAndValues::UtInitializeResult v__UtInitializeResult;
current_location.update_lineno(38);
/* LibItsDenm_Functions.ttcn, line 38 */
v__UtInitializeResult.utInitializeResult() = TRUE;
current_location.update_lineno(40);
/* LibItsDenm_Functions.ttcn, line 40 */
LibItsDenm__TestSystem::ItsDenm_component_utPort.send(p__init);
current_location.update_lineno(41);
/* LibItsDenm_Functions.ttcn, line 41 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(42);
/* LibItsDenm_Functions.ttcn, line 42 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
alt_status tmp_1_alt_flag_2 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(43);
/* LibItsDenm_Functions.ttcn, line 43 */
tmp_1_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsCommon__TypesAndValues::UtInitializeResult_template(v__UtInitializeResult), NULL, any_compref, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(44);
/* LibItsDenm_Functions.ttcn, line 44 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(45);
/* LibItsDenm_Functions.ttcn, line 45 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(47);
/* LibItsDenm_Functions.ttcn, line 47 */
tmp_1_alt_flag_1 = a__utDefault_instance();
if (tmp_1_alt_flag_1 == ALT_REPEAT) goto tmp_1;
if (tmp_1_alt_flag_1 == ALT_BREAK) break;
if (tmp_1_alt_flag_1 == ALT_YES) break;
}
if (tmp_1_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(50);
/* LibItsDenm_Functions.ttcn, line 50 */
tmp_1_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_1_alt_flag_2 == ALT_YES) {
current_location.update_lineno(51);
/* LibItsDenm_Functions.ttcn, line 51 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(52);
/* LibItsDenm_Functions.ttcn, line 52 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(56);
/* LibItsDenm_Functions.ttcn, line 56 */
goto tmp_1;
}
}
}
}

void start_f__utInitializeIut(const COMPONENT& component_reference, const LibItsCommon__TypesAndValues::UtInitialize_template& p__init)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utInitializeIut(");
p__init.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_utInitializeIut", text_buf);
p__init.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__utChangePseudonym(const LibItsCommon__TypesAndValues::UtChangePseudonym_template& p__change)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 65, TTCN_Location::LOCATION_FUNCTION, "f_utChangePseudonym");
current_location.update_lineno(66);
/* LibItsDenm_Functions.ttcn, line 66 */
LibItsCommon__TypesAndValues::UtChangePseudonymResult v__UtChangePseudonymResult__true;
current_location.update_lineno(67);
/* LibItsDenm_Functions.ttcn, line 67 */
v__UtChangePseudonymResult__true.utChangePseudonymResult() = TRUE;
current_location.update_lineno(69);
/* LibItsDenm_Functions.ttcn, line 69 */
LibItsCommon__TypesAndValues::UtChangePseudonymResult v__UtChangePseudonymResult__false;
current_location.update_lineno(70);
/* LibItsDenm_Functions.ttcn, line 70 */
v__UtChangePseudonymResult__false.utChangePseudonymResult() = FALSE;
current_location.update_lineno(72);
/* LibItsDenm_Functions.ttcn, line 72 */
LibItsDenm__TestSystem::ItsDenm_component_utPort.send(p__change);
current_location.update_lineno(73);
/* LibItsDenm_Functions.ttcn, line 73 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(74);
/* LibItsDenm_Functions.ttcn, line 74 */
{
tmp_4:
alt_status tmp_4_alt_flag_0 = ALT_MAYBE;
alt_status tmp_4_alt_flag_1 = ALT_MAYBE;
alt_status tmp_4_alt_flag_2 = ALT_MAYBE;
alt_status tmp_4_alt_flag_3 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_4_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(75);
/* LibItsDenm_Functions.ttcn, line 75 */
tmp_4_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsCommon__TypesAndValues::UtChangePseudonymResult_template(v__UtChangePseudonymResult__true), NULL, any_compref, NULL);
if (tmp_4_alt_flag_0 == ALT_YES) {
current_location.update_lineno(76);
/* LibItsDenm_Functions.ttcn, line 76 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(77);
/* LibItsDenm_Functions.ttcn, line 77 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_4_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(79);
/* LibItsDenm_Functions.ttcn, line 79 */
tmp_4_alt_flag_1 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsCommon__TypesAndValues::UtChangePseudonymResult_template(v__UtChangePseudonymResult__false), NULL, any_compref, NULL);
if (tmp_4_alt_flag_1 == ALT_YES) {
current_location.update_lineno(80);
/* LibItsDenm_Functions.ttcn, line 80 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(81);
/* LibItsDenm_Functions.ttcn, line 81 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(82);
/* LibItsDenm_Functions.ttcn, line 82 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_4_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(84);
/* LibItsDenm_Functions.ttcn, line 84 */
tmp_4_alt_flag_2 = a__utDefault_instance();
if (tmp_4_alt_flag_2 == ALT_REPEAT) goto tmp_4;
if (tmp_4_alt_flag_2 == ALT_BREAK) break;
if (tmp_4_alt_flag_2 == ALT_YES) break;
}
if (tmp_4_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(87);
/* LibItsDenm_Functions.ttcn, line 87 */
tmp_4_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_4_alt_flag_3 == ALT_YES) {
current_location.update_lineno(88);
/* LibItsDenm_Functions.ttcn, line 88 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(89);
/* LibItsDenm_Functions.ttcn, line 89 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(93);
/* LibItsDenm_Functions.ttcn, line 93 */
goto tmp_4;
}
}
}
}

void start_f__utChangePseudonym(const COMPONENT& component_reference, const LibItsCommon__TypesAndValues::UtChangePseudonym_template& p__change)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utChangePseudonym(");
p__change.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_utChangePseudonym", text_buf);
p__change.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

ITS__Container::ActionID f__utTriggerEvent(const LibItsDenm__TypesAndValues::UtDenmTrigger_template& p__event)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 103, TTCN_Location::LOCATION_FUNCTION, "f_utTriggerEvent");
LibItsDenm__TypesAndValues::UtDenmTrigger_template p__event_shadow(p__event);
current_location.update_lineno(104);
/* LibItsDenm_Functions.ttcn, line 104 */
ITS__Container::ActionID v__actionId;
current_location.update_lineno(105);
/* LibItsDenm_Functions.ttcn, line 105 */
LibItsDenm__TypesAndValues::UtDenmTriggerResult v__result;
current_location.update_lineno(108);
/* LibItsDenm_Functions.ttcn, line 108 */
p__event_shadow.detectionTime() = 1000;
current_location.update_lineno(111);
/* LibItsDenm_Functions.ttcn, line 111 */
LibItsDenm__TestSystem::ItsDenm_component_utPort.send(p__event_shadow);
current_location.update_lineno(113);
/* LibItsDenm_Functions.ttcn, line 113 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(114);
/* LibItsDenm_Functions.ttcn, line 114 */
{
tmp_6:
alt_status tmp_6_alt_flag_0 = ALT_MAYBE;
alt_status tmp_6_alt_flag_1 = ALT_MAYBE;
alt_status tmp_6_alt_flag_2 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_6_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(115);
/* LibItsDenm_Functions.ttcn, line 115 */
tmp_6_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsDenm__TypesAndValues::UtDenmTriggerResult_template(ANY_VALUE), &(v__result), any_compref, NULL);
if (tmp_6_alt_flag_0 == ALT_YES) {
current_location.update_lineno(116);
/* LibItsDenm_Functions.ttcn, line 116 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(117);
/* LibItsDenm_Functions.ttcn, line 117 */
v__actionId = const_cast< const LibItsDenm__TypesAndValues::UtDenmTriggerResult&>(v__result).actionId();
current_location.update_lineno(118);
/* LibItsDenm_Functions.ttcn, line 118 */
if ((!(const_cast< const LibItsDenm__TypesAndValues::UtDenmTriggerResult&>(v__result).result()))) {
current_location.update_lineno(119);
/* LibItsDenm_Functions.ttcn, line 119 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_5, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_6_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(122);
/* LibItsDenm_Functions.ttcn, line 122 */
tmp_6_alt_flag_1 = a__utDefault_instance();
if (tmp_6_alt_flag_1 == ALT_REPEAT) goto tmp_6;
if (tmp_6_alt_flag_1 == ALT_BREAK) break;
if (tmp_6_alt_flag_1 == ALT_YES) break;
}
if (tmp_6_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(125);
/* LibItsDenm_Functions.ttcn, line 125 */
tmp_6_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_6_alt_flag_2 == ALT_YES) {
current_location.update_lineno(126);
/* LibItsDenm_Functions.ttcn, line 126 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(127);
/* LibItsDenm_Functions.ttcn, line 127 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(131);
/* LibItsDenm_Functions.ttcn, line 131 */
goto tmp_6;
}
}
}
current_location.update_lineno(135);
/* LibItsDenm_Functions.ttcn, line 135 */
return v__actionId;
}

void start_f__utTriggerEvent(const COMPONENT& component_reference, const LibItsDenm__TypesAndValues::UtDenmTrigger_template& p__event)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_utTriggerEvent", text_buf);
p__event.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

ITS__Container::ActionID f__utUpdateEvent(const LibItsDenm__TypesAndValues::UtDenmUpdate_template& p__event)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 142, TTCN_Location::LOCATION_FUNCTION, "f_utUpdateEvent");
current_location.update_lineno(143);
/* LibItsDenm_Functions.ttcn, line 143 */
ITS__Container::ActionID v__actionId;
current_location.update_lineno(144);
/* LibItsDenm_Functions.ttcn, line 144 */
LibItsDenm__TypesAndValues::UtDenmUpdateResult v__result;
current_location.update_lineno(146);
/* LibItsDenm_Functions.ttcn, line 146 */
LibItsDenm__TestSystem::ItsDenm_component_utPort.send(p__event);
current_location.update_lineno(147);
/* LibItsDenm_Functions.ttcn, line 147 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(148);
/* LibItsDenm_Functions.ttcn, line 148 */
{
tmp_8:
alt_status tmp_8_alt_flag_0 = ALT_MAYBE;
alt_status tmp_8_alt_flag_1 = ALT_MAYBE;
alt_status tmp_8_alt_flag_2 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_8_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(149);
/* LibItsDenm_Functions.ttcn, line 149 */
tmp_8_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsDenm__TypesAndValues::UtDenmUpdateResult_template(ANY_VALUE), &(v__result), any_compref, NULL);
if (tmp_8_alt_flag_0 == ALT_YES) {
current_location.update_lineno(150);
/* LibItsDenm_Functions.ttcn, line 150 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
current_location.update_lineno(151);
/* LibItsDenm_Functions.ttcn, line 151 */
v__actionId = const_cast< const LibItsDenm__TypesAndValues::UtDenmUpdateResult&>(v__result).actionId();
break;
}
}
if (tmp_8_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(153);
/* LibItsDenm_Functions.ttcn, line 153 */
tmp_8_alt_flag_1 = a__utDefault_instance();
if (tmp_8_alt_flag_1 == ALT_REPEAT) goto tmp_8;
if (tmp_8_alt_flag_1 == ALT_BREAK) break;
if (tmp_8_alt_flag_1 == ALT_YES) break;
}
if (tmp_8_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(156);
/* LibItsDenm_Functions.ttcn, line 156 */
tmp_8_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_8_alt_flag_2 == ALT_YES) {
current_location.update_lineno(157);
/* LibItsDenm_Functions.ttcn, line 157 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(158);
/* LibItsDenm_Functions.ttcn, line 158 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(162);
/* LibItsDenm_Functions.ttcn, line 162 */
goto tmp_8;
}
}
}
current_location.update_lineno(166);
/* LibItsDenm_Functions.ttcn, line 166 */
return v__actionId;
}

void start_f__utUpdateEvent(const COMPONENT& component_reference, const LibItsDenm__TypesAndValues::UtDenmUpdate_template& p__event)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utUpdateEvent(");
p__event.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_utUpdateEvent", text_buf);
p__event.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__utTerminateEvent(const LibItsDenm__TypesAndValues::UtDenmTermination_template& p__event)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 173, TTCN_Location::LOCATION_FUNCTION, "f_utTerminateEvent");
current_location.update_lineno(175);
/* LibItsDenm_Functions.ttcn, line 175 */
LibItsDenm__TestSystem::ItsDenm_component_utPort.send(p__event);
current_location.update_lineno(176);
/* LibItsDenm_Functions.ttcn, line 176 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(177);
/* LibItsDenm_Functions.ttcn, line 177 */
{
tmp_10:
alt_status tmp_10_alt_flag_0 = ALT_MAYBE;
alt_status tmp_10_alt_flag_1 = ALT_MAYBE;
alt_status tmp_10_alt_flag_2 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_10_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(178);
/* LibItsDenm_Functions.ttcn, line 178 */
tmp_10_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(BOOLEAN_template(ANY_VALUE), NULL, any_compref, NULL);
if (tmp_10_alt_flag_0 == ALT_YES) {
current_location.update_lineno(179);
/* LibItsDenm_Functions.ttcn, line 179 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
break;
}
}
if (tmp_10_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(181);
/* LibItsDenm_Functions.ttcn, line 181 */
tmp_10_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_10_alt_flag_1 == ALT_YES) {
current_location.update_lineno(182);
/* LibItsDenm_Functions.ttcn, line 182 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(183);
/* LibItsDenm_Functions.ttcn, line 183 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_10_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(185);
/* LibItsDenm_Functions.ttcn, line 185 */
tmp_10_alt_flag_2 = a__utDefault_instance();
if (tmp_10_alt_flag_2 == ALT_REPEAT) goto tmp_10;
if (tmp_10_alt_flag_2 == ALT_BREAK) break;
if (tmp_10_alt_flag_2 == ALT_YES) break;
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(190);
/* LibItsDenm_Functions.ttcn, line 190 */
goto tmp_10;
}
}
}
}

void start_f__utTerminateEvent(const COMPONENT& component_reference, const LibItsDenm__TypesAndValues::UtDenmTermination_template& p__event)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTerminateEvent(");
p__event.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_utTerminateEvent", text_buf);
p__event.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__utChangePosition(const LibItsCommon__TypesAndValues::UtChangePosition_template& p__position)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 201, TTCN_Location::LOCATION_FUNCTION, "f_utChangePosition");
current_location.update_lineno(203);
/* LibItsDenm_Functions.ttcn, line 203 */
LibItsDenm__TestSystem::ItsDenm_component_utPort.send(p__position);
current_location.update_lineno(204);
/* LibItsDenm_Functions.ttcn, line 204 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.start();
current_location.update_lineno(205);
/* LibItsDenm_Functions.ttcn, line 205 */
{
tmp_11:
alt_status tmp_11_alt_flag_0 = ALT_MAYBE;
alt_status tmp_11_alt_flag_1 = ALT_MAYBE;
alt_status tmp_11_alt_flag_2 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_11_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(206);
/* LibItsDenm_Functions.ttcn, line 206 */
tmp_11_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsCommon__TypesAndValues::UtChangePositionResult_template(ANY_VALUE), NULL, any_compref, NULL);
if (tmp_11_alt_flag_0 == ALT_YES) {
current_location.update_lineno(207);
/* LibItsDenm_Functions.ttcn, line 207 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.stop();
break;
}
}
if (tmp_11_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(209);
/* LibItsDenm_Functions.ttcn, line 209 */
tmp_11_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout();
if (tmp_11_alt_flag_1 == ALT_YES) {
current_location.update_lineno(210);
/* LibItsDenm_Functions.ttcn, line 210 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(211);
/* LibItsDenm_Functions.ttcn, line 211 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_11_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(213);
/* LibItsDenm_Functions.ttcn, line 213 */
tmp_11_alt_flag_2 = a__utDefault_instance();
if (tmp_11_alt_flag_2 == ALT_REPEAT) goto tmp_11;
if (tmp_11_alt_flag_2 == ALT_BREAK) break;
if (tmp_11_alt_flag_2 == ALT_YES) break;
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(218);
/* LibItsDenm_Functions.ttcn, line 218 */
goto tmp_11;
}
}
}
}

void start_f__utChangePosition(const COMPONENT& component_reference, const LibItsCommon__TypesAndValues::UtChangePosition_template& p__position)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utChangePosition(");
p__position.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_utChangePosition", text_buf);
p__position.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cfUp()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 230, TTCN_Location::LOCATION_FUNCTION, "f_cfUp");
current_location.update_lineno(232);
/* LibItsDenm_Functions.ttcn, line 232 */
TTCN_Runtime::map_port(self, LibItsDenm__TestSystem::ItsDenm_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(233);
/* LibItsDenm_Functions.ttcn, line 233 */
TTCN_Runtime::map_port(self, LibItsDenm__TestSystem::ItsDenm_component_denmPort.get_name(), SYSTEM_COMPREF, "denmPort");
current_location.update_lineno(234);
/* LibItsDenm_Functions.ttcn, line 234 */
LibCommon__Sync::f__connect4SelfOrClientSync();
}

void start_f__cfUp(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cfUp(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_cfUp", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cfDown()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 241, TTCN_Location::LOCATION_FUNCTION, "f_cfDown");
current_location.update_lineno(243);
/* LibItsDenm_Functions.ttcn, line 243 */
TTCN_Runtime::unmap_port(self, LibItsDenm__TestSystem::ItsDenm_component_utPort.get_name(), SYSTEM_COMPREF, "utPort");
current_location.update_lineno(244);
/* LibItsDenm_Functions.ttcn, line 244 */
TTCN_Runtime::unmap_port(self, LibItsDenm__TestSystem::ItsDenm_component_denmPort.get_name(), SYSTEM_COMPREF, "denmPort");
current_location.update_lineno(245);
/* LibItsDenm_Functions.ttcn, line 245 */
LibCommon__Sync::f__disconnect4SelfOrClientSync();
}

void start_f__cfDown(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cfDown(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_cfDown", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

alt_status a__default_instance()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 256, TTCN_Location::LOCATION_ALTSTEP, "a_default");
alt_status ret_val = ALT_NO;
current_location.update_lineno(257);
/* LibItsDenm_Functions.ttcn, line 257 */
switch (LibItsDenm__TestSystem::ItsDenm_component_denmPort.receive(LibItsDenm__Templates::mw__denmInd(LibItsDenm__Templates::mw__denmPdu(LibItsDenm__Templates::mw__anyDenm, LibItsDenm__Templates::mw__denmPdu_p__stationID_defval, LibItsDenm__Templates::mw__denmPdu_p__protocolVersion_defval, LibItsDenm__Templates::mw__denmPdu_p__messageID_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(258);
/* LibItsDenm_Functions.ttcn, line 258 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(259);
/* LibItsDenm_Functions.ttcn, line 259 */
LibItsDenm__TestSystem::ItsDenm_component_vc__denmReceived = TRUE;
current_location.update_lineno(260);
/* LibItsDenm_Functions.ttcn, line 260 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(262);
/* LibItsDenm_Functions.ttcn, line 262 */
switch (LibItsDenm__TestSystem::ItsDenm_component_denmPort.receive(any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(263);
/* LibItsDenm_Functions.ttcn, line 263 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(264);
/* LibItsDenm_Functions.ttcn, line 264 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__error);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(266);
/* LibItsDenm_Functions.ttcn, line 266 */
switch (LibItsCommon__TestSystem::ItsBaseComponent_component_tc__wait.timeout()) {
case ALT_YES:
{
current_location.update_lineno(267);
/* LibItsDenm_Functions.ttcn, line 267 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_8).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(268);
/* LibItsDenm_Functions.ttcn, line 268 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(270);
/* LibItsDenm_Functions.ttcn, line 270 */
switch (LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout()) {
case ALT_YES:
{
current_location.update_lineno(271);
/* LibItsDenm_Functions.ttcn, line 271 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_9).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(272);
/* LibItsDenm_Functions.ttcn, line 272 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(274);
/* LibItsDenm_Functions.ttcn, line 274 */
switch (LibCommon__Sync::a__shutdown_instance()) {
case ALT_YES:
{
current_location.update_lineno(275);
/* LibItsDenm_Functions.ttcn, line 275 */
f__poDefault();
current_location.update_lineno(276);
/* LibItsDenm_Functions.ttcn, line 276 */
f__cfDown();
current_location.update_lineno(277);
/* LibItsDenm_Functions.ttcn, line 277 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_10).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(278);
/* LibItsDenm_Functions.ttcn, line 278 */
TTCN_Runtime::stop_execution();
}
case ALT_REPEAT:
return ALT_REPEAT;
case ALT_BREAK:
return ALT_BREAK;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_default.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__default()
{
return new a__default_Default();
}

alt_status a__utDefault_instance()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 285, TTCN_Location::LOCATION_ALTSTEP, "a_utDefault");
current_location.update_lineno(286);
/* LibItsDenm_Functions.ttcn, line 286 */
LibItsDenm__TypesAndValues::UtDenmEventInd v__event;
alt_status ret_val = ALT_NO;
current_location.update_lineno(287);
/* LibItsDenm_Functions.ttcn, line 287 */
switch (LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(LibItsDenm__TypesAndValues::UtDenmEventInd_template(ANY_VALUE), &(v__event), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(289);
/* LibItsDenm_Functions.ttcn, line 289 */
LibItsDenm__TestSystem::ItsDenm_component_vc__utEvents[LibItsDenm__TestSystem::ItsDenm_component_vc__utEvents.lengthof()] = v__event;
current_location.update_lineno(290);
/* LibItsDenm_Functions.ttcn, line 290 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(292);
/* LibItsDenm_Functions.ttcn, line 292 */
switch (LibItsDenm__TestSystem::ItsDenm_component_utPort.receive(any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(293);
/* LibItsDenm_Functions.ttcn, line 293 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_11).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(294);
/* LibItsDenm_Functions.ttcn, line 294 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__utDefault()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__utDefault_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_utDefault.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__utDefault()
{
return new a__utDefault_Default();
}

void f__prDefault()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 305, TTCN_Location::LOCATION_FUNCTION, "f_prDefault");
current_location.update_lineno(306);
/* LibItsDenm_Functions.ttcn, line 306 */
LibItsDenm__TestSystem::ItsDenm_component_vc__default = activate_a__default();
current_location.update_lineno(307);
/* LibItsDenm_Functions.ttcn, line 307 */
activate_a__utDefault();
}

void start_f__prDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_prDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__prInitialState()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 314, TTCN_Location::LOCATION_FUNCTION, "f_prInitialState");
current_location.update_lineno(315);
/* LibItsDenm_Functions.ttcn, line 315 */
LibCommon__VerdictControl::FncRetCode v__ret(LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(317);
/* LibItsDenm_Functions.ttcn, line 317 */
f__utInitializeIut(LibItsDenm__Templates::m__denmInitialize);
current_location.update_lineno(319);
/* LibItsDenm_Functions.ttcn, line 319 */
f__prDefault();
current_location.update_lineno(321);
/* LibItsDenm_Functions.ttcn, line 321 */
return v__ret;
}

void start_f__prInitialState(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prInitialState(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_prInitialState", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__poDefault()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 331, TTCN_Location::LOCATION_FUNCTION, "f_poDefault");
current_location.update_lineno(332);
/* LibItsDenm_Functions.ttcn, line 332 */
LibCommon__VerdictControl::FncRetCode v__ret(LibCommon__VerdictControl::FncRetCode::e__success);
}

void start_f__poDefault(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poDefault(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_poDefault", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__poCancelEvent(const LibItsDenm__TypesAndValues::Trigger_template& p__trigger, const ITS__Container::ActionID_template& p__actionId)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 342, TTCN_Location::LOCATION_FUNCTION, "f_poCancelEvent");
current_location.update_lineno(344);
/* LibItsDenm_Functions.ttcn, line 344 */
LibCommon__VerdictControl::FncRetCode v__ret(LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(346);
/* LibItsDenm_Functions.ttcn, line 346 */
if ((p__trigger.valueof() == LibItsDenm__TypesAndValues::Trigger::e__ets)) {
current_location.update_lineno(347);
/* LibItsDenm_Functions.ttcn, line 347 */
f__sendDenMessage(LibItsDenm__Templates::m__denmCancellation(p__actionId, INTEGER_template(LibItsCommon__Functions::f__getTsStationType())), f__sendDenMessage_p__overrideSeqNo_defval);
current_location.update_lineno(348);
/* LibItsDenm_Functions.ttcn, line 348 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TNOAC);
}
else {
current_location.update_lineno(351);
/* LibItsDenm_Functions.ttcn, line 351 */
f__utTerminateEvent(LibItsDenm__Templates::m__utEventCancellation(p__actionId));
}
current_location.update_lineno(354);
/* LibItsDenm_Functions.ttcn, line 354 */
f__poDefault();
}

void start_f__poCancelEvent(const COMPONENT& component_reference, const LibItsDenm__TypesAndValues::Trigger_template& p__trigger, const ITS__Container::ActionID_template& p__actionId)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poCancelEvent(");
p__trigger.log();
TTCN_Logger::log_event_str(", ");
p__actionId.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_poCancelEvent", text_buf);
p__trigger.encode_text(text_buf);
p__actionId.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

ITS__Container::ActionID f__sendDenMessage(const DENM__PDU__Descriptions::DecentralizedEnvironmentalNotificationMessage_template& p__denm, const BOOLEAN& p__overrideSeqNo)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 366, TTCN_Location::LOCATION_FUNCTION, "f_sendDenMessage");
DENM__PDU__Descriptions::DecentralizedEnvironmentalNotificationMessage_template p__denm_shadow(p__denm);
current_location.update_lineno(368);
/* LibItsDenm_Functions.ttcn, line 368 */
if (p__overrideSeqNo) {
current_location.update_lineno(369);
/* LibItsDenm_Functions.ttcn, line 369 */
p__denm_shadow.management().actionID().sequenceNumber() = LibItsDenm__TestSystem::ItsDenm_component_vc__sequenceNo;
}
current_location.update_lineno(372);
/* LibItsDenm_Functions.ttcn, line 372 */
LibItsDenm__TestSystem::ItsDenm_component_denmPort.send(LibItsDenm__Templates::m__denmReq(LibItsDenm__Templates::m__denmPdu(p__denm_shadow)));
current_location.update_lineno(380);
/* LibItsDenm_Functions.ttcn, line 380 */
return p__denm_shadow.management().actionID().valueof();
}

void start_f__sendDenMessage(const COMPONENT& component_reference, const DENM__PDU__Descriptions::DecentralizedEnvironmentalNotificationMessage_template& p__denm, const BOOLEAN& p__overrideSeqNo)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendDenMessage(");
p__denm.log();
TTCN_Logger::log_event_str(", ");
p__overrideSeqNo.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsDenm_Functions", "f_sendDenMessage", text_buf);
p__denm.encode_text(text_buf);
p__overrideSeqNo.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__awaitDenMessage(const LibItsDenm__TestSystem::DenmInd_template& p__rcvMsg, LibItsDenm__TestSystem::DenmInd& p__rcvdMsg)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 392, TTCN_Location::LOCATION_FUNCTION, "f_awaitDenMessage");
p__rcvdMsg.clean_up();
current_location.update_lineno(394);
/* LibItsDenm_Functions.ttcn, line 394 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(395);
/* LibItsDenm_Functions.ttcn, line 395 */
{
tmp_16:
alt_status tmp_16_alt_flag_0 = ALT_MAYBE;
alt_status tmp_16_alt_flag_1 = ALT_MAYBE;
alt_status tmp_16_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_16_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(396);
/* LibItsDenm_Functions.ttcn, line 396 */
tmp_16_alt_flag_0 = LibItsDenm__TestSystem::ItsDenm_component_denmPort.receive(p__rcvMsg, &(p__rcvdMsg), any_compref, NULL);
if (tmp_16_alt_flag_0 == ALT_YES) {
current_location.update_lineno(397);
/* LibItsDenm_Functions.ttcn, line 397 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
break;
}
}
if (tmp_16_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(399);
/* LibItsDenm_Functions.ttcn, line 399 */
tmp_16_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_16_alt_flag_1 == ALT_YES) {
current_location.update_lineno(400);
/* LibItsDenm_Functions.ttcn, line 400 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_12).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(401);
/* LibItsDenm_Functions.ttcn, line 401 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_3, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_16_default_flag == ALT_MAYBE) {
tmp_16_default_flag = TTCN_Default::try_altsteps();
if (tmp_16_default_flag == ALT_YES || tmp_16_default_flag == ALT_BREAK) break;
else if (tmp_16_default_flag == ALT_REPEAT) goto tmp_16;
}
current_location.update_lineno(395);
/* LibItsDenm_Functions.ttcn, line 395 */
if (tmp_16_alt_flag_0 == ALT_NO && tmp_16_alt_flag_1 == ALT_NO && tmp_16_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsDenm_Functions.ttcn between lines 395 and 403.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

INTEGER f__increaseSequenceNumber(const INTEGER& p__sequenceNumber)
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 416, TTCN_Location::LOCATION_FUNCTION, "f_increaseSequenceNumber");
current_location.update_lineno(418);
/* LibItsDenm_Functions.ttcn, line 418 */
return mod((p__sequenceNumber + 1), 65536);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsDenm_Functions");
LibItsDenm__Templates::module_object.pre_init_module();
module_object.add_function("f_utInitializeIut", (genericfunc_t)&f__utInitializeIut, (genericfunc_t)&start_f__utInitializeIut);
module_object.add_function("f_utChangePseudonym", (genericfunc_t)&f__utChangePseudonym, (genericfunc_t)&start_f__utChangePseudonym);
module_object.add_function("f_utTriggerEvent", (genericfunc_t)&f__utTriggerEvent, (genericfunc_t)&start_f__utTriggerEvent);
module_object.add_function("f_utUpdateEvent", (genericfunc_t)&f__utUpdateEvent, (genericfunc_t)&start_f__utUpdateEvent);
module_object.add_function("f_utTerminateEvent", (genericfunc_t)&f__utTerminateEvent, (genericfunc_t)&start_f__utTerminateEvent);
module_object.add_function("f_utChangePosition", (genericfunc_t)&f__utChangePosition, (genericfunc_t)&start_f__utChangePosition);
module_object.add_function("f_cfUp", (genericfunc_t)&f__cfUp, (genericfunc_t)&start_f__cfUp);
module_object.add_function("f_cfDown", (genericfunc_t)&f__cfDown, (genericfunc_t)&start_f__cfDown);
module_object.add_altstep("a_default", (genericfunc_t)&a__default_instance, (genericfunc_t )&activate_a__default, (genericfunc_t )&a__default);
module_object.add_altstep("a_utDefault", (genericfunc_t)&a__utDefault_instance, (genericfunc_t )&activate_a__utDefault, (genericfunc_t )&a__utDefault);
module_object.add_function("f_prDefault", (genericfunc_t)&f__prDefault, (genericfunc_t)&start_f__prDefault);
module_object.add_function("f_prInitialState", (genericfunc_t)&f__prInitialState, (genericfunc_t)&start_f__prInitialState);
module_object.add_function("f_poDefault", (genericfunc_t)&f__poDefault, (genericfunc_t)&start_f__poDefault);
module_object.add_function("f_poCancelEvent", (genericfunc_t)&f__poCancelEvent, (genericfunc_t)&start_f__poCancelEvent);
module_object.add_function("f_sendDenMessage", (genericfunc_t)&f__sendDenMessage, (genericfunc_t)&start_f__sendDenMessage);
module_object.add_function("f_awaitDenMessage", (genericfunc_t)&f__awaitDenMessage, NULL);
module_object.add_function("f_increaseSequenceNumber", (genericfunc_t)&f__increaseSequenceNumber, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("LibItsDenm_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsDenm_Functions");
LibItsDenm__Templates::module_object.post_init_module();
const_f__sendDenMessage_p__overrideSeqNo_defval = TRUE;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_utInitializeIut")) {
LibItsCommon__TypesAndValues::UtInitialize_template p__init;
p__init.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utInitializeIut(");
p__init.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utInitializeIut(p__init);
TTCN_Runtime::function_finished("f_utInitializeIut");
return TRUE;
} else if (!strcmp(function_name, "f_utChangePseudonym")) {
LibItsCommon__TypesAndValues::UtChangePseudonym_template p__change;
p__change.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utChangePseudonym(");
p__change.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utChangePseudonym(p__change);
TTCN_Runtime::function_finished("f_utChangePseudonym");
return TRUE;
} else if (!strcmp(function_name, "f_utTriggerEvent")) {
LibItsDenm__TypesAndValues::UtDenmTrigger_template p__event;
p__event.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTriggerEvent(");
p__event.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utTriggerEvent(p__event);
TTCN_Runtime::function_finished("f_utTriggerEvent");
return TRUE;
} else if (!strcmp(function_name, "f_utUpdateEvent")) {
LibItsDenm__TypesAndValues::UtDenmUpdate_template p__event;
p__event.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utUpdateEvent(");
p__event.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utUpdateEvent(p__event);
TTCN_Runtime::function_finished("f_utUpdateEvent");
return TRUE;
} else if (!strcmp(function_name, "f_utTerminateEvent")) {
LibItsDenm__TypesAndValues::UtDenmTermination_template p__event;
p__event.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utTerminateEvent(");
p__event.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utTerminateEvent(p__event);
TTCN_Runtime::function_finished("f_utTerminateEvent");
return TRUE;
} else if (!strcmp(function_name, "f_utChangePosition")) {
LibItsCommon__TypesAndValues::UtChangePosition_template p__position;
p__position.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_utChangePosition(");
p__position.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__utChangePosition(p__position);
TTCN_Runtime::function_finished("f_utChangePosition");
return TRUE;
} else if (!strcmp(function_name, "f_cfUp")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cfUp().");
TTCN_Runtime::function_started(function_arguments);
f__cfUp();
TTCN_Runtime::function_finished("f_cfUp");
return TRUE;
} else if (!strcmp(function_name, "f_cfDown")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cfDown().");
TTCN_Runtime::function_started(function_arguments);
f__cfDown();
TTCN_Runtime::function_finished("f_cfDown");
return TRUE;
} else if (!strcmp(function_name, "f_prDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prDefault().");
TTCN_Runtime::function_started(function_arguments);
f__prDefault();
TTCN_Runtime::function_finished("f_prDefault");
return TRUE;
} else if (!strcmp(function_name, "f_prInitialState")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prInitialState().");
TTCN_Runtime::function_started(function_arguments);
f__prInitialState();
TTCN_Runtime::function_finished("f_prInitialState");
return TRUE;
} else if (!strcmp(function_name, "f_poDefault")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_poDefault().");
TTCN_Runtime::function_started(function_arguments);
f__poDefault();
TTCN_Runtime::function_finished("f_poDefault");
return TRUE;
} else if (!strcmp(function_name, "f_poCancelEvent")) {
LibItsDenm__TypesAndValues::Trigger_template p__trigger;
ITS__Container::ActionID_template p__actionId;
p__trigger.decode_text(function_arguments);
p__actionId.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poCancelEvent(");
p__trigger.log();
TTCN_Logger::log_event_str(", ");
p__actionId.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__poCancelEvent(p__trigger, p__actionId);
TTCN_Runtime::function_finished("f_poCancelEvent");
return TRUE;
} else if (!strcmp(function_name, "f_sendDenMessage")) {
DENM__PDU__Descriptions::DecentralizedEnvironmentalNotificationMessage_template p__denm;
BOOLEAN p__overrideSeqNo;
p__denm.decode_text(function_arguments);
p__overrideSeqNo.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendDenMessage(");
p__denm.log();
TTCN_Logger::log_event_str(", ");
p__overrideSeqNo.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sendDenMessage(p__denm, p__overrideSeqNo);
TTCN_Runtime::function_finished("f_sendDenMessage");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
