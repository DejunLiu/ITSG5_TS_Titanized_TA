// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "ItsCam_TpFunctions.hh"

namespace ItsCam__TpFunctions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const CHARSTRING cs_22(4, " ***"),
cs_0(4, "*** "),
cs_21(17, ": Checking INFO=="),
cs_26(36, ": Checking INFO==Curvature value ***"),
cs_59(42, ": Checking INFO==Drive direction value ***"),
cs_57(34, ": Checking INFO==Heading value ***"),
cs_58(32, ": Checking INFO==Speed value ***"),
cs_60(35, ": Checking INFO==Yaw rate value ***"),
cs_62(21, ": Expected template: "),
cs_85(48, ": FAIL: Anticipated CAM message not received ***"),
cs_83(68, ": FAIL: Anticipated CAM message received BEFORE T_GenCam expired ***"),
cs_80(36, ": FAIL: CAM message not received ***"),
cs_88(43, ": FAIL: CAM message not received in time***"),
cs_69(87, ": FAIL: CAM message received BEFORE expiry of the minimum generation timer interval ***"),
cs_100(50, ": FAIL: CAM was not transmitted to upper layer ***"),
cs_5(45, ": FAIL: Expected CAM message not received ***"),
cs_97(96, ": FAIL: Expected CAM message received encapsulted in GN packet with incorrect lifetime value ***"),
cs_91(79, ": FAIL: Expected CAM message received, but not encapsulated in BTP-B packet ***"),
cs_94(77, ": FAIL: Expected CAM message received, but not encapsulated in SHB packet ***"),
cs_78(67, ": FAIL: Next CAM message not received AFTER T_GenCamMax expired ***"),
cs_76(64, ": FAIL: Next CAM message received BEFORE T_GenCamMax expired ***"),
cs_71(90, ": FAIL: No CAM message received BEFORE expiry of the maximum generation timer interval ***"),
cs_10(53, ": FAIL: No LowFrequency container in received CAM ***"),
cs_17(55, ": FAIL: No SpecialVehicle container in received CAM ***"),
cs_3(38, ": INCONC: CAM message not received ***"),
cs_73(71, ": INCONC: Initial conditions:  Condition 1 CAM message not received ***"),
cs_82(70, ": INCONC: Initial conditions: Anticipated CAM message not received ***"),
cs_7(58, ": INCONC: Initial conditions: CAM message not received ***"),
cs_74(46, ": INCONC: Initial conditions: Condition 2 CAM#"),
cs_23(104, ": INCONC: Invalid testcase configuration: Number of event triggers and expected CAM messages differs ***"),
cs_93(48, ": INCONC: no GN HT/HST information in CamInd ***"),
cs_90(44, ": INCONC: no GN NH information in CamInd ***"),
cs_95(50, ": INCONC: no GN lifetime information in CamInd ***"),
cs_11(57, ": INFO: CAM retransmission w/o LowFrequency container ***"),
cs_18(59, ": INFO: CAM retransmission w/o SpecialVehicle container ***"),
cs_9(58, ": INFO: CAM retransmission with LowFrequency container ***"),
cs_16(60, ": INFO: CAM retransmission with SpecialVehicle container ***"),
cs_81(64, ": INFO: Initial conditions: Anticipated CAM message received ***"),
cs_72(64, ": INFO: Initial conditions: Condition 1 CAM message received ***"),
cs_75(44, ": INFO: Initial conditions: Condition 2 CAM#"),
cs_6(58, ": INFO: Initial conditions: First CAM message received ***"),
cs_12(57, ": INFO: Next CAM shall contain LowFrequency container ***"),
cs_19(59, ": INFO: Next CAM shall contain SpecialVehicle container ***"),
cs_8(83, ": INFO: The subset of CAM messages including lowFrequencyContainer was received ***"),
cs_15(85, ": INFO: The subset of CAM messages including specialVehicleContainer was received ***"),
cs_84(44, ": PASS: Anticipated CAM message received ***"),
cs_79(32, ": PASS: CAM message received ***"),
cs_87(39, ": PASS: CAM message received in time***"),
cs_99(46, ": PASS: CAM was transmitted to upper layer ***"),
cs_92(68, ": PASS: Expected CAM message encapsulated in SHB packet received ***"),
cs_89(71, ": PASS: Expected CAM message encapsultated in BTP-B packet received ***"),
cs_2(41, ": PASS: Expected CAM message received ***"),
cs_96(94, ": PASS: Expected CAM message received encapsulted in GN packet with correct lifetime value ***"),
cs_20(87, ": PASS: Generation of CAM messages including SpecialVehicleContainer was successful ***"),
cs_13(85, ": PASS: Generation of CAM messages including lowFrequencyContainer was successful ***"),
cs_70(53, ": PASS: Generation of CAM messages was successful ***"),
cs_77(63, ": PASS: Next CAM message received AFTER T_GenCamMax expired ***"),
cs_86(68, ": PICS_CAM_GENERATION amd PICS_RSU required for executing the TC ***"),
cs_4(72, ": PICS_CAM_GENERATION and not PICS_RSU required for executing the TC ***"),
cs_1(55, ": PICS_CAM_GENERATION required for executing the TC ***"),
cs_98(54, ": PICS_CAM_RECEPTION required for executing the TC ***"),
cs_64(77, ": PICS_SPECIALVEHICLECONTAINER and PICS_DANGEROUSGOODS need to be set to true"),
cs_67(72, ": PICS_SPECIALVEHICLECONTAINER and PICS_EMERGENCY need to be set to true"),
cs_61(74, ": PICS_SPECIALVEHICLECONTAINER and PICS_PUBLICTRANS need to be set to true"),
cs_66(69, ": PICS_SPECIALVEHICLECONTAINER and PICS_RESCUE need to be set to true"),
cs_65(72, ": PICS_SPECIALVEHICLECONTAINER and PICS_ROADWORKS need to be set to true"),
cs_68(73, ": PICS_SPECIALVEHICLECONTAINER and PICS_SAFETY_CAR need to be set to true"),
cs_63(75, ": PICS_SPECIALVEHICLECONTAINER and PICS_SPECIALTRANS need to be set to true"),
cs_14(54, ": PICS_SPECIALVEHICLECONTAINER needs to be set to true"),
cs_24(49, ": PRECONDITION: Expected CAM message received ***"),
cs_35(19, "ACC being activated"),
cs_36(21, "ACC being deactivated"),
cs_27(27, "Brake pedal being activated"),
cs_28(29, "Brake pedal being deactivated"),
cs_33(33, "Collision warning being activated"),
cs_34(35, "Collision warning being deactivated"),
cs_37(30, "Cruise control being activated"),
cs_38(32, "Cruise control being deactivated"),
cs_49(38, "Daytime running lights being activated"),
cs_50(40, "Daytime running lights being deactivated"),
cs_31(31, "Emergency brake being activated"),
cs_32(33, "Emergency brake being deactivated"),
cs_53(26, "Fog lights being activated"),
cs_54(28, "Fog lights being deactivated"),
cs_29(25, "Gas pedal being activated"),
cs_30(27, "Gas pedal being deactivated"),
cs_43(36, "High beam headlights being activated"),
cs_44(38, "High beam headlights being deactivated"),
cs_45(32, "Left turn signal being activated"),
cs_46(34, "Left turn signal being deactivated"),
cs_41(35, "Low beam headlights being activated"),
cs_42(37, "Low beam headlights being deactivated"),
cs_55(30, "Parking lights being activated"),
cs_56(32, "Parking lights being deactivated"),
cs_52(32, "Reverese light being deactivated"),
cs_51(29, "Reverse light being activated"),
cs_47(33, "Right turn signal being activated"),
cs_48(35, "Right turn signal being deactivated"),
cs_39(29, "Speed limiter being activated"),
cs_40(39, "Speed limiter control being deactivated"),
cs_25(35, "c required for executing the TC ***");
static const unsigned char module_checksum[] = { 0xf9, 0x98, 0xbb, 0x8f, 0x21, 0xcb, 0x22, 0x1c, 0x8a, 0xfc, 0x6d, 0x8c, 0x45, 0x35, 0x83, 0x72 };

/* Global variable definitions */

// No XER for UtCamTriggers
const TTCN_Typedescriptor_t UtCamTriggers_descr_ = { "@ItsCam_TpFunctions.UtCamTriggers", NULL, NULL, NULL, NULL, NULL, &LibItsCam__TypesAndValues::UtCamTrigger_descr_, TTCN_Typedescriptor_t::DONTCARE };
// No XER for CamPdus
const TTCN_Typedescriptor_t CamPdus_descr_ = { "@ItsCam_TpFunctions.CamPdus", NULL, NULL, NULL, NULL, NULL, &CAM__PDU__Descriptions::CAM_descr_, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 0;
TTCN_Module module_object("ItsCam_TpFunctions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const LibItsCam__TypesAndValues::UtCamTrigger UtCamTriggers::UNBOUND_ELEM;
UtCamTriggers::UtCamTriggers()
{
val_ptr = NULL;
}

UtCamTriggers::UtCamTriggers(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

UtCamTriggers::UtCamTriggers(const UtCamTriggers& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

UtCamTriggers::~UtCamTriggers()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void UtCamTriggers::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

UtCamTriggers& UtCamTriggers::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

UtCamTriggers& UtCamTriggers::operator=(const UtCamTriggers& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean UtCamTriggers::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
return val_ptr->n_elements == 0 ;
}

boolean UtCamTriggers::operator==(const UtCamTriggers& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

LibItsCam__TypesAndValues::UtCamTrigger& UtCamTriggers::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @ItsCam_TpFunctions.UtCamTriggers using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (LibItsCam__TypesAndValues::UtCamTrigger**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new LibItsCam__TypesAndValues::UtCamTrigger;
}
return *val_ptr->value_elements[index_value];
}

LibItsCam__TypesAndValues::UtCamTrigger& UtCamTriggers::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ItsCam_TpFunctions.UtCamTriggers.");
return (*this)[(int)index_value];
}

const LibItsCam__TypesAndValues::UtCamTrigger& UtCamTriggers::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (index_value < 0) TTCN_error("Accessing an element of type @ItsCam_TpFunctions.UtCamTriggers using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @ItsCam_TpFunctions.UtCamTriggers: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const LibItsCam__TypesAndValues::UtCamTrigger& UtCamTriggers::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ItsCam_TpFunctions.UtCamTriggers.");
return (*this)[(int)index_value];
}

UtCamTriggers UtCamTriggers::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

UtCamTriggers UtCamTriggers::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

UtCamTriggers UtCamTriggers::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

UtCamTriggers UtCamTriggers::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
UtCamTriggers ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new LibItsCam__TypesAndValues::UtCamTrigger(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

UtCamTriggers UtCamTriggers::operator+(const UtCamTriggers& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @ItsCam_TpFunctions.UtCamTriggers concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
UtCamTriggers ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new LibItsCam__TypesAndValues::UtCamTrigger(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new LibItsCam__TypesAndValues::UtCamTrigger(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

UtCamTriggers UtCamTriggers::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@ItsCam_TpFunctions.UtCamTriggers","element");
UtCamTriggers ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new LibItsCam__TypesAndValues::UtCamTrigger(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

UtCamTriggers UtCamTriggers::replace(int index, int len, const UtCamTriggers& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
check_replace_arguments(val_ptr->n_elements, index, len, "@ItsCam_TpFunctions.UtCamTriggers","element");
UtCamTriggers ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new LibItsCam__TypesAndValues::UtCamTrigger(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new LibItsCam__TypesAndValues::UtCamTrigger(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new LibItsCam__TypesAndValues::UtCamTrigger(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

UtCamTriggers UtCamTriggers::replace(int index, int len, const UtCamTriggers_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void UtCamTriggers::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @ItsCam_TpFunctions.UtCamTriggers.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (LibItsCam__TypesAndValues::UtCamTrigger**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (LibItsCam__TypesAndValues::UtCamTrigger**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @ItsCam_TpFunctions.UtCamTriggers: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (LibItsCam__TypesAndValues::UtCamTrigger**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean UtCamTriggers::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int UtCamTriggers::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
return val_ptr->n_elements;
}

int UtCamTriggers::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void UtCamTriggers::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void UtCamTriggers::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@ItsCam_TpFunctions.UtCamTriggers'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List:
      set_size(mp->get_size());
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@ItsCam_TpFunctions.UtCamTriggers");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@ItsCam_TpFunctions.UtCamTriggers");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

Module_Param* UtCamTriggers::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of type `@ItsCam_TpFunctions.UtCamTriggers'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Vector<Module_Param*> values;
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    values.push_back((*this)[i].get_param(param_name));
  }
  Module_Param_Value_List* mp = new Module_Param_Value_List();
  mp->add_list_with_implicit_ids(&values);
  values.clear();
  return mp;
}

void UtCamTriggers::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void UtCamTriggers::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void UtCamTriggers::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @ItsCam_TpFunctions.UtCamTriggers.");
val_ptr->value_elements = (LibItsCam__TypesAndValues::UtCamTrigger**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void UtCamTriggers_template::copy_value(const UtCamTriggers& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @ItsCam_TpFunctions.UtCamTriggers with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (LibItsCam__TypesAndValues::UtCamTrigger_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void UtCamTriggers_template::copy_template(const UtCamTriggers_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (LibItsCam__TypesAndValues::UtCamTrigger_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new UtCamTriggers_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ItsCam_TpFunctions.UtCamTriggers.");
break;
}
set_selection(other_value);
}

boolean UtCamTriggers_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const UtCamTriggers_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const UtCamTriggers*)value_ptr)[value_index], legacy);
else return ((const UtCamTriggers_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

UtCamTriggers_template::UtCamTriggers_template()
{
}

UtCamTriggers_template::UtCamTriggers_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

UtCamTriggers_template::UtCamTriggers_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

UtCamTriggers_template::UtCamTriggers_template(const UtCamTriggers& other_value)
{
copy_value(other_value);
}

UtCamTriggers_template::UtCamTriggers_template(const OPTIONAL<UtCamTriggers>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtCamTriggers&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ItsCam_TpFunctions.UtCamTriggers from an unbound optional field.");
}
}

UtCamTriggers_template::UtCamTriggers_template(const UtCamTriggers_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

UtCamTriggers_template::~UtCamTriggers_template()
{
clean_up();
}

void UtCamTriggers_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

UtCamTriggers_template& UtCamTriggers_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

UtCamTriggers_template& UtCamTriggers_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

UtCamTriggers_template& UtCamTriggers_template::operator=(const UtCamTriggers& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

UtCamTriggers_template& UtCamTriggers_template::operator=(const OPTIONAL<UtCamTriggers>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const UtCamTriggers&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ItsCam_TpFunctions.UtCamTriggers.");
}
return *this;
}

UtCamTriggers_template& UtCamTriggers_template::operator=(const UtCamTriggers_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

LibItsCam__TypesAndValues::UtCamTrigger_template& UtCamTriggers_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ItsCam_TpFunctions.UtCamTriggers using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @ItsCam_TpFunctions.UtCamTriggers.");
    break;
}
return *single_value.value_elements[index_value];
}

LibItsCam__TypesAndValues::UtCamTrigger_template& UtCamTriggers_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ItsCam_TpFunctions.UtCamTriggers.");
return (*this)[(int)index_value];
}

const LibItsCam__TypesAndValues::UtCamTrigger_template& UtCamTriggers_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ItsCam_TpFunctions.UtCamTriggers using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @ItsCam_TpFunctions.UtCamTriggers.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @ItsCam_TpFunctions.UtCamTriggers: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const LibItsCam__TypesAndValues::UtCamTrigger_template& UtCamTriggers_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ItsCam_TpFunctions.UtCamTriggers.");
return (*this)[(int)index_value];
}

void UtCamTriggers_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @ItsCam_TpFunctions.UtCamTriggers.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (LibItsCam__TypesAndValues::UtCamTrigger_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (LibItsCam__TypesAndValues::UtCamTrigger_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int UtCamTriggers_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int UtCamTriggers_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.UtCamTriggers which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.UtCamTriggers containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.UtCamTriggers containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.UtCamTriggers containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.UtCamTriggers containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.UtCamTriggers containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @ItsCam_TpFunctions.UtCamTriggers.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @ItsCam_TpFunctions.UtCamTriggers");
}

boolean UtCamTriggers_template::match(const UtCamTriggers& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @ItsCam_TpFunctions.UtCamTriggers.");
}
return FALSE;
}

boolean UtCamTriggers_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

UtCamTriggers UtCamTriggers_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @ItsCam_TpFunctions.UtCamTriggers.");
UtCamTriggers ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

UtCamTriggers UtCamTriggers_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

UtCamTriggers UtCamTriggers_template::replace(int index, int len, const UtCamTriggers_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

UtCamTriggers UtCamTriggers_template::replace(int index, int len, const UtCamTriggers& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void UtCamTriggers_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new UtCamTriggers_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @ItsCam_TpFunctions.UtCamTriggers.");
}
set_selection(template_type);
}

UtCamTriggers_template& UtCamTriggers_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @ItsCam_TpFunctions.UtCamTriggers.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @ItsCam_TpFunctions.UtCamTriggers.");
return value_list.list_value[list_index];
}

void UtCamTriggers_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void UtCamTriggers_template::log_match(const UtCamTriggers& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void UtCamTriggers_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ItsCam_TpFunctions.UtCamTriggers.");
}
}

void UtCamTriggers_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @ItsCam_TpFunctions.UtCamTriggers.");
single_value.value_elements = (LibItsCam__TypesAndValues::UtCamTrigger_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new LibItsCam__TypesAndValues::UtCamTrigger_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new UtCamTriggers_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @ItsCam_TpFunctions.UtCamTriggers.");
}
}

boolean UtCamTriggers_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean UtCamTriggers_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void UtCamTriggers_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@ItsCam_TpFunctions.UtCamTriggers'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    UtCamTriggers_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      (*this)[(int)(mp->get_elem(p_i)->get_id()->get_index())].set_param(*mp->get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(mp->get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      switch (mp->get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<mp->get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(mp->get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*mp->get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@ItsCam_TpFunctions.UtCamTriggers");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
  if (param.get_length_restriction() != NULL) {
    set_length_range(param);
  }
  else {
    set_length_range(*mp);
  };
}

Module_Param* UtCamTriggers_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of template type `@ItsCam_TpFunctions.UtCamTriggers'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Vector<Module_Param*> values;
    for (int i = 0; i < single_value.n_elements; ++i) {
      values.push_back((*this)[i].get_param(param_name));
    }
    mp = new Module_Param_Value_List();
    mp->add_list_with_implicit_ids(&values);
    values.clear();
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  mp->set_length_restriction(get_length_range());
  return mp;
}

void UtCamTriggers_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@ItsCam_TpFunctions.UtCamTriggers");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ItsCam_TpFunctions.UtCamTriggers");
}


const CAM__PDU__Descriptions::CAM CamPdus::UNBOUND_ELEM;
CamPdus::CamPdus()
{
val_ptr = NULL;
}

CamPdus::CamPdus(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

CamPdus::CamPdus(const CamPdus& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @ItsCam_TpFunctions.CamPdus.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

CamPdus::~CamPdus()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void CamPdus::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

CamPdus& CamPdus::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

CamPdus& CamPdus::operator=(const CamPdus& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @ItsCam_TpFunctions.CamPdus.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean CamPdus::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
return val_ptr->n_elements == 0 ;
}

boolean CamPdus::operator==(const CamPdus& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

CAM__PDU__Descriptions::CAM& CamPdus::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @ItsCam_TpFunctions.CamPdus using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (CAM__PDU__Descriptions::CAM**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new CAM__PDU__Descriptions::CAM(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new CAM__PDU__Descriptions::CAM;
}
return *val_ptr->value_elements[index_value];
}

CAM__PDU__Descriptions::CAM& CamPdus::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ItsCam_TpFunctions.CamPdus.");
return (*this)[(int)index_value];
}

const CAM__PDU__Descriptions::CAM& CamPdus::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @ItsCam_TpFunctions.CamPdus.");
if (index_value < 0) TTCN_error("Accessing an element of type @ItsCam_TpFunctions.CamPdus using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @ItsCam_TpFunctions.CamPdus: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const CAM__PDU__Descriptions::CAM& CamPdus::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @ItsCam_TpFunctions.CamPdus.");
return (*this)[(int)index_value];
}

CamPdus CamPdus::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

CamPdus CamPdus::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

CamPdus CamPdus::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

CamPdus CamPdus::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @ItsCam_TpFunctions.CamPdus.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
CamPdus ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new CAM__PDU__Descriptions::CAM(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

CamPdus CamPdus::operator+(const CamPdus& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @ItsCam_TpFunctions.CamPdus concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
CamPdus ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new CAM__PDU__Descriptions::CAM(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new CAM__PDU__Descriptions::CAM(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

CamPdus CamPdus::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@ItsCam_TpFunctions.CamPdus","element");
CamPdus ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new CAM__PDU__Descriptions::CAM(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

CamPdus CamPdus::replace(int index, int len, const CamPdus& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
check_replace_arguments(val_ptr->n_elements, index, len, "@ItsCam_TpFunctions.CamPdus","element");
CamPdus ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new CAM__PDU__Descriptions::CAM(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new CAM__PDU__Descriptions::CAM(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new CAM__PDU__Descriptions::CAM(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

CamPdus CamPdus::replace(int index, int len, const CamPdus_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void CamPdus::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @ItsCam_TpFunctions.CamPdus.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (CAM__PDU__Descriptions::CAM**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new CAM__PDU__Descriptions::CAM(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (CAM__PDU__Descriptions::CAM**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @ItsCam_TpFunctions.CamPdus: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (CAM__PDU__Descriptions::CAM**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean CamPdus::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int CamPdus::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @ItsCam_TpFunctions.CamPdus.");
return val_ptr->n_elements;
}

int CamPdus::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @ItsCam_TpFunctions.CamPdus.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void CamPdus::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void CamPdus::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@ItsCam_TpFunctions.CamPdus'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (mp->get_type()==Module_Param::MP_Value_List && mp->get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List:
      set_size(mp->get_size());
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@ItsCam_TpFunctions.CamPdus");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (mp->get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<mp->get_size(); ++i) {
        Module_Param* const curr = mp->get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@ItsCam_TpFunctions.CamPdus");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}

Module_Param* CamPdus::get_param(Module_Param_Name& param_name) const
{
  if (!is_bound()) {
    return new Module_Param_Unbound();
  }
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of type `@ItsCam_TpFunctions.CamPdus'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Vector<Module_Param*> values;
  for (int i = 0; i < val_ptr->n_elements; ++i) {
    values.push_back((*this)[i].get_param(param_name));
  }
  Module_Param_Value_List* mp = new Module_Param_Value_List();
  mp->add_list_with_implicit_ids(&values);
  values.clear();
  return mp;
}

void CamPdus::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void CamPdus::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @ItsCam_TpFunctions.CamPdus.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void CamPdus::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @ItsCam_TpFunctions.CamPdus.");
val_ptr->value_elements = (CAM__PDU__Descriptions::CAM**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new CAM__PDU__Descriptions::CAM;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void CamPdus_template::copy_value(const CamPdus& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @ItsCam_TpFunctions.CamPdus with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (CAM__PDU__Descriptions::CAM_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void CamPdus_template::copy_template(const CamPdus_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (CAM__PDU__Descriptions::CAM_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new CamPdus_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @ItsCam_TpFunctions.CamPdus.");
break;
}
set_selection(other_value);
}

boolean CamPdus_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index, boolean legacy)
{
if (value_index >= 0) return ((const CamPdus_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const CamPdus*)value_ptr)[value_index], legacy);
else return ((const CamPdus_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

CamPdus_template::CamPdus_template()
{
}

CamPdus_template::CamPdus_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

CamPdus_template::CamPdus_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

CamPdus_template::CamPdus_template(const CamPdus& other_value)
{
copy_value(other_value);
}

CamPdus_template::CamPdus_template(const OPTIONAL<CamPdus>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const CamPdus&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @ItsCam_TpFunctions.CamPdus from an unbound optional field.");
}
}

CamPdus_template::CamPdus_template(const CamPdus_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

CamPdus_template::~CamPdus_template()
{
clean_up();
}

void CamPdus_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

CamPdus_template& CamPdus_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

CamPdus_template& CamPdus_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

CamPdus_template& CamPdus_template::operator=(const CamPdus& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

CamPdus_template& CamPdus_template::operator=(const OPTIONAL<CamPdus>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const CamPdus&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @ItsCam_TpFunctions.CamPdus.");
}
return *this;
}

CamPdus_template& CamPdus_template::operator=(const CamPdus_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

CAM__PDU__Descriptions::CAM_template& CamPdus_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ItsCam_TpFunctions.CamPdus using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @ItsCam_TpFunctions.CamPdus.");
    break;
}
return *single_value.value_elements[index_value];
}

CAM__PDU__Descriptions::CAM_template& CamPdus_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ItsCam_TpFunctions.CamPdus.");
return (*this)[(int)index_value];
}

const CAM__PDU__Descriptions::CAM_template& CamPdus_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @ItsCam_TpFunctions.CamPdus using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @ItsCam_TpFunctions.CamPdus.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @ItsCam_TpFunctions.CamPdus: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const CAM__PDU__Descriptions::CAM_template& CamPdus_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @ItsCam_TpFunctions.CamPdus.");
return (*this)[(int)index_value];
}

void CamPdus_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @ItsCam_TpFunctions.CamPdus.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (CAM__PDU__Descriptions::CAM_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (CAM__PDU__Descriptions::CAM_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int CamPdus_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int CamPdus_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.CamPdus which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.CamPdus containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.CamPdus containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.CamPdus containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.CamPdus containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @ItsCam_TpFunctions.CamPdus containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @ItsCam_TpFunctions.CamPdus.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @ItsCam_TpFunctions.CamPdus");
}

boolean CamPdus_template::match(const CamPdus& other_value, boolean legacy) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific, legacy);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value, legacy)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @ItsCam_TpFunctions.CamPdus.");
}
return FALSE;
}

boolean CamPdus_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

CamPdus CamPdus_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @ItsCam_TpFunctions.CamPdus.");
CamPdus ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

CamPdus CamPdus_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

CamPdus CamPdus_template::replace(int index, int len, const CamPdus_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

CamPdus CamPdus_template::replace(int index, int len, const CamPdus& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void CamPdus_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new CamPdus_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @ItsCam_TpFunctions.CamPdus.");
}
set_selection(template_type);
}

CamPdus_template& CamPdus_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @ItsCam_TpFunctions.CamPdus.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @ItsCam_TpFunctions.CamPdus.");
return value_list.list_value[list_index];
}

void CamPdus_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void CamPdus_template::log_match(const CamPdus& match_value, boolean legacy) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value, legacy)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count], legacy)){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count], legacy);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value, legacy)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void CamPdus_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @ItsCam_TpFunctions.CamPdus.");
}
}

void CamPdus_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @ItsCam_TpFunctions.CamPdus.");
single_value.value_elements = (CAM__PDU__Descriptions::CAM_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new CAM__PDU__Descriptions::CAM_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new CamPdus_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @ItsCam_TpFunctions.CamPdus.");
}
}

boolean CamPdus_template::is_present(boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit(legacy);
}

boolean CamPdus_template::match_omit(boolean legacy) const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
if (legacy) {
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
} // else fall through
default:
return FALSE;
}
return FALSE;
}

void CamPdus_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@ItsCam_TpFunctions.CamPdus'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  Module_Param_Ptr mp = &param;
  if (param.get_type() == Module_Param::MP_Reference) {
    mp = param.get_referenced_param();
  }
  switch (mp->get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template: {
    CamPdus_template temp;
    temp.set_type(mp->get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, mp->get_size());
    for (size_t p_i=0; p_i<mp->get_size(); p_i++) {
      temp.list_item(p_i).set_param(*mp->get_elem(p_i));
    }
    *this = temp;
    break; }
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      (*this)[(int)(mp->get_elem(p_i)->get_id()->get_index())].set_param(*mp->get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(mp->get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<mp->get_size(); ++p_i) {
      switch (mp->get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<mp->get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(mp->get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*mp->get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@ItsCam_TpFunctions.CamPdus");
  }
  is_ifpresent = param.get_ifpresent() || mp->get_ifpresent();
  if (param.get_length_restriction() != NULL) {
    set_length_range(param);
  }
  else {
    set_length_range(*mp);
  };
}

Module_Param* CamPdus_template::get_param(Module_Param_Name& param_name) const
{
  if (param_name.next_name()) {
    char* param_field = param_name.get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      TTCN_error("Unexpected record field name in module parameter reference, "
        "expected a valid index for record of template type `@ItsCam_TpFunctions.CamPdus'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    return (*this)[param_index].get_param(param_name);
  }
  Module_Param* mp = NULL;
  switch (template_selection) {
  case UNINITIALIZED_TEMPLATE:
    mp = new Module_Param_Unbound();
    break;
  case OMIT_VALUE:
    mp = new Module_Param_Omit();
    break;
  case ANY_VALUE:
    mp = new Module_Param_Any();
    break;
  case ANY_OR_OMIT:
    mp = new Module_Param_AnyOrNone();
    break;
  case SPECIFIC_VALUE: {
    Vector<Module_Param*> values;
    for (int i = 0; i < single_value.n_elements; ++i) {
      values.push_back((*this)[i].get_param(param_name));
    }
    mp = new Module_Param_Value_List();
    mp->add_list_with_implicit_ids(&values);
    values.clear();
    break; }
  case VALUE_LIST:
  case COMPLEMENTED_LIST: {
    if (template_selection == VALUE_LIST) {
      mp = new Module_Param_List_Template();
    }
    else {
      mp = new Module_Param_ComplementList_Template();
    }
    for (size_t i = 0; i < value_list.n_values; ++i) {
      mp->add_elem(value_list.list_value[i].get_param(param_name));
    }
    break; }
  default:
    break;
  }
  if (is_ifpresent) {
    mp->set_ifpresent();
  }
  mp->set_length_restriction(get_length_range());
  return mp;
}

void CamPdus_template::check_restriction(template_res t_res, const char* t_name, boolean legacy) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@ItsCam_TpFunctions.CamPdus");
return;
case TR_PRESENT:
if (!match_omit(legacy)) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@ItsCam_TpFunctions.CamPdus");
}


/* Bodies of functions, altsteps and testcases */

void f__CAM__MSD__FMT__BV__01()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 42, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_FMT_BV_01");
current_location.update_lineno(47);
/* ItsCam_TpFunctions.ttcn, line 47 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(48);
/* ItsCam_TpFunctions.ttcn, line 48 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(49);
/* ItsCam_TpFunctions.ttcn, line 49 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(50);
/* ItsCam_TpFunctions.ttcn, line 50 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(54);
/* ItsCam_TpFunctions.ttcn, line 54 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(59);
/* ItsCam_TpFunctions.ttcn, line 59 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(60);
/* ItsCam_TpFunctions.ttcn, line 60 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(63);
/* ItsCam_TpFunctions.ttcn, line 63 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(64);
/* ItsCam_TpFunctions.ttcn, line 64 */
{
tmp_0:
alt_status tmp_0_alt_flag_0 = ALT_MAYBE;
alt_status tmp_0_alt_flag_1 = ALT_MAYBE;
alt_status tmp_0_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_0_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(65);
/* ItsCam_TpFunctions.ttcn, line 65 */
tmp_0_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_0_alt_flag_0 == ALT_YES) {
current_location.update_lineno(66);
/* ItsCam_TpFunctions.ttcn, line 66 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(67);
/* ItsCam_TpFunctions.ttcn, line 67 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(68);
/* ItsCam_TpFunctions.ttcn, line 68 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_0_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(70);
/* ItsCam_TpFunctions.ttcn, line 70 */
tmp_0_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_0_alt_flag_1 == ALT_YES) {
current_location.update_lineno(71);
/* ItsCam_TpFunctions.ttcn, line 71 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(72);
/* ItsCam_TpFunctions.ttcn, line 72 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_0_default_flag == ALT_MAYBE) {
tmp_0_default_flag = TTCN_Default::try_altsteps();
if (tmp_0_default_flag == ALT_YES || tmp_0_default_flag == ALT_BREAK) break;
else if (tmp_0_default_flag == ALT_REPEAT) goto tmp_0;
}
current_location.update_lineno(64);
/* ItsCam_TpFunctions.ttcn, line 64 */
if (tmp_0_alt_flag_0 == ALT_NO && tmp_0_alt_flag_1 == ALT_NO && tmp_0_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 64 and 74.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(77);
/* ItsCam_TpFunctions.ttcn, line 77 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(78);
/* ItsCam_TpFunctions.ttcn, line 78 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__FMT__BV__01(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_FMT_BV_01(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_FMT_BV_01", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__FMT__BV__02()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 85, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_FMT_BV_02");
current_location.update_lineno(90);
/* ItsCam_TpFunctions.ttcn, line 90 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(91);
/* ItsCam_TpFunctions.ttcn, line 91 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(92);
/* ItsCam_TpFunctions.ttcn, line 92 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(93);
/* ItsCam_TpFunctions.ttcn, line 93 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(97);
/* ItsCam_TpFunctions.ttcn, line 97 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(102);
/* ItsCam_TpFunctions.ttcn, line 102 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(103);
/* ItsCam_TpFunctions.ttcn, line 103 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(106);
/* ItsCam_TpFunctions.ttcn, line 106 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(107);
/* ItsCam_TpFunctions.ttcn, line 107 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
alt_status tmp_1_alt_flag_2 = ALT_MAYBE;
alt_status tmp_1_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(108);
/* ItsCam_TpFunctions.ttcn, line 108 */
tmp_1_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__LF__any), NULL, any_compref, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(109);
/* ItsCam_TpFunctions.ttcn, line 109 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(110);
/* ItsCam_TpFunctions.ttcn, line 110 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(111);
/* ItsCam_TpFunctions.ttcn, line 111 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(113);
/* ItsCam_TpFunctions.ttcn, line 113 */
tmp_1_alt_flag_1 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_1_alt_flag_1 == ALT_YES) {
current_location.update_lineno(114);
/* ItsCam_TpFunctions.ttcn, line 114 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(115);
/* ItsCam_TpFunctions.ttcn, line 115 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_5).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(116);
/* ItsCam_TpFunctions.ttcn, line 116 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_1_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(118);
/* ItsCam_TpFunctions.ttcn, line 118 */
tmp_1_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_1_alt_flag_2 == ALT_YES) {
current_location.update_lineno(119);
/* ItsCam_TpFunctions.ttcn, line 119 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(120);
/* ItsCam_TpFunctions.ttcn, line 120 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_1_default_flag == ALT_MAYBE) {
tmp_1_default_flag = TTCN_Default::try_altsteps();
if (tmp_1_default_flag == ALT_YES || tmp_1_default_flag == ALT_BREAK) break;
else if (tmp_1_default_flag == ALT_REPEAT) goto tmp_1;
}
current_location.update_lineno(107);
/* ItsCam_TpFunctions.ttcn, line 107 */
if (tmp_1_alt_flag_0 == ALT_NO && tmp_1_alt_flag_1 == ALT_NO && tmp_1_alt_flag_2 == ALT_NO && tmp_1_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 107 and 122.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(125);
/* ItsCam_TpFunctions.ttcn, line 125 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(126);
/* ItsCam_TpFunctions.ttcn, line 126 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__FMT__BV__02(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_FMT_BV_02(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_FMT_BV_02", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__FMT__BV__03()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 133, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_FMT_BV_03");
current_location.update_lineno(136);
/* ItsCam_TpFunctions.ttcn, line 136 */
TIMER t__minTransInterval("t_minTransInterval", 5.5e-1);
current_location.update_lineno(137);
/* ItsCam_TpFunctions.ttcn, line 137 */
VALUE_ARRAY<INTEGER, 5, 0> v__speedValues;
v__speedValues[0] = 1000;
v__speedValues[1] = 2000;
v__speedValues[2] = 3000;
v__speedValues[3] = 4000;
v__speedValues[4] = 5000;
current_location.update_lineno(138);
/* ItsCam_TpFunctions.ttcn, line 138 */
INTEGER v__cntSpeed;
current_location.update_lineno(138);
/* ItsCam_TpFunctions.ttcn, line 138 */
INTEGER v__cntTime;
current_location.update_lineno(139);
/* ItsCam_TpFunctions.ttcn, line 139 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(140);
/* ItsCam_TpFunctions.ttcn, line 140 */
BOOLEAN v__nextCamWithLF(FALSE);
current_location.update_lineno(141);
/* ItsCam_TpFunctions.ttcn, line 141 */
INTEGER c__cntTimeLimit(10);
current_location.update_lineno(144);
/* ItsCam_TpFunctions.ttcn, line 144 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(145);
/* ItsCam_TpFunctions.ttcn, line 145 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(146);
/* ItsCam_TpFunctions.ttcn, line 146 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(147);
/* ItsCam_TpFunctions.ttcn, line 147 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(151);
/* ItsCam_TpFunctions.ttcn, line 151 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(156);
/* ItsCam_TpFunctions.ttcn, line 156 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(157);
/* ItsCam_TpFunctions.ttcn, line 157 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(158);
/* ItsCam_TpFunctions.ttcn, line 158 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(159);
/* ItsCam_TpFunctions.ttcn, line 159 */
{
tmp_2:
alt_status tmp_2_alt_flag_0 = ALT_MAYBE;
alt_status tmp_2_alt_flag_1 = ALT_MAYBE;
alt_status tmp_2_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_2_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(160);
/* ItsCam_TpFunctions.ttcn, line 160 */
tmp_2_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__LF__any), NULL, any_compref, NULL);
if (tmp_2_alt_flag_0 == ALT_YES) {
current_location.update_lineno(161);
/* ItsCam_TpFunctions.ttcn, line 161 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(162);
/* ItsCam_TpFunctions.ttcn, line 162 */
t__minTransInterval.start();
current_location.update_lineno(163);
/* ItsCam_TpFunctions.ttcn, line 163 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(164);
/* ItsCam_TpFunctions.ttcn, line 164 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_2_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(166);
/* ItsCam_TpFunctions.ttcn, line 166 */
tmp_2_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_2_alt_flag_1 == ALT_YES) {
current_location.update_lineno(167);
/* ItsCam_TpFunctions.ttcn, line 167 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(168);
/* ItsCam_TpFunctions.ttcn, line 168 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_2_default_flag == ALT_MAYBE) {
tmp_2_default_flag = TTCN_Default::try_altsteps();
if (tmp_2_default_flag == ALT_YES || tmp_2_default_flag == ALT_BREAK) break;
else if (tmp_2_default_flag == ALT_REPEAT) goto tmp_2;
}
current_location.update_lineno(159);
/* ItsCam_TpFunctions.ttcn, line 159 */
if (tmp_2_alt_flag_0 == ALT_NO && tmp_2_alt_flag_1 == ALT_NO && tmp_2_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 159 and 170.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(173);
/* ItsCam_TpFunctions.ttcn, line 173 */
v__cntSpeed = 0;
current_location.update_lineno(173);
/* ItsCam_TpFunctions.ttcn, line 173 */
for ( ; ; ) {
current_location.update_lineno(173);
/* ItsCam_TpFunctions.ttcn, line 173 */
if (!(v__cntSpeed < v__speedValues.lengthof())) break;
current_location.update_lineno(174);
/* ItsCam_TpFunctions.ttcn, line 174 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(const_cast< const VALUE_ARRAY<INTEGER, 5, 0>&>(v__speedValues)[v__cntSpeed]));
current_location.update_lineno(175);
/* ItsCam_TpFunctions.ttcn, line 175 */
v__cntTime = 0;
current_location.update_lineno(176);
/* ItsCam_TpFunctions.ttcn, line 176 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(177);
/* ItsCam_TpFunctions.ttcn, line 177 */
{
tmp_5:
alt_status tmp_5_alt_flag_0 = ALT_MAYBE;
alt_status tmp_5_alt_flag_1 = ALT_MAYBE;
alt_status tmp_5_alt_flag_2 = ALT_MAYBE;
alt_status tmp_5_alt_flag_3 = ALT_MAYBE;
alt_status tmp_5_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_5_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(178);
/* ItsCam_TpFunctions.ttcn, line 178 */
tmp_5_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__LF__any), NULL, any_compref, NULL);
if (tmp_5_alt_flag_0 == ALT_YES) {
current_location.update_lineno(179);
/* ItsCam_TpFunctions.ttcn, line 179 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(180);
/* ItsCam_TpFunctions.ttcn, line 180 */
{
INTEGER tmp_6;
++v__cntTime;
}
current_location.update_lineno(181);
/* ItsCam_TpFunctions.ttcn, line 181 */
if ((v__cntTime == 10)) {
current_location.update_lineno(182);
/* ItsCam_TpFunctions.ttcn, line 182 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_8).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(183);
/* ItsCam_TpFunctions.ttcn, line 183 */
t__minTransInterval.start();
current_location.update_lineno(184);
/* ItsCam_TpFunctions.ttcn, line 184 */
v__nextCamWithLF = FALSE;
}
else {
current_location.update_lineno(187);
/* ItsCam_TpFunctions.ttcn, line 187 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_9).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(188);
/* ItsCam_TpFunctions.ttcn, line 188 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(189);
/* ItsCam_TpFunctions.ttcn, line 189 */
t__minTransInterval.start();
current_location.update_lineno(190);
/* ItsCam_TpFunctions.ttcn, line 190 */
v__nextCamWithLF = FALSE;
current_location.update_lineno(191);
/* ItsCam_TpFunctions.ttcn, line 191 */
goto tmp_5;
}
break;
}
}
if (tmp_5_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(194);
/* ItsCam_TpFunctions.ttcn, line 194 */
tmp_5_alt_flag_1 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), &(v__camInd), any_compref, NULL);
if (tmp_5_alt_flag_1 == ALT_YES) {
current_location.update_lineno(195);
/* ItsCam_TpFunctions.ttcn, line 195 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(196);
/* ItsCam_TpFunctions.ttcn, line 196 */
if ((v__nextCamWithLF == TRUE)) {
current_location.update_lineno(197);
/* ItsCam_TpFunctions.ttcn, line 197 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_10).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(198);
/* ItsCam_TpFunctions.ttcn, line 198 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
else {
current_location.update_lineno(201);
/* ItsCam_TpFunctions.ttcn, line 201 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_11).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(202);
/* ItsCam_TpFunctions.ttcn, line 202 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(203);
/* ItsCam_TpFunctions.ttcn, line 203 */
goto tmp_5;
}
break;
}
}
if (tmp_5_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(206);
/* ItsCam_TpFunctions.ttcn, line 206 */
tmp_5_alt_flag_2 = t__minTransInterval.timeout();
if (tmp_5_alt_flag_2 == ALT_YES) {
current_location.update_lineno(207);
/* ItsCam_TpFunctions.ttcn, line 207 */
v__nextCamWithLF = TRUE;
current_location.update_lineno(208);
/* ItsCam_TpFunctions.ttcn, line 208 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_12).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(209);
/* ItsCam_TpFunctions.ttcn, line 209 */
goto tmp_5;
}
}
if (tmp_5_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(211);
/* ItsCam_TpFunctions.ttcn, line 211 */
tmp_5_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_5_alt_flag_3 == ALT_YES) {
current_location.update_lineno(212);
/* ItsCam_TpFunctions.ttcn, line 212 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(213);
/* ItsCam_TpFunctions.ttcn, line 213 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_5_default_flag == ALT_MAYBE) {
tmp_5_default_flag = TTCN_Default::try_altsteps();
if (tmp_5_default_flag == ALT_YES || tmp_5_default_flag == ALT_BREAK) break;
else if (tmp_5_default_flag == ALT_REPEAT) goto tmp_5;
}
current_location.update_lineno(177);
/* ItsCam_TpFunctions.ttcn, line 177 */
if (tmp_5_alt_flag_0 == ALT_NO && tmp_5_alt_flag_1 == ALT_NO && tmp_5_alt_flag_2 == ALT_NO && tmp_5_alt_flag_3 == ALT_NO && tmp_5_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 177 and 215.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(173);
/* ItsCam_TpFunctions.ttcn, line 173 */
{
INTEGER tmp_10;
++v__cntSpeed;
}
}
current_location.update_lineno(217);
/* ItsCam_TpFunctions.ttcn, line 217 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_13).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(218);
/* ItsCam_TpFunctions.ttcn, line 218 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(221);
/* ItsCam_TpFunctions.ttcn, line 221 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(222);
/* ItsCam_TpFunctions.ttcn, line 222 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__FMT__BV__03(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_FMT_BV_03(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_FMT_BV_03", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__FMT__BV__04()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 229, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_FMT_BV_04");
current_location.update_lineno(232);
/* ItsCam_TpFunctions.ttcn, line 232 */
ITS__Container::VehicleRole v__vehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__roadWork);
current_location.update_lineno(235);
/* ItsCam_TpFunctions.ttcn, line 235 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(236);
/* ItsCam_TpFunctions.ttcn, line 236 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(237);
/* ItsCam_TpFunctions.ttcn, line 237 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(238);
/* ItsCam_TpFunctions.ttcn, line 238 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(240);
/* ItsCam_TpFunctions.ttcn, line 240 */
if ((!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER))) {
current_location.update_lineno(241);
/* ItsCam_TpFunctions.ttcn, line 241 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_14).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
current_location.update_lineno(245);
/* ItsCam_TpFunctions.ttcn, line 245 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(250);
/* ItsCam_TpFunctions.ttcn, line 250 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(251);
/* ItsCam_TpFunctions.ttcn, line 251 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(254);
/* ItsCam_TpFunctions.ttcn, line 254 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(v__vehicleRole));
current_location.update_lineno(257);
/* ItsCam_TpFunctions.ttcn, line 257 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(258);
/* ItsCam_TpFunctions.ttcn, line 258 */
{
tmp_11:
alt_status tmp_11_alt_flag_0 = ALT_MAYBE;
alt_status tmp_11_alt_flag_1 = ALT_MAYBE;
alt_status tmp_11_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_11_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(259);
/* ItsCam_TpFunctions.ttcn, line 259 */
tmp_11_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC__any), NULL, any_compref, NULL);
if (tmp_11_alt_flag_0 == ALT_YES) {
current_location.update_lineno(260);
/* ItsCam_TpFunctions.ttcn, line 260 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(261);
/* ItsCam_TpFunctions.ttcn, line 261 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(262);
/* ItsCam_TpFunctions.ttcn, line 262 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_11_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(264);
/* ItsCam_TpFunctions.ttcn, line 264 */
tmp_11_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_11_alt_flag_1 == ALT_YES) {
current_location.update_lineno(265);
/* ItsCam_TpFunctions.ttcn, line 265 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(266);
/* ItsCam_TpFunctions.ttcn, line 266 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_11_default_flag == ALT_MAYBE) {
tmp_11_default_flag = TTCN_Default::try_altsteps();
if (tmp_11_default_flag == ALT_YES || tmp_11_default_flag == ALT_BREAK) break;
else if (tmp_11_default_flag == ALT_REPEAT) goto tmp_11;
}
current_location.update_lineno(258);
/* ItsCam_TpFunctions.ttcn, line 258 */
if (tmp_11_alt_flag_0 == ALT_NO && tmp_11_alt_flag_1 == ALT_NO && tmp_11_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 258 and 268.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(271);
/* ItsCam_TpFunctions.ttcn, line 271 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(272);
/* ItsCam_TpFunctions.ttcn, line 272 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__FMT__BV__04(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_FMT_BV_04(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_FMT_BV_04", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__FMT__BV__05()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 279, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_FMT_BV_05");
current_location.update_lineno(282);
/* ItsCam_TpFunctions.ttcn, line 282 */
TIMER t__minTransInterval("t_minTransInterval", 5.5e-1);
current_location.update_lineno(283);
/* ItsCam_TpFunctions.ttcn, line 283 */
ITS__Container::VehicleRole v__vehicleRole(ITS__Container::VehicleRole::roadWork);
current_location.update_lineno(284);
/* ItsCam_TpFunctions.ttcn, line 284 */
VALUE_ARRAY<INTEGER, 5, 0> v__speedValues;
v__speedValues[0] = 1000;
v__speedValues[1] = 2000;
v__speedValues[2] = 3000;
v__speedValues[3] = 4000;
v__speedValues[4] = 5000;
current_location.update_lineno(285);
/* ItsCam_TpFunctions.ttcn, line 285 */
INTEGER v__cntSpeed;
current_location.update_lineno(285);
/* ItsCam_TpFunctions.ttcn, line 285 */
INTEGER v__cntTime;
current_location.update_lineno(286);
/* ItsCam_TpFunctions.ttcn, line 286 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(287);
/* ItsCam_TpFunctions.ttcn, line 287 */
BOOLEAN v__nextCamWithSVC(FALSE);
current_location.update_lineno(288);
/* ItsCam_TpFunctions.ttcn, line 288 */
INTEGER c__cntTimeLimit(10);
current_location.update_lineno(291);
/* ItsCam_TpFunctions.ttcn, line 291 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(292);
/* ItsCam_TpFunctions.ttcn, line 292 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(293);
/* ItsCam_TpFunctions.ttcn, line 293 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(294);
/* ItsCam_TpFunctions.ttcn, line 294 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(296);
/* ItsCam_TpFunctions.ttcn, line 296 */
if ((!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER))) {
current_location.update_lineno(297);
/* ItsCam_TpFunctions.ttcn, line 297 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_14).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
current_location.update_lineno(301);
/* ItsCam_TpFunctions.ttcn, line 301 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(306);
/* ItsCam_TpFunctions.ttcn, line 306 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(308);
/* ItsCam_TpFunctions.ttcn, line 308 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(v__vehicleRole));
current_location.update_lineno(309);
/* ItsCam_TpFunctions.ttcn, line 309 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(310);
/* ItsCam_TpFunctions.ttcn, line 310 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(311);
/* ItsCam_TpFunctions.ttcn, line 311 */
{
tmp_12:
alt_status tmp_12_alt_flag_0 = ALT_MAYBE;
alt_status tmp_12_alt_flag_1 = ALT_MAYBE;
alt_status tmp_12_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_12_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(312);
/* ItsCam_TpFunctions.ttcn, line 312 */
tmp_12_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC__any), NULL, any_compref, NULL);
if (tmp_12_alt_flag_0 == ALT_YES) {
current_location.update_lineno(313);
/* ItsCam_TpFunctions.ttcn, line 313 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(314);
/* ItsCam_TpFunctions.ttcn, line 314 */
t__minTransInterval.start();
current_location.update_lineno(315);
/* ItsCam_TpFunctions.ttcn, line 315 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(316);
/* ItsCam_TpFunctions.ttcn, line 316 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_12_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(318);
/* ItsCam_TpFunctions.ttcn, line 318 */
tmp_12_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_12_alt_flag_1 == ALT_YES) {
current_location.update_lineno(319);
/* ItsCam_TpFunctions.ttcn, line 319 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(320);
/* ItsCam_TpFunctions.ttcn, line 320 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_12_default_flag == ALT_MAYBE) {
tmp_12_default_flag = TTCN_Default::try_altsteps();
if (tmp_12_default_flag == ALT_YES || tmp_12_default_flag == ALT_BREAK) break;
else if (tmp_12_default_flag == ALT_REPEAT) goto tmp_12;
}
current_location.update_lineno(311);
/* ItsCam_TpFunctions.ttcn, line 311 */
if (tmp_12_alt_flag_0 == ALT_NO && tmp_12_alt_flag_1 == ALT_NO && tmp_12_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 311 and 322.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(325);
/* ItsCam_TpFunctions.ttcn, line 325 */
v__cntSpeed = 0;
current_location.update_lineno(325);
/* ItsCam_TpFunctions.ttcn, line 325 */
for ( ; ; ) {
current_location.update_lineno(325);
/* ItsCam_TpFunctions.ttcn, line 325 */
if (!(v__cntSpeed < v__speedValues.lengthof())) break;
current_location.update_lineno(326);
/* ItsCam_TpFunctions.ttcn, line 326 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(const_cast< const VALUE_ARRAY<INTEGER, 5, 0>&>(v__speedValues)[v__cntSpeed]));
current_location.update_lineno(327);
/* ItsCam_TpFunctions.ttcn, line 327 */
v__cntTime = 0;
current_location.update_lineno(328);
/* ItsCam_TpFunctions.ttcn, line 328 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(329);
/* ItsCam_TpFunctions.ttcn, line 329 */
{
tmp_15:
alt_status tmp_15_alt_flag_0 = ALT_MAYBE;
alt_status tmp_15_alt_flag_1 = ALT_MAYBE;
alt_status tmp_15_alt_flag_2 = ALT_MAYBE;
alt_status tmp_15_alt_flag_3 = ALT_MAYBE;
alt_status tmp_15_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_15_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(330);
/* ItsCam_TpFunctions.ttcn, line 330 */
tmp_15_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC__any), NULL, any_compref, NULL);
if (tmp_15_alt_flag_0 == ALT_YES) {
current_location.update_lineno(331);
/* ItsCam_TpFunctions.ttcn, line 331 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(332);
/* ItsCam_TpFunctions.ttcn, line 332 */
{
INTEGER tmp_16;
++v__cntTime;
}
current_location.update_lineno(333);
/* ItsCam_TpFunctions.ttcn, line 333 */
if ((v__cntTime == 10)) {
current_location.update_lineno(334);
/* ItsCam_TpFunctions.ttcn, line 334 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_15).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(335);
/* ItsCam_TpFunctions.ttcn, line 335 */
t__minTransInterval.start();
current_location.update_lineno(336);
/* ItsCam_TpFunctions.ttcn, line 336 */
v__nextCamWithSVC = FALSE;
}
else {
current_location.update_lineno(339);
/* ItsCam_TpFunctions.ttcn, line 339 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_16).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(340);
/* ItsCam_TpFunctions.ttcn, line 340 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(341);
/* ItsCam_TpFunctions.ttcn, line 341 */
t__minTransInterval.start();
current_location.update_lineno(342);
/* ItsCam_TpFunctions.ttcn, line 342 */
v__nextCamWithSVC = FALSE;
current_location.update_lineno(343);
/* ItsCam_TpFunctions.ttcn, line 343 */
goto tmp_15;
}
break;
}
}
if (tmp_15_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(346);
/* ItsCam_TpFunctions.ttcn, line 346 */
tmp_15_alt_flag_1 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), &(v__camInd), any_compref, NULL);
if (tmp_15_alt_flag_1 == ALT_YES) {
current_location.update_lineno(347);
/* ItsCam_TpFunctions.ttcn, line 347 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(348);
/* ItsCam_TpFunctions.ttcn, line 348 */
if ((v__nextCamWithSVC == TRUE)) {
current_location.update_lineno(349);
/* ItsCam_TpFunctions.ttcn, line 349 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_17).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(350);
/* ItsCam_TpFunctions.ttcn, line 350 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
else {
current_location.update_lineno(353);
/* ItsCam_TpFunctions.ttcn, line 353 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_18).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(354);
/* ItsCam_TpFunctions.ttcn, line 354 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(355);
/* ItsCam_TpFunctions.ttcn, line 355 */
goto tmp_15;
}
break;
}
}
if (tmp_15_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(358);
/* ItsCam_TpFunctions.ttcn, line 358 */
tmp_15_alt_flag_2 = t__minTransInterval.timeout();
if (tmp_15_alt_flag_2 == ALT_YES) {
current_location.update_lineno(359);
/* ItsCam_TpFunctions.ttcn, line 359 */
v__nextCamWithSVC = TRUE;
current_location.update_lineno(360);
/* ItsCam_TpFunctions.ttcn, line 360 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_19).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(361);
/* ItsCam_TpFunctions.ttcn, line 361 */
goto tmp_15;
}
}
if (tmp_15_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(363);
/* ItsCam_TpFunctions.ttcn, line 363 */
tmp_15_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_15_alt_flag_3 == ALT_YES) {
current_location.update_lineno(364);
/* ItsCam_TpFunctions.ttcn, line 364 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(365);
/* ItsCam_TpFunctions.ttcn, line 365 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_15_default_flag == ALT_MAYBE) {
tmp_15_default_flag = TTCN_Default::try_altsteps();
if (tmp_15_default_flag == ALT_YES || tmp_15_default_flag == ALT_BREAK) break;
else if (tmp_15_default_flag == ALT_REPEAT) goto tmp_15;
}
current_location.update_lineno(329);
/* ItsCam_TpFunctions.ttcn, line 329 */
if (tmp_15_alt_flag_0 == ALT_NO && tmp_15_alt_flag_1 == ALT_NO && tmp_15_alt_flag_2 == ALT_NO && tmp_15_alt_flag_3 == ALT_NO && tmp_15_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 329 and 367.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(325);
/* ItsCam_TpFunctions.ttcn, line 325 */
{
INTEGER tmp_20;
++v__cntSpeed;
}
}
current_location.update_lineno(369);
/* ItsCam_TpFunctions.ttcn, line 369 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_20).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(370);
/* ItsCam_TpFunctions.ttcn, line 370 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(373);
/* ItsCam_TpFunctions.ttcn, line 373 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(374);
/* ItsCam_TpFunctions.ttcn, line 374 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__FMT__BV__05(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_FMT_BV_05(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_FMT_BV_05", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

boolean operator==(null_type, const UtCamTriggers& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @ItsCam_TpFunctions.UtCamTriggers.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const CamPdus& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @ItsCam_TpFunctions.CamPdus.");
return other_value.val_ptr->n_elements == 0;
}

void f__CAM__MSD__INA__BV__01(const CHARSTRING& p__INFO, const UtCamTriggers_template& p__utTriggers, const CamPdus_template& p__camPdus)
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 387, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01");
current_location.update_lineno(390);
/* ItsCam_TpFunctions.ttcn, line 390 */
INTEGER v__cnt;
current_location.update_lineno(392);
/* ItsCam_TpFunctions.ttcn, line 392 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((((cs_0 + TTCN_Runtime::get_testcasename()) + cs_21) + p__INFO) + cs_22).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(394);
/* ItsCam_TpFunctions.ttcn, line 394 */
if ((p__utTriggers.lengthof() != p__camPdus.lengthof())) {
current_location.update_lineno(395);
/* ItsCam_TpFunctions.ttcn, line 395 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_23).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(396);
/* ItsCam_TpFunctions.ttcn, line 396 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
current_location.update_lineno(399);
/* ItsCam_TpFunctions.ttcn, line 399 */
v__cnt = 0;
current_location.update_lineno(399);
/* ItsCam_TpFunctions.ttcn, line 399 */
for ( ; ; ) {
current_location.update_lineno(399);
/* ItsCam_TpFunctions.ttcn, line 399 */
if (!(v__cnt < p__utTriggers.lengthof())) break;
current_location.update_lineno(400);
/* ItsCam_TpFunctions.ttcn, line 400 */
LibItsCam__Functions::f__utTriggerEvent(p__utTriggers[v__cnt]);
current_location.update_lineno(402);
/* ItsCam_TpFunctions.ttcn, line 402 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(403);
/* ItsCam_TpFunctions.ttcn, line 403 */
{
tmp_22:
alt_status tmp_22_alt_flag_0 = ALT_MAYBE;
alt_status tmp_22_alt_flag_1 = ALT_MAYBE;
alt_status tmp_22_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_22_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(404);
/* ItsCam_TpFunctions.ttcn, line 404 */
tmp_22_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(p__camPdus[v__cnt]), NULL, any_compref, NULL);
if (tmp_22_alt_flag_0 == ALT_YES) {
current_location.update_lineno(405);
/* ItsCam_TpFunctions.ttcn, line 405 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(406);
/* ItsCam_TpFunctions.ttcn, line 406 */
if ((v__cnt == (p__utTriggers.lengthof() - 1))) {
current_location.update_lineno(407);
/* ItsCam_TpFunctions.ttcn, line 407 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(408);
/* ItsCam_TpFunctions.ttcn, line 408 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(411);
/* ItsCam_TpFunctions.ttcn, line 411 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_24).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
}
break;
}
}
if (tmp_22_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(414);
/* ItsCam_TpFunctions.ttcn, line 414 */
tmp_22_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_22_alt_flag_1 == ALT_YES) {
current_location.update_lineno(415);
/* ItsCam_TpFunctions.ttcn, line 415 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(416);
/* ItsCam_TpFunctions.ttcn, line 416 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_22_default_flag == ALT_MAYBE) {
tmp_22_default_flag = TTCN_Default::try_altsteps();
if (tmp_22_default_flag == ALT_YES || tmp_22_default_flag == ALT_BREAK) break;
else if (tmp_22_default_flag == ALT_REPEAT) goto tmp_22;
}
current_location.update_lineno(403);
/* ItsCam_TpFunctions.ttcn, line 403 */
if (tmp_22_alt_flag_0 == ALT_NO && tmp_22_alt_flag_1 == ALT_NO && tmp_22_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 403 and 418.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(399);
/* ItsCam_TpFunctions.ttcn, line 399 */
{
INTEGER tmp_23;
++v__cnt;
}
}
}

void start_f__CAM__MSD__INA__BV__01(const COMPONENT& component_reference, const CHARSTRING& p__INFO, const UtCamTriggers_template& p__utTriggers, const CamPdus_template& p__camPdus)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01(");
p__INFO.log();
TTCN_Logger::log_event_str(", ");
p__utTriggers.log();
TTCN_Logger::log_event_str(", ");
p__camPdus.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01", text_buf);
p__INFO.encode_text(text_buf);
p__utTriggers.encode_text(text_buf);
p__camPdus.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__01()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 425, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_01");
current_location.update_lineno(428);
/* ItsCam_TpFunctions.ttcn, line 428 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(429);
/* ItsCam_TpFunctions.ttcn, line 429 */
INTEGER_template v__curVal(ANY_VALUE);
current_location.update_lineno(430);
/* ItsCam_TpFunctions.ttcn, line 430 */
BOOLEAN v__initialReceived(FALSE);
current_location.update_lineno(431);
/* ItsCam_TpFunctions.ttcn, line 431 */
INTEGER c__curValOffset(1);
current_location.update_lineno(434);
/* ItsCam_TpFunctions.ttcn, line 434 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(435);
/* ItsCam_TpFunctions.ttcn, line 435 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_25).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(436);
/* ItsCam_TpFunctions.ttcn, line 436 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(437);
/* ItsCam_TpFunctions.ttcn, line 437 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(441);
/* ItsCam_TpFunctions.ttcn, line 441 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(446);
/* ItsCam_TpFunctions.ttcn, line 446 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(447);
/* ItsCam_TpFunctions.ttcn, line 447 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(450);
/* ItsCam_TpFunctions.ttcn, line 450 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_26).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(453);
/* ItsCam_TpFunctions.ttcn, line 453 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeCurvature(1));
current_location.update_lineno(455);
/* ItsCam_TpFunctions.ttcn, line 455 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(456);
/* ItsCam_TpFunctions.ttcn, line 456 */
{
tmp_24:
alt_status tmp_24_alt_flag_0 = ALT_MAYBE;
alt_status tmp_24_alt_flag_1 = ALT_MAYBE;
alt_status tmp_24_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_24_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(457);
/* ItsCam_TpFunctions.ttcn, line 457 */
tmp_24_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__curvature(v__curVal))), &(v__camInd), any_compref, NULL);
if (tmp_24_alt_flag_0 == ALT_YES) {
current_location.update_lineno(458);
/* ItsCam_TpFunctions.ttcn, line 458 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(459);
/* ItsCam_TpFunctions.ttcn, line 459 */
if (v__initialReceived) {
current_location.update_lineno(460);
/* ItsCam_TpFunctions.ttcn, line 460 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(461);
/* ItsCam_TpFunctions.ttcn, line 461 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(464);
/* ItsCam_TpFunctions.ttcn, line 464 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_24).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(465);
/* ItsCam_TpFunctions.ttcn, line 465 */
v__initialReceived = TRUE;
current_location.update_lineno(467);
/* ItsCam_TpFunctions.ttcn, line 467 */
if ((const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().curvature().curvatureValue() >= 0)) {
current_location.update_lineno(468);
/* ItsCam_TpFunctions.ttcn, line 468 */
v__curVal = mod((const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().curvature().curvatureValue() + 1), 30001);
}
else {
current_location.update_lineno(470);
/* ItsCam_TpFunctions.ttcn, line 470 */
v__curVal = (const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().curvature().curvatureValue() - 1);
current_location.update_lineno(471);
/* ItsCam_TpFunctions.ttcn, line 471 */
if ((v__curVal.valueof() < -30000)) {
current_location.update_lineno(472);
/* ItsCam_TpFunctions.ttcn, line 472 */
v__curVal = 0;
}
}
current_location.update_lineno(475);
/* ItsCam_TpFunctions.ttcn, line 475 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeCurvature(1));
current_location.update_lineno(476);
/* ItsCam_TpFunctions.ttcn, line 476 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(477);
/* ItsCam_TpFunctions.ttcn, line 477 */
goto tmp_24;
}
break;
}
}
if (tmp_24_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(480);
/* ItsCam_TpFunctions.ttcn, line 480 */
tmp_24_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_24_alt_flag_1 == ALT_YES) {
current_location.update_lineno(481);
/* ItsCam_TpFunctions.ttcn, line 481 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(482);
/* ItsCam_TpFunctions.ttcn, line 482 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_24_default_flag == ALT_MAYBE) {
tmp_24_default_flag = TTCN_Default::try_altsteps();
if (tmp_24_default_flag == ALT_YES || tmp_24_default_flag == ALT_BREAK) break;
else if (tmp_24_default_flag == ALT_REPEAT) goto tmp_24;
}
current_location.update_lineno(456);
/* ItsCam_TpFunctions.ttcn, line 456 */
if (tmp_24_alt_flag_0 == ALT_NO && tmp_24_alt_flag_1 == ALT_NO && tmp_24_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 456 and 484.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(487);
/* ItsCam_TpFunctions.ttcn, line 487 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(488);
/* ItsCam_TpFunctions.ttcn, line 488 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__01(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_01(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_01", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__02()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 495, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_02");
current_location.update_lineno(500);
/* ItsCam_TpFunctions.ttcn, line 500 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(501);
/* ItsCam_TpFunctions.ttcn, line 501 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(502);
/* ItsCam_TpFunctions.ttcn, line 502 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(503);
/* ItsCam_TpFunctions.ttcn, line 503 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(507);
/* ItsCam_TpFunctions.ttcn, line 507 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(512);
/* ItsCam_TpFunctions.ttcn, line 512 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(513);
/* ItsCam_TpFunctions.ttcn, line 513 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(516);
/* ItsCam_TpFunctions.ttcn, line 516 */
{
UtCamTriggers_template tmp_29;
// this is a var template
tmp_29.set_size(1);
tmp_29[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__brakePedalEngaged);
CamPdus_template tmp_30;
// this is a var template
tmp_30.set_size(1);
tmp_30[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__brakePedalActive__On));
f__CAM__MSD__INA__BV__01(cs_27, tmp_29, tmp_30);
}
current_location.update_lineno(523);
/* ItsCam_TpFunctions.ttcn, line 523 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(524);
/* ItsCam_TpFunctions.ttcn, line 524 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__02(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_02(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_02", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__03()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 531, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_03");
current_location.update_lineno(536);
/* ItsCam_TpFunctions.ttcn, line 536 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(537);
/* ItsCam_TpFunctions.ttcn, line 537 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(538);
/* ItsCam_TpFunctions.ttcn, line 538 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(539);
/* ItsCam_TpFunctions.ttcn, line 539 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(543);
/* ItsCam_TpFunctions.ttcn, line 543 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(548);
/* ItsCam_TpFunctions.ttcn, line 548 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(549);
/* ItsCam_TpFunctions.ttcn, line 549 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(552);
/* ItsCam_TpFunctions.ttcn, line 552 */
{
UtCamTriggers_template tmp_31;
// this is a var template
tmp_31.set_size(2);
tmp_31[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__brakePedalEngaged);
tmp_31[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_32;
// this is a var template
tmp_32.set_size(2);
tmp_32[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__brakePedalActive__On));
{
BITSTRING_template tmp_33;
tmp_33.set_type(VALUE_LIST, 2);
tmp_33.list_item(0) = OMIT_VALUE;
tmp_33.list_item(1) = LibItsCam__Templates::mw__brakePedalActive__Off;
tmp_32[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_33));
}
f__CAM__MSD__INA__BV__01(cs_28, tmp_31, tmp_32);
}
current_location.update_lineno(559);
/* ItsCam_TpFunctions.ttcn, line 559 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(560);
/* ItsCam_TpFunctions.ttcn, line 560 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__03(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_03(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_03", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__04()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 567, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_04");
current_location.update_lineno(572);
/* ItsCam_TpFunctions.ttcn, line 572 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(573);
/* ItsCam_TpFunctions.ttcn, line 573 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(574);
/* ItsCam_TpFunctions.ttcn, line 574 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(575);
/* ItsCam_TpFunctions.ttcn, line 575 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(579);
/* ItsCam_TpFunctions.ttcn, line 579 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(584);
/* ItsCam_TpFunctions.ttcn, line 584 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(585);
/* ItsCam_TpFunctions.ttcn, line 585 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(588);
/* ItsCam_TpFunctions.ttcn, line 588 */
{
UtCamTriggers_template tmp_34;
// this is a var template
tmp_34.set_size(1);
tmp_34[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__gasPedalEngaged);
CamPdus_template tmp_35;
// this is a var template
tmp_35.set_size(1);
tmp_35[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__gasPedalActive__On));
f__CAM__MSD__INA__BV__01(cs_29, tmp_34, tmp_35);
}
current_location.update_lineno(595);
/* ItsCam_TpFunctions.ttcn, line 595 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(596);
/* ItsCam_TpFunctions.ttcn, line 596 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__04(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_04(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_04", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__05()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 603, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_05");
current_location.update_lineno(608);
/* ItsCam_TpFunctions.ttcn, line 608 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(609);
/* ItsCam_TpFunctions.ttcn, line 609 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(610);
/* ItsCam_TpFunctions.ttcn, line 610 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(611);
/* ItsCam_TpFunctions.ttcn, line 611 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(615);
/* ItsCam_TpFunctions.ttcn, line 615 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(620);
/* ItsCam_TpFunctions.ttcn, line 620 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(621);
/* ItsCam_TpFunctions.ttcn, line 621 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(624);
/* ItsCam_TpFunctions.ttcn, line 624 */
{
UtCamTriggers_template tmp_36;
// this is a var template
tmp_36.set_size(2);
tmp_36[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__gasPedalEngaged);
tmp_36[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_37;
// this is a var template
tmp_37.set_size(2);
tmp_37[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__gasPedalActive__On));
{
BITSTRING_template tmp_38;
tmp_38.set_type(VALUE_LIST, 2);
tmp_38.list_item(0) = OMIT_VALUE;
tmp_38.list_item(1) = LibItsCam__Templates::mw__gasPedalActive__Off;
tmp_37[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_38));
}
f__CAM__MSD__INA__BV__01(cs_30, tmp_36, tmp_37);
}
current_location.update_lineno(631);
/* ItsCam_TpFunctions.ttcn, line 631 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(632);
/* ItsCam_TpFunctions.ttcn, line 632 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__05(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_05(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_05", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__06()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 639, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_06");
current_location.update_lineno(644);
/* ItsCam_TpFunctions.ttcn, line 644 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(645);
/* ItsCam_TpFunctions.ttcn, line 645 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(646);
/* ItsCam_TpFunctions.ttcn, line 646 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(647);
/* ItsCam_TpFunctions.ttcn, line 647 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(651);
/* ItsCam_TpFunctions.ttcn, line 651 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(656);
/* ItsCam_TpFunctions.ttcn, line 656 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(657);
/* ItsCam_TpFunctions.ttcn, line 657 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(660);
/* ItsCam_TpFunctions.ttcn, line 660 */
{
UtCamTriggers_template tmp_39;
// this is a var template
tmp_39.set_size(1);
tmp_39[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__emergencyBrakeEngaged);
CamPdus_template tmp_40;
// this is a var template
tmp_40.set_size(1);
tmp_40[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__emergencyBrakeActive__On));
f__CAM__MSD__INA__BV__01(cs_31, tmp_39, tmp_40);
}
current_location.update_lineno(667);
/* ItsCam_TpFunctions.ttcn, line 667 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(668);
/* ItsCam_TpFunctions.ttcn, line 668 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__06(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_06(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_06", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__07()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 675, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_07");
current_location.update_lineno(680);
/* ItsCam_TpFunctions.ttcn, line 680 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(681);
/* ItsCam_TpFunctions.ttcn, line 681 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(682);
/* ItsCam_TpFunctions.ttcn, line 682 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(683);
/* ItsCam_TpFunctions.ttcn, line 683 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(687);
/* ItsCam_TpFunctions.ttcn, line 687 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(692);
/* ItsCam_TpFunctions.ttcn, line 692 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(693);
/* ItsCam_TpFunctions.ttcn, line 693 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(696);
/* ItsCam_TpFunctions.ttcn, line 696 */
{
UtCamTriggers_template tmp_41;
// this is a var template
tmp_41.set_size(2);
tmp_41[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__emergencyBrakeEngaged);
tmp_41[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_42;
// this is a var template
tmp_42.set_size(2);
tmp_42[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__emergencyBrakeActive__On));
{
BITSTRING_template tmp_43;
tmp_43.set_type(VALUE_LIST, 2);
tmp_43.list_item(0) = OMIT_VALUE;
tmp_43.list_item(1) = LibItsCam__Templates::mw__emergencyBrakeActive__Off;
tmp_42[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_43));
}
f__CAM__MSD__INA__BV__01(cs_32, tmp_41, tmp_42);
}
current_location.update_lineno(703);
/* ItsCam_TpFunctions.ttcn, line 703 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(704);
/* ItsCam_TpFunctions.ttcn, line 704 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__07(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_07(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_07", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__08()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 711, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_08");
current_location.update_lineno(716);
/* ItsCam_TpFunctions.ttcn, line 716 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(717);
/* ItsCam_TpFunctions.ttcn, line 717 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(718);
/* ItsCam_TpFunctions.ttcn, line 718 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(719);
/* ItsCam_TpFunctions.ttcn, line 719 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(723);
/* ItsCam_TpFunctions.ttcn, line 723 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(728);
/* ItsCam_TpFunctions.ttcn, line 728 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(729);
/* ItsCam_TpFunctions.ttcn, line 729 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(732);
/* ItsCam_TpFunctions.ttcn, line 732 */
{
UtCamTriggers_template tmp_44;
// this is a var template
tmp_44.set_size(1);
tmp_44[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__collisionWarningEngaged);
CamPdus_template tmp_45;
// this is a var template
tmp_45.set_size(1);
tmp_45[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__collisionWarningActive__On));
f__CAM__MSD__INA__BV__01(cs_33, tmp_44, tmp_45);
}
current_location.update_lineno(739);
/* ItsCam_TpFunctions.ttcn, line 739 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(740);
/* ItsCam_TpFunctions.ttcn, line 740 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__08(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_08(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_08", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__09()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 747, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_09");
current_location.update_lineno(752);
/* ItsCam_TpFunctions.ttcn, line 752 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(753);
/* ItsCam_TpFunctions.ttcn, line 753 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(754);
/* ItsCam_TpFunctions.ttcn, line 754 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(755);
/* ItsCam_TpFunctions.ttcn, line 755 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(759);
/* ItsCam_TpFunctions.ttcn, line 759 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(764);
/* ItsCam_TpFunctions.ttcn, line 764 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(765);
/* ItsCam_TpFunctions.ttcn, line 765 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(768);
/* ItsCam_TpFunctions.ttcn, line 768 */
{
UtCamTriggers_template tmp_46;
// this is a var template
tmp_46.set_size(2);
tmp_46[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__collisionWarningEngaged);
tmp_46[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_47;
// this is a var template
tmp_47.set_size(2);
tmp_47[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__collisionWarningActive__On));
{
BITSTRING_template tmp_48;
tmp_48.set_type(VALUE_LIST, 2);
tmp_48.list_item(0) = OMIT_VALUE;
tmp_48.list_item(1) = LibItsCam__Templates::mw__collisionWarningActive__Off;
tmp_47[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_48));
}
f__CAM__MSD__INA__BV__01(cs_34, tmp_46, tmp_47);
}
current_location.update_lineno(775);
/* ItsCam_TpFunctions.ttcn, line 775 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(776);
/* ItsCam_TpFunctions.ttcn, line 776 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__09(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_09(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_09", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__10()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 783, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_10");
current_location.update_lineno(788);
/* ItsCam_TpFunctions.ttcn, line 788 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(789);
/* ItsCam_TpFunctions.ttcn, line 789 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(790);
/* ItsCam_TpFunctions.ttcn, line 790 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(791);
/* ItsCam_TpFunctions.ttcn, line 791 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(795);
/* ItsCam_TpFunctions.ttcn, line 795 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(800);
/* ItsCam_TpFunctions.ttcn, line 800 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(801);
/* ItsCam_TpFunctions.ttcn, line 801 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(804);
/* ItsCam_TpFunctions.ttcn, line 804 */
{
UtCamTriggers_template tmp_49;
// this is a var template
tmp_49.set_size(1);
tmp_49[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accEngaged);
CamPdus_template tmp_50;
// this is a var template
tmp_50.set_size(1);
tmp_50[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__accActive__On));
f__CAM__MSD__INA__BV__01(cs_35, tmp_49, tmp_50);
}
current_location.update_lineno(811);
/* ItsCam_TpFunctions.ttcn, line 811 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(812);
/* ItsCam_TpFunctions.ttcn, line 812 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__10(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_10(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_10", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__11()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 819, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_11");
current_location.update_lineno(824);
/* ItsCam_TpFunctions.ttcn, line 824 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(825);
/* ItsCam_TpFunctions.ttcn, line 825 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(826);
/* ItsCam_TpFunctions.ttcn, line 826 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(827);
/* ItsCam_TpFunctions.ttcn, line 827 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(831);
/* ItsCam_TpFunctions.ttcn, line 831 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(836);
/* ItsCam_TpFunctions.ttcn, line 836 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(837);
/* ItsCam_TpFunctions.ttcn, line 837 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(840);
/* ItsCam_TpFunctions.ttcn, line 840 */
{
UtCamTriggers_template tmp_51;
// this is a var template
tmp_51.set_size(2);
tmp_51[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accEngaged);
tmp_51[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_52;
// this is a var template
tmp_52.set_size(2);
tmp_52[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__accActive__On));
{
BITSTRING_template tmp_53;
tmp_53.set_type(VALUE_LIST, 2);
tmp_53.list_item(0) = OMIT_VALUE;
tmp_53.list_item(1) = LibItsCam__Templates::mw__accActive__Off;
tmp_52[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_53));
}
f__CAM__MSD__INA__BV__01(cs_36, tmp_51, tmp_52);
}
current_location.update_lineno(847);
/* ItsCam_TpFunctions.ttcn, line 847 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(848);
/* ItsCam_TpFunctions.ttcn, line 848 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__11(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_11(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_11", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__12()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 855, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_12");
current_location.update_lineno(860);
/* ItsCam_TpFunctions.ttcn, line 860 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(861);
/* ItsCam_TpFunctions.ttcn, line 861 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(862);
/* ItsCam_TpFunctions.ttcn, line 862 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(863);
/* ItsCam_TpFunctions.ttcn, line 863 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(867);
/* ItsCam_TpFunctions.ttcn, line 867 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(872);
/* ItsCam_TpFunctions.ttcn, line 872 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(873);
/* ItsCam_TpFunctions.ttcn, line 873 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(876);
/* ItsCam_TpFunctions.ttcn, line 876 */
{
UtCamTriggers_template tmp_54;
// this is a var template
tmp_54.set_size(1);
tmp_54[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__cruiseControlEngaged);
CamPdus_template tmp_55;
// this is a var template
tmp_55.set_size(1);
tmp_55[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__cruiseControl__On));
f__CAM__MSD__INA__BV__01(cs_37, tmp_54, tmp_55);
}
current_location.update_lineno(883);
/* ItsCam_TpFunctions.ttcn, line 883 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(884);
/* ItsCam_TpFunctions.ttcn, line 884 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__12(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_12(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_12", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__13()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 891, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_13");
current_location.update_lineno(896);
/* ItsCam_TpFunctions.ttcn, line 896 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(897);
/* ItsCam_TpFunctions.ttcn, line 897 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(898);
/* ItsCam_TpFunctions.ttcn, line 898 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(899);
/* ItsCam_TpFunctions.ttcn, line 899 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(903);
/* ItsCam_TpFunctions.ttcn, line 903 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(908);
/* ItsCam_TpFunctions.ttcn, line 908 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(909);
/* ItsCam_TpFunctions.ttcn, line 909 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(912);
/* ItsCam_TpFunctions.ttcn, line 912 */
{
UtCamTriggers_template tmp_56;
// this is a var template
tmp_56.set_size(2);
tmp_56[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__cruiseControlEngaged);
tmp_56[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_57;
// this is a var template
tmp_57.set_size(2);
tmp_57[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__cruiseControl__On));
{
BITSTRING_template tmp_58;
tmp_58.set_type(VALUE_LIST, 2);
tmp_58.list_item(0) = OMIT_VALUE;
tmp_58.list_item(1) = LibItsCam__Templates::mw__cruiseControl__Off;
tmp_57[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_58));
}
f__CAM__MSD__INA__BV__01(cs_38, tmp_56, tmp_57);
}
current_location.update_lineno(919);
/* ItsCam_TpFunctions.ttcn, line 919 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(920);
/* ItsCam_TpFunctions.ttcn, line 920 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__13(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_13(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_13", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__14()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 927, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_14");
current_location.update_lineno(932);
/* ItsCam_TpFunctions.ttcn, line 932 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(933);
/* ItsCam_TpFunctions.ttcn, line 933 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(934);
/* ItsCam_TpFunctions.ttcn, line 934 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(935);
/* ItsCam_TpFunctions.ttcn, line 935 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(939);
/* ItsCam_TpFunctions.ttcn, line 939 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(944);
/* ItsCam_TpFunctions.ttcn, line 944 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(945);
/* ItsCam_TpFunctions.ttcn, line 945 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(948);
/* ItsCam_TpFunctions.ttcn, line 948 */
{
UtCamTriggers_template tmp_59;
// this is a var template
tmp_59.set_size(1);
tmp_59[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__speedLimiterEngaged);
CamPdus_template tmp_60;
// this is a var template
tmp_60.set_size(1);
tmp_60[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__speedLimiterActive__On));
f__CAM__MSD__INA__BV__01(cs_39, tmp_59, tmp_60);
}
current_location.update_lineno(955);
/* ItsCam_TpFunctions.ttcn, line 955 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(956);
/* ItsCam_TpFunctions.ttcn, line 956 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__14(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_14(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_14", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__15()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 963, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_15");
current_location.update_lineno(968);
/* ItsCam_TpFunctions.ttcn, line 968 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(969);
/* ItsCam_TpFunctions.ttcn, line 969 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(970);
/* ItsCam_TpFunctions.ttcn, line 970 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(971);
/* ItsCam_TpFunctions.ttcn, line 971 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(975);
/* ItsCam_TpFunctions.ttcn, line 975 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(980);
/* ItsCam_TpFunctions.ttcn, line 980 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(981);
/* ItsCam_TpFunctions.ttcn, line 981 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(984);
/* ItsCam_TpFunctions.ttcn, line 984 */
{
UtCamTriggers_template tmp_61;
// this is a var template
tmp_61.set_size(2);
tmp_61[0] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__speedLimiterEngaged);
tmp_61[1] = LibItsCam__Templates::m__setAccelerationControlStatus(LibItsCam__TypesAndValues::c__accCtrlIdle);
CamPdus_template tmp_62;
// this is a var template
tmp_62.set_size(2);
tmp_62[0] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(LibItsCam__Templates::mw__speedLimiterActive__On));
{
BITSTRING_template tmp_63;
tmp_63.set_type(VALUE_LIST, 2);
tmp_63.list_item(0) = OMIT_VALUE;
tmp_63.list_item(1) = LibItsCam__Templates::mw__speedLimiterActive__Off;
tmp_62[1] = LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__accCtrl(tmp_63));
}
f__CAM__MSD__INA__BV__01(cs_40, tmp_61, tmp_62);
}
current_location.update_lineno(991);
/* ItsCam_TpFunctions.ttcn, line 991 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(992);
/* ItsCam_TpFunctions.ttcn, line 992 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__15(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_15(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_15", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__16()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 999, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_16");
current_location.update_lineno(1004);
/* ItsCam_TpFunctions.ttcn, line 1004 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1005);
/* ItsCam_TpFunctions.ttcn, line 1005 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1006);
/* ItsCam_TpFunctions.ttcn, line 1006 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1007);
/* ItsCam_TpFunctions.ttcn, line 1007 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1011);
/* ItsCam_TpFunctions.ttcn, line 1011 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1016);
/* ItsCam_TpFunctions.ttcn, line 1016 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1017);
/* ItsCam_TpFunctions.ttcn, line 1017 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1020);
/* ItsCam_TpFunctions.ttcn, line 1020 */
{
UtCamTriggers_template tmp_64;
// this is a var template
tmp_64.set_size(1);
tmp_64[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__lowBeamHeadlightsOn);
CamPdus_template tmp_65;
// this is a var template
tmp_65.set_size(1);
tmp_65[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__lowBeamLightsOn));
f__CAM__MSD__INA__BV__01(cs_41, tmp_64, tmp_65);
}
current_location.update_lineno(1027);
/* ItsCam_TpFunctions.ttcn, line 1027 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1028);
/* ItsCam_TpFunctions.ttcn, line 1028 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__16(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_16(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_16", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__17()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1035, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_17");
current_location.update_lineno(1040);
/* ItsCam_TpFunctions.ttcn, line 1040 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1041);
/* ItsCam_TpFunctions.ttcn, line 1041 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1042);
/* ItsCam_TpFunctions.ttcn, line 1042 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1043);
/* ItsCam_TpFunctions.ttcn, line 1043 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1047);
/* ItsCam_TpFunctions.ttcn, line 1047 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1052);
/* ItsCam_TpFunctions.ttcn, line 1052 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1053);
/* ItsCam_TpFunctions.ttcn, line 1053 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1056);
/* ItsCam_TpFunctions.ttcn, line 1056 */
{
UtCamTriggers_template tmp_66;
// this is a var template
tmp_66.set_size(2);
tmp_66[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__lowBeamHeadlightsOn);
tmp_66[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_67;
// this is a var template
tmp_67.set_size(2);
tmp_67[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__lowBeamLightsOn));
{
BITSTRING_template tmp_68;
tmp_68.set_type(VALUE_LIST, 2);
tmp_68.list_item(0) = OMIT_VALUE;
tmp_68.list_item(1) = LibItsCam__Templates::mw__lowBeamLightsOff;
tmp_67[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_68));
}
f__CAM__MSD__INA__BV__01(cs_42, tmp_66, tmp_67);
}
current_location.update_lineno(1063);
/* ItsCam_TpFunctions.ttcn, line 1063 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1064);
/* ItsCam_TpFunctions.ttcn, line 1064 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__17(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_17(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_17", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__18()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1071, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_18");
current_location.update_lineno(1076);
/* ItsCam_TpFunctions.ttcn, line 1076 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1077);
/* ItsCam_TpFunctions.ttcn, line 1077 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1078);
/* ItsCam_TpFunctions.ttcn, line 1078 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1079);
/* ItsCam_TpFunctions.ttcn, line 1079 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1083);
/* ItsCam_TpFunctions.ttcn, line 1083 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1088);
/* ItsCam_TpFunctions.ttcn, line 1088 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1089);
/* ItsCam_TpFunctions.ttcn, line 1089 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1092);
/* ItsCam_TpFunctions.ttcn, line 1092 */
{
UtCamTriggers_template tmp_69;
// this is a var template
tmp_69.set_size(1);
tmp_69[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__highBeamHeadlightsOn);
CamPdus_template tmp_70;
// this is a var template
tmp_70.set_size(1);
tmp_70[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__highBeamLightsOn));
f__CAM__MSD__INA__BV__01(cs_43, tmp_69, tmp_70);
}
current_location.update_lineno(1099);
/* ItsCam_TpFunctions.ttcn, line 1099 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1100);
/* ItsCam_TpFunctions.ttcn, line 1100 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__18(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_18(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_18", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__19()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1107, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_19");
current_location.update_lineno(1112);
/* ItsCam_TpFunctions.ttcn, line 1112 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1113);
/* ItsCam_TpFunctions.ttcn, line 1113 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1114);
/* ItsCam_TpFunctions.ttcn, line 1114 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1115);
/* ItsCam_TpFunctions.ttcn, line 1115 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1119);
/* ItsCam_TpFunctions.ttcn, line 1119 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1124);
/* ItsCam_TpFunctions.ttcn, line 1124 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1125);
/* ItsCam_TpFunctions.ttcn, line 1125 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1128);
/* ItsCam_TpFunctions.ttcn, line 1128 */
{
UtCamTriggers_template tmp_71;
// this is a var template
tmp_71.set_size(2);
tmp_71[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__highBeamHeadlightsOn);
tmp_71[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_72;
// this is a var template
tmp_72.set_size(2);
tmp_72[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__highBeamLightsOn));
{
BITSTRING_template tmp_73;
tmp_73.set_type(VALUE_LIST, 2);
tmp_73.list_item(0) = OMIT_VALUE;
tmp_73.list_item(1) = LibItsCam__Templates::mw__highBeamLightsOff;
tmp_72[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_73));
}
f__CAM__MSD__INA__BV__01(cs_44, tmp_71, tmp_72);
}
current_location.update_lineno(1135);
/* ItsCam_TpFunctions.ttcn, line 1135 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1136);
/* ItsCam_TpFunctions.ttcn, line 1136 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__19(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_19(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_19", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__20()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1143, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_20");
current_location.update_lineno(1148);
/* ItsCam_TpFunctions.ttcn, line 1148 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1149);
/* ItsCam_TpFunctions.ttcn, line 1149 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1150);
/* ItsCam_TpFunctions.ttcn, line 1150 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1151);
/* ItsCam_TpFunctions.ttcn, line 1151 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1155);
/* ItsCam_TpFunctions.ttcn, line 1155 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1160);
/* ItsCam_TpFunctions.ttcn, line 1160 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1161);
/* ItsCam_TpFunctions.ttcn, line 1161 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1164);
/* ItsCam_TpFunctions.ttcn, line 1164 */
{
UtCamTriggers_template tmp_74;
// this is a var template
tmp_74.set_size(1);
tmp_74[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__leftTurnSignalOn);
CamPdus_template tmp_75;
// this is a var template
tmp_75.set_size(1);
tmp_75[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__leftTurnSignalOn));
f__CAM__MSD__INA__BV__01(cs_45, tmp_74, tmp_75);
}
current_location.update_lineno(1171);
/* ItsCam_TpFunctions.ttcn, line 1171 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1172);
/* ItsCam_TpFunctions.ttcn, line 1172 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__20(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_20(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_20", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__21()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1179, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_21");
current_location.update_lineno(1184);
/* ItsCam_TpFunctions.ttcn, line 1184 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1185);
/* ItsCam_TpFunctions.ttcn, line 1185 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1186);
/* ItsCam_TpFunctions.ttcn, line 1186 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1187);
/* ItsCam_TpFunctions.ttcn, line 1187 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1191);
/* ItsCam_TpFunctions.ttcn, line 1191 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1196);
/* ItsCam_TpFunctions.ttcn, line 1196 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1197);
/* ItsCam_TpFunctions.ttcn, line 1197 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1200);
/* ItsCam_TpFunctions.ttcn, line 1200 */
{
UtCamTriggers_template tmp_76;
// this is a var template
tmp_76.set_size(2);
tmp_76[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__leftTurnSignalOn);
tmp_76[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_77;
// this is a var template
tmp_77.set_size(2);
tmp_77[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__leftTurnSignalOn));
{
BITSTRING_template tmp_78;
tmp_78.set_type(VALUE_LIST, 2);
tmp_78.list_item(0) = OMIT_VALUE;
tmp_78.list_item(1) = LibItsCam__Templates::mw__leftTurnSignalOff;
tmp_77[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_78));
}
f__CAM__MSD__INA__BV__01(cs_46, tmp_76, tmp_77);
}
current_location.update_lineno(1207);
/* ItsCam_TpFunctions.ttcn, line 1207 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1208);
/* ItsCam_TpFunctions.ttcn, line 1208 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__21(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_21(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_21", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__22()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1215, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_22");
current_location.update_lineno(1220);
/* ItsCam_TpFunctions.ttcn, line 1220 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1221);
/* ItsCam_TpFunctions.ttcn, line 1221 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1222);
/* ItsCam_TpFunctions.ttcn, line 1222 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1223);
/* ItsCam_TpFunctions.ttcn, line 1223 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1227);
/* ItsCam_TpFunctions.ttcn, line 1227 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1232);
/* ItsCam_TpFunctions.ttcn, line 1232 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1233);
/* ItsCam_TpFunctions.ttcn, line 1233 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1236);
/* ItsCam_TpFunctions.ttcn, line 1236 */
{
UtCamTriggers_template tmp_79;
// this is a var template
tmp_79.set_size(1);
tmp_79[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__rightTurnSignalOn);
CamPdus_template tmp_80;
// this is a var template
tmp_80.set_size(1);
tmp_80[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__rightTurnSignalOn));
f__CAM__MSD__INA__BV__01(cs_47, tmp_79, tmp_80);
}
current_location.update_lineno(1243);
/* ItsCam_TpFunctions.ttcn, line 1243 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1244);
/* ItsCam_TpFunctions.ttcn, line 1244 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__22(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_22(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_22", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__23()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1251, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_23");
current_location.update_lineno(1256);
/* ItsCam_TpFunctions.ttcn, line 1256 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1257);
/* ItsCam_TpFunctions.ttcn, line 1257 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1258);
/* ItsCam_TpFunctions.ttcn, line 1258 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1259);
/* ItsCam_TpFunctions.ttcn, line 1259 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1263);
/* ItsCam_TpFunctions.ttcn, line 1263 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1268);
/* ItsCam_TpFunctions.ttcn, line 1268 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1269);
/* ItsCam_TpFunctions.ttcn, line 1269 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1272);
/* ItsCam_TpFunctions.ttcn, line 1272 */
{
UtCamTriggers_template tmp_81;
// this is a var template
tmp_81.set_size(2);
tmp_81[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__rightTurnSignalOn);
tmp_81[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_82;
// this is a var template
tmp_82.set_size(2);
tmp_82[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__rightTurnSignalOn));
{
BITSTRING_template tmp_83;
tmp_83.set_type(VALUE_LIST, 2);
tmp_83.list_item(0) = OMIT_VALUE;
tmp_83.list_item(1) = LibItsCam__Templates::mw__rightTurnSignalOff;
tmp_82[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_83));
}
f__CAM__MSD__INA__BV__01(cs_48, tmp_81, tmp_82);
}
current_location.update_lineno(1279);
/* ItsCam_TpFunctions.ttcn, line 1279 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1280);
/* ItsCam_TpFunctions.ttcn, line 1280 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__23(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_23(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_23", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__24()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1287, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_24");
current_location.update_lineno(1292);
/* ItsCam_TpFunctions.ttcn, line 1292 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1293);
/* ItsCam_TpFunctions.ttcn, line 1293 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1294);
/* ItsCam_TpFunctions.ttcn, line 1294 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1295);
/* ItsCam_TpFunctions.ttcn, line 1295 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1299);
/* ItsCam_TpFunctions.ttcn, line 1299 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1304);
/* ItsCam_TpFunctions.ttcn, line 1304 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1305);
/* ItsCam_TpFunctions.ttcn, line 1305 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1308);
/* ItsCam_TpFunctions.ttcn, line 1308 */
{
UtCamTriggers_template tmp_84;
// this is a var template
tmp_84.set_size(1);
tmp_84[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__daytimeRunningLightsOn);
CamPdus_template tmp_85;
// this is a var template
tmp_85.set_size(1);
tmp_85[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__daytimeRunningLightsOn));
f__CAM__MSD__INA__BV__01(cs_49, tmp_84, tmp_85);
}
current_location.update_lineno(1315);
/* ItsCam_TpFunctions.ttcn, line 1315 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1316);
/* ItsCam_TpFunctions.ttcn, line 1316 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__24(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_24(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_24", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__25()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1323, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_25");
current_location.update_lineno(1326);
/* ItsCam_TpFunctions.ttcn, line 1326 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1327);
/* ItsCam_TpFunctions.ttcn, line 1327 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1328);
/* ItsCam_TpFunctions.ttcn, line 1328 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1329);
/* ItsCam_TpFunctions.ttcn, line 1329 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1335);
/* ItsCam_TpFunctions.ttcn, line 1335 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1340);
/* ItsCam_TpFunctions.ttcn, line 1340 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1341);
/* ItsCam_TpFunctions.ttcn, line 1341 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1344);
/* ItsCam_TpFunctions.ttcn, line 1344 */
{
UtCamTriggers_template tmp_86;
// this is a var template
tmp_86.set_size(2);
tmp_86[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__daytimeRunningLightsOn);
tmp_86[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_87;
// this is a var template
tmp_87.set_size(2);
tmp_87[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__daytimeRunningLightsOn));
{
BITSTRING_template tmp_88;
tmp_88.set_type(VALUE_LIST, 2);
tmp_88.list_item(0) = OMIT_VALUE;
tmp_88.list_item(1) = LibItsCam__Templates::mw__daytimeRunningLightsOff;
tmp_87[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_88));
}
f__CAM__MSD__INA__BV__01(cs_50, tmp_86, tmp_87);
}
current_location.update_lineno(1351);
/* ItsCam_TpFunctions.ttcn, line 1351 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1352);
/* ItsCam_TpFunctions.ttcn, line 1352 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__25(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_25(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_25", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__26()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1359, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_26");
current_location.update_lineno(1364);
/* ItsCam_TpFunctions.ttcn, line 1364 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1365);
/* ItsCam_TpFunctions.ttcn, line 1365 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1366);
/* ItsCam_TpFunctions.ttcn, line 1366 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1367);
/* ItsCam_TpFunctions.ttcn, line 1367 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1371);
/* ItsCam_TpFunctions.ttcn, line 1371 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1376);
/* ItsCam_TpFunctions.ttcn, line 1376 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1377);
/* ItsCam_TpFunctions.ttcn, line 1377 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1380);
/* ItsCam_TpFunctions.ttcn, line 1380 */
{
UtCamTriggers_template tmp_89;
// this is a var template
tmp_89.set_size(1);
tmp_89[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__reverseLightOn);
CamPdus_template tmp_90;
// this is a var template
tmp_90.set_size(1);
tmp_90[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__reverseLightOn));
f__CAM__MSD__INA__BV__01(cs_51, tmp_89, tmp_90);
}
current_location.update_lineno(1387);
/* ItsCam_TpFunctions.ttcn, line 1387 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1388);
/* ItsCam_TpFunctions.ttcn, line 1388 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__26(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_26(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_26", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__27()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1395, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_27");
current_location.update_lineno(1400);
/* ItsCam_TpFunctions.ttcn, line 1400 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1401);
/* ItsCam_TpFunctions.ttcn, line 1401 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1402);
/* ItsCam_TpFunctions.ttcn, line 1402 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1403);
/* ItsCam_TpFunctions.ttcn, line 1403 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1407);
/* ItsCam_TpFunctions.ttcn, line 1407 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1412);
/* ItsCam_TpFunctions.ttcn, line 1412 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1413);
/* ItsCam_TpFunctions.ttcn, line 1413 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1416);
/* ItsCam_TpFunctions.ttcn, line 1416 */
{
UtCamTriggers_template tmp_91;
// this is a var template
tmp_91.set_size(2);
tmp_91[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__reverseLightOn);
tmp_91[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_92;
// this is a var template
tmp_92.set_size(2);
tmp_92[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__reverseLightOn));
{
BITSTRING_template tmp_93;
tmp_93.set_type(VALUE_LIST, 2);
tmp_93.list_item(0) = OMIT_VALUE;
tmp_93.list_item(1) = LibItsCam__Templates::mw__reverseLightOff;
tmp_92[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_93));
}
f__CAM__MSD__INA__BV__01(cs_52, tmp_91, tmp_92);
}
current_location.update_lineno(1423);
/* ItsCam_TpFunctions.ttcn, line 1423 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1424);
/* ItsCam_TpFunctions.ttcn, line 1424 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__27(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_27(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_27", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__28()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1431, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_28");
current_location.update_lineno(1436);
/* ItsCam_TpFunctions.ttcn, line 1436 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1437);
/* ItsCam_TpFunctions.ttcn, line 1437 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1438);
/* ItsCam_TpFunctions.ttcn, line 1438 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1439);
/* ItsCam_TpFunctions.ttcn, line 1439 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1443);
/* ItsCam_TpFunctions.ttcn, line 1443 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1448);
/* ItsCam_TpFunctions.ttcn, line 1448 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1449);
/* ItsCam_TpFunctions.ttcn, line 1449 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1452);
/* ItsCam_TpFunctions.ttcn, line 1452 */
{
UtCamTriggers_template tmp_94;
// this is a var template
tmp_94.set_size(1);
tmp_94[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__fogLightOn);
CamPdus_template tmp_95;
// this is a var template
tmp_95.set_size(1);
tmp_95[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__fogLightOn));
f__CAM__MSD__INA__BV__01(cs_53, tmp_94, tmp_95);
}
current_location.update_lineno(1459);
/* ItsCam_TpFunctions.ttcn, line 1459 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1460);
/* ItsCam_TpFunctions.ttcn, line 1460 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__28(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_28(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_28", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__29()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1467, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_29");
current_location.update_lineno(1472);
/* ItsCam_TpFunctions.ttcn, line 1472 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1473);
/* ItsCam_TpFunctions.ttcn, line 1473 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1474);
/* ItsCam_TpFunctions.ttcn, line 1474 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1475);
/* ItsCam_TpFunctions.ttcn, line 1475 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1479);
/* ItsCam_TpFunctions.ttcn, line 1479 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1484);
/* ItsCam_TpFunctions.ttcn, line 1484 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1485);
/* ItsCam_TpFunctions.ttcn, line 1485 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1488);
/* ItsCam_TpFunctions.ttcn, line 1488 */
{
UtCamTriggers_template tmp_96;
// this is a var template
tmp_96.set_size(2);
tmp_96[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__fogLightOn);
tmp_96[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_97;
// this is a var template
tmp_97.set_size(2);
tmp_97[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__fogLightOn));
{
BITSTRING_template tmp_98;
tmp_98.set_type(VALUE_LIST, 2);
tmp_98.list_item(0) = OMIT_VALUE;
tmp_98.list_item(1) = LibItsCam__Templates::mw__fogLightOff;
tmp_97[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_98));
}
f__CAM__MSD__INA__BV__01(cs_54, tmp_96, tmp_97);
}
current_location.update_lineno(1495);
/* ItsCam_TpFunctions.ttcn, line 1495 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1496);
/* ItsCam_TpFunctions.ttcn, line 1496 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__29(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_29(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_29", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__30()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1503, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_30");
current_location.update_lineno(1508);
/* ItsCam_TpFunctions.ttcn, line 1508 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1509);
/* ItsCam_TpFunctions.ttcn, line 1509 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1510);
/* ItsCam_TpFunctions.ttcn, line 1510 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1511);
/* ItsCam_TpFunctions.ttcn, line 1511 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1515);
/* ItsCam_TpFunctions.ttcn, line 1515 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1520);
/* ItsCam_TpFunctions.ttcn, line 1520 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1521);
/* ItsCam_TpFunctions.ttcn, line 1521 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1524);
/* ItsCam_TpFunctions.ttcn, line 1524 */
{
UtCamTriggers_template tmp_99;
// this is a var template
tmp_99.set_size(1);
tmp_99[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__parkingLightsOn);
CamPdus_template tmp_100;
// this is a var template
tmp_100.set_size(1);
tmp_100[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__parkingLightsOn));
f__CAM__MSD__INA__BV__01(cs_55, tmp_99, tmp_100);
}
current_location.update_lineno(1531);
/* ItsCam_TpFunctions.ttcn, line 1531 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1532);
/* ItsCam_TpFunctions.ttcn, line 1532 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__30(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_30(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_30", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__31()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1539, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_31");
current_location.update_lineno(1544);
/* ItsCam_TpFunctions.ttcn, line 1544 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1545);
/* ItsCam_TpFunctions.ttcn, line 1545 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1546);
/* ItsCam_TpFunctions.ttcn, line 1546 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1547);
/* ItsCam_TpFunctions.ttcn, line 1547 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1551);
/* ItsCam_TpFunctions.ttcn, line 1551 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1556);
/* ItsCam_TpFunctions.ttcn, line 1556 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1557);
/* ItsCam_TpFunctions.ttcn, line 1557 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1560);
/* ItsCam_TpFunctions.ttcn, line 1560 */
{
UtCamTriggers_template tmp_101;
// this is a var template
tmp_101.set_size(2);
tmp_101[0] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__parkingLightsOn);
tmp_101[1] = LibItsCam__Templates::m__setExteriorLightsStatus(LibItsCam__TypesAndValues::c__elAllLightsOff);
CamPdus_template tmp_102;
// this is a var template
tmp_102.set_size(2);
tmp_102[0] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(LibItsCam__Templates::mw__parkingLightsOn));
{
BITSTRING_template tmp_103;
tmp_103.set_type(VALUE_LIST, 2);
tmp_103.list_item(0) = OMIT_VALUE;
tmp_103.list_item(1) = LibItsCam__Templates::mw__parkingLightsOff;
tmp_102[1] = LibItsCam__Templates::mw__camMsg__LF__BV(LibItsCam__Templates::mw__LF__BV__extLights(tmp_103));
}
f__CAM__MSD__INA__BV__01(cs_56, tmp_101, tmp_102);
}
current_location.update_lineno(1567);
/* ItsCam_TpFunctions.ttcn, line 1567 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1568);
/* ItsCam_TpFunctions.ttcn, line 1568 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__31(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_31(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_31", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__32()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1575, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_32");
current_location.update_lineno(1578);
/* ItsCam_TpFunctions.ttcn, line 1578 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(1579);
/* ItsCam_TpFunctions.ttcn, line 1579 */
INTEGER_template v__headingVal(ANY_VALUE);
current_location.update_lineno(1580);
/* ItsCam_TpFunctions.ttcn, line 1580 */
BOOLEAN v__initialReceived(FALSE);
current_location.update_lineno(1581);
/* ItsCam_TpFunctions.ttcn, line 1581 */
INTEGER c__headingValOffset(1);
current_location.update_lineno(1584);
/* ItsCam_TpFunctions.ttcn, line 1584 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1585);
/* ItsCam_TpFunctions.ttcn, line 1585 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1586);
/* ItsCam_TpFunctions.ttcn, line 1586 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1587);
/* ItsCam_TpFunctions.ttcn, line 1587 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1591);
/* ItsCam_TpFunctions.ttcn, line 1591 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1596);
/* ItsCam_TpFunctions.ttcn, line 1596 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1597);
/* ItsCam_TpFunctions.ttcn, line 1597 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1600);
/* ItsCam_TpFunctions.ttcn, line 1600 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_57).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1603);
/* ItsCam_TpFunctions.ttcn, line 1603 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeHeading(1));
current_location.update_lineno(1605);
/* ItsCam_TpFunctions.ttcn, line 1605 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1606);
/* ItsCam_TpFunctions.ttcn, line 1606 */
{
tmp_104:
alt_status tmp_104_alt_flag_0 = ALT_MAYBE;
alt_status tmp_104_alt_flag_1 = ALT_MAYBE;
alt_status tmp_104_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_104_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1607);
/* ItsCam_TpFunctions.ttcn, line 1607 */
tmp_104_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__heading(v__headingVal))), &(v__camInd), any_compref, NULL);
if (tmp_104_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1608);
/* ItsCam_TpFunctions.ttcn, line 1608 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1609);
/* ItsCam_TpFunctions.ttcn, line 1609 */
if (v__initialReceived) {
current_location.update_lineno(1610);
/* ItsCam_TpFunctions.ttcn, line 1610 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1611);
/* ItsCam_TpFunctions.ttcn, line 1611 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(1614);
/* ItsCam_TpFunctions.ttcn, line 1614 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_24).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1615);
/* ItsCam_TpFunctions.ttcn, line 1615 */
v__initialReceived = TRUE;
current_location.update_lineno(1617);
/* ItsCam_TpFunctions.ttcn, line 1617 */
v__headingVal = mod((const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().heading().headingValue() + 1), 3601);
current_location.update_lineno(1618);
/* ItsCam_TpFunctions.ttcn, line 1618 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeHeading(1));
current_location.update_lineno(1619);
/* ItsCam_TpFunctions.ttcn, line 1619 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1620);
/* ItsCam_TpFunctions.ttcn, line 1620 */
goto tmp_104;
}
break;
}
}
if (tmp_104_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1623);
/* ItsCam_TpFunctions.ttcn, line 1623 */
tmp_104_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_104_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1624);
/* ItsCam_TpFunctions.ttcn, line 1624 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1625);
/* ItsCam_TpFunctions.ttcn, line 1625 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_104_default_flag == ALT_MAYBE) {
tmp_104_default_flag = TTCN_Default::try_altsteps();
if (tmp_104_default_flag == ALT_YES || tmp_104_default_flag == ALT_BREAK) break;
else if (tmp_104_default_flag == ALT_REPEAT) goto tmp_104;
}
current_location.update_lineno(1606);
/* ItsCam_TpFunctions.ttcn, line 1606 */
if (tmp_104_alt_flag_0 == ALT_NO && tmp_104_alt_flag_1 == ALT_NO && tmp_104_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1606 and 1627.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1630);
/* ItsCam_TpFunctions.ttcn, line 1630 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1631);
/* ItsCam_TpFunctions.ttcn, line 1631 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__32(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_32(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_32", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__33()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1638, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_33");
current_location.update_lineno(1641);
/* ItsCam_TpFunctions.ttcn, line 1641 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(1642);
/* ItsCam_TpFunctions.ttcn, line 1642 */
INTEGER_template v__speedVal(ANY_VALUE);
current_location.update_lineno(1643);
/* ItsCam_TpFunctions.ttcn, line 1643 */
BOOLEAN v__initialReceived(FALSE);
current_location.update_lineno(1644);
/* ItsCam_TpFunctions.ttcn, line 1644 */
INTEGER c__speedValOffset(100);
current_location.update_lineno(1647);
/* ItsCam_TpFunctions.ttcn, line 1647 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1648);
/* ItsCam_TpFunctions.ttcn, line 1648 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1649);
/* ItsCam_TpFunctions.ttcn, line 1649 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1650);
/* ItsCam_TpFunctions.ttcn, line 1650 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1654);
/* ItsCam_TpFunctions.ttcn, line 1654 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1659);
/* ItsCam_TpFunctions.ttcn, line 1659 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1660);
/* ItsCam_TpFunctions.ttcn, line 1660 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1663);
/* ItsCam_TpFunctions.ttcn, line 1663 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_58).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1666);
/* ItsCam_TpFunctions.ttcn, line 1666 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(100));
current_location.update_lineno(1668);
/* ItsCam_TpFunctions.ttcn, line 1668 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1669);
/* ItsCam_TpFunctions.ttcn, line 1669 */
{
tmp_107:
alt_status tmp_107_alt_flag_0 = ALT_MAYBE;
alt_status tmp_107_alt_flag_1 = ALT_MAYBE;
alt_status tmp_107_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_107_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1670);
/* ItsCam_TpFunctions.ttcn, line 1670 */
tmp_107_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__speed(v__speedVal))), &(v__camInd), any_compref, NULL);
if (tmp_107_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1671);
/* ItsCam_TpFunctions.ttcn, line 1671 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1672);
/* ItsCam_TpFunctions.ttcn, line 1672 */
if (v__initialReceived) {
current_location.update_lineno(1673);
/* ItsCam_TpFunctions.ttcn, line 1673 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1674);
/* ItsCam_TpFunctions.ttcn, line 1674 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(1677);
/* ItsCam_TpFunctions.ttcn, line 1677 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_24).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1678);
/* ItsCam_TpFunctions.ttcn, line 1678 */
v__initialReceived = TRUE;
current_location.update_lineno(1680);
/* ItsCam_TpFunctions.ttcn, line 1680 */
v__speedVal = mod((const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().speed().speedValue() + 100), 16384);
current_location.update_lineno(1681);
/* ItsCam_TpFunctions.ttcn, line 1681 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(100));
current_location.update_lineno(1682);
/* ItsCam_TpFunctions.ttcn, line 1682 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1683);
/* ItsCam_TpFunctions.ttcn, line 1683 */
goto tmp_107;
}
break;
}
}
if (tmp_107_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1686);
/* ItsCam_TpFunctions.ttcn, line 1686 */
tmp_107_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_107_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1687);
/* ItsCam_TpFunctions.ttcn, line 1687 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1688);
/* ItsCam_TpFunctions.ttcn, line 1688 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_107_default_flag == ALT_MAYBE) {
tmp_107_default_flag = TTCN_Default::try_altsteps();
if (tmp_107_default_flag == ALT_YES || tmp_107_default_flag == ALT_BREAK) break;
else if (tmp_107_default_flag == ALT_REPEAT) goto tmp_107;
}
current_location.update_lineno(1669);
/* ItsCam_TpFunctions.ttcn, line 1669 */
if (tmp_107_alt_flag_0 == ALT_NO && tmp_107_alt_flag_1 == ALT_NO && tmp_107_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1669 and 1690.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1693);
/* ItsCam_TpFunctions.ttcn, line 1693 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1694);
/* ItsCam_TpFunctions.ttcn, line 1694 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__33(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_33(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_33", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__34()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1701, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_34");
current_location.update_lineno(1704);
/* ItsCam_TpFunctions.ttcn, line 1704 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(1705);
/* ItsCam_TpFunctions.ttcn, line 1705 */
ITS__Container::DriveDirection v__driveVal(ITS__Container::DriveDirection::backward);
current_location.update_lineno(1708);
/* ItsCam_TpFunctions.ttcn, line 1708 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1709);
/* ItsCam_TpFunctions.ttcn, line 1709 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1710);
/* ItsCam_TpFunctions.ttcn, line 1710 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1711);
/* ItsCam_TpFunctions.ttcn, line 1711 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1715);
/* ItsCam_TpFunctions.ttcn, line 1715 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1720);
/* ItsCam_TpFunctions.ttcn, line 1720 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1721);
/* ItsCam_TpFunctions.ttcn, line 1721 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1724);
/* ItsCam_TpFunctions.ttcn, line 1724 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_59).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1727);
/* ItsCam_TpFunctions.ttcn, line 1727 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setDriveDirection(v__driveVal));
current_location.update_lineno(1729);
/* ItsCam_TpFunctions.ttcn, line 1729 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1730);
/* ItsCam_TpFunctions.ttcn, line 1730 */
{
tmp_110:
alt_status tmp_110_alt_flag_0 = ALT_MAYBE;
alt_status tmp_110_alt_flag_1 = ALT_MAYBE;
alt_status tmp_110_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_110_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1731);
/* ItsCam_TpFunctions.ttcn, line 1731 */
tmp_110_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__driveDirection(ITS__Container::DriveDirection_template(v__driveVal)))), &(v__camInd), any_compref, NULL);
if (tmp_110_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1732);
/* ItsCam_TpFunctions.ttcn, line 1732 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1733);
/* ItsCam_TpFunctions.ttcn, line 1733 */
if ((v__driveVal == ITS__Container::DriveDirection::forward)) {
current_location.update_lineno(1734);
/* ItsCam_TpFunctions.ttcn, line 1734 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1735);
/* ItsCam_TpFunctions.ttcn, line 1735 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(1738);
/* ItsCam_TpFunctions.ttcn, line 1738 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_24).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1740);
/* ItsCam_TpFunctions.ttcn, line 1740 */
v__driveVal = ITS__Container::DriveDirection::forward;
current_location.update_lineno(1741);
/* ItsCam_TpFunctions.ttcn, line 1741 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setDriveDirection(v__driveVal));
current_location.update_lineno(1742);
/* ItsCam_TpFunctions.ttcn, line 1742 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1743);
/* ItsCam_TpFunctions.ttcn, line 1743 */
goto tmp_110;
}
break;
}
}
if (tmp_110_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1746);
/* ItsCam_TpFunctions.ttcn, line 1746 */
tmp_110_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_110_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1747);
/* ItsCam_TpFunctions.ttcn, line 1747 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1748);
/* ItsCam_TpFunctions.ttcn, line 1748 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_110_default_flag == ALT_MAYBE) {
tmp_110_default_flag = TTCN_Default::try_altsteps();
if (tmp_110_default_flag == ALT_YES || tmp_110_default_flag == ALT_BREAK) break;
else if (tmp_110_default_flag == ALT_REPEAT) goto tmp_110;
}
current_location.update_lineno(1730);
/* ItsCam_TpFunctions.ttcn, line 1730 */
if (tmp_110_alt_flag_0 == ALT_NO && tmp_110_alt_flag_1 == ALT_NO && tmp_110_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1730 and 1750.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1753);
/* ItsCam_TpFunctions.ttcn, line 1753 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1754);
/* ItsCam_TpFunctions.ttcn, line 1754 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__34(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_34(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_34", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__01__35()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1761, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_01_35");
current_location.update_lineno(1764);
/* ItsCam_TpFunctions.ttcn, line 1764 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(1765);
/* ItsCam_TpFunctions.ttcn, line 1765 */
INTEGER_template v__yawRateVal(ANY_VALUE);
current_location.update_lineno(1766);
/* ItsCam_TpFunctions.ttcn, line 1766 */
BOOLEAN v__initialReceived(FALSE);
current_location.update_lineno(1767);
/* ItsCam_TpFunctions.ttcn, line 1767 */
INTEGER c__yawRateValOffset(1);
current_location.update_lineno(1770);
/* ItsCam_TpFunctions.ttcn, line 1770 */
if (((!(LibItsCam__Pics::PICS__CAM__GENERATION)) || LibItsCam__Pics::PICS__RSU)) {
current_location.update_lineno(1771);
/* ItsCam_TpFunctions.ttcn, line 1771 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1772);
/* ItsCam_TpFunctions.ttcn, line 1772 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1773);
/* ItsCam_TpFunctions.ttcn, line 1773 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1777);
/* ItsCam_TpFunctions.ttcn, line 1777 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1782);
/* ItsCam_TpFunctions.ttcn, line 1782 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1783);
/* ItsCam_TpFunctions.ttcn, line 1783 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1786);
/* ItsCam_TpFunctions.ttcn, line 1786 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_60).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1789);
/* ItsCam_TpFunctions.ttcn, line 1789 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeYawRate(1));
current_location.update_lineno(1791);
/* ItsCam_TpFunctions.ttcn, line 1791 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1792);
/* ItsCam_TpFunctions.ttcn, line 1792 */
{
tmp_112:
alt_status tmp_112_alt_flag_0 = ALT_MAYBE;
alt_status tmp_112_alt_flag_1 = ALT_MAYBE;
alt_status tmp_112_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_112_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1793);
/* ItsCam_TpFunctions.ttcn, line 1793 */
tmp_112_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__yawRate(v__yawRateVal))), &(v__camInd), any_compref, NULL);
if (tmp_112_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1794);
/* ItsCam_TpFunctions.ttcn, line 1794 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1795);
/* ItsCam_TpFunctions.ttcn, line 1795 */
if (v__initialReceived) {
current_location.update_lineno(1796);
/* ItsCam_TpFunctions.ttcn, line 1796 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1797);
/* ItsCam_TpFunctions.ttcn, line 1797 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(1800);
/* ItsCam_TpFunctions.ttcn, line 1800 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_24).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1801);
/* ItsCam_TpFunctions.ttcn, line 1801 */
v__initialReceived = TRUE;
current_location.update_lineno(1803);
/* ItsCam_TpFunctions.ttcn, line 1803 */
v__yawRateVal = const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().yawRate().yawRateValue();
current_location.update_lineno(1804);
/* ItsCam_TpFunctions.ttcn, line 1804 */
if ((v__yawRateVal.valueof() >= 32767)) {
current_location.update_lineno(1805);
/* ItsCam_TpFunctions.ttcn, line 1805 */
v__yawRateVal = -32766;
}
else {
current_location.update_lineno(1808);
/* ItsCam_TpFunctions.ttcn, line 1808 */
v__yawRateVal = (const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().yawRate().yawRateValue() + 1);
}
current_location.update_lineno(1810);
/* ItsCam_TpFunctions.ttcn, line 1810 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeYawRate(1));
current_location.update_lineno(1811);
/* ItsCam_TpFunctions.ttcn, line 1811 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1812);
/* ItsCam_TpFunctions.ttcn, line 1812 */
goto tmp_112;
}
break;
}
}
if (tmp_112_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1815);
/* ItsCam_TpFunctions.ttcn, line 1815 */
tmp_112_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_112_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1816);
/* ItsCam_TpFunctions.ttcn, line 1816 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1817);
/* ItsCam_TpFunctions.ttcn, line 1817 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_112_default_flag == ALT_MAYBE) {
tmp_112_default_flag = TTCN_Default::try_altsteps();
if (tmp_112_default_flag == ALT_YES || tmp_112_default_flag == ALT_BREAK) break;
else if (tmp_112_default_flag == ALT_REPEAT) goto tmp_112;
}
current_location.update_lineno(1792);
/* ItsCam_TpFunctions.ttcn, line 1792 */
if (tmp_112_alt_flag_0 == ALT_NO && tmp_112_alt_flag_1 == ALT_NO && tmp_112_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1792 and 1819.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1822);
/* ItsCam_TpFunctions.ttcn, line 1822 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1823);
/* ItsCam_TpFunctions.ttcn, line 1823 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__01__35(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01_35(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_01_35", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__02()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1832, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_02");
current_location.update_lineno(1837);
/* ItsCam_TpFunctions.ttcn, line 1837 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(1838);
/* ItsCam_TpFunctions.ttcn, line 1838 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1839);
/* ItsCam_TpFunctions.ttcn, line 1839 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1840);
/* ItsCam_TpFunctions.ttcn, line 1840 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1842);
/* ItsCam_TpFunctions.ttcn, line 1842 */
{
boolean tmp_117;
tmp_117 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_117) tmp_117 = (!(LibItsCam__Pics::PICS__PUBLICTRANS));
if (tmp_117) {
current_location.update_lineno(1843);
/* ItsCam_TpFunctions.ttcn, line 1843 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_61).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(1848);
/* ItsCam_TpFunctions.ttcn, line 1848 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1853);
/* ItsCam_TpFunctions.ttcn, line 1853 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1854);
/* ItsCam_TpFunctions.ttcn, line 1854 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1857);
/* ItsCam_TpFunctions.ttcn, line 1857 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__publicTransport));
current_location.update_lineno(1860);
/* ItsCam_TpFunctions.ttcn, line 1860 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_62).log();
LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__publicTransport__any)).log();
TTCN_Logger::log_event_str(" ***");
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1861);
/* ItsCam_TpFunctions.ttcn, line 1861 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1862);
/* ItsCam_TpFunctions.ttcn, line 1862 */
{
tmp_118:
alt_status tmp_118_alt_flag_0 = ALT_MAYBE;
alt_status tmp_118_alt_flag_1 = ALT_MAYBE;
alt_status tmp_118_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_118_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1863);
/* ItsCam_TpFunctions.ttcn, line 1863 */
tmp_118_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__publicTransport__any)), NULL, any_compref, NULL);
if (tmp_118_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1864);
/* ItsCam_TpFunctions.ttcn, line 1864 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1865);
/* ItsCam_TpFunctions.ttcn, line 1865 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1866);
/* ItsCam_TpFunctions.ttcn, line 1866 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_118_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1868);
/* ItsCam_TpFunctions.ttcn, line 1868 */
tmp_118_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_118_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1869);
/* ItsCam_TpFunctions.ttcn, line 1869 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1870);
/* ItsCam_TpFunctions.ttcn, line 1870 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_118_default_flag == ALT_MAYBE) {
tmp_118_default_flag = TTCN_Default::try_altsteps();
if (tmp_118_default_flag == ALT_YES || tmp_118_default_flag == ALT_BREAK) break;
else if (tmp_118_default_flag == ALT_REPEAT) goto tmp_118;
}
current_location.update_lineno(1862);
/* ItsCam_TpFunctions.ttcn, line 1862 */
if (tmp_118_alt_flag_0 == ALT_NO && tmp_118_alt_flag_1 == ALT_NO && tmp_118_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1862 and 1872.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1875);
/* ItsCam_TpFunctions.ttcn, line 1875 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1876);
/* ItsCam_TpFunctions.ttcn, line 1876 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__02(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_02(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_02", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__03()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1883, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_03");
current_location.update_lineno(1888);
/* ItsCam_TpFunctions.ttcn, line 1888 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(1889);
/* ItsCam_TpFunctions.ttcn, line 1889 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1890);
/* ItsCam_TpFunctions.ttcn, line 1890 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1891);
/* ItsCam_TpFunctions.ttcn, line 1891 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1893);
/* ItsCam_TpFunctions.ttcn, line 1893 */
{
boolean tmp_119;
tmp_119 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_119) tmp_119 = (!(LibItsCam__Pics::PICS__SPECIALTRANS));
if (tmp_119) {
current_location.update_lineno(1894);
/* ItsCam_TpFunctions.ttcn, line 1894 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_63).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(1899);
/* ItsCam_TpFunctions.ttcn, line 1899 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1904);
/* ItsCam_TpFunctions.ttcn, line 1904 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1905);
/* ItsCam_TpFunctions.ttcn, line 1905 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1908);
/* ItsCam_TpFunctions.ttcn, line 1908 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__specialTransport));
current_location.update_lineno(1911);
/* ItsCam_TpFunctions.ttcn, line 1911 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1912);
/* ItsCam_TpFunctions.ttcn, line 1912 */
{
tmp_120:
alt_status tmp_120_alt_flag_0 = ALT_MAYBE;
alt_status tmp_120_alt_flag_1 = ALT_MAYBE;
alt_status tmp_120_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_120_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1913);
/* ItsCam_TpFunctions.ttcn, line 1913 */
tmp_120_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__specialTransport__any)), NULL, any_compref, NULL);
if (tmp_120_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1914);
/* ItsCam_TpFunctions.ttcn, line 1914 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1915);
/* ItsCam_TpFunctions.ttcn, line 1915 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1916);
/* ItsCam_TpFunctions.ttcn, line 1916 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_120_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1918);
/* ItsCam_TpFunctions.ttcn, line 1918 */
tmp_120_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_120_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1919);
/* ItsCam_TpFunctions.ttcn, line 1919 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1920);
/* ItsCam_TpFunctions.ttcn, line 1920 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_120_default_flag == ALT_MAYBE) {
tmp_120_default_flag = TTCN_Default::try_altsteps();
if (tmp_120_default_flag == ALT_YES || tmp_120_default_flag == ALT_BREAK) break;
else if (tmp_120_default_flag == ALT_REPEAT) goto tmp_120;
}
current_location.update_lineno(1912);
/* ItsCam_TpFunctions.ttcn, line 1912 */
if (tmp_120_alt_flag_0 == ALT_NO && tmp_120_alt_flag_1 == ALT_NO && tmp_120_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1912 and 1922.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1925);
/* ItsCam_TpFunctions.ttcn, line 1925 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1926);
/* ItsCam_TpFunctions.ttcn, line 1926 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__03(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_03(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_03", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__04()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1933, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_04");
current_location.update_lineno(1938);
/* ItsCam_TpFunctions.ttcn, line 1938 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(1939);
/* ItsCam_TpFunctions.ttcn, line 1939 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1940);
/* ItsCam_TpFunctions.ttcn, line 1940 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1941);
/* ItsCam_TpFunctions.ttcn, line 1941 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1943);
/* ItsCam_TpFunctions.ttcn, line 1943 */
{
boolean tmp_121;
tmp_121 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_121) tmp_121 = (!(LibItsCam__Pics::PICS__DANGEROUSGOODS));
if (tmp_121) {
current_location.update_lineno(1944);
/* ItsCam_TpFunctions.ttcn, line 1944 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_64).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(1949);
/* ItsCam_TpFunctions.ttcn, line 1949 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(1954);
/* ItsCam_TpFunctions.ttcn, line 1954 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(1955);
/* ItsCam_TpFunctions.ttcn, line 1955 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(1958);
/* ItsCam_TpFunctions.ttcn, line 1958 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__dangerousGoods));
current_location.update_lineno(1961);
/* ItsCam_TpFunctions.ttcn, line 1961 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(1962);
/* ItsCam_TpFunctions.ttcn, line 1962 */
{
tmp_122:
alt_status tmp_122_alt_flag_0 = ALT_MAYBE;
alt_status tmp_122_alt_flag_1 = ALT_MAYBE;
alt_status tmp_122_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_122_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(1963);
/* ItsCam_TpFunctions.ttcn, line 1963 */
tmp_122_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__dangerousGoods__any)), NULL, any_compref, NULL);
if (tmp_122_alt_flag_0 == ALT_YES) {
current_location.update_lineno(1964);
/* ItsCam_TpFunctions.ttcn, line 1964 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(1965);
/* ItsCam_TpFunctions.ttcn, line 1965 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1966);
/* ItsCam_TpFunctions.ttcn, line 1966 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_122_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(1968);
/* ItsCam_TpFunctions.ttcn, line 1968 */
tmp_122_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_122_alt_flag_1 == ALT_YES) {
current_location.update_lineno(1969);
/* ItsCam_TpFunctions.ttcn, line 1969 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1970);
/* ItsCam_TpFunctions.ttcn, line 1970 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_122_default_flag == ALT_MAYBE) {
tmp_122_default_flag = TTCN_Default::try_altsteps();
if (tmp_122_default_flag == ALT_YES || tmp_122_default_flag == ALT_BREAK) break;
else if (tmp_122_default_flag == ALT_REPEAT) goto tmp_122;
}
current_location.update_lineno(1962);
/* ItsCam_TpFunctions.ttcn, line 1962 */
if (tmp_122_alt_flag_0 == ALT_NO && tmp_122_alt_flag_1 == ALT_NO && tmp_122_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 1962 and 1972.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(1975);
/* ItsCam_TpFunctions.ttcn, line 1975 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(1976);
/* ItsCam_TpFunctions.ttcn, line 1976 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__04(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_04(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_04", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__05()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 1983, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_05");
current_location.update_lineno(1988);
/* ItsCam_TpFunctions.ttcn, line 1988 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(1989);
/* ItsCam_TpFunctions.ttcn, line 1989 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(1990);
/* ItsCam_TpFunctions.ttcn, line 1990 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(1991);
/* ItsCam_TpFunctions.ttcn, line 1991 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(1993);
/* ItsCam_TpFunctions.ttcn, line 1993 */
{
boolean tmp_123;
tmp_123 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_123) tmp_123 = (!(LibItsCam__Pics::PICS__ROADWORKS));
if (tmp_123) {
current_location.update_lineno(1994);
/* ItsCam_TpFunctions.ttcn, line 1994 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_65).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(1999);
/* ItsCam_TpFunctions.ttcn, line 1999 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2004);
/* ItsCam_TpFunctions.ttcn, line 2004 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2005);
/* ItsCam_TpFunctions.ttcn, line 2005 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2008);
/* ItsCam_TpFunctions.ttcn, line 2008 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__roadWork));
current_location.update_lineno(2011);
/* ItsCam_TpFunctions.ttcn, line 2011 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2012);
/* ItsCam_TpFunctions.ttcn, line 2012 */
{
tmp_124:
alt_status tmp_124_alt_flag_0 = ALT_MAYBE;
alt_status tmp_124_alt_flag_1 = ALT_MAYBE;
alt_status tmp_124_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_124_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2013);
/* ItsCam_TpFunctions.ttcn, line 2013 */
tmp_124_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__roadWorks__any)), NULL, any_compref, NULL);
if (tmp_124_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2014);
/* ItsCam_TpFunctions.ttcn, line 2014 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2015);
/* ItsCam_TpFunctions.ttcn, line 2015 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2016);
/* ItsCam_TpFunctions.ttcn, line 2016 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_124_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2018);
/* ItsCam_TpFunctions.ttcn, line 2018 */
tmp_124_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_124_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2019);
/* ItsCam_TpFunctions.ttcn, line 2019 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2020);
/* ItsCam_TpFunctions.ttcn, line 2020 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_124_default_flag == ALT_MAYBE) {
tmp_124_default_flag = TTCN_Default::try_altsteps();
if (tmp_124_default_flag == ALT_YES || tmp_124_default_flag == ALT_BREAK) break;
else if (tmp_124_default_flag == ALT_REPEAT) goto tmp_124;
}
current_location.update_lineno(2012);
/* ItsCam_TpFunctions.ttcn, line 2012 */
if (tmp_124_alt_flag_0 == ALT_NO && tmp_124_alt_flag_1 == ALT_NO && tmp_124_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2012 and 2022.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2025);
/* ItsCam_TpFunctions.ttcn, line 2025 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2026);
/* ItsCam_TpFunctions.ttcn, line 2026 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__05(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_05(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_05", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__06()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2033, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_06");
current_location.update_lineno(2038);
/* ItsCam_TpFunctions.ttcn, line 2038 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2039);
/* ItsCam_TpFunctions.ttcn, line 2039 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2040);
/* ItsCam_TpFunctions.ttcn, line 2040 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2041);
/* ItsCam_TpFunctions.ttcn, line 2041 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2043);
/* ItsCam_TpFunctions.ttcn, line 2043 */
{
boolean tmp_125;
tmp_125 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_125) tmp_125 = (!(LibItsCam__Pics::PICS__RESCUE));
if (tmp_125) {
current_location.update_lineno(2044);
/* ItsCam_TpFunctions.ttcn, line 2044 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_66).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(2049);
/* ItsCam_TpFunctions.ttcn, line 2049 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2054);
/* ItsCam_TpFunctions.ttcn, line 2054 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2055);
/* ItsCam_TpFunctions.ttcn, line 2055 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2058);
/* ItsCam_TpFunctions.ttcn, line 2058 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__rescue));
current_location.update_lineno(2061);
/* ItsCam_TpFunctions.ttcn, line 2061 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2062);
/* ItsCam_TpFunctions.ttcn, line 2062 */
{
tmp_126:
alt_status tmp_126_alt_flag_0 = ALT_MAYBE;
alt_status tmp_126_alt_flag_1 = ALT_MAYBE;
alt_status tmp_126_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_126_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2063);
/* ItsCam_TpFunctions.ttcn, line 2063 */
tmp_126_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__rescue__any)), NULL, any_compref, NULL);
if (tmp_126_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2064);
/* ItsCam_TpFunctions.ttcn, line 2064 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2065);
/* ItsCam_TpFunctions.ttcn, line 2065 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2066);
/* ItsCam_TpFunctions.ttcn, line 2066 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_126_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2068);
/* ItsCam_TpFunctions.ttcn, line 2068 */
tmp_126_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_126_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2069);
/* ItsCam_TpFunctions.ttcn, line 2069 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2070);
/* ItsCam_TpFunctions.ttcn, line 2070 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_126_default_flag == ALT_MAYBE) {
tmp_126_default_flag = TTCN_Default::try_altsteps();
if (tmp_126_default_flag == ALT_YES || tmp_126_default_flag == ALT_BREAK) break;
else if (tmp_126_default_flag == ALT_REPEAT) goto tmp_126;
}
current_location.update_lineno(2062);
/* ItsCam_TpFunctions.ttcn, line 2062 */
if (tmp_126_alt_flag_0 == ALT_NO && tmp_126_alt_flag_1 == ALT_NO && tmp_126_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2062 and 2072.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2075);
/* ItsCam_TpFunctions.ttcn, line 2075 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2076);
/* ItsCam_TpFunctions.ttcn, line 2076 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__06(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_06(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_06", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__07()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2083, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_07");
current_location.update_lineno(2088);
/* ItsCam_TpFunctions.ttcn, line 2088 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2089);
/* ItsCam_TpFunctions.ttcn, line 2089 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2090);
/* ItsCam_TpFunctions.ttcn, line 2090 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2091);
/* ItsCam_TpFunctions.ttcn, line 2091 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2093);
/* ItsCam_TpFunctions.ttcn, line 2093 */
{
boolean tmp_127;
tmp_127 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_127) tmp_127 = (!(LibItsCam__Pics::PICS__EMERGENCY));
if (tmp_127) {
current_location.update_lineno(2094);
/* ItsCam_TpFunctions.ttcn, line 2094 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_67).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(2099);
/* ItsCam_TpFunctions.ttcn, line 2099 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2104);
/* ItsCam_TpFunctions.ttcn, line 2104 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2105);
/* ItsCam_TpFunctions.ttcn, line 2105 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2108);
/* ItsCam_TpFunctions.ttcn, line 2108 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__emergency));
current_location.update_lineno(2111);
/* ItsCam_TpFunctions.ttcn, line 2111 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2112);
/* ItsCam_TpFunctions.ttcn, line 2112 */
{
tmp_128:
alt_status tmp_128_alt_flag_0 = ALT_MAYBE;
alt_status tmp_128_alt_flag_1 = ALT_MAYBE;
alt_status tmp_128_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_128_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2113);
/* ItsCam_TpFunctions.ttcn, line 2113 */
tmp_128_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__emergency__any)), NULL, any_compref, NULL);
if (tmp_128_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2114);
/* ItsCam_TpFunctions.ttcn, line 2114 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2115);
/* ItsCam_TpFunctions.ttcn, line 2115 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2116);
/* ItsCam_TpFunctions.ttcn, line 2116 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_128_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2118);
/* ItsCam_TpFunctions.ttcn, line 2118 */
tmp_128_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_128_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2119);
/* ItsCam_TpFunctions.ttcn, line 2119 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2120);
/* ItsCam_TpFunctions.ttcn, line 2120 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_128_default_flag == ALT_MAYBE) {
tmp_128_default_flag = TTCN_Default::try_altsteps();
if (tmp_128_default_flag == ALT_YES || tmp_128_default_flag == ALT_BREAK) break;
else if (tmp_128_default_flag == ALT_REPEAT) goto tmp_128;
}
current_location.update_lineno(2112);
/* ItsCam_TpFunctions.ttcn, line 2112 */
if (tmp_128_alt_flag_0 == ALT_NO && tmp_128_alt_flag_1 == ALT_NO && tmp_128_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2112 and 2122.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2125);
/* ItsCam_TpFunctions.ttcn, line 2125 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2126);
/* ItsCam_TpFunctions.ttcn, line 2126 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__07(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_07(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_07", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__INA__BV__08()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2133, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_INA_BV_08");
current_location.update_lineno(2138);
/* ItsCam_TpFunctions.ttcn, line 2138 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2139);
/* ItsCam_TpFunctions.ttcn, line 2139 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2140);
/* ItsCam_TpFunctions.ttcn, line 2140 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2141);
/* ItsCam_TpFunctions.ttcn, line 2141 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2143);
/* ItsCam_TpFunctions.ttcn, line 2143 */
{
boolean tmp_129;
tmp_129 = (!(LibItsCam__Pics::PICS__SPECIALVEHICLECONTAINER));
if (tmp_129) tmp_129 = (!(LibItsCam__Pics::PICS__SAFETY__CAR));
if (tmp_129) {
current_location.update_lineno(2144);
/* ItsCam_TpFunctions.ttcn, line 2144 */
try {
TTCN_Logger::begin_event(TTCN_USER);
(TTCN_Runtime::get_testcasename() + cs_68).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
TTCN_error("testcase.stop");
}
}
current_location.update_lineno(2149);
/* ItsCam_TpFunctions.ttcn, line 2149 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2154);
/* ItsCam_TpFunctions.ttcn, line 2154 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2155);
/* ItsCam_TpFunctions.ttcn, line 2155 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2158);
/* ItsCam_TpFunctions.ttcn, line 2158 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__setVehicleRole(LibItsCam__TypesAndValues::c__vehicleRole__safetyCar));
current_location.update_lineno(2161);
/* ItsCam_TpFunctions.ttcn, line 2161 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2162);
/* ItsCam_TpFunctions.ttcn, line 2162 */
{
tmp_130:
alt_status tmp_130_alt_flag_0 = ALT_MAYBE;
alt_status tmp_130_alt_flag_1 = ALT_MAYBE;
alt_status tmp_130_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_130_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2163);
/* ItsCam_TpFunctions.ttcn, line 2163 */
tmp_130_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__SVC(LibItsCam__Templates::mw__safetyCar__any)), NULL, any_compref, NULL);
if (tmp_130_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2164);
/* ItsCam_TpFunctions.ttcn, line 2164 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2165);
/* ItsCam_TpFunctions.ttcn, line 2165 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2166);
/* ItsCam_TpFunctions.ttcn, line 2166 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_130_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2168);
/* ItsCam_TpFunctions.ttcn, line 2168 */
tmp_130_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_130_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2169);
/* ItsCam_TpFunctions.ttcn, line 2169 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2170);
/* ItsCam_TpFunctions.ttcn, line 2170 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_130_default_flag == ALT_MAYBE) {
tmp_130_default_flag = TTCN_Default::try_altsteps();
if (tmp_130_default_flag == ALT_YES || tmp_130_default_flag == ALT_BREAK) break;
else if (tmp_130_default_flag == ALT_REPEAT) goto tmp_130;
}
current_location.update_lineno(2162);
/* ItsCam_TpFunctions.ttcn, line 2162 */
if (tmp_130_alt_flag_0 == ALT_NO && tmp_130_alt_flag_1 == ALT_NO && tmp_130_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2162 and 2172.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2175);
/* ItsCam_TpFunctions.ttcn, line 2175 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2176);
/* ItsCam_TpFunctions.ttcn, line 2176 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__INA__BV__08(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_08(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_INA_BV_08", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__GFQ__TI__01()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2189, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_01");
current_location.update_lineno(2192);
/* ItsCam_TpFunctions.ttcn, line 2192 */
TIMER t__minTransInterval("t_minTransInterval", (LibItsCam__Pics::PICS__T__GENCAMMIN * 9.0e-1));
current_location.update_lineno(2193);
/* ItsCam_TpFunctions.ttcn, line 2193 */
VALUE_ARRAY<INTEGER, 5, 0> v__speedValues;
v__speedValues[0] = 1000;
v__speedValues[1] = 2000;
v__speedValues[2] = 3000;
v__speedValues[3] = 4000;
v__speedValues[4] = 5000;
current_location.update_lineno(2194);
/* ItsCam_TpFunctions.ttcn, line 2194 */
INTEGER v__cntSpeed;
current_location.update_lineno(2194);
/* ItsCam_TpFunctions.ttcn, line 2194 */
INTEGER v__cntTime;
current_location.update_lineno(2195);
/* ItsCam_TpFunctions.ttcn, line 2195 */
LibCommon__VerdictControl::FncRetCode v__ret;
current_location.update_lineno(2198);
/* ItsCam_TpFunctions.ttcn, line 2198 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2199);
/* ItsCam_TpFunctions.ttcn, line 2199 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2200);
/* ItsCam_TpFunctions.ttcn, line 2200 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2201);
/* ItsCam_TpFunctions.ttcn, line 2201 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2205);
/* ItsCam_TpFunctions.ttcn, line 2205 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2210);
/* ItsCam_TpFunctions.ttcn, line 2210 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2211);
/* ItsCam_TpFunctions.ttcn, line 2211 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2212);
/* ItsCam_TpFunctions.ttcn, line 2212 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2213);
/* ItsCam_TpFunctions.ttcn, line 2213 */
{
tmp_131:
alt_status tmp_131_alt_flag_0 = ALT_MAYBE;
alt_status tmp_131_alt_flag_1 = ALT_MAYBE;
alt_status tmp_131_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_131_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2214);
/* ItsCam_TpFunctions.ttcn, line 2214 */
tmp_131_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_131_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2215);
/* ItsCam_TpFunctions.ttcn, line 2215 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2216);
/* ItsCam_TpFunctions.ttcn, line 2216 */
t__minTransInterval.start();
current_location.update_lineno(2217);
/* ItsCam_TpFunctions.ttcn, line 2217 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2218);
/* ItsCam_TpFunctions.ttcn, line 2218 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_131_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2220);
/* ItsCam_TpFunctions.ttcn, line 2220 */
tmp_131_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_131_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2221);
/* ItsCam_TpFunctions.ttcn, line 2221 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2222);
/* ItsCam_TpFunctions.ttcn, line 2222 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_131_default_flag == ALT_MAYBE) {
tmp_131_default_flag = TTCN_Default::try_altsteps();
if (tmp_131_default_flag == ALT_YES || tmp_131_default_flag == ALT_BREAK) break;
else if (tmp_131_default_flag == ALT_REPEAT) goto tmp_131;
}
current_location.update_lineno(2213);
/* ItsCam_TpFunctions.ttcn, line 2213 */
if (tmp_131_alt_flag_0 == ALT_NO && tmp_131_alt_flag_1 == ALT_NO && tmp_131_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2213 and 2224.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2227);
/* ItsCam_TpFunctions.ttcn, line 2227 */
v__cntSpeed = 0;
current_location.update_lineno(2227);
/* ItsCam_TpFunctions.ttcn, line 2227 */
for ( ; ; ) {
current_location.update_lineno(2227);
/* ItsCam_TpFunctions.ttcn, line 2227 */
if (!(v__cntSpeed < v__speedValues.lengthof())) break;
current_location.update_lineno(2228);
/* ItsCam_TpFunctions.ttcn, line 2228 */
v__cntTime = 0;
current_location.update_lineno(2228);
/* ItsCam_TpFunctions.ttcn, line 2228 */
for ( ; ; ) {
current_location.update_lineno(2228);
/* ItsCam_TpFunctions.ttcn, line 2228 */
if (!(v__cntTime < 10)) break;
current_location.update_lineno(2229);
/* ItsCam_TpFunctions.ttcn, line 2229 */
v__ret = f__CAM__MSD__GFQ__TI__01__helper(t__minTransInterval);
current_location.update_lineno(2231);
/* ItsCam_TpFunctions.ttcn, line 2231 */
if(v__ret == LibCommon__VerdictControl::FncRetCode::e__error) goto tmp_135_0;
current_location.update_lineno(2235);
/* ItsCam_TpFunctions.ttcn, line 2235 */
if(v__ret == LibCommon__VerdictControl::FncRetCode::e__timeout) goto tmp_135_1;
goto tmp_135_end;
tmp_135_0:
{
current_location.update_lineno(2232);
/* ItsCam_TpFunctions.ttcn, line 2232 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_69).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2233);
/* ItsCam_TpFunctions.ttcn, line 2233 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
goto tmp_135_end;
}
tmp_135_1:
{
current_location.update_lineno(2236);
/* ItsCam_TpFunctions.ttcn, line 2236 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2237);
/* ItsCam_TpFunctions.ttcn, line 2237 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
goto tmp_135_end;
}
tmp_135_end: /* empty */;
current_location.update_lineno(2240);
/* ItsCam_TpFunctions.ttcn, line 2240 */
t__minTransInterval.start();
current_location.update_lineno(2228);
/* ItsCam_TpFunctions.ttcn, line 2228 */
{
INTEGER tmp_136;
++v__cntTime;
}
}
current_location.update_lineno(2242);
/* ItsCam_TpFunctions.ttcn, line 2242 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(const_cast< const VALUE_ARRAY<INTEGER, 5, 0>&>(v__speedValues)[v__cntSpeed]));
current_location.update_lineno(2227);
/* ItsCam_TpFunctions.ttcn, line 2227 */
{
INTEGER tmp_137;
++v__cntSpeed;
}
}
current_location.update_lineno(2244);
/* ItsCam_TpFunctions.ttcn, line 2244 */
t__minTransInterval.stop();
current_location.update_lineno(2245);
/* ItsCam_TpFunctions.ttcn, line 2245 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_70).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2246);
/* ItsCam_TpFunctions.ttcn, line 2246 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2249);
/* ItsCam_TpFunctions.ttcn, line 2249 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2250);
/* ItsCam_TpFunctions.ttcn, line 2250 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__TI__01(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_TI_01(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_TI_01", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__CAM__MSD__GFQ__TI__01__helper(TIMER& t__minTransInterval)
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2254, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_01_helper");
current_location.update_lineno(2256);
/* ItsCam_TpFunctions.ttcn, line 2256 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2257);
/* ItsCam_TpFunctions.ttcn, line 2257 */
{
tmp_138:
alt_status tmp_138_alt_flag_0 = ALT_MAYBE;
alt_status tmp_138_alt_flag_1 = ALT_MAYBE;
alt_status tmp_138_alt_flag_2 = ALT_MAYBE;
alt_status tmp_138_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_138_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2258);
/* ItsCam_TpFunctions.ttcn, line 2258 */
tmp_138_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_138_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2259);
/* ItsCam_TpFunctions.ttcn, line 2259 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2260);
/* ItsCam_TpFunctions.ttcn, line 2260 */
if (t__minTransInterval.running()) {
current_location.update_lineno(2261);
/* ItsCam_TpFunctions.ttcn, line 2261 */
return LibCommon__VerdictControl::FncRetCode::e__error;
}
break;
}
}
if (tmp_138_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2264);
/* ItsCam_TpFunctions.ttcn, line 2264 */
tmp_138_alt_flag_1 = t__minTransInterval.timeout();
if (tmp_138_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2265);
/* ItsCam_TpFunctions.ttcn, line 2265 */
goto tmp_138;
}
}
if (tmp_138_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2267);
/* ItsCam_TpFunctions.ttcn, line 2267 */
tmp_138_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_138_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2268);
/* ItsCam_TpFunctions.ttcn, line 2268 */
t__minTransInterval.stop();
current_location.update_lineno(2269);
/* ItsCam_TpFunctions.ttcn, line 2269 */
return LibCommon__VerdictControl::FncRetCode::e__timeout;
}
}
if (tmp_138_default_flag == ALT_MAYBE) {
tmp_138_default_flag = TTCN_Default::try_altsteps();
if (tmp_138_default_flag == ALT_YES || tmp_138_default_flag == ALT_BREAK) break;
else if (tmp_138_default_flag == ALT_REPEAT) goto tmp_138;
}
current_location.update_lineno(2257);
/* ItsCam_TpFunctions.ttcn, line 2257 */
if (tmp_138_alt_flag_0 == ALT_NO && tmp_138_alt_flag_1 == ALT_NO && tmp_138_alt_flag_2 == ALT_NO && tmp_138_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2257 and 2271.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2273);
/* ItsCam_TpFunctions.ttcn, line 2273 */
return LibCommon__VerdictControl::FncRetCode::e__success;
}

void f__CAM__MSD__GFQ__TI__02()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2283, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_02");
current_location.update_lineno(2286);
/* ItsCam_TpFunctions.ttcn, line 2286 */
TIMER t__maxTransInterval("t_maxTransInterval", (LibItsCam__Pics::PICS__T__GENCAMMAX * 1.1));
current_location.update_lineno(2287);
/* ItsCam_TpFunctions.ttcn, line 2287 */
INTEGER v__cntSpeed;
current_location.update_lineno(2287);
/* ItsCam_TpFunctions.ttcn, line 2287 */
INTEGER v__cntTime;
current_location.update_lineno(2288);
/* ItsCam_TpFunctions.ttcn, line 2288 */
LibCommon__VerdictControl::FncRetCode v__ret;
current_location.update_lineno(2291);
/* ItsCam_TpFunctions.ttcn, line 2291 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2292);
/* ItsCam_TpFunctions.ttcn, line 2292 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2293);
/* ItsCam_TpFunctions.ttcn, line 2293 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2294);
/* ItsCam_TpFunctions.ttcn, line 2294 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2298);
/* ItsCam_TpFunctions.ttcn, line 2298 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2303);
/* ItsCam_TpFunctions.ttcn, line 2303 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2304);
/* ItsCam_TpFunctions.ttcn, line 2304 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2305);
/* ItsCam_TpFunctions.ttcn, line 2305 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2306);
/* ItsCam_TpFunctions.ttcn, line 2306 */
{
tmp_139:
alt_status tmp_139_alt_flag_0 = ALT_MAYBE;
alt_status tmp_139_alt_flag_1 = ALT_MAYBE;
alt_status tmp_139_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_139_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2307);
/* ItsCam_TpFunctions.ttcn, line 2307 */
tmp_139_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_139_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2308);
/* ItsCam_TpFunctions.ttcn, line 2308 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2309);
/* ItsCam_TpFunctions.ttcn, line 2309 */
t__maxTransInterval.start();
current_location.update_lineno(2310);
/* ItsCam_TpFunctions.ttcn, line 2310 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2311);
/* ItsCam_TpFunctions.ttcn, line 2311 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_139_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2313);
/* ItsCam_TpFunctions.ttcn, line 2313 */
tmp_139_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_139_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2314);
/* ItsCam_TpFunctions.ttcn, line 2314 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2315);
/* ItsCam_TpFunctions.ttcn, line 2315 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_139_default_flag == ALT_MAYBE) {
tmp_139_default_flag = TTCN_Default::try_altsteps();
if (tmp_139_default_flag == ALT_YES || tmp_139_default_flag == ALT_BREAK) break;
else if (tmp_139_default_flag == ALT_REPEAT) goto tmp_139;
}
current_location.update_lineno(2306);
/* ItsCam_TpFunctions.ttcn, line 2306 */
if (tmp_139_alt_flag_0 == ALT_NO && tmp_139_alt_flag_1 == ALT_NO && tmp_139_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2306 and 2317.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2320);
/* ItsCam_TpFunctions.ttcn, line 2320 */
v__cntTime = 0;
current_location.update_lineno(2320);
/* ItsCam_TpFunctions.ttcn, line 2320 */
for ( ; ; ) {
current_location.update_lineno(2320);
/* ItsCam_TpFunctions.ttcn, line 2320 */
if (!(v__cntTime < 10)) break;
current_location.update_lineno(2321);
/* ItsCam_TpFunctions.ttcn, line 2321 */
v__ret = f__CAM__MSD__GFQ__TI__02__helper(t__maxTransInterval);
current_location.update_lineno(2323);
/* ItsCam_TpFunctions.ttcn, line 2323 */
if(v__ret == LibCommon__VerdictControl::FncRetCode::e__error) goto tmp_142_0;
current_location.update_lineno(2327);
/* ItsCam_TpFunctions.ttcn, line 2327 */
if(v__ret == LibCommon__VerdictControl::FncRetCode::e__timeout) goto tmp_142_1;
goto tmp_142_end;
tmp_142_0:
{
current_location.update_lineno(2324);
/* ItsCam_TpFunctions.ttcn, line 2324 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_71).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2325);
/* ItsCam_TpFunctions.ttcn, line 2325 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
goto tmp_142_end;
}
tmp_142_1:
{
current_location.update_lineno(2328);
/* ItsCam_TpFunctions.ttcn, line 2328 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2329);
/* ItsCam_TpFunctions.ttcn, line 2329 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
goto tmp_142_end;
}
tmp_142_end: /* empty */;
current_location.update_lineno(2320);
/* ItsCam_TpFunctions.ttcn, line 2320 */
{
INTEGER tmp_143;
++v__cntTime;
}
}
current_location.update_lineno(2333);
/* ItsCam_TpFunctions.ttcn, line 2333 */
t__maxTransInterval.stop();
current_location.update_lineno(2334);
/* ItsCam_TpFunctions.ttcn, line 2334 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_70).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2335);
/* ItsCam_TpFunctions.ttcn, line 2335 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2338);
/* ItsCam_TpFunctions.ttcn, line 2338 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2339);
/* ItsCam_TpFunctions.ttcn, line 2339 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__TI__02(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_TI_02(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_TI_02", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__CAM__MSD__GFQ__TI__02__helper(TIMER& t__maxTransInterval)
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2343, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_02_helper");
current_location.update_lineno(2345);
/* ItsCam_TpFunctions.ttcn, line 2345 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2346);
/* ItsCam_TpFunctions.ttcn, line 2346 */
{
tmp_144:
alt_status tmp_144_alt_flag_0 = ALT_MAYBE;
alt_status tmp_144_alt_flag_1 = ALT_MAYBE;
alt_status tmp_144_alt_flag_2 = ALT_MAYBE;
alt_status tmp_144_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_144_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2347);
/* ItsCam_TpFunctions.ttcn, line 2347 */
tmp_144_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_144_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2348);
/* ItsCam_TpFunctions.ttcn, line 2348 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2349);
/* ItsCam_TpFunctions.ttcn, line 2349 */
t__maxTransInterval.stop();
current_location.update_lineno(2350);
/* ItsCam_TpFunctions.ttcn, line 2350 */
t__maxTransInterval.start();
break;
}
}
if (tmp_144_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2352);
/* ItsCam_TpFunctions.ttcn, line 2352 */
tmp_144_alt_flag_1 = t__maxTransInterval.timeout();
if (tmp_144_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2353);
/* ItsCam_TpFunctions.ttcn, line 2353 */
return LibCommon__VerdictControl::FncRetCode::e__error;
}
}
if (tmp_144_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2355);
/* ItsCam_TpFunctions.ttcn, line 2355 */
tmp_144_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_144_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2356);
/* ItsCam_TpFunctions.ttcn, line 2356 */
t__maxTransInterval.stop();
current_location.update_lineno(2357);
/* ItsCam_TpFunctions.ttcn, line 2357 */
return LibCommon__VerdictControl::FncRetCode::e__timeout;
}
}
if (tmp_144_default_flag == ALT_MAYBE) {
tmp_144_default_flag = TTCN_Default::try_altsteps();
if (tmp_144_default_flag == ALT_YES || tmp_144_default_flag == ALT_BREAK) break;
else if (tmp_144_default_flag == ALT_REPEAT) goto tmp_144;
}
current_location.update_lineno(2346);
/* ItsCam_TpFunctions.ttcn, line 2346 */
if (tmp_144_alt_flag_0 == ALT_NO && tmp_144_alt_flag_1 == ALT_NO && tmp_144_alt_flag_2 == ALT_NO && tmp_144_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2346 and 2359.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2361);
/* ItsCam_TpFunctions.ttcn, line 2361 */
return LibCommon__VerdictControl::FncRetCode::e__success;
}

void f__CAM__MSD__GFQ__TI__03()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2369, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_03");
current_location.update_lineno(2372);
/* ItsCam_TpFunctions.ttcn, line 2372 */
TIMER t__maxTransInterval__min("t_maxTransInterval_min", (LibItsCam__Pics::PICS__T__GENCAMMAX * 9.0e-1));
current_location.update_lineno(2373);
/* ItsCam_TpFunctions.ttcn, line 2373 */
TIMER t__maxTransInterval__max("t_maxTransInterval_max", (LibItsCam__Pics::PICS__T__GENCAMMAX * 1.1));
current_location.update_lineno(2374);
/* ItsCam_TpFunctions.ttcn, line 2374 */
TIMER t__interval__1__measure("t_interval_1_measure", LibCommon__Time::PX__TWAIT);
current_location.update_lineno(2375);
/* ItsCam_TpFunctions.ttcn, line 2375 */
TIMER t__interval__1__min("t_interval_1_min");
current_location.update_lineno(2376);
/* ItsCam_TpFunctions.ttcn, line 2376 */
TIMER t__interval__1__max("t_interval_1_max");
current_location.update_lineno(2377);
/* ItsCam_TpFunctions.ttcn, line 2377 */
FLOAT v__interval__1__min;
current_location.update_lineno(2378);
/* ItsCam_TpFunctions.ttcn, line 2378 */
FLOAT v__interval__1__max;
current_location.update_lineno(2379);
/* ItsCam_TpFunctions.ttcn, line 2379 */
INTEGER v__N__GenCam(3);
current_location.update_lineno(2380);
/* ItsCam_TpFunctions.ttcn, line 2380 */
INTEGER v__i;
current_location.update_lineno(2383);
/* ItsCam_TpFunctions.ttcn, line 2383 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2384);
/* ItsCam_TpFunctions.ttcn, line 2384 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2385);
/* ItsCam_TpFunctions.ttcn, line 2385 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2386);
/* ItsCam_TpFunctions.ttcn, line 2386 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2390);
/* ItsCam_TpFunctions.ttcn, line 2390 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2395);
/* ItsCam_TpFunctions.ttcn, line 2395 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2397);
/* ItsCam_TpFunctions.ttcn, line 2397 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2398);
/* ItsCam_TpFunctions.ttcn, line 2398 */
{
tmp_145:
alt_status tmp_145_alt_flag_0 = ALT_MAYBE;
alt_status tmp_145_alt_flag_1 = ALT_MAYBE;
alt_status tmp_145_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_145_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2399);
/* ItsCam_TpFunctions.ttcn, line 2399 */
tmp_145_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_145_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2400);
/* ItsCam_TpFunctions.ttcn, line 2400 */
t__interval__1__measure.start();
current_location.update_lineno(2401);
/* ItsCam_TpFunctions.ttcn, line 2401 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2402);
/* ItsCam_TpFunctions.ttcn, line 2402 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_145_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2404);
/* ItsCam_TpFunctions.ttcn, line 2404 */
tmp_145_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_145_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2405);
/* ItsCam_TpFunctions.ttcn, line 2405 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2406);
/* ItsCam_TpFunctions.ttcn, line 2406 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_145_default_flag == ALT_MAYBE) {
tmp_145_default_flag = TTCN_Default::try_altsteps();
if (tmp_145_default_flag == ALT_YES || tmp_145_default_flag == ALT_BREAK) break;
else if (tmp_145_default_flag == ALT_REPEAT) goto tmp_145;
}
current_location.update_lineno(2398);
/* ItsCam_TpFunctions.ttcn, line 2398 */
if (tmp_145_alt_flag_0 == ALT_NO && tmp_145_alt_flag_1 == ALT_NO && tmp_145_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2398 and 2408.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2409);
/* ItsCam_TpFunctions.ttcn, line 2409 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(1000));
current_location.update_lineno(2410);
/* ItsCam_TpFunctions.ttcn, line 2410 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2411);
/* ItsCam_TpFunctions.ttcn, line 2411 */
{
tmp_146:
alt_status tmp_146_alt_flag_0 = ALT_MAYBE;
alt_status tmp_146_alt_flag_1 = ALT_MAYBE;
alt_status tmp_146_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_146_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2412);
/* ItsCam_TpFunctions.ttcn, line 2412 */
tmp_146_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_146_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2413);
/* ItsCam_TpFunctions.ttcn, line 2413 */
FLOAT v__measured(t__interval__1__measure.read());
current_location.update_lineno(2414);
/* ItsCam_TpFunctions.ttcn, line 2414 */
try {
TTCN_Logger::begin_event(TTCN_USER);
TTCN_Logger::log_event_str("Elapsed time since last CAM: ");
v__measured.log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2415);
/* ItsCam_TpFunctions.ttcn, line 2415 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2416);
/* ItsCam_TpFunctions.ttcn, line 2416 */
v__interval__1__min = (v__measured * 8.0e-1);
current_location.update_lineno(2417);
/* ItsCam_TpFunctions.ttcn, line 2417 */
v__interval__1__max = (v__measured * 1.2);
current_location.update_lineno(2418);
/* ItsCam_TpFunctions.ttcn, line 2418 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_72).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_146_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2420);
/* ItsCam_TpFunctions.ttcn, line 2420 */
tmp_146_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_146_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2421);
/* ItsCam_TpFunctions.ttcn, line 2421 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_73).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2422);
/* ItsCam_TpFunctions.ttcn, line 2422 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_146_default_flag == ALT_MAYBE) {
tmp_146_default_flag = TTCN_Default::try_altsteps();
if (tmp_146_default_flag == ALT_YES || tmp_146_default_flag == ALT_BREAK) break;
else if (tmp_146_default_flag == ALT_REPEAT) goto tmp_146;
}
current_location.update_lineno(2411);
/* ItsCam_TpFunctions.ttcn, line 2411 */
if (tmp_146_alt_flag_0 == ALT_NO && tmp_146_alt_flag_1 == ALT_NO && tmp_146_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2411 and 2424.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2425);
/* ItsCam_TpFunctions.ttcn, line 2425 */
v__i = 1;
current_location.update_lineno(2425);
/* ItsCam_TpFunctions.ttcn, line 2425 */
for ( ; ; ) {
current_location.update_lineno(2425);
/* ItsCam_TpFunctions.ttcn, line 2425 */
if (!(v__i <= v__N__GenCam)) break;
current_location.update_lineno(2426);
/* ItsCam_TpFunctions.ttcn, line 2426 */
t__interval__1__min.start(v__interval__1__min);
current_location.update_lineno(2427);
/* ItsCam_TpFunctions.ttcn, line 2427 */
t__interval__1__max.start(v__interval__1__max);
current_location.update_lineno(2428);
/* ItsCam_TpFunctions.ttcn, line 2428 */
{
tmp_150:
alt_status tmp_150_alt_flag_0 = ALT_MAYBE;
alt_status tmp_150_alt_flag_1 = ALT_MAYBE;
alt_status tmp_150_alt_flag_2 = ALT_MAYBE;
alt_status tmp_150_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_150_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2429);
/* ItsCam_TpFunctions.ttcn, line 2429 */
tmp_150_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_150_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2430);
/* ItsCam_TpFunctions.ttcn, line 2430 */
if (t__interval__1__min.running()) {
current_location.update_lineno(2431);
/* ItsCam_TpFunctions.ttcn, line 2431 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_74).log();
v__i.log();
TTCN_Logger::log_event_str(" message received BEFORE INTERVAL_1 expired ***");
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2432);
/* ItsCam_TpFunctions.ttcn, line 2432 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
current_location.update_lineno(2434);
/* ItsCam_TpFunctions.ttcn, line 2434 */
t__interval__1__max.stop();
current_location.update_lineno(2435);
/* ItsCam_TpFunctions.ttcn, line 2435 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_75).log();
v__i.log();
TTCN_Logger::log_event_str(" message received ***");
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_150_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2437);
/* ItsCam_TpFunctions.ttcn, line 2437 */
tmp_150_alt_flag_1 = t__interval__1__min.timeout();
if (tmp_150_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2438);
/* ItsCam_TpFunctions.ttcn, line 2438 */
goto tmp_150;
}
}
if (tmp_150_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2440);
/* ItsCam_TpFunctions.ttcn, line 2440 */
tmp_150_alt_flag_2 = t__interval__1__max.timeout();
if (tmp_150_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2441);
/* ItsCam_TpFunctions.ttcn, line 2441 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_74).log();
v__i.log();
TTCN_Logger::log_event_str(" message not received ***");
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2442);
/* ItsCam_TpFunctions.ttcn, line 2442 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_150_default_flag == ALT_MAYBE) {
tmp_150_default_flag = TTCN_Default::try_altsteps();
if (tmp_150_default_flag == ALT_YES || tmp_150_default_flag == ALT_BREAK) break;
else if (tmp_150_default_flag == ALT_REPEAT) goto tmp_150;
}
current_location.update_lineno(2428);
/* ItsCam_TpFunctions.ttcn, line 2428 */
if (tmp_150_alt_flag_0 == ALT_NO && tmp_150_alt_flag_1 == ALT_NO && tmp_150_alt_flag_2 == ALT_NO && tmp_150_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2428 and 2444.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2425);
/* ItsCam_TpFunctions.ttcn, line 2425 */
{
INTEGER tmp_151;
++v__i;
}
}
current_location.update_lineno(2446);
/* ItsCam_TpFunctions.ttcn, line 2446 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2449);
/* ItsCam_TpFunctions.ttcn, line 2449 */
t__maxTransInterval__min.start();
current_location.update_lineno(2450);
/* ItsCam_TpFunctions.ttcn, line 2450 */
t__maxTransInterval__max.start();
current_location.update_lineno(2451);
/* ItsCam_TpFunctions.ttcn, line 2451 */
{
tmp_152:
alt_status tmp_152_alt_flag_0 = ALT_MAYBE;
alt_status tmp_152_alt_flag_1 = ALT_MAYBE;
alt_status tmp_152_alt_flag_2 = ALT_MAYBE;
alt_status tmp_152_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_152_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2452);
/* ItsCam_TpFunctions.ttcn, line 2452 */
tmp_152_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_152_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2453);
/* ItsCam_TpFunctions.ttcn, line 2453 */
if (t__maxTransInterval__min.running()) {
current_location.update_lineno(2454);
/* ItsCam_TpFunctions.ttcn, line 2454 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_76).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2455);
/* ItsCam_TpFunctions.ttcn, line 2455 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(2457);
/* ItsCam_TpFunctions.ttcn, line 2457 */
t__maxTransInterval__max.stop();
current_location.update_lineno(2458);
/* ItsCam_TpFunctions.ttcn, line 2458 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_77).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2459);
/* ItsCam_TpFunctions.ttcn, line 2459 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_152_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2461);
/* ItsCam_TpFunctions.ttcn, line 2461 */
tmp_152_alt_flag_1 = t__maxTransInterval__min.timeout();
if (tmp_152_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2462);
/* ItsCam_TpFunctions.ttcn, line 2462 */
goto tmp_152;
}
}
if (tmp_152_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2464);
/* ItsCam_TpFunctions.ttcn, line 2464 */
tmp_152_alt_flag_2 = t__maxTransInterval__max.timeout();
if (tmp_152_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2465);
/* ItsCam_TpFunctions.ttcn, line 2465 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_78).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2466);
/* ItsCam_TpFunctions.ttcn, line 2466 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_152_default_flag == ALT_MAYBE) {
tmp_152_default_flag = TTCN_Default::try_altsteps();
if (tmp_152_default_flag == ALT_YES || tmp_152_default_flag == ALT_BREAK) break;
else if (tmp_152_default_flag == ALT_REPEAT) goto tmp_152;
}
current_location.update_lineno(2451);
/* ItsCam_TpFunctions.ttcn, line 2451 */
if (tmp_152_alt_flag_0 == ALT_NO && tmp_152_alt_flag_1 == ALT_NO && tmp_152_alt_flag_2 == ALT_NO && tmp_152_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2451 and 2468.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2471);
/* ItsCam_TpFunctions.ttcn, line 2471 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2472);
/* ItsCam_TpFunctions.ttcn, line 2472 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__TI__03(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_TI_03(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_TI_03", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__GFQ__BV__04()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2479, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_BV_04");
current_location.update_lineno(2482);
/* ItsCam_TpFunctions.ttcn, line 2482 */
TIMER t__genCam__dcc("t_genCam_dcc", (LibItsCam__Pics::PICS__T__GENCAMDCC * 9.0e-1));
current_location.update_lineno(2483);
/* ItsCam_TpFunctions.ttcn, line 2483 */
TIMER t__genCam__min("t_genCam_min", (LibItsCam__Pics::PICS__T__GENCAMMIN * 1.1));
current_location.update_lineno(2484);
/* ItsCam_TpFunctions.ttcn, line 2484 */
LibItsCam__TestSystem::CamInd v__camPdu;
current_location.update_lineno(2485);
/* ItsCam_TpFunctions.ttcn, line 2485 */
INTEGER v__headingValue;
current_location.update_lineno(2486);
/* ItsCam_TpFunctions.ttcn, line 2486 */
INTEGER v__changeHeadingValue(50);
current_location.update_lineno(2489);
/* ItsCam_TpFunctions.ttcn, line 2489 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2490);
/* ItsCam_TpFunctions.ttcn, line 2490 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2491);
/* ItsCam_TpFunctions.ttcn, line 2491 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2492);
/* ItsCam_TpFunctions.ttcn, line 2492 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2496);
/* ItsCam_TpFunctions.ttcn, line 2496 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2501);
/* ItsCam_TpFunctions.ttcn, line 2501 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2502);
/* ItsCam_TpFunctions.ttcn, line 2502 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2503);
/* ItsCam_TpFunctions.ttcn, line 2503 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2504);
/* ItsCam_TpFunctions.ttcn, line 2504 */
{
tmp_153:
alt_status tmp_153_alt_flag_0 = ALT_MAYBE;
alt_status tmp_153_alt_flag_1 = ALT_MAYBE;
alt_status tmp_153_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_153_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2505);
/* ItsCam_TpFunctions.ttcn, line 2505 */
tmp_153_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__heading(INTEGER_template(ANY_VALUE)))), &(v__camPdu), any_compref, NULL);
if (tmp_153_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2506);
/* ItsCam_TpFunctions.ttcn, line 2506 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2507);
/* ItsCam_TpFunctions.ttcn, line 2507 */
v__headingValue = const_cast< const LibItsCam__TestSystem::CamInd&>(v__camPdu).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().heading().headingValue();
current_location.update_lineno(2508);
/* ItsCam_TpFunctions.ttcn, line 2508 */
t__genCam__dcc.start();
current_location.update_lineno(2509);
/* ItsCam_TpFunctions.ttcn, line 2509 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_153_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2511);
/* ItsCam_TpFunctions.ttcn, line 2511 */
tmp_153_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_153_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2512);
/* ItsCam_TpFunctions.ttcn, line 2512 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2513);
/* ItsCam_TpFunctions.ttcn, line 2513 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_153_default_flag == ALT_MAYBE) {
tmp_153_default_flag = TTCN_Default::try_altsteps();
if (tmp_153_default_flag == ALT_YES || tmp_153_default_flag == ALT_BREAK) break;
else if (tmp_153_default_flag == ALT_REPEAT) goto tmp_153;
}
current_location.update_lineno(2504);
/* ItsCam_TpFunctions.ttcn, line 2504 */
if (tmp_153_alt_flag_0 == ALT_NO && tmp_153_alt_flag_1 == ALT_NO && tmp_153_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2504 and 2515.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2516);
/* ItsCam_TpFunctions.ttcn, line 2516 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2519);
/* ItsCam_TpFunctions.ttcn, line 2519 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeHeading(v__changeHeadingValue));
current_location.update_lineno(2520);
/* ItsCam_TpFunctions.ttcn, line 2520 */
{
tmp_155:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = t__genCam__dcc.timeout();
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_155;
}
current_location.update_lineno(2520);
/* ItsCam_TpFunctions.ttcn, line 2520 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone timeout statement failed in file ItsCam_TpFunctions.ttcn, line 2520.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2521);
/* ItsCam_TpFunctions.ttcn, line 2521 */
t__genCam__min.start();
current_location.update_lineno(2522);
/* ItsCam_TpFunctions.ttcn, line 2522 */
{
tmp_156:
alt_status tmp_156_alt_flag_0 = ALT_MAYBE;
alt_status tmp_156_alt_flag_1 = ALT_MAYBE;
alt_status tmp_156_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_156_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2523);
/* ItsCam_TpFunctions.ttcn, line 2523 */
tmp_156_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__heading(INTEGER_template(mod((v__headingValue + v__changeHeadingValue), 3600))))), NULL, any_compref, NULL);
if (tmp_156_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2524);
/* ItsCam_TpFunctions.ttcn, line 2524 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2525);
/* ItsCam_TpFunctions.ttcn, line 2525 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_79).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2526);
/* ItsCam_TpFunctions.ttcn, line 2526 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_156_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2528);
/* ItsCam_TpFunctions.ttcn, line 2528 */
tmp_156_alt_flag_1 = t__genCam__min.timeout();
if (tmp_156_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2529);
/* ItsCam_TpFunctions.ttcn, line 2529 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_80).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2530);
/* ItsCam_TpFunctions.ttcn, line 2530 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_156_default_flag == ALT_MAYBE) {
tmp_156_default_flag = TTCN_Default::try_altsteps();
if (tmp_156_default_flag == ALT_YES || tmp_156_default_flag == ALT_BREAK) break;
else if (tmp_156_default_flag == ALT_REPEAT) goto tmp_156;
}
current_location.update_lineno(2522);
/* ItsCam_TpFunctions.ttcn, line 2522 */
if (tmp_156_alt_flag_0 == ALT_NO && tmp_156_alt_flag_1 == ALT_NO && tmp_156_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2522 and 2532.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2535);
/* ItsCam_TpFunctions.ttcn, line 2535 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2536);
/* ItsCam_TpFunctions.ttcn, line 2536 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__BV__04(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_BV_04(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_BV_04", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__GFQ__BV__05()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2543, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_BV_05");
current_location.update_lineno(2546);
/* ItsCam_TpFunctions.ttcn, line 2546 */
TIMER t__genCam__dcc("t_genCam_dcc", (LibItsCam__Pics::PICS__T__GENCAMDCC * 9.0e-1));
current_location.update_lineno(2547);
/* ItsCam_TpFunctions.ttcn, line 2547 */
LibItsCam__TestSystem::CamInd v__camPdu;
current_location.update_lineno(2548);
/* ItsCam_TpFunctions.ttcn, line 2548 */
ITS__Container::ReferencePosition v__referencePosition;
current_location.update_lineno(2548);
/* ItsCam_TpFunctions.ttcn, line 2548 */
ITS__Container::ReferencePosition v__expectedReferencePosition;
current_location.update_lineno(2549);
/* ItsCam_TpFunctions.ttcn, line 2549 */
INTEGER v__changePosValue(8);
current_location.update_lineno(2552);
/* ItsCam_TpFunctions.ttcn, line 2552 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2553);
/* ItsCam_TpFunctions.ttcn, line 2553 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2554);
/* ItsCam_TpFunctions.ttcn, line 2554 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2555);
/* ItsCam_TpFunctions.ttcn, line 2555 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2559);
/* ItsCam_TpFunctions.ttcn, line 2559 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2564);
/* ItsCam_TpFunctions.ttcn, line 2564 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2565);
/* ItsCam_TpFunctions.ttcn, line 2565 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2566);
/* ItsCam_TpFunctions.ttcn, line 2566 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2567);
/* ItsCam_TpFunctions.ttcn, line 2567 */
{
tmp_157:
alt_status tmp_157_alt_flag_0 = ALT_MAYBE;
alt_status tmp_157_alt_flag_1 = ALT_MAYBE;
alt_status tmp_157_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_157_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2568);
/* ItsCam_TpFunctions.ttcn, line 2568 */
tmp_157_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), &(v__camPdu), any_compref, NULL);
if (tmp_157_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2569);
/* ItsCam_TpFunctions.ttcn, line 2569 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2570);
/* ItsCam_TpFunctions.ttcn, line 2570 */
v__referencePosition = const_cast< const LibItsCam__TestSystem::CamInd&>(v__camPdu).msgIn().cam().camParameters().basicContainer().referencePosition();
current_location.update_lineno(2571);
/* ItsCam_TpFunctions.ttcn, line 2571 */
t__genCam__dcc.start();
current_location.update_lineno(2572);
/* ItsCam_TpFunctions.ttcn, line 2572 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_157_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2574);
/* ItsCam_TpFunctions.ttcn, line 2574 */
tmp_157_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_157_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2575);
/* ItsCam_TpFunctions.ttcn, line 2575 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2576);
/* ItsCam_TpFunctions.ttcn, line 2576 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_157_default_flag == ALT_MAYBE) {
tmp_157_default_flag = TTCN_Default::try_altsteps();
if (tmp_157_default_flag == ALT_YES || tmp_157_default_flag == ALT_BREAK) break;
else if (tmp_157_default_flag == ALT_REPEAT) goto tmp_157;
}
current_location.update_lineno(2567);
/* ItsCam_TpFunctions.ttcn, line 2567 */
if (tmp_157_alt_flag_0 == ALT_NO && tmp_157_alt_flag_1 == ALT_NO && tmp_157_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2567 and 2578.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2579);
/* ItsCam_TpFunctions.ttcn, line 2579 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2582);
/* ItsCam_TpFunctions.ttcn, line 2582 */
v__expectedReferencePosition = LibItsCam__Functions::f__computePositionUsingDistance(v__referencePosition, v__changePosValue);
current_location.update_lineno(2583);
/* ItsCam_TpFunctions.ttcn, line 2583 */
{
LibItsCommon__TypesAndValues::UtChangePosition_template tmp_160;
tmp_160.latitude() = (const_cast< const ITS__Container::ReferencePosition&>(v__expectedReferencePosition).latitude() - const_cast< const ITS__Container::ReferencePosition&>(v__referencePosition).latitude());
tmp_160.longitude() = (const_cast< const ITS__Container::ReferencePosition&>(v__expectedReferencePosition).longitude() - const_cast< const ITS__Container::ReferencePosition&>(v__referencePosition).longitude());
tmp_160.elevation() = 0;
LibItsCam__Functions::f__utChangePosition(LibItsCommon__TypesAndValues::UtChangePosition_template(tmp_160.valueof()));
}
current_location.update_lineno(2587);
/* ItsCam_TpFunctions.ttcn, line 2587 */
{
tmp_161:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = t__genCam__dcc.timeout();
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_161;
}
current_location.update_lineno(2587);
/* ItsCam_TpFunctions.ttcn, line 2587 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone timeout statement failed in file ItsCam_TpFunctions.ttcn, line 2587.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2588);
/* ItsCam_TpFunctions.ttcn, line 2588 */
t__genCam__dcc.start();
current_location.update_lineno(2589);
/* ItsCam_TpFunctions.ttcn, line 2589 */
{
tmp_162:
alt_status tmp_162_alt_flag_0 = ALT_MAYBE;
alt_status tmp_162_alt_flag_1 = ALT_MAYBE;
alt_status tmp_162_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_162_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2590);
/* ItsCam_TpFunctions.ttcn, line 2590 */
tmp_162_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__BC__refPos(ITS__Container::ReferencePosition_template(v__expectedReferencePosition))), NULL, any_compref, NULL);
if (tmp_162_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2591);
/* ItsCam_TpFunctions.ttcn, line 2591 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2592);
/* ItsCam_TpFunctions.ttcn, line 2592 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_79).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2593);
/* ItsCam_TpFunctions.ttcn, line 2593 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_162_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2595);
/* ItsCam_TpFunctions.ttcn, line 2595 */
tmp_162_alt_flag_1 = t__genCam__dcc.timeout();
if (tmp_162_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2596);
/* ItsCam_TpFunctions.ttcn, line 2596 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_80).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2597);
/* ItsCam_TpFunctions.ttcn, line 2597 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_162_default_flag == ALT_MAYBE) {
tmp_162_default_flag = TTCN_Default::try_altsteps();
if (tmp_162_default_flag == ALT_YES || tmp_162_default_flag == ALT_BREAK) break;
else if (tmp_162_default_flag == ALT_REPEAT) goto tmp_162;
}
current_location.update_lineno(2589);
/* ItsCam_TpFunctions.ttcn, line 2589 */
if (tmp_162_alt_flag_0 == ALT_NO && tmp_162_alt_flag_1 == ALT_NO && tmp_162_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2589 and 2599.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2602);
/* ItsCam_TpFunctions.ttcn, line 2602 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2603);
/* ItsCam_TpFunctions.ttcn, line 2603 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__BV__05(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_BV_05(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_BV_05", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__GFQ__BV__06()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2610, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_BV_06");
current_location.update_lineno(2613);
/* ItsCam_TpFunctions.ttcn, line 2613 */
TIMER t__genCam__dcc("t_genCam_dcc", (LibItsCam__Pics::PICS__T__GENCAMDCC * 9.0e-1));
current_location.update_lineno(2614);
/* ItsCam_TpFunctions.ttcn, line 2614 */
TIMER t__genCam__min("t_genCam_min", (LibItsCam__Pics::PICS__T__GENCAMMIN * 1.1));
current_location.update_lineno(2615);
/* ItsCam_TpFunctions.ttcn, line 2615 */
LibItsCam__TestSystem::CamInd v__camPdu;
current_location.update_lineno(2616);
/* ItsCam_TpFunctions.ttcn, line 2616 */
INTEGER v__speedValue;
current_location.update_lineno(2617);
/* ItsCam_TpFunctions.ttcn, line 2617 */
INTEGER v__changeSpeedValue(60);
current_location.update_lineno(2620);
/* ItsCam_TpFunctions.ttcn, line 2620 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2621);
/* ItsCam_TpFunctions.ttcn, line 2621 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2622);
/* ItsCam_TpFunctions.ttcn, line 2622 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2623);
/* ItsCam_TpFunctions.ttcn, line 2623 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2627);
/* ItsCam_TpFunctions.ttcn, line 2627 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2632);
/* ItsCam_TpFunctions.ttcn, line 2632 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2633);
/* ItsCam_TpFunctions.ttcn, line 2633 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2634);
/* ItsCam_TpFunctions.ttcn, line 2634 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2635);
/* ItsCam_TpFunctions.ttcn, line 2635 */
{
tmp_163:
alt_status tmp_163_alt_flag_0 = ALT_MAYBE;
alt_status tmp_163_alt_flag_1 = ALT_MAYBE;
alt_status tmp_163_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_163_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2636);
/* ItsCam_TpFunctions.ttcn, line 2636 */
tmp_163_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__speed(INTEGER_template(ANY_VALUE)))), &(v__camPdu), any_compref, NULL);
if (tmp_163_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2637);
/* ItsCam_TpFunctions.ttcn, line 2637 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2638);
/* ItsCam_TpFunctions.ttcn, line 2638 */
v__speedValue = const_cast< const LibItsCam__TestSystem::CamInd&>(v__camPdu).msgIn().cam().camParameters().highFrequencyContainer().basicVehicleContainerHighFrequency().speed().speedValue();
current_location.update_lineno(2639);
/* ItsCam_TpFunctions.ttcn, line 2639 */
t__genCam__dcc.start();
current_location.update_lineno(2640);
/* ItsCam_TpFunctions.ttcn, line 2640 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_163_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2642);
/* ItsCam_TpFunctions.ttcn, line 2642 */
tmp_163_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_163_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2643);
/* ItsCam_TpFunctions.ttcn, line 2643 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2644);
/* ItsCam_TpFunctions.ttcn, line 2644 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_163_default_flag == ALT_MAYBE) {
tmp_163_default_flag = TTCN_Default::try_altsteps();
if (tmp_163_default_flag == ALT_YES || tmp_163_default_flag == ALT_BREAK) break;
else if (tmp_163_default_flag == ALT_REPEAT) goto tmp_163;
}
current_location.update_lineno(2635);
/* ItsCam_TpFunctions.ttcn, line 2635 */
if (tmp_163_alt_flag_0 == ALT_NO && tmp_163_alt_flag_1 == ALT_NO && tmp_163_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2635 and 2646.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2647);
/* ItsCam_TpFunctions.ttcn, line 2647 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2650);
/* ItsCam_TpFunctions.ttcn, line 2650 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(v__changeSpeedValue));
current_location.update_lineno(2651);
/* ItsCam_TpFunctions.ttcn, line 2651 */
{
tmp_165:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = t__genCam__dcc.timeout();
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_165;
}
current_location.update_lineno(2651);
/* ItsCam_TpFunctions.ttcn, line 2651 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone timeout statement failed in file ItsCam_TpFunctions.ttcn, line 2651.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2652);
/* ItsCam_TpFunctions.ttcn, line 2652 */
t__genCam__min.start();
current_location.update_lineno(2653);
/* ItsCam_TpFunctions.ttcn, line 2653 */
{
tmp_166:
alt_status tmp_166_alt_flag_0 = ALT_MAYBE;
alt_status tmp_166_alt_flag_1 = ALT_MAYBE;
alt_status tmp_166_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_166_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2654);
/* ItsCam_TpFunctions.ttcn, line 2654 */
tmp_166_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__HF__BV(LibItsCam__Templates::mw__HF__BV__speed(INTEGER_template(mod((v__speedValue + v__changeSpeedValue), 16384))))), NULL, any_compref, NULL);
if (tmp_166_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2655);
/* ItsCam_TpFunctions.ttcn, line 2655 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2656);
/* ItsCam_TpFunctions.ttcn, line 2656 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_79).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2657);
/* ItsCam_TpFunctions.ttcn, line 2657 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_166_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2659);
/* ItsCam_TpFunctions.ttcn, line 2659 */
tmp_166_alt_flag_1 = t__genCam__min.timeout();
if (tmp_166_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2660);
/* ItsCam_TpFunctions.ttcn, line 2660 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_80).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2661);
/* ItsCam_TpFunctions.ttcn, line 2661 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_166_default_flag == ALT_MAYBE) {
tmp_166_default_flag = TTCN_Default::try_altsteps();
if (tmp_166_default_flag == ALT_YES || tmp_166_default_flag == ALT_BREAK) break;
else if (tmp_166_default_flag == ALT_REPEAT) goto tmp_166;
}
current_location.update_lineno(2653);
/* ItsCam_TpFunctions.ttcn, line 2653 */
if (tmp_166_alt_flag_0 == ALT_NO && tmp_166_alt_flag_1 == ALT_NO && tmp_166_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2653 and 2663.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2666);
/* ItsCam_TpFunctions.ttcn, line 2666 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2667);
/* ItsCam_TpFunctions.ttcn, line 2667 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__BV__06(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_BV_06(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_BV_06", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__GFQ__TI__07()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2674, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_07");
current_location.update_lineno(2677);
/* ItsCam_TpFunctions.ttcn, line 2677 */
TIMER t__maxTransInterval__min("t_maxTransInterval_min", (LibItsCam__Pics::PICS__T__GENCAMMAX * 9.0e-1));
current_location.update_lineno(2678);
/* ItsCam_TpFunctions.ttcn, line 2678 */
TIMER t__maxTransInterval__max("t_maxTransInterval_max", (LibItsCam__Pics::PICS__T__GENCAMMAX * 1.1));
current_location.update_lineno(2679);
/* ItsCam_TpFunctions.ttcn, line 2679 */
TIMER t__genCam__measure("t_genCam_measure", LibCommon__Time::PX__TWAIT);
current_location.update_lineno(2680);
/* ItsCam_TpFunctions.ttcn, line 2680 */
TIMER t__genCam__min("t_genCam_min");
current_location.update_lineno(2681);
/* ItsCam_TpFunctions.ttcn, line 2681 */
TIMER t__genCam__max("t_genCam_max");
current_location.update_lineno(2682);
/* ItsCam_TpFunctions.ttcn, line 2682 */
FLOAT v__genCam__min;
current_location.update_lineno(2683);
/* ItsCam_TpFunctions.ttcn, line 2683 */
FLOAT v__genCam__max;
current_location.update_lineno(2686);
/* ItsCam_TpFunctions.ttcn, line 2686 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2687);
/* ItsCam_TpFunctions.ttcn, line 2687 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2688);
/* ItsCam_TpFunctions.ttcn, line 2688 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2689);
/* ItsCam_TpFunctions.ttcn, line 2689 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2693);
/* ItsCam_TpFunctions.ttcn, line 2693 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2698);
/* ItsCam_TpFunctions.ttcn, line 2698 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2699);
/* ItsCam_TpFunctions.ttcn, line 2699 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2700);
/* ItsCam_TpFunctions.ttcn, line 2700 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2701);
/* ItsCam_TpFunctions.ttcn, line 2701 */
{
tmp_167:
alt_status tmp_167_alt_flag_0 = ALT_MAYBE;
alt_status tmp_167_alt_flag_1 = ALT_MAYBE;
alt_status tmp_167_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_167_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2702);
/* ItsCam_TpFunctions.ttcn, line 2702 */
tmp_167_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_167_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2703);
/* ItsCam_TpFunctions.ttcn, line 2703 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2704);
/* ItsCam_TpFunctions.ttcn, line 2704 */
t__genCam__measure.start();
current_location.update_lineno(2705);
/* ItsCam_TpFunctions.ttcn, line 2705 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_167_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2707);
/* ItsCam_TpFunctions.ttcn, line 2707 */
tmp_167_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_167_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2708);
/* ItsCam_TpFunctions.ttcn, line 2708 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2709);
/* ItsCam_TpFunctions.ttcn, line 2709 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_167_default_flag == ALT_MAYBE) {
tmp_167_default_flag = TTCN_Default::try_altsteps();
if (tmp_167_default_flag == ALT_YES || tmp_167_default_flag == ALT_BREAK) break;
else if (tmp_167_default_flag == ALT_REPEAT) goto tmp_167;
}
current_location.update_lineno(2701);
/* ItsCam_TpFunctions.ttcn, line 2701 */
if (tmp_167_alt_flag_0 == ALT_NO && tmp_167_alt_flag_1 == ALT_NO && tmp_167_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2701 and 2711.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2712);
/* ItsCam_TpFunctions.ttcn, line 2712 */
LibItsCam__Functions::f__utTriggerEvent(LibItsCam__Templates::m__changeSpeed(1000));
current_location.update_lineno(2713);
/* ItsCam_TpFunctions.ttcn, line 2713 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2714);
/* ItsCam_TpFunctions.ttcn, line 2714 */
{
tmp_168:
alt_status tmp_168_alt_flag_0 = ALT_MAYBE;
alt_status tmp_168_alt_flag_1 = ALT_MAYBE;
alt_status tmp_168_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_168_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2715);
/* ItsCam_TpFunctions.ttcn, line 2715 */
tmp_168_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_168_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2716);
/* ItsCam_TpFunctions.ttcn, line 2716 */
FLOAT v__measured(t__genCam__measure.read());
current_location.update_lineno(2717);
/* ItsCam_TpFunctions.ttcn, line 2717 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2718);
/* ItsCam_TpFunctions.ttcn, line 2718 */
v__genCam__min = (v__measured * 9.0e-1);
current_location.update_lineno(2719);
/* ItsCam_TpFunctions.ttcn, line 2719 */
v__genCam__max = (v__measured * 1.1);
current_location.update_lineno(2720);
/* ItsCam_TpFunctions.ttcn, line 2720 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_81).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
break;
}
}
if (tmp_168_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2722);
/* ItsCam_TpFunctions.ttcn, line 2722 */
tmp_168_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_168_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2723);
/* ItsCam_TpFunctions.ttcn, line 2723 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_82).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2724);
/* ItsCam_TpFunctions.ttcn, line 2724 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_168_default_flag == ALT_MAYBE) {
tmp_168_default_flag = TTCN_Default::try_altsteps();
if (tmp_168_default_flag == ALT_YES || tmp_168_default_flag == ALT_BREAK) break;
else if (tmp_168_default_flag == ALT_REPEAT) goto tmp_168;
}
current_location.update_lineno(2714);
/* ItsCam_TpFunctions.ttcn, line 2714 */
if (tmp_168_alt_flag_0 == ALT_NO && tmp_168_alt_flag_1 == ALT_NO && tmp_168_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2714 and 2726.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2727);
/* ItsCam_TpFunctions.ttcn, line 2727 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2730);
/* ItsCam_TpFunctions.ttcn, line 2730 */
t__genCam__min.start(v__genCam__min);
current_location.update_lineno(2731);
/* ItsCam_TpFunctions.ttcn, line 2731 */
t__genCam__max.start(v__genCam__max);
current_location.update_lineno(2732);
/* ItsCam_TpFunctions.ttcn, line 2732 */
{
tmp_171:
alt_status tmp_171_alt_flag_0 = ALT_MAYBE;
alt_status tmp_171_alt_flag_1 = ALT_MAYBE;
alt_status tmp_171_alt_flag_2 = ALT_MAYBE;
alt_status tmp_171_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_171_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2733);
/* ItsCam_TpFunctions.ttcn, line 2733 */
tmp_171_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_171_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2734);
/* ItsCam_TpFunctions.ttcn, line 2734 */
if (t__genCam__min.running()) {
current_location.update_lineno(2735);
/* ItsCam_TpFunctions.ttcn, line 2735 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_83).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2736);
/* ItsCam_TpFunctions.ttcn, line 2736 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(2738);
/* ItsCam_TpFunctions.ttcn, line 2738 */
t__genCam__max.stop();
current_location.update_lineno(2739);
/* ItsCam_TpFunctions.ttcn, line 2739 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_84).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2740);
/* ItsCam_TpFunctions.ttcn, line 2740 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_171_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2742);
/* ItsCam_TpFunctions.ttcn, line 2742 */
tmp_171_alt_flag_1 = t__genCam__min.timeout();
if (tmp_171_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2743);
/* ItsCam_TpFunctions.ttcn, line 2743 */
goto tmp_171;
}
}
if (tmp_171_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2745);
/* ItsCam_TpFunctions.ttcn, line 2745 */
tmp_171_alt_flag_2 = t__genCam__max.timeout();
if (tmp_171_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2746);
/* ItsCam_TpFunctions.ttcn, line 2746 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_85).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2747);
/* ItsCam_TpFunctions.ttcn, line 2747 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_171_default_flag == ALT_MAYBE) {
tmp_171_default_flag = TTCN_Default::try_altsteps();
if (tmp_171_default_flag == ALT_YES || tmp_171_default_flag == ALT_BREAK) break;
else if (tmp_171_default_flag == ALT_REPEAT) goto tmp_171;
}
current_location.update_lineno(2732);
/* ItsCam_TpFunctions.ttcn, line 2732 */
if (tmp_171_alt_flag_0 == ALT_NO && tmp_171_alt_flag_1 == ALT_NO && tmp_171_alt_flag_2 == ALT_NO && tmp_171_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2732 and 2749.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2752);
/* ItsCam_TpFunctions.ttcn, line 2752 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2753);
/* ItsCam_TpFunctions.ttcn, line 2753 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__TI__07(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_TI_07(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_TI_07", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__GFQ__TI__08()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2760, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_GFQ_TI_08");
current_location.update_lineno(2763);
/* ItsCam_TpFunctions.ttcn, line 2763 */
FLOAT c__minTime(9.0e-1);
current_location.update_lineno(2764);
/* ItsCam_TpFunctions.ttcn, line 2764 */
FLOAT c__maxTime(1.1);
current_location.update_lineno(2767);
/* ItsCam_TpFunctions.ttcn, line 2767 */
{
boolean tmp_172;
tmp_172 = (!(LibItsCam__Pics::PICS__CAM__GENERATION));
if (!tmp_172) tmp_172 = (!(LibItsCam__Pics::PICS__RSU));
if (tmp_172) {
current_location.update_lineno(2768);
/* ItsCam_TpFunctions.ttcn, line 2768 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_86).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2769);
/* ItsCam_TpFunctions.ttcn, line 2769 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2770);
/* ItsCam_TpFunctions.ttcn, line 2770 */
TTCN_Runtime::stop_execution();
}
}
current_location.update_lineno(2774);
/* ItsCam_TpFunctions.ttcn, line 2774 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2777);
/* ItsCam_TpFunctions.ttcn, line 2777 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2778);
/* ItsCam_TpFunctions.ttcn, line 2778 */
LibItsCam__TestSystem::ItsCam_component_camPort.clear();
current_location.update_lineno(2779);
/* ItsCam_TpFunctions.ttcn, line 2779 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2780);
/* ItsCam_TpFunctions.ttcn, line 2780 */
{
tmp_173:
alt_status tmp_173_alt_flag_0 = ALT_MAYBE;
alt_status tmp_173_alt_flag_1 = ALT_MAYBE;
alt_status tmp_173_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_173_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2781);
/* ItsCam_TpFunctions.ttcn, line 2781 */
tmp_173_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_173_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2782);
/* ItsCam_TpFunctions.ttcn, line 2782 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2783);
/* ItsCam_TpFunctions.ttcn, line 2783 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2784);
/* ItsCam_TpFunctions.ttcn, line 2784 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_173_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2786);
/* ItsCam_TpFunctions.ttcn, line 2786 */
tmp_173_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_173_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2787);
/* ItsCam_TpFunctions.ttcn, line 2787 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_7).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2788);
/* ItsCam_TpFunctions.ttcn, line 2788 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_173_default_flag == ALT_MAYBE) {
tmp_173_default_flag = TTCN_Default::try_altsteps();
if (tmp_173_default_flag == ALT_YES || tmp_173_default_flag == ALT_BREAK) break;
else if (tmp_173_default_flag == ALT_REPEAT) goto tmp_173;
}
current_location.update_lineno(2780);
/* ItsCam_TpFunctions.ttcn, line 2780 */
if (tmp_173_alt_flag_0 == ALT_NO && tmp_173_alt_flag_1 == ALT_NO && tmp_173_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2780 and 2790.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2793);
/* ItsCam_TpFunctions.ttcn, line 2793 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2794);
/* ItsCam_TpFunctions.ttcn, line 2794 */
{
tmp_174:
alt_status tmp_174_alt_flag_0 = ALT_MAYBE;
alt_status tmp_174_alt_flag_1 = ALT_MAYBE;
alt_status tmp_174_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_174_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2795);
/* ItsCam_TpFunctions.ttcn, line 2795 */
tmp_174_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_174_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2796);
/* ItsCam_TpFunctions.ttcn, line 2796 */
if ((LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.read() > 9.0e-1)) {
current_location.update_lineno(2797);
/* ItsCam_TpFunctions.ttcn, line 2797 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2798);
/* ItsCam_TpFunctions.ttcn, line 2798 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_87).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2799);
/* ItsCam_TpFunctions.ttcn, line 2799 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(2802);
/* ItsCam_TpFunctions.ttcn, line 2802 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2803);
/* ItsCam_TpFunctions.ttcn, line 2803 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_88).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2804);
/* ItsCam_TpFunctions.ttcn, line 2804 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_174_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2807);
/* ItsCam_TpFunctions.ttcn, line 2807 */
tmp_174_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_174_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2808);
/* ItsCam_TpFunctions.ttcn, line 2808 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_80).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2809);
/* ItsCam_TpFunctions.ttcn, line 2809 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_174_default_flag == ALT_MAYBE) {
tmp_174_default_flag = TTCN_Default::try_altsteps();
if (tmp_174_default_flag == ALT_YES || tmp_174_default_flag == ALT_BREAK) break;
else if (tmp_174_default_flag == ALT_REPEAT) goto tmp_174;
}
current_location.update_lineno(2794);
/* ItsCam_TpFunctions.ttcn, line 2794 */
if (tmp_174_alt_flag_0 == ALT_NO && tmp_174_alt_flag_1 == ALT_NO && tmp_174_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2794 and 2811.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2814);
/* ItsCam_TpFunctions.ttcn, line 2814 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2815);
/* ItsCam_TpFunctions.ttcn, line 2815 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__GFQ__TI__08(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_GFQ_TI_08(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_GFQ_TI_08", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__PAR__BV__01()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2826, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_PAR_BV_01");
current_location.update_lineno(2829);
/* ItsCam_TpFunctions.ttcn, line 2829 */
INTEGER c__gnNhBtpB(2);
current_location.update_lineno(2832);
/* ItsCam_TpFunctions.ttcn, line 2832 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2833);
/* ItsCam_TpFunctions.ttcn, line 2833 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2834);
/* ItsCam_TpFunctions.ttcn, line 2834 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2835);
/* ItsCam_TpFunctions.ttcn, line 2835 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2839);
/* ItsCam_TpFunctions.ttcn, line 2839 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2844);
/* ItsCam_TpFunctions.ttcn, line 2844 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2845);
/* ItsCam_TpFunctions.ttcn, line 2845 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2848);
/* ItsCam_TpFunctions.ttcn, line 2848 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2849);
/* ItsCam_TpFunctions.ttcn, line 2849 */
{
tmp_175:
alt_status tmp_175_alt_flag_0 = ALT_MAYBE;
alt_status tmp_175_alt_flag_1 = ALT_MAYBE;
alt_status tmp_175_alt_flag_2 = ALT_MAYBE;
alt_status tmp_175_alt_flag_3 = ALT_MAYBE;
alt_status tmp_175_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_175_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2850);
/* ItsCam_TpFunctions.ttcn, line 2850 */
tmp_175_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camIndWithGnParameters(LibItsCam__Templates::mw__camMsg__any, INTEGER_template(2), LibItsCam__Templates::mw__camIndWithGnParameters_p__gnHeaderType_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnHeaderSubtype_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnLifetime_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnTrafficClass_defval), NULL, any_compref, NULL);
if (tmp_175_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2851);
/* ItsCam_TpFunctions.ttcn, line 2851 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2852);
/* ItsCam_TpFunctions.ttcn, line 2852 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_89).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2853);
/* ItsCam_TpFunctions.ttcn, line 2853 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_175_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2855);
/* ItsCam_TpFunctions.ttcn, line 2855 */
tmp_175_alt_flag_1 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camIndWithGnParameters(LibItsCam__Templates::mw__camMsg__any, INTEGER_template(OMIT_VALUE), LibItsCam__Templates::mw__camIndWithGnParameters_p__gnHeaderType_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnHeaderSubtype_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnLifetime_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnTrafficClass_defval), NULL, any_compref, NULL);
if (tmp_175_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2856);
/* ItsCam_TpFunctions.ttcn, line 2856 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2857);
/* ItsCam_TpFunctions.ttcn, line 2857 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_90).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2858);
/* ItsCam_TpFunctions.ttcn, line 2858 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_175_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2860);
/* ItsCam_TpFunctions.ttcn, line 2860 */
tmp_175_alt_flag_2 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_175_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2861);
/* ItsCam_TpFunctions.ttcn, line 2861 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2862);
/* ItsCam_TpFunctions.ttcn, line 2862 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_91).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2863);
/* ItsCam_TpFunctions.ttcn, line 2863 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_175_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(2865);
/* ItsCam_TpFunctions.ttcn, line 2865 */
tmp_175_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_175_alt_flag_3 == ALT_YES) {
current_location.update_lineno(2866);
/* ItsCam_TpFunctions.ttcn, line 2866 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2867);
/* ItsCam_TpFunctions.ttcn, line 2867 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_175_default_flag == ALT_MAYBE) {
tmp_175_default_flag = TTCN_Default::try_altsteps();
if (tmp_175_default_flag == ALT_YES || tmp_175_default_flag == ALT_BREAK) break;
else if (tmp_175_default_flag == ALT_REPEAT) goto tmp_175;
}
current_location.update_lineno(2849);
/* ItsCam_TpFunctions.ttcn, line 2849 */
if (tmp_175_alt_flag_0 == ALT_NO && tmp_175_alt_flag_1 == ALT_NO && tmp_175_alt_flag_2 == ALT_NO && tmp_175_alt_flag_3 == ALT_NO && tmp_175_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2849 and 2869.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2872);
/* ItsCam_TpFunctions.ttcn, line 2872 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2873);
/* ItsCam_TpFunctions.ttcn, line 2873 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__PAR__BV__01(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_PAR_BV_01(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_PAR_BV_01", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__PAR__BV__02()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2880, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_PAR_BV_02");
current_location.update_lineno(2883);
/* ItsCam_TpFunctions.ttcn, line 2883 */
INTEGER c__gnHtTsb(5);
current_location.update_lineno(2884);
/* ItsCam_TpFunctions.ttcn, line 2884 */
INTEGER c__GnHstSingleHop(0);
current_location.update_lineno(2887);
/* ItsCam_TpFunctions.ttcn, line 2887 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2888);
/* ItsCam_TpFunctions.ttcn, line 2888 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2889);
/* ItsCam_TpFunctions.ttcn, line 2889 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2890);
/* ItsCam_TpFunctions.ttcn, line 2890 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2894);
/* ItsCam_TpFunctions.ttcn, line 2894 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2899);
/* ItsCam_TpFunctions.ttcn, line 2899 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2900);
/* ItsCam_TpFunctions.ttcn, line 2900 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2903);
/* ItsCam_TpFunctions.ttcn, line 2903 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2904);
/* ItsCam_TpFunctions.ttcn, line 2904 */
{
tmp_176:
alt_status tmp_176_alt_flag_0 = ALT_MAYBE;
alt_status tmp_176_alt_flag_1 = ALT_MAYBE;
alt_status tmp_176_alt_flag_2 = ALT_MAYBE;
alt_status tmp_176_alt_flag_3 = ALT_MAYBE;
alt_status tmp_176_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_176_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2905);
/* ItsCam_TpFunctions.ttcn, line 2905 */
tmp_176_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camIndWithGnParameters(LibItsCam__Templates::mw__camMsg__any, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnNextHeader_defval, INTEGER_template(5), INTEGER_template(0), LibItsCam__Templates::mw__camIndWithGnParameters_p__gnLifetime_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnTrafficClass_defval), NULL, any_compref, NULL);
if (tmp_176_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2906);
/* ItsCam_TpFunctions.ttcn, line 2906 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2907);
/* ItsCam_TpFunctions.ttcn, line 2907 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_92).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2908);
/* ItsCam_TpFunctions.ttcn, line 2908 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_176_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2910);
/* ItsCam_TpFunctions.ttcn, line 2910 */
tmp_176_alt_flag_1 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camIndWithGnParameters(LibItsCam__Templates::mw__camMsg__any, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnNextHeader_defval, INTEGER_template(OMIT_VALUE), INTEGER_template(OMIT_VALUE), LibItsCam__Templates::mw__camIndWithGnParameters_p__gnLifetime_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnTrafficClass_defval), NULL, any_compref, NULL);
if (tmp_176_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2911);
/* ItsCam_TpFunctions.ttcn, line 2911 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2912);
/* ItsCam_TpFunctions.ttcn, line 2912 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_93).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2913);
/* ItsCam_TpFunctions.ttcn, line 2913 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_176_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(2915);
/* ItsCam_TpFunctions.ttcn, line 2915 */
tmp_176_alt_flag_2 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camInd(LibItsCam__Templates::mw__camMsg__any), NULL, any_compref, NULL);
if (tmp_176_alt_flag_2 == ALT_YES) {
current_location.update_lineno(2916);
/* ItsCam_TpFunctions.ttcn, line 2916 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2917);
/* ItsCam_TpFunctions.ttcn, line 2917 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_94).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2918);
/* ItsCam_TpFunctions.ttcn, line 2918 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_176_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(2920);
/* ItsCam_TpFunctions.ttcn, line 2920 */
tmp_176_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_176_alt_flag_3 == ALT_YES) {
current_location.update_lineno(2921);
/* ItsCam_TpFunctions.ttcn, line 2921 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2922);
/* ItsCam_TpFunctions.ttcn, line 2922 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_176_default_flag == ALT_MAYBE) {
tmp_176_default_flag = TTCN_Default::try_altsteps();
if (tmp_176_default_flag == ALT_YES || tmp_176_default_flag == ALT_BREAK) break;
else if (tmp_176_default_flag == ALT_REPEAT) goto tmp_176;
}
current_location.update_lineno(2904);
/* ItsCam_TpFunctions.ttcn, line 2904 */
if (tmp_176_alt_flag_0 == ALT_NO && tmp_176_alt_flag_1 == ALT_NO && tmp_176_alt_flag_2 == ALT_NO && tmp_176_alt_flag_3 == ALT_NO && tmp_176_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2904 and 2924.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2927);
/* ItsCam_TpFunctions.ttcn, line 2927 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2928);
/* ItsCam_TpFunctions.ttcn, line 2928 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__PAR__BV__02(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_PAR_BV_02(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_PAR_BV_02", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSD__PAR__BV__03()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2935, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSD_PAR_BV_03");
current_location.update_lineno(2938);
/* ItsCam_TpFunctions.ttcn, line 2938 */
LibItsCam__TestSystem::CamInd v__camInd;
current_location.update_lineno(2941);
/* ItsCam_TpFunctions.ttcn, line 2941 */
if ((!(LibItsCam__Pics::PICS__CAM__GENERATION))) {
current_location.update_lineno(2942);
/* ItsCam_TpFunctions.ttcn, line 2942 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_1).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2943);
/* ItsCam_TpFunctions.ttcn, line 2943 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(2944);
/* ItsCam_TpFunctions.ttcn, line 2944 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(2948);
/* ItsCam_TpFunctions.ttcn, line 2948 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(2953);
/* ItsCam_TpFunctions.ttcn, line 2953 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(2954);
/* ItsCam_TpFunctions.ttcn, line 2954 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(2957);
/* ItsCam_TpFunctions.ttcn, line 2957 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(2958);
/* ItsCam_TpFunctions.ttcn, line 2958 */
{
tmp_177:
alt_status tmp_177_alt_flag_0 = ALT_MAYBE;
alt_status tmp_177_alt_flag_1 = ALT_MAYBE;
alt_status tmp_177_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_177_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(2959);
/* ItsCam_TpFunctions.ttcn, line 2959 */
tmp_177_alt_flag_0 = LibItsCam__TestSystem::ItsCam_component_camPort.receive(LibItsCam__Templates::mw__camIndWithGnParameters(LibItsCam__Templates::mw__camMsg__any, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnNextHeader_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnHeaderType_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnHeaderSubtype_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnLifetime_defval, LibItsCam__Templates::mw__camIndWithGnParameters_p__gnTrafficClass_defval), &(v__camInd), any_compref, NULL);
if (tmp_177_alt_flag_0 == ALT_YES) {
current_location.update_lineno(2960);
/* ItsCam_TpFunctions.ttcn, line 2960 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(2961);
/* ItsCam_TpFunctions.ttcn, line 2961 */
{
boolean tmp_180;
{
boolean tmp_178 = v__camInd.is_bound();
if(tmp_178) {
const INTEGER& tmp_179 = v__camInd.gnLifetime();
tmp_178 = tmp_179.is_present();
}
tmp_180 = (!(tmp_178));
}
if (tmp_180) {
current_location.update_lineno(2962);
/* ItsCam_TpFunctions.ttcn, line 2962 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_95).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2963);
/* ItsCam_TpFunctions.ttcn, line 2963 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
}
}
current_location.update_lineno(2965);
/* ItsCam_TpFunctions.ttcn, line 2965 */
if ((const_cast< const LibItsCam__TestSystem::CamInd&>(v__camInd).gnLifetime() <= 1000)) {
current_location.update_lineno(2966);
/* ItsCam_TpFunctions.ttcn, line 2966 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_96).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2967);
/* ItsCam_TpFunctions.ttcn, line 2967 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(2970);
/* ItsCam_TpFunctions.ttcn, line 2970 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_97).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2971);
/* ItsCam_TpFunctions.ttcn, line 2971 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_177_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(2974);
/* ItsCam_TpFunctions.ttcn, line 2974 */
tmp_177_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_177_alt_flag_1 == ALT_YES) {
current_location.update_lineno(2975);
/* ItsCam_TpFunctions.ttcn, line 2975 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(2976);
/* ItsCam_TpFunctions.ttcn, line 2976 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_177_default_flag == ALT_MAYBE) {
tmp_177_default_flag = TTCN_Default::try_altsteps();
if (tmp_177_default_flag == ALT_YES || tmp_177_default_flag == ALT_BREAK) break;
else if (tmp_177_default_flag == ALT_REPEAT) goto tmp_177;
}
current_location.update_lineno(2958);
/* ItsCam_TpFunctions.ttcn, line 2958 */
if (tmp_177_alt_flag_0 == ALT_NO && tmp_177_alt_flag_1 == ALT_NO && tmp_177_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsCam_TpFunctions.ttcn between lines 2958 and 2978.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(2981);
/* ItsCam_TpFunctions.ttcn, line 2981 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(2982);
/* ItsCam_TpFunctions.ttcn, line 2982 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSD__PAR__BV__03(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_PAR_BV_03(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSD_PAR_BV_03", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__CAM__MSP__BV__01()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 2995, TTCN_Location::LOCATION_FUNCTION, "f_CAM_MSP_BV_01");
current_location.update_lineno(2998);
/* ItsCam_TpFunctions.ttcn, line 2998 */
LibItsCam__TestSystem::CamReq v__camReq;
current_location.update_lineno(2999);
/* ItsCam_TpFunctions.ttcn, line 2999 */
INTEGER i;
current_location.update_lineno(3002);
/* ItsCam_TpFunctions.ttcn, line 3002 */
if ((!(LibItsCam__Pics::PICS__CAM__RECEPTION))) {
current_location.update_lineno(3003);
/* ItsCam_TpFunctions.ttcn, line 3003 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_98).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(3004);
/* ItsCam_TpFunctions.ttcn, line 3004 */
TTCN_Runtime::setverdict(INCONC);
current_location.update_lineno(3005);
/* ItsCam_TpFunctions.ttcn, line 3005 */
TTCN_Runtime::stop_execution();
}
current_location.update_lineno(3009);
/* ItsCam_TpFunctions.ttcn, line 3009 */
LibItsCam__Functions::f__cfUp();
current_location.update_lineno(3014);
/* ItsCam_TpFunctions.ttcn, line 3014 */
LibItsCam__Functions::f__prInitialState();
current_location.update_lineno(3015);
/* ItsCam_TpFunctions.ttcn, line 3015 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(3018);
/* ItsCam_TpFunctions.ttcn, line 3018 */
v__camReq = LibItsCam__Templates::m__camReq(LibItsCam__Templates::m__camMsg__vehicle(LibItsCommon__Functions::f__getTsStationId(), mod(LibItsCommon__Functions::f__getCurrentTime(), 65536), LibItsCam__Templates::m__tsPosition)).valueof();
current_location.update_lineno(3027);
/* ItsCam_TpFunctions.ttcn, line 3027 */
LibItsCam__TestSystem::ItsCam_component_camPort.send(v__camReq);
current_location.update_lineno(3029);
/* ItsCam_TpFunctions.ttcn, line 3029 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TNOAC);
current_location.update_lineno(3030);
/* ItsCam_TpFunctions.ttcn, line 3030 */
i = 0;
current_location.update_lineno(3030);
/* ItsCam_TpFunctions.ttcn, line 3030 */
for ( ; ; ) {
current_location.update_lineno(3030);
/* ItsCam_TpFunctions.ttcn, line 3030 */
{
boolean tmp_183;
tmp_183 = (i < LibItsCam__TestSystem::ItsCam_component_vc__utEvents.lengthof());
if (tmp_183) tmp_183 = (!(CAM__PDU__Descriptions::CAM_template(const_cast< const LibItsCam__TypesAndValues::UtCamEventIndList&>(LibItsCam__TestSystem::ItsCam_component_vc__utEvents)[i].camMsg()).match(const_cast< const LibItsCam__TestSystem::CamReq&>(v__camReq).msgOut(), TRUE)));
if (!tmp_183) break;
}
current_location.update_lineno(3030);
/* ItsCam_TpFunctions.ttcn, line 3030 */
{
INTEGER tmp_184;
++i;
}
}
current_location.update_lineno(3033);
/* ItsCam_TpFunctions.ttcn, line 3033 */
if ((i < LibItsCam__TestSystem::ItsCam_component_vc__utEvents.lengthof())) {
current_location.update_lineno(3034);
/* ItsCam_TpFunctions.ttcn, line 3034 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_99).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(3035);
/* ItsCam_TpFunctions.ttcn, line 3035 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(3038);
/* ItsCam_TpFunctions.ttcn, line 3038 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_0 + TTCN_Runtime::get_testcasename()) + cs_100).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(3039);
/* ItsCam_TpFunctions.ttcn, line 3039 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(3043);
/* ItsCam_TpFunctions.ttcn, line 3043 */
LibItsCam__Functions::f__poDefault();
current_location.update_lineno(3044);
/* ItsCam_TpFunctions.ttcn, line 3044 */
LibItsCam__Functions::f__cfDown();
}

void start_f__CAM__MSP__BV__01(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSP_BV_01(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "ItsCam_TpFunctions", "f_CAM_MSP_BV_01", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "ItsCam_TpFunctions");
LibItsCam__Functions::module_object.pre_init_module();
LibItsCam__Pics::module_object.pre_init_module();
module_object.add_function("f_CAM_MSD_FMT_BV_01", (genericfunc_t)&f__CAM__MSD__FMT__BV__01, (genericfunc_t)&start_f__CAM__MSD__FMT__BV__01);
module_object.add_function("f_CAM_MSD_FMT_BV_02", (genericfunc_t)&f__CAM__MSD__FMT__BV__02, (genericfunc_t)&start_f__CAM__MSD__FMT__BV__02);
module_object.add_function("f_CAM_MSD_FMT_BV_03", (genericfunc_t)&f__CAM__MSD__FMT__BV__03, (genericfunc_t)&start_f__CAM__MSD__FMT__BV__03);
module_object.add_function("f_CAM_MSD_FMT_BV_04", (genericfunc_t)&f__CAM__MSD__FMT__BV__04, (genericfunc_t)&start_f__CAM__MSD__FMT__BV__04);
module_object.add_function("f_CAM_MSD_FMT_BV_05", (genericfunc_t)&f__CAM__MSD__FMT__BV__05, (genericfunc_t)&start_f__CAM__MSD__FMT__BV__05);
module_object.add_function("f_CAM_MSD_INA_BV_01", (genericfunc_t)&f__CAM__MSD__INA__BV__01, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01);
module_object.add_function("f_CAM_MSD_INA_BV_01_01", (genericfunc_t)&f__CAM__MSD__INA__BV__01__01, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__01);
module_object.add_function("f_CAM_MSD_INA_BV_01_02", (genericfunc_t)&f__CAM__MSD__INA__BV__01__02, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__02);
module_object.add_function("f_CAM_MSD_INA_BV_01_03", (genericfunc_t)&f__CAM__MSD__INA__BV__01__03, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__03);
module_object.add_function("f_CAM_MSD_INA_BV_01_04", (genericfunc_t)&f__CAM__MSD__INA__BV__01__04, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__04);
module_object.add_function("f_CAM_MSD_INA_BV_01_05", (genericfunc_t)&f__CAM__MSD__INA__BV__01__05, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__05);
module_object.add_function("f_CAM_MSD_INA_BV_01_06", (genericfunc_t)&f__CAM__MSD__INA__BV__01__06, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__06);
module_object.add_function("f_CAM_MSD_INA_BV_01_07", (genericfunc_t)&f__CAM__MSD__INA__BV__01__07, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__07);
module_object.add_function("f_CAM_MSD_INA_BV_01_08", (genericfunc_t)&f__CAM__MSD__INA__BV__01__08, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__08);
module_object.add_function("f_CAM_MSD_INA_BV_01_09", (genericfunc_t)&f__CAM__MSD__INA__BV__01__09, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__09);
module_object.add_function("f_CAM_MSD_INA_BV_01_10", (genericfunc_t)&f__CAM__MSD__INA__BV__01__10, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__10);
module_object.add_function("f_CAM_MSD_INA_BV_01_11", (genericfunc_t)&f__CAM__MSD__INA__BV__01__11, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__11);
module_object.add_function("f_CAM_MSD_INA_BV_01_12", (genericfunc_t)&f__CAM__MSD__INA__BV__01__12, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__12);
module_object.add_function("f_CAM_MSD_INA_BV_01_13", (genericfunc_t)&f__CAM__MSD__INA__BV__01__13, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__13);
module_object.add_function("f_CAM_MSD_INA_BV_01_14", (genericfunc_t)&f__CAM__MSD__INA__BV__01__14, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__14);
module_object.add_function("f_CAM_MSD_INA_BV_01_15", (genericfunc_t)&f__CAM__MSD__INA__BV__01__15, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__15);
module_object.add_function("f_CAM_MSD_INA_BV_01_16", (genericfunc_t)&f__CAM__MSD__INA__BV__01__16, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__16);
module_object.add_function("f_CAM_MSD_INA_BV_01_17", (genericfunc_t)&f__CAM__MSD__INA__BV__01__17, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__17);
module_object.add_function("f_CAM_MSD_INA_BV_01_18", (genericfunc_t)&f__CAM__MSD__INA__BV__01__18, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__18);
module_object.add_function("f_CAM_MSD_INA_BV_01_19", (genericfunc_t)&f__CAM__MSD__INA__BV__01__19, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__19);
module_object.add_function("f_CAM_MSD_INA_BV_01_20", (genericfunc_t)&f__CAM__MSD__INA__BV__01__20, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__20);
module_object.add_function("f_CAM_MSD_INA_BV_01_21", (genericfunc_t)&f__CAM__MSD__INA__BV__01__21, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__21);
module_object.add_function("f_CAM_MSD_INA_BV_01_22", (genericfunc_t)&f__CAM__MSD__INA__BV__01__22, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__22);
module_object.add_function("f_CAM_MSD_INA_BV_01_23", (genericfunc_t)&f__CAM__MSD__INA__BV__01__23, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__23);
module_object.add_function("f_CAM_MSD_INA_BV_01_24", (genericfunc_t)&f__CAM__MSD__INA__BV__01__24, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__24);
module_object.add_function("f_CAM_MSD_INA_BV_01_25", (genericfunc_t)&f__CAM__MSD__INA__BV__01__25, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__25);
module_object.add_function("f_CAM_MSD_INA_BV_01_26", (genericfunc_t)&f__CAM__MSD__INA__BV__01__26, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__26);
module_object.add_function("f_CAM_MSD_INA_BV_01_27", (genericfunc_t)&f__CAM__MSD__INA__BV__01__27, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__27);
module_object.add_function("f_CAM_MSD_INA_BV_01_28", (genericfunc_t)&f__CAM__MSD__INA__BV__01__28, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__28);
module_object.add_function("f_CAM_MSD_INA_BV_01_29", (genericfunc_t)&f__CAM__MSD__INA__BV__01__29, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__29);
module_object.add_function("f_CAM_MSD_INA_BV_01_30", (genericfunc_t)&f__CAM__MSD__INA__BV__01__30, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__30);
module_object.add_function("f_CAM_MSD_INA_BV_01_31", (genericfunc_t)&f__CAM__MSD__INA__BV__01__31, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__31);
module_object.add_function("f_CAM_MSD_INA_BV_01_32", (genericfunc_t)&f__CAM__MSD__INA__BV__01__32, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__32);
module_object.add_function("f_CAM_MSD_INA_BV_01_33", (genericfunc_t)&f__CAM__MSD__INA__BV__01__33, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__33);
module_object.add_function("f_CAM_MSD_INA_BV_01_34", (genericfunc_t)&f__CAM__MSD__INA__BV__01__34, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__34);
module_object.add_function("f_CAM_MSD_INA_BV_01_35", (genericfunc_t)&f__CAM__MSD__INA__BV__01__35, (genericfunc_t)&start_f__CAM__MSD__INA__BV__01__35);
module_object.add_function("f_CAM_MSD_INA_BV_02", (genericfunc_t)&f__CAM__MSD__INA__BV__02, (genericfunc_t)&start_f__CAM__MSD__INA__BV__02);
module_object.add_function("f_CAM_MSD_INA_BV_03", (genericfunc_t)&f__CAM__MSD__INA__BV__03, (genericfunc_t)&start_f__CAM__MSD__INA__BV__03);
module_object.add_function("f_CAM_MSD_INA_BV_04", (genericfunc_t)&f__CAM__MSD__INA__BV__04, (genericfunc_t)&start_f__CAM__MSD__INA__BV__04);
module_object.add_function("f_CAM_MSD_INA_BV_05", (genericfunc_t)&f__CAM__MSD__INA__BV__05, (genericfunc_t)&start_f__CAM__MSD__INA__BV__05);
module_object.add_function("f_CAM_MSD_INA_BV_06", (genericfunc_t)&f__CAM__MSD__INA__BV__06, (genericfunc_t)&start_f__CAM__MSD__INA__BV__06);
module_object.add_function("f_CAM_MSD_INA_BV_07", (genericfunc_t)&f__CAM__MSD__INA__BV__07, (genericfunc_t)&start_f__CAM__MSD__INA__BV__07);
module_object.add_function("f_CAM_MSD_INA_BV_08", (genericfunc_t)&f__CAM__MSD__INA__BV__08, (genericfunc_t)&start_f__CAM__MSD__INA__BV__08);
module_object.add_function("f_CAM_MSD_GFQ_TI_01", (genericfunc_t)&f__CAM__MSD__GFQ__TI__01, (genericfunc_t)&start_f__CAM__MSD__GFQ__TI__01);
module_object.add_function("f_CAM_MSD_GFQ_TI_01_helper", (genericfunc_t)&f__CAM__MSD__GFQ__TI__01__helper, NULL);
module_object.add_function("f_CAM_MSD_GFQ_TI_02", (genericfunc_t)&f__CAM__MSD__GFQ__TI__02, (genericfunc_t)&start_f__CAM__MSD__GFQ__TI__02);
module_object.add_function("f_CAM_MSD_GFQ_TI_02_helper", (genericfunc_t)&f__CAM__MSD__GFQ__TI__02__helper, NULL);
module_object.add_function("f_CAM_MSD_GFQ_TI_03", (genericfunc_t)&f__CAM__MSD__GFQ__TI__03, (genericfunc_t)&start_f__CAM__MSD__GFQ__TI__03);
module_object.add_function("f_CAM_MSD_GFQ_BV_04", (genericfunc_t)&f__CAM__MSD__GFQ__BV__04, (genericfunc_t)&start_f__CAM__MSD__GFQ__BV__04);
module_object.add_function("f_CAM_MSD_GFQ_BV_05", (genericfunc_t)&f__CAM__MSD__GFQ__BV__05, (genericfunc_t)&start_f__CAM__MSD__GFQ__BV__05);
module_object.add_function("f_CAM_MSD_GFQ_BV_06", (genericfunc_t)&f__CAM__MSD__GFQ__BV__06, (genericfunc_t)&start_f__CAM__MSD__GFQ__BV__06);
module_object.add_function("f_CAM_MSD_GFQ_TI_07", (genericfunc_t)&f__CAM__MSD__GFQ__TI__07, (genericfunc_t)&start_f__CAM__MSD__GFQ__TI__07);
module_object.add_function("f_CAM_MSD_GFQ_TI_08", (genericfunc_t)&f__CAM__MSD__GFQ__TI__08, (genericfunc_t)&start_f__CAM__MSD__GFQ__TI__08);
module_object.add_function("f_CAM_MSD_PAR_BV_01", (genericfunc_t)&f__CAM__MSD__PAR__BV__01, (genericfunc_t)&start_f__CAM__MSD__PAR__BV__01);
module_object.add_function("f_CAM_MSD_PAR_BV_02", (genericfunc_t)&f__CAM__MSD__PAR__BV__02, (genericfunc_t)&start_f__CAM__MSD__PAR__BV__02);
module_object.add_function("f_CAM_MSD_PAR_BV_03", (genericfunc_t)&f__CAM__MSD__PAR__BV__03, (genericfunc_t)&start_f__CAM__MSD__PAR__BV__03);
module_object.add_function("f_CAM_MSP_BV_01", (genericfunc_t)&f__CAM__MSP__BV__01, (genericfunc_t)&start_f__CAM__MSP__BV__01);
}

static void post_init_module()
{
TTCN_Location current_location("ItsCam_TpFunctions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "ItsCam_TpFunctions");
LibItsCam__Functions::module_object.post_init_module();
LibItsCam__Pics::module_object.post_init_module();
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_CAM_MSD_FMT_BV_01")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_FMT_BV_01().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__FMT__BV__01();
TTCN_Runtime::function_finished("f_CAM_MSD_FMT_BV_01");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_FMT_BV_02")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_FMT_BV_02().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__FMT__BV__02();
TTCN_Runtime::function_finished("f_CAM_MSD_FMT_BV_02");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_FMT_BV_03")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_FMT_BV_03().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__FMT__BV__03();
TTCN_Runtime::function_finished("f_CAM_MSD_FMT_BV_03");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_FMT_BV_04")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_FMT_BV_04().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__FMT__BV__04();
TTCN_Runtime::function_finished("f_CAM_MSD_FMT_BV_04");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_FMT_BV_05")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_FMT_BV_05().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__FMT__BV__05();
TTCN_Runtime::function_finished("f_CAM_MSD_FMT_BV_05");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01")) {
CHARSTRING p__INFO;
UtCamTriggers_template p__utTriggers;
CamPdus_template p__camPdus;
p__INFO.decode_text(function_arguments);
p__utTriggers.decode_text(function_arguments);
p__camPdus.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_CAM_MSD_INA_BV_01(");
p__INFO.log();
TTCN_Logger::log_event_str(", ");
p__utTriggers.log();
TTCN_Logger::log_event_str(", ");
p__camPdus.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01(p__INFO, p__utTriggers, p__camPdus);
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_01")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_01().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__01();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_01");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_02")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_02().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__02();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_02");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_03")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_03().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__03();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_03");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_04")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_04().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__04();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_04");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_05")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_05().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__05();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_05");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_06")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_06().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__06();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_06");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_07")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_07().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__07();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_07");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_08")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_08().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__08();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_08");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_09")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_09().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__09();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_09");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_10")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_10().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__10();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_10");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_11")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_11().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__11();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_11");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_12")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_12().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__12();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_12");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_13")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_13().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__13();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_13");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_14")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_14().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__14();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_14");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_15")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_15().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__15();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_15");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_16")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_16().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__16();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_16");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_17")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_17().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__17();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_17");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_18")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_18().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__18();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_18");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_19")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_19().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__19();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_19");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_20")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_20().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__20();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_20");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_21")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_21().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__21();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_21");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_22")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_22().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__22();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_22");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_23")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_23().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__23();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_23");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_24")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_24().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__24();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_24");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_25")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_25().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__25();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_25");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_26")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_26().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__26();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_26");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_27")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_27().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__27();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_27");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_28")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_28().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__28();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_28");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_29")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_29().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__29();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_29");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_30")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_30().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__30();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_30");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_31")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_31().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__31();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_31");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_32")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_32().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__32();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_32");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_33")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_33().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__33();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_33");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_34")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_34().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__34();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_34");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_01_35")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_01_35().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__01__35();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_01_35");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_02")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_02().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__02();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_02");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_03")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_03().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__03();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_03");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_04")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_04().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__04();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_04");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_05")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_05().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__05();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_05");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_06")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_06().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__06();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_06");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_07")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_07().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__07();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_07");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_INA_BV_08")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_INA_BV_08().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__INA__BV__08();
TTCN_Runtime::function_finished("f_CAM_MSD_INA_BV_08");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_TI_01")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_TI_01().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__TI__01();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_TI_01");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_TI_02")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_TI_02().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__TI__02();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_TI_02");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_TI_03")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_TI_03().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__TI__03();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_TI_03");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_BV_04")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_BV_04().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__BV__04();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_BV_04");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_BV_05")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_BV_05().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__BV__05();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_BV_05");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_BV_06")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_BV_06().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__BV__06();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_BV_06");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_TI_07")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_TI_07().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__TI__07();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_TI_07");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_GFQ_TI_08")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_GFQ_TI_08().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__GFQ__TI__08();
TTCN_Runtime::function_finished("f_CAM_MSD_GFQ_TI_08");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_PAR_BV_01")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_PAR_BV_01().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__PAR__BV__01();
TTCN_Runtime::function_finished("f_CAM_MSD_PAR_BV_01");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_PAR_BV_02")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_PAR_BV_02().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__PAR__BV__02();
TTCN_Runtime::function_finished("f_CAM_MSD_PAR_BV_02");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSD_PAR_BV_03")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSD_PAR_BV_03().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSD__PAR__BV__03();
TTCN_Runtime::function_finished("f_CAM_MSD_PAR_BV_03");
return TRUE;
} else if (!strcmp(function_name, "f_CAM_MSP_BV_01")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_CAM_MSP_BV_01().");
TTCN_Runtime::function_started(function_arguments);
f__CAM__MSP__BV__01();
TTCN_Runtime::function_finished("f_CAM_MSP_BV_01");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
