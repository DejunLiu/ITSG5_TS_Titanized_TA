// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibCommon_Time.hh"

namespace LibCommon__Time {

/* Prototypes of static functions */

static void pre_init_module();
static boolean set_module_param(Module_Param& param);
static Module_Param* get_module_param(Module_Param_Name& param_name);
static void log_module_param();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x6e, 0x92, 0xb5, 0x8c, 0x75, 0xbb, 0x94, 0xba, 0x8e, 0x43, 0xc9, 0x3a, 0xcf, 0xfb, 0xae, 0x2d };

/* Global variable definitions */

static FLOAT modulepar_PX__TDONE;
const FLOAT& PX__TDONE = modulepar_PX__TDONE;
static FLOAT modulepar_PX__TAC;
const FLOAT& PX__TAC = modulepar_PX__TAC;
static FLOAT modulepar_PX__TNOAC;
const FLOAT& PX__TNOAC = modulepar_PX__TNOAC;
static FLOAT modulepar_PX__TWAIT;
const FLOAT& PX__TWAIT = modulepar_PX__TWAIT;
static FLOAT modulepar_PX__LOOP;
const FLOAT& PX__LOOP = modulepar_PX__LOOP;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibCommon_Time", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, NULL, set_module_param, get_module_param, log_module_param, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

void f__sleep(const FLOAT& p__duration)
{
TTCN_Location current_location("LibCommon_Time.ttcn", 61, TTCN_Location::LOCATION_FUNCTION, "f_sleep");
current_location.update_lineno(62);
/* LibCommon_Time.ttcn, line 62 */
TIMER t("t");
current_location.update_lineno(63);
/* LibCommon_Time.ttcn, line 63 */
if ((p__duration <= 0.0)) {
current_location.update_lineno(63);
/* LibCommon_Time.ttcn, line 63 */
return;
}
current_location.update_lineno(64);
/* LibCommon_Time.ttcn, line 64 */
t.start(p__duration);
current_location.update_lineno(65);
/* LibCommon_Time.ttcn, line 65 */
{
tmp_0:
alt_status alt_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (alt_flag != ALT_NO) {
alt_flag = t.timeout();
if (alt_flag == ALT_YES) break;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) break;
else if (default_flag == ALT_REPEAT) goto tmp_0;
}
current_location.update_lineno(65);
/* LibCommon_Time.ttcn, line 65 */
if (alt_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("Stand-alone timeout statement failed in file LibCommon_Time.ttcn, line 65.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void f__sleepIgnoreDef(const FLOAT& p__duration)
{
TTCN_Location current_location("LibCommon_Time.ttcn", 75, TTCN_Location::LOCATION_FUNCTION, "f_sleepIgnoreDef");
current_location.update_lineno(76);
/* LibCommon_Time.ttcn, line 76 */
TIMER t("t");
current_location.update_lineno(77);
/* LibCommon_Time.ttcn, line 77 */
if ((p__duration <= 0.0)) {
current_location.update_lineno(77);
/* LibCommon_Time.ttcn, line 77 */
return;
}
current_location.update_lineno(78);
/* LibCommon_Time.ttcn, line 78 */
t.start(p__duration);
current_location.update_lineno(79);
/* LibCommon_Time.ttcn, line 79 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(80);
/* LibCommon_Time.ttcn, line 80 */
tmp_1_alt_flag_0 = t.timeout();
if (tmp_1_alt_flag_0 == ALT_YES) break;
}
TTCN_Snapshot::else_branch_reached();
{
current_location.update_lineno(81);
/* LibCommon_Time.ttcn, line 81 */
goto tmp_1;
}
}
}
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibCommon_Time.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibCommon_Time");
current_location.update_lineno(24);
/* LibCommon_Time.ttcn, line 24 */
modulepar_PX__TDONE = 1.2e2;
current_location.update_lineno(30);
/* LibCommon_Time.ttcn, line 30 */
modulepar_PX__TAC = 3.0e1;
current_location.update_lineno(36);
/* LibCommon_Time.ttcn, line 36 */
modulepar_PX__TNOAC = 1.0e1;
current_location.update_lineno(42);
/* LibCommon_Time.ttcn, line 42 */
modulepar_PX__TWAIT = 1.2e2;
current_location.update_lineno(48);
/* LibCommon_Time.ttcn, line 48 */
modulepar_PX__LOOP = 1.0;
module_object.add_function("f_sleep", (genericfunc_t)&f__sleep, NULL);
module_object.add_function("f_sleepIgnoreDef", (genericfunc_t)&f__sleepIgnoreDef, NULL);
}

static boolean set_module_param(Module_Param& param)
{
const char* const par_name = param.get_id()->get_current_name();
if (!strcmp(par_name, "PX_TDONE")) {
modulepar_PX__TDONE.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TAC")) {
modulepar_PX__TAC.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TNOAC")) {
modulepar_PX__TNOAC.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_TWAIT")) {
modulepar_PX__TWAIT.set_param(param);
return TRUE;
} else if (!strcmp(par_name, "PX_LOOP")) {
modulepar_PX__LOOP.set_param(param);
return TRUE;
} else return FALSE;
}

static Module_Param* get_module_param(Module_Param_Name& param_name)
{
const char* const par_name = param_name.get_current_name();
if (!strcmp(par_name, "PX_TDONE")) {
return modulepar_PX__TDONE.get_param(param_name);
} else if (!strcmp(par_name, "PX_TAC")) {
return modulepar_PX__TAC.get_param(param_name);
} else if (!strcmp(par_name, "PX_TNOAC")) {
return modulepar_PX__TNOAC.get_param(param_name);
} else if (!strcmp(par_name, "PX_TWAIT")) {
return modulepar_PX__TWAIT.get_param(param_name);
} else if (!strcmp(par_name, "PX_LOOP")) {
return modulepar_PX__LOOP.get_param(param_name);
} else return NULL;
}

static void log_module_param()
{
TTCN_Logger::log_event_str("PX_TDONE := ");
PX__TDONE.log();
TTCN_Logger::log_event_str(", PX_TAC := ");
PX__TAC.log();
TTCN_Logger::log_event_str(", PX_TNOAC := ");
PX__TNOAC.log();
TTCN_Logger::log_event_str(", PX_TWAIT := ");
PX__TWAIT.log();
TTCN_Logger::log_event_str(", PX_LOOP := ");
PX__LOOP.log();
}


} /* end of namespace */
