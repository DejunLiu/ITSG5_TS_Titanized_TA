// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "ItsBtp_TestCases.hh"

namespace ItsBtp__TestCases {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x45, 0x40, 0x1c, 0x8f, 0x5c, 0x1d, 0x1b, 0x70, 0xa3, 0xef, 0xf7, 0x3a, 0xc4, 0x6b, 0x54, 0xf6 };

/* Global variable definitions */

static const size_t num_namespaces = 0;
TTCN_Module module_object("ItsBtp_TestCases", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

verdicttype testcase_TC__BTP__PGA__BV__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 63, TTCN_Location::LOCATION_TESTCASE, "TC_BTP_PGA_BV_01");
try {
TTCN_Runtime::begin_testcase("ItsBtp_TestCases", "TC_BTP_PGA_BV_01", "LibItsBtp_TestSystem", "ItsBtp", "LibItsBtp_TestSystem", "ItsBtpSystem", has_timer, timer_value);
current_location.update_lineno(70);
/* ItsBtp_TestCases.ttcn, line 70 */
LibItsBtp__Functions::f__cfUp();
current_location.update_lineno(75);
/* ItsBtp_TestCases.ttcn, line 75 */
LibItsBtp__Functions::f__prInitialState();
current_location.update_lineno(76);
/* ItsBtp_TestCases.ttcn, line 76 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(79);
/* ItsBtp_TestCases.ttcn, line 79 */
LibItsBtp__Functions::f__utTriggerEvent(LibItsBtp__Templates::m__generateBtpA(LibItsBtp__Functions::f__getBtpDstPort(), LibItsBtp__Functions::f__getBtpSrcPort()));
current_location.update_lineno(80);
/* ItsBtp_TestCases.ttcn, line 80 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(81);
/* ItsBtp_TestCases.ttcn, line 81 */
{
tmp_0:
alt_status tmp_0_alt_flag_0 = ALT_MAYBE;
alt_status tmp_0_alt_flag_1 = ALT_MAYBE;
alt_status tmp_0_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_0_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(82);
/* ItsBtp_TestCases.ttcn, line 82 */
tmp_0_alt_flag_0 = LibItsBtp__TestSystem::ItsBtp_component_btpPort.receive(LibItsBtp__Templates::mw__btpInd(LibItsBtp__Templates::mw__btpA(INTEGER_template(LibItsBtp__Functions::f__getBtpDstPort()), INTEGER_template(LibItsBtp__Functions::f__getBtpSrcPort()), LibItsBtp__TypesAndValues::BtpPayload_template(ANY_OR_OMIT))), NULL, any_compref, NULL);
if (tmp_0_alt_flag_0 == ALT_YES) {
current_location.update_lineno(83);
/* ItsBtp_TestCases.ttcn, line 83 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(84);
/* ItsBtp_TestCases.ttcn, line 84 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PGA_BV_01: PASS: BTP-A packet correclty received ***");
current_location.update_lineno(85);
/* ItsBtp_TestCases.ttcn, line 85 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_0_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(88);
/* ItsBtp_TestCases.ttcn, line 88 */
tmp_0_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_0_alt_flag_1 == ALT_YES) {
current_location.update_lineno(89);
/* ItsBtp_TestCases.ttcn, line 89 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PGA_BV_01: INCONC: Expected BTP packet not received ***");
current_location.update_lineno(90);
/* ItsBtp_TestCases.ttcn, line 90 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_0_default_flag == ALT_MAYBE) {
tmp_0_default_flag = TTCN_Default::try_altsteps();
if (tmp_0_default_flag == ALT_YES || tmp_0_default_flag == ALT_BREAK) break;
else if (tmp_0_default_flag == ALT_REPEAT) goto tmp_0;
}
current_location.update_lineno(81);
/* ItsBtp_TestCases.ttcn, line 81 */
if (tmp_0_alt_flag_0 == ALT_NO && tmp_0_alt_flag_1 == ALT_NO && tmp_0_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsBtp_TestCases.ttcn between lines 81 and 92.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(95);
/* ItsBtp_TestCases.ttcn, line 95 */
LibItsBtp__Functions::f__poDefault();
current_location.update_lineno(96);
/* ItsBtp_TestCases.ttcn, line 96 */
LibItsBtp__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_BTP_PGA_BV_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__BTP__PGB__BV__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 137, TTCN_Location::LOCATION_TESTCASE, "TC_BTP_PGB_BV_01");
try {
TTCN_Runtime::begin_testcase("ItsBtp_TestCases", "TC_BTP_PGB_BV_01", "LibItsBtp_TestSystem", "ItsBtp", "LibItsBtp_TestSystem", "ItsBtpSystem", has_timer, timer_value);
current_location.update_lineno(144);
/* ItsBtp_TestCases.ttcn, line 144 */
LibItsBtp__Functions::f__cfUp();
current_location.update_lineno(149);
/* ItsBtp_TestCases.ttcn, line 149 */
LibItsBtp__Functions::f__prInitialState();
current_location.update_lineno(150);
/* ItsBtp_TestCases.ttcn, line 150 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(153);
/* ItsBtp_TestCases.ttcn, line 153 */
LibItsBtp__Functions::f__utTriggerEvent(LibItsBtp__Templates::m__generateBtpB(LibItsBtp__Functions::f__getBtpDstPort(), LibItsBtp__Functions::f__getBtpDstPortInfo()));
current_location.update_lineno(154);
/* ItsBtp_TestCases.ttcn, line 154 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(155);
/* ItsBtp_TestCases.ttcn, line 155 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
alt_status tmp_1_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(156);
/* ItsBtp_TestCases.ttcn, line 156 */
tmp_1_alt_flag_0 = LibItsBtp__TestSystem::ItsBtp_component_btpPort.receive(LibItsBtp__Templates::mw__btpInd(LibItsBtp__Templates::mw__btpB(INTEGER_template(LibItsBtp__Functions::f__getBtpDstPort()), INTEGER_template(LibItsBtp__Functions::f__getBtpDstPortInfo()), LibItsBtp__TypesAndValues::BtpPayload_template(ANY_OR_OMIT))), NULL, any_compref, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(157);
/* ItsBtp_TestCases.ttcn, line 157 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(158);
/* ItsBtp_TestCases.ttcn, line 158 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PGB_BV_01: PASS: BTP-B packet correclty received ***");
current_location.update_lineno(159);
/* ItsBtp_TestCases.ttcn, line 159 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(162);
/* ItsBtp_TestCases.ttcn, line 162 */
tmp_1_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_1_alt_flag_1 == ALT_YES) {
current_location.update_lineno(163);
/* ItsBtp_TestCases.ttcn, line 163 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PGB_BV_01: INCONC: Expected BTP packet not received ***");
current_location.update_lineno(164);
/* ItsBtp_TestCases.ttcn, line 164 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_1_default_flag == ALT_MAYBE) {
tmp_1_default_flag = TTCN_Default::try_altsteps();
if (tmp_1_default_flag == ALT_YES || tmp_1_default_flag == ALT_BREAK) break;
else if (tmp_1_default_flag == ALT_REPEAT) goto tmp_1;
}
current_location.update_lineno(155);
/* ItsBtp_TestCases.ttcn, line 155 */
if (tmp_1_alt_flag_0 == ALT_NO && tmp_1_alt_flag_1 == ALT_NO && tmp_1_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsBtp_TestCases.ttcn between lines 155 and 166.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(169);
/* ItsBtp_TestCases.ttcn, line 169 */
LibItsBtp__Functions::f__poDefault();
current_location.update_lineno(170);
/* ItsBtp_TestCases.ttcn, line 170 */
LibItsBtp__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_BTP_PGB_BV_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__BTP__PGB__BV__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 206, TTCN_Location::LOCATION_TESTCASE, "TC_BTP_PGB_BV_02");
try {
TTCN_Runtime::begin_testcase("ItsBtp_TestCases", "TC_BTP_PGB_BV_02", "LibItsBtp_TestSystem", "ItsBtp", "LibItsBtp_TestSystem", "ItsBtpSystem", has_timer, timer_value);
current_location.update_lineno(213);
/* ItsBtp_TestCases.ttcn, line 213 */
LibItsBtp__Functions::f__cfUp();
current_location.update_lineno(218);
/* ItsBtp_TestCases.ttcn, line 218 */
LibItsBtp__Functions::f__prInitialState();
current_location.update_lineno(219);
/* ItsBtp_TestCases.ttcn, line 219 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(222);
/* ItsBtp_TestCases.ttcn, line 222 */
LibItsBtp__Functions::f__utTriggerEvent(LibItsBtp__Templates::m__generateBtpB(LibItsBtp__Functions::f__getBtpDstPort(), 0));
current_location.update_lineno(223);
/* ItsBtp_TestCases.ttcn, line 223 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(224);
/* ItsBtp_TestCases.ttcn, line 224 */
{
tmp_2:
alt_status tmp_2_alt_flag_0 = ALT_MAYBE;
alt_status tmp_2_alt_flag_1 = ALT_MAYBE;
alt_status tmp_2_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_2_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(225);
/* ItsBtp_TestCases.ttcn, line 225 */
tmp_2_alt_flag_0 = LibItsBtp__TestSystem::ItsBtp_component_btpPort.receive(LibItsBtp__Templates::mw__btpInd(LibItsBtp__Templates::mw__btpB(INTEGER_template(LibItsBtp__Functions::f__getBtpDstPort()), INTEGER_template(0), LibItsBtp__TypesAndValues::BtpPayload_template(ANY_OR_OMIT))), NULL, any_compref, NULL);
if (tmp_2_alt_flag_0 == ALT_YES) {
current_location.update_lineno(226);
/* ItsBtp_TestCases.ttcn, line 226 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(227);
/* ItsBtp_TestCases.ttcn, line 227 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PGB_BV_02: PASS: BTP-B packet correclty received ***");
current_location.update_lineno(228);
/* ItsBtp_TestCases.ttcn, line 228 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_2_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(231);
/* ItsBtp_TestCases.ttcn, line 231 */
tmp_2_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_2_alt_flag_1 == ALT_YES) {
current_location.update_lineno(232);
/* ItsBtp_TestCases.ttcn, line 232 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PGB_BV_02: INCONC: Expected BTP packet not received ***");
current_location.update_lineno(233);
/* ItsBtp_TestCases.ttcn, line 233 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_2_default_flag == ALT_MAYBE) {
tmp_2_default_flag = TTCN_Default::try_altsteps();
if (tmp_2_default_flag == ALT_YES || tmp_2_default_flag == ALT_BREAK) break;
else if (tmp_2_default_flag == ALT_REPEAT) goto tmp_2;
}
current_location.update_lineno(224);
/* ItsBtp_TestCases.ttcn, line 224 */
if (tmp_2_alt_flag_0 == ALT_NO && tmp_2_alt_flag_1 == ALT_NO && tmp_2_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsBtp_TestCases.ttcn between lines 224 and 235.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(238);
/* ItsBtp_TestCases.ttcn, line 238 */
LibItsBtp__Functions::f__poDefault();
current_location.update_lineno(239);
/* ItsBtp_TestCases.ttcn, line 239 */
LibItsBtp__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_BTP_PGB_BV_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__BTP__PP__BV__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 278, TTCN_Location::LOCATION_TESTCASE, "TC_BTP_PP_BV_01");
try {
TTCN_Runtime::begin_testcase("ItsBtp_TestCases", "TC_BTP_PP_BV_01", "LibItsBtp_TestSystem", "ItsBtp", "LibItsBtp_TestSystem", "ItsBtpSystem", has_timer, timer_value);
current_location.update_lineno(281);
/* ItsBtp_TestCases.ttcn, line 281 */
LibItsBtp__TestSystem::BtpReq v__btpReq;
current_location.update_lineno(282);
/* ItsBtp_TestCases.ttcn, line 282 */
INTEGER i;
current_location.update_lineno(287);
/* ItsBtp_TestCases.ttcn, line 287 */
LibItsBtp__Functions::f__cfUp();
current_location.update_lineno(292);
/* ItsBtp_TestCases.ttcn, line 292 */
LibItsBtp__Functions::f__prInitialState();
current_location.update_lineno(293);
/* ItsBtp_TestCases.ttcn, line 293 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(296);
/* ItsBtp_TestCases.ttcn, line 296 */
v__btpReq = LibItsBtp__Templates::m__btpReq(LibItsBtp__Templates::m__btpAWithPorts(INTEGER_template(LibItsBtp__Functions::f__getBtpDstPort()), INTEGER_template(LibItsBtp__Functions::f__getBtpSrcPort()), LibItsBtp__TypesAndValues::BtpPayload_template(LibItsBtp__Functions::f__getBtpPayload()))).valueof();
current_location.update_lineno(297);
/* ItsBtp_TestCases.ttcn, line 297 */
LibItsBtp__TestSystem::ItsBtp_component_btpPort.send(v__btpReq);
current_location.update_lineno(299);
/* ItsBtp_TestCases.ttcn, line 299 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TNOAC);
current_location.update_lineno(300);
/* ItsBtp_TestCases.ttcn, line 300 */
i = 0;
current_location.update_lineno(300);
/* ItsBtp_TestCases.ttcn, line 300 */
for ( ; ; ) {
current_location.update_lineno(300);
/* ItsBtp_TestCases.ttcn, line 300 */
{
boolean tmp_5;
tmp_5 = (i < LibItsBtp__TestSystem::ItsBtp_component_vc__utEvents.lengthof());
if (tmp_5) tmp_5 = (!(OCTETSTRING_template(const_cast< const LibItsBtp__TypesAndValues::UtBtpEventIndList&>(LibItsBtp__TestSystem::ItsBtp_component_vc__utEvents)[i].rawPayload()).match(const_cast< const LibItsBtp__TestSystem::BtpReq&>(v__btpReq).msgOut().payload()().rawPayload(), TRUE)));
if (!tmp_5) break;
}
current_location.update_lineno(300);
/* ItsBtp_TestCases.ttcn, line 300 */
{
INTEGER tmp_6;
++i;
}
}
current_location.update_lineno(303);
/* ItsBtp_TestCases.ttcn, line 303 */
if ((i < LibItsBtp__TestSystem::ItsBtp_component_vc__utEvents.lengthof())) {
current_location.update_lineno(304);
/* ItsBtp_TestCases.ttcn, line 304 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PP_BV_01: PASS: BTP was transmitted to upper layer ***");
current_location.update_lineno(305);
/* ItsBtp_TestCases.ttcn, line 305 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(308);
/* ItsBtp_TestCases.ttcn, line 308 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PP_BV_01: FAIL: BTP was not transmitted to upper layer ***");
current_location.update_lineno(309);
/* ItsBtp_TestCases.ttcn, line 309 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(313);
/* ItsBtp_TestCases.ttcn, line 313 */
LibItsBtp__Functions::f__poDefault();
current_location.update_lineno(314);
/* ItsBtp_TestCases.ttcn, line 314 */
LibItsBtp__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_BTP_PP_BV_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__BTP__PP__BV__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 345, TTCN_Location::LOCATION_TESTCASE, "TC_BTP_PP_BV_02");
try {
TTCN_Runtime::begin_testcase("ItsBtp_TestCases", "TC_BTP_PP_BV_02", "LibItsBtp_TestSystem", "ItsBtp", "LibItsBtp_TestSystem", "ItsBtpSystem", has_timer, timer_value);
current_location.update_lineno(348);
/* ItsBtp_TestCases.ttcn, line 348 */
LibItsBtp__TestSystem::BtpReq v__btpReq;
current_location.update_lineno(349);
/* ItsBtp_TestCases.ttcn, line 349 */
INTEGER i;
current_location.update_lineno(354);
/* ItsBtp_TestCases.ttcn, line 354 */
LibItsBtp__Functions::f__cfUp();
current_location.update_lineno(359);
/* ItsBtp_TestCases.ttcn, line 359 */
LibItsBtp__Functions::f__prInitialState();
current_location.update_lineno(360);
/* ItsBtp_TestCases.ttcn, line 360 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(363);
/* ItsBtp_TestCases.ttcn, line 363 */
v__btpReq = LibItsBtp__Templates::m__btpReq(LibItsBtp__Templates::m__btpBWithPorts(INTEGER_template(LibItsBtp__Functions::f__getBtpDstPort()), INTEGER_template(LibItsBtp__Functions::f__getBtpDstPortInfo()), LibItsBtp__TypesAndValues::BtpPayload_template(LibItsBtp__Functions::f__getBtpPayload()))).valueof();
current_location.update_lineno(364);
/* ItsBtp_TestCases.ttcn, line 364 */
LibItsBtp__TestSystem::ItsBtp_component_btpPort.send(v__btpReq);
current_location.update_lineno(366);
/* ItsBtp_TestCases.ttcn, line 366 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TNOAC);
current_location.update_lineno(367);
/* ItsBtp_TestCases.ttcn, line 367 */
i = 0;
current_location.update_lineno(367);
/* ItsBtp_TestCases.ttcn, line 367 */
for ( ; ; ) {
current_location.update_lineno(367);
/* ItsBtp_TestCases.ttcn, line 367 */
{
boolean tmp_9;
tmp_9 = (i < LibItsBtp__TestSystem::ItsBtp_component_vc__utEvents.lengthof());
if (tmp_9) tmp_9 = (!(OCTETSTRING_template(const_cast< const LibItsBtp__TypesAndValues::UtBtpEventIndList&>(LibItsBtp__TestSystem::ItsBtp_component_vc__utEvents)[i].rawPayload()).match(const_cast< const LibItsBtp__TestSystem::BtpReq&>(v__btpReq).msgOut().payload()().rawPayload(), TRUE)));
if (!tmp_9) break;
}
current_location.update_lineno(367);
/* ItsBtp_TestCases.ttcn, line 367 */
{
INTEGER tmp_10;
++i;
}
}
current_location.update_lineno(370);
/* ItsBtp_TestCases.ttcn, line 370 */
if ((i < LibItsBtp__TestSystem::ItsBtp_component_vc__utEvents.lengthof())) {
current_location.update_lineno(371);
/* ItsBtp_TestCases.ttcn, line 371 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PP_BV_02: PASS: BTP was transmitted to upper layer ***");
current_location.update_lineno(372);
/* ItsBtp_TestCases.ttcn, line 372 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(375);
/* ItsBtp_TestCases.ttcn, line 375 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_BTP_PP_BV_02: FAIL: BTP was not transmitted to upper layer ***");
current_location.update_lineno(376);
/* ItsBtp_TestCases.ttcn, line 376 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictTestBody(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(380);
/* ItsBtp_TestCases.ttcn, line 380 */
LibItsBtp__Functions::f__poDefault();
current_location.update_lineno(381);
/* ItsBtp_TestCases.ttcn, line 381 */
LibItsBtp__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_BTP_PP_BV_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "ItsBtp_TestCases");
LibItsBtp__Functions::module_object.pre_init_module();
module_object.add_testcase_nonpard("TC_BTP_PGA_BV_01", testcase_TC__BTP__PGA__BV__01);
module_object.add_testcase_nonpard("TC_BTP_PGB_BV_01", testcase_TC__BTP__PGB__BV__01);
module_object.add_testcase_nonpard("TC_BTP_PGB_BV_02", testcase_TC__BTP__PGB__BV__02);
module_object.add_testcase_nonpard("TC_BTP_PP_BV_01", testcase_TC__BTP__PP__BV__01);
module_object.add_testcase_nonpard("TC_BTP_PP_BV_02", testcase_TC__BTP__PP__BV__02);
}

static void post_init_module()
{
TTCN_Location current_location("ItsBtp_TestCases.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "ItsBtp_TestCases");
LibItsBtp__Functions::module_object.post_init_module();
}


} /* end of namespace */
