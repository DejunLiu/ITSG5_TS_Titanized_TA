// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

#ifndef LibItsMapSpat__TestSystem_HH
#define LibItsMapSpat__TestSystem_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "LibItsCommon_TestSystem.hh"
#include "LibItsMapSpat_TypesAndValues.hh"

#if TTCN3_VERSION != 50400
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef LibItsMapSpat__TestSystem_HH
#endif

namespace LibItsMapSpat__TestSystem {

/* Forward declarations of classes */

class UpperTesterMapSpatPort_BASE;
class UpperTesterMapSpatPort;
class MapSpatPort_BASE;
class MapSpatPort;
class MapMsg;
class MapMsg_template;
class MapInd;
class MapInd_template;
class SpatMsg;
class SpatMsg_template;
class SpatInd;
class SpatInd_template;
class MapReq;
class MapReq_template;
class SpatReq;
class SpatReq_template;

} /* end of namespace */

#ifndef LibItsMapSpat__TestSystem_HH
#define LibItsMapSpat__TestSystem_HH

namespace LibItsMapSpat__TestSystem {

/* Type definitions */

typedef COMPONENT ItsMapSpatSystem;
typedef COMPONENT_template ItsMapSpatSystem_template;
typedef COMPONENT ItsMapSpat;
typedef COMPONENT_template ItsMapSpat_template;
typedef OCTETSTRING RawData;
typedef OCTETSTRING_template RawData_template;

/* Class definitions */

class UpperTesterMapSpatPort_BASE : public PORT {
enum msg_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2, MESSAGE_3 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
LibItsCommon__TypesAndValues::UtInitializeResult *message_0;
LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult *message_1;
LibItsMapSpat__TypesAndValues::UtMapEventInd *message_2;
LibItsMapSpat__TypesAndValues::UtSpatEventInd *message_3;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
UpperTesterMapSpatPort_BASE(const char *par_port_name);
~UpperTesterMapSpatPort_BASE();
void send(const LibItsCommon__TypesAndValues::UtInitialize& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtInitialize& send_par);
void send(const LibItsCommon__TypesAndValues::UtInitialize_template& send_par, const COMPONENT& destination_component);
void send(const LibItsCommon__TypesAndValues::UtInitialize_template& send_par);
void send(const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger& send_par, const COMPONENT& destination_component);
void send(const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger& send_par);
void send(const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger_template& send_par, const COMPONENT& destination_component);
void send(const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger_template& send_par);
protected:
virtual void outgoing_send(const LibItsCommon__TypesAndValues::UtInitialize& send_par) = 0;
virtual void outgoing_send(const LibItsMapSpat__TypesAndValues::UtMapSpatTrigger& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsCommon__TypesAndValues::UtInitializeResult_template& value_template, LibItsCommon__TypesAndValues::UtInitializeResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult_template& value_template, LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult_template& value_template, LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult_template& value_template, LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsMapSpat__TypesAndValues::UtMapEventInd_template& value_template, LibItsMapSpat__TypesAndValues::UtMapEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsMapSpat__TypesAndValues::UtMapEventInd_template& value_template, LibItsMapSpat__TypesAndValues::UtMapEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsMapSpat__TypesAndValues::UtMapEventInd_template& value_template, LibItsMapSpat__TypesAndValues::UtMapEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const LibItsMapSpat__TypesAndValues::UtSpatEventInd_template& value_template, LibItsMapSpat__TypesAndValues::UtSpatEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const LibItsMapSpat__TypesAndValues::UtSpatEventInd_template& value_template, LibItsMapSpat__TypesAndValues::UtSpatEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const LibItsMapSpat__TypesAndValues::UtSpatEventInd_template& value_template, LibItsMapSpat__TypesAndValues::UtSpatEventInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const LibItsCommon__TypesAndValues::UtInitializeResult& incoming_par, component sender_component);
void incoming_message(const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult& incoming_par, component sender_component);
void incoming_message(const LibItsMapSpat__TypesAndValues::UtMapEventInd& incoming_par, component sender_component);
void incoming_message(const LibItsMapSpat__TypesAndValues::UtSpatEventInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const LibItsCommon__TypesAndValues::UtInitializeResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsMapSpat__TypesAndValues::UtMapSpatTriggerResult& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsMapSpat__TypesAndValues::UtMapEventInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const LibItsMapSpat__TypesAndValues::UtSpatEventInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class MapSpatPort_BASE : public PORT {
enum msg_selection { MESSAGE_0, MESSAGE_1 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
MapInd *message_0;
SpatInd *message_1;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
MapSpatPort_BASE(const char *par_port_name);
~MapSpatPort_BASE();
void send(const MapReq& send_par, const COMPONENT& destination_component);
void send(const MapReq& send_par);
void send(const MapReq_template& send_par, const COMPONENT& destination_component);
void send(const MapReq_template& send_par);
void send(const SpatReq& send_par, const COMPONENT& destination_component);
void send(const SpatReq& send_par);
void send(const SpatReq_template& send_par, const COMPONENT& destination_component);
void send(const SpatReq_template& send_par);
protected:
virtual void outgoing_send(const MapReq& send_par) = 0;
virtual void outgoing_send(const SpatReq& send_par) = 0;
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const MapInd_template& value_template, MapInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const MapInd_template& value_template, MapInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const MapInd_template& value_template, MapInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const SpatInd_template& value_template, SpatInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const SpatInd_template& value_template, SpatInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const SpatInd_template& value_template, SpatInd *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const MapInd& incoming_par, component sender_component);
void incoming_message(const SpatInd& incoming_par, component sender_component);
protected:
inline void incoming_message(const MapInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
inline void incoming_message(const SpatInd& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class MapMsg {
  MAP__SPAT__ETSI::MAP__PDU field_msgMap;
  OCTETSTRING field_rawData;
  boolean bound_flag;
public:
  MapMsg();
  MapMsg(const MAP__SPAT__ETSI::MAP__PDU& par_msgMap,
    const OCTETSTRING& par_rawData);
  MapMsg(const MapMsg& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MapMsg& operator=(const MapMsg& other_value);
  boolean operator==(const MapMsg& other_value) const;
  inline boolean operator!=(const MapMsg& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline MAP__SPAT__ETSI::MAP__PDU& msgMap()
    {return field_msgMap;}
  inline const MAP__SPAT__ETSI::MAP__PDU& msgMap() const
    {return field_msgMap;}
  inline OCTETSTRING& rawData()
    {return field_rawData;}
  inline const OCTETSTRING& rawData() const
    {return field_rawData;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MapMsg_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MapMsg_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MapMsg& other_value);
void copy_template(const MapMsg_template& other_value);

public:
MapMsg_template();
MapMsg_template(template_sel other_value);
MapMsg_template(const MapMsg& other_value);
MapMsg_template(const OPTIONAL<MapMsg>& other_value);
MapMsg_template(const MapMsg_template& other_value);
~MapMsg_template();
MapMsg_template& operator=(template_sel other_value);
MapMsg_template& operator=(const MapMsg& other_value);
MapMsg_template& operator=(const OPTIONAL<MapMsg>& other_value);
MapMsg_template& operator=(const MapMsg_template& other_value);
boolean match(const MapMsg& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MapMsg valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MapMsg_template& list_item(unsigned int list_index) const;
MAP__SPAT__ETSI::MAP__PDU_template& msgMap();
const MAP__SPAT__ETSI::MAP__PDU_template& msgMap() const;
OCTETSTRING_template& rawData();
const OCTETSTRING_template& rawData() const;
int size_of() const;
void log() const;
void log_match(const MapMsg& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MapInd {
  MapMsg field_msgIn;
  OPTIONAL<INTEGER> field_gnNextHeader;
  OPTIONAL<INTEGER> field_gnHeaderType;
  OPTIONAL<INTEGER> field_gnHeaderSubtype;
  OPTIONAL<INTEGER> field_gnLifetime;
  OPTIONAL<INTEGER> field_gnTrafficClass;
  OPTIONAL<INTEGER> field_btpDestinationPort;
  OPTIONAL<INTEGER> field_btpInfo;
  boolean bound_flag;
public:
  MapInd();
  MapInd(const MapMsg& par_msgIn,
    const OPTIONAL<INTEGER>& par_gnNextHeader,
    const OPTIONAL<INTEGER>& par_gnHeaderType,
    const OPTIONAL<INTEGER>& par_gnHeaderSubtype,
    const OPTIONAL<INTEGER>& par_gnLifetime,
    const OPTIONAL<INTEGER>& par_gnTrafficClass,
    const OPTIONAL<INTEGER>& par_btpDestinationPort,
    const OPTIONAL<INTEGER>& par_btpInfo);
  MapInd(const MapInd& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MapInd& operator=(const MapInd& other_value);
  boolean operator==(const MapInd& other_value) const;
  inline boolean operator!=(const MapInd& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline MapMsg& msgIn()
    {return field_msgIn;}
  inline const MapMsg& msgIn() const
    {return field_msgIn;}
  inline OPTIONAL<INTEGER>& gnNextHeader()
    {return field_gnNextHeader;}
  inline const OPTIONAL<INTEGER>& gnNextHeader() const
    {return field_gnNextHeader;}
  inline OPTIONAL<INTEGER>& gnHeaderType()
    {return field_gnHeaderType;}
  inline const OPTIONAL<INTEGER>& gnHeaderType() const
    {return field_gnHeaderType;}
  inline OPTIONAL<INTEGER>& gnHeaderSubtype()
    {return field_gnHeaderSubtype;}
  inline const OPTIONAL<INTEGER>& gnHeaderSubtype() const
    {return field_gnHeaderSubtype;}
  inline OPTIONAL<INTEGER>& gnLifetime()
    {return field_gnLifetime;}
  inline const OPTIONAL<INTEGER>& gnLifetime() const
    {return field_gnLifetime;}
  inline OPTIONAL<INTEGER>& gnTrafficClass()
    {return field_gnTrafficClass;}
  inline const OPTIONAL<INTEGER>& gnTrafficClass() const
    {return field_gnTrafficClass;}
  inline OPTIONAL<INTEGER>& btpDestinationPort()
    {return field_btpDestinationPort;}
  inline const OPTIONAL<INTEGER>& btpDestinationPort() const
    {return field_btpDestinationPort;}
  inline OPTIONAL<INTEGER>& btpInfo()
    {return field_btpInfo;}
  inline const OPTIONAL<INTEGER>& btpInfo() const
    {return field_btpInfo;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MapInd_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MapInd_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MapInd& other_value);
void copy_template(const MapInd_template& other_value);

public:
MapInd_template();
MapInd_template(template_sel other_value);
MapInd_template(const MapInd& other_value);
MapInd_template(const OPTIONAL<MapInd>& other_value);
MapInd_template(const MapInd_template& other_value);
~MapInd_template();
MapInd_template& operator=(template_sel other_value);
MapInd_template& operator=(const MapInd& other_value);
MapInd_template& operator=(const OPTIONAL<MapInd>& other_value);
MapInd_template& operator=(const MapInd_template& other_value);
boolean match(const MapInd& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MapInd valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MapInd_template& list_item(unsigned int list_index) const;
MapMsg_template& msgIn();
const MapMsg_template& msgIn() const;
INTEGER_template& gnNextHeader();
const INTEGER_template& gnNextHeader() const;
INTEGER_template& gnHeaderType();
const INTEGER_template& gnHeaderType() const;
INTEGER_template& gnHeaderSubtype();
const INTEGER_template& gnHeaderSubtype() const;
INTEGER_template& gnLifetime();
const INTEGER_template& gnLifetime() const;
INTEGER_template& gnTrafficClass();
const INTEGER_template& gnTrafficClass() const;
INTEGER_template& btpDestinationPort();
const INTEGER_template& btpDestinationPort() const;
INTEGER_template& btpInfo();
const INTEGER_template& btpInfo() const;
int size_of() const;
void log() const;
void log_match(const MapInd& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class SpatMsg {
  MAP__SPAT__ETSI::SPAT__PDU field_msgSpat;
  OCTETSTRING field_rawData;
  boolean bound_flag;
public:
  SpatMsg();
  SpatMsg(const MAP__SPAT__ETSI::SPAT__PDU& par_msgSpat,
    const OCTETSTRING& par_rawData);
  SpatMsg(const SpatMsg& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  SpatMsg& operator=(const SpatMsg& other_value);
  boolean operator==(const SpatMsg& other_value) const;
  inline boolean operator!=(const SpatMsg& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline MAP__SPAT__ETSI::SPAT__PDU& msgSpat()
    {return field_msgSpat;}
  inline const MAP__SPAT__ETSI::SPAT__PDU& msgSpat() const
    {return field_msgSpat;}
  inline OCTETSTRING& rawData()
    {return field_rawData;}
  inline const OCTETSTRING& rawData() const
    {return field_rawData;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class SpatMsg_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
SpatMsg_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const SpatMsg& other_value);
void copy_template(const SpatMsg_template& other_value);

public:
SpatMsg_template();
SpatMsg_template(template_sel other_value);
SpatMsg_template(const SpatMsg& other_value);
SpatMsg_template(const OPTIONAL<SpatMsg>& other_value);
SpatMsg_template(const SpatMsg_template& other_value);
~SpatMsg_template();
SpatMsg_template& operator=(template_sel other_value);
SpatMsg_template& operator=(const SpatMsg& other_value);
SpatMsg_template& operator=(const OPTIONAL<SpatMsg>& other_value);
SpatMsg_template& operator=(const SpatMsg_template& other_value);
boolean match(const SpatMsg& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
SpatMsg valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
SpatMsg_template& list_item(unsigned int list_index) const;
MAP__SPAT__ETSI::SPAT__PDU_template& msgSpat();
const MAP__SPAT__ETSI::SPAT__PDU_template& msgSpat() const;
OCTETSTRING_template& rawData();
const OCTETSTRING_template& rawData() const;
int size_of() const;
void log() const;
void log_match(const SpatMsg& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class SpatInd {
  SpatMsg field_msgIn;
  OPTIONAL<INTEGER> field_gnNextHeader;
  OPTIONAL<INTEGER> field_gnHeaderType;
  OPTIONAL<INTEGER> field_gnHeaderSubtype;
  OPTIONAL<INTEGER> field_gnLifetime;
  OPTIONAL<INTEGER> field_gnTrafficClass;
  OPTIONAL<INTEGER> field_btpDestinationPort;
  OPTIONAL<INTEGER> field_btpInfo;
  boolean bound_flag;
public:
  SpatInd();
  SpatInd(const SpatMsg& par_msgIn,
    const OPTIONAL<INTEGER>& par_gnNextHeader,
    const OPTIONAL<INTEGER>& par_gnHeaderType,
    const OPTIONAL<INTEGER>& par_gnHeaderSubtype,
    const OPTIONAL<INTEGER>& par_gnLifetime,
    const OPTIONAL<INTEGER>& par_gnTrafficClass,
    const OPTIONAL<INTEGER>& par_btpDestinationPort,
    const OPTIONAL<INTEGER>& par_btpInfo);
  SpatInd(const SpatInd& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  SpatInd& operator=(const SpatInd& other_value);
  boolean operator==(const SpatInd& other_value) const;
  inline boolean operator!=(const SpatInd& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline SpatMsg& msgIn()
    {return field_msgIn;}
  inline const SpatMsg& msgIn() const
    {return field_msgIn;}
  inline OPTIONAL<INTEGER>& gnNextHeader()
    {return field_gnNextHeader;}
  inline const OPTIONAL<INTEGER>& gnNextHeader() const
    {return field_gnNextHeader;}
  inline OPTIONAL<INTEGER>& gnHeaderType()
    {return field_gnHeaderType;}
  inline const OPTIONAL<INTEGER>& gnHeaderType() const
    {return field_gnHeaderType;}
  inline OPTIONAL<INTEGER>& gnHeaderSubtype()
    {return field_gnHeaderSubtype;}
  inline const OPTIONAL<INTEGER>& gnHeaderSubtype() const
    {return field_gnHeaderSubtype;}
  inline OPTIONAL<INTEGER>& gnLifetime()
    {return field_gnLifetime;}
  inline const OPTIONAL<INTEGER>& gnLifetime() const
    {return field_gnLifetime;}
  inline OPTIONAL<INTEGER>& gnTrafficClass()
    {return field_gnTrafficClass;}
  inline const OPTIONAL<INTEGER>& gnTrafficClass() const
    {return field_gnTrafficClass;}
  inline OPTIONAL<INTEGER>& btpDestinationPort()
    {return field_btpDestinationPort;}
  inline const OPTIONAL<INTEGER>& btpDestinationPort() const
    {return field_btpDestinationPort;}
  inline OPTIONAL<INTEGER>& btpInfo()
    {return field_btpInfo;}
  inline const OPTIONAL<INTEGER>& btpInfo() const
    {return field_btpInfo;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class SpatInd_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
SpatInd_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const SpatInd& other_value);
void copy_template(const SpatInd_template& other_value);

public:
SpatInd_template();
SpatInd_template(template_sel other_value);
SpatInd_template(const SpatInd& other_value);
SpatInd_template(const OPTIONAL<SpatInd>& other_value);
SpatInd_template(const SpatInd_template& other_value);
~SpatInd_template();
SpatInd_template& operator=(template_sel other_value);
SpatInd_template& operator=(const SpatInd& other_value);
SpatInd_template& operator=(const OPTIONAL<SpatInd>& other_value);
SpatInd_template& operator=(const SpatInd_template& other_value);
boolean match(const SpatInd& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
SpatInd valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
SpatInd_template& list_item(unsigned int list_index) const;
SpatMsg_template& msgIn();
const SpatMsg_template& msgIn() const;
INTEGER_template& gnNextHeader();
const INTEGER_template& gnNextHeader() const;
INTEGER_template& gnHeaderType();
const INTEGER_template& gnHeaderType() const;
INTEGER_template& gnHeaderSubtype();
const INTEGER_template& gnHeaderSubtype() const;
INTEGER_template& gnLifetime();
const INTEGER_template& gnLifetime() const;
INTEGER_template& gnTrafficClass();
const INTEGER_template& gnTrafficClass() const;
INTEGER_template& btpDestinationPort();
const INTEGER_template& btpDestinationPort() const;
INTEGER_template& btpInfo();
const INTEGER_template& btpInfo() const;
int size_of() const;
void log() const;
void log_match(const SpatInd& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class MapReq {
  MAP__SPAT__ETSI::MAP__PDU field_msgOut;
  boolean bound_flag;
public:
  MapReq();
  MapReq(const MAP__SPAT__ETSI::MAP__PDU& par_msgOut);
  MapReq(const MapReq& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  MapReq& operator=(const MapReq& other_value);
  boolean operator==(const MapReq& other_value) const;
  inline boolean operator!=(const MapReq& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline MAP__SPAT__ETSI::MAP__PDU& msgOut()
    {return field_msgOut;}
  inline const MAP__SPAT__ETSI::MAP__PDU& msgOut() const
    {return field_msgOut;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class MapReq_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
MapReq_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const MapReq& other_value);
void copy_template(const MapReq_template& other_value);

public:
MapReq_template();
MapReq_template(template_sel other_value);
MapReq_template(const MapReq& other_value);
MapReq_template(const OPTIONAL<MapReq>& other_value);
MapReq_template(const MapReq_template& other_value);
~MapReq_template();
MapReq_template& operator=(template_sel other_value);
MapReq_template& operator=(const MapReq& other_value);
MapReq_template& operator=(const OPTIONAL<MapReq>& other_value);
MapReq_template& operator=(const MapReq_template& other_value);
boolean match(const MapReq& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
MapReq valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
MapReq_template& list_item(unsigned int list_index) const;
MAP__SPAT__ETSI::MAP__PDU_template& msgOut();
const MAP__SPAT__ETSI::MAP__PDU_template& msgOut() const;
int size_of() const;
void log() const;
void log_match(const MapReq& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};

class SpatReq {
  MAP__SPAT__ETSI::SPAT__PDU field_msgOut;
  boolean bound_flag;
public:
  SpatReq();
  SpatReq(const MAP__SPAT__ETSI::SPAT__PDU& par_msgOut);
  SpatReq(const SpatReq& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  SpatReq& operator=(const SpatReq& other_value);
  boolean operator==(const SpatReq& other_value) const;
  inline boolean operator!=(const SpatReq& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline MAP__SPAT__ETSI::SPAT__PDU& msgOut()
    {return field_msgOut;}
  inline const MAP__SPAT__ETSI::SPAT__PDU& msgOut() const
    {return field_msgOut;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class SpatReq_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
SpatReq_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const SpatReq& other_value);
void copy_template(const SpatReq_template& other_value);

public:
SpatReq_template();
SpatReq_template(template_sel other_value);
SpatReq_template(const SpatReq& other_value);
SpatReq_template(const OPTIONAL<SpatReq>& other_value);
SpatReq_template(const SpatReq_template& other_value);
~SpatReq_template();
SpatReq_template& operator=(template_sel other_value);
SpatReq_template& operator=(const SpatReq& other_value);
SpatReq_template& operator=(const OPTIONAL<SpatReq>& other_value);
SpatReq_template& operator=(const SpatReq_template& other_value);
boolean match(const SpatReq& other_value, boolean legacy = FALSE) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
SpatReq valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
SpatReq_template& list_item(unsigned int list_index) const;
MAP__SPAT__ETSI::SPAT__PDU_template& msgOut();
const MAP__SPAT__ETSI::SPAT__PDU_template& msgOut() const;
int size_of() const;
void log() const;
void log_match(const SpatReq& match_value, boolean legacy = FALSE) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
Module_Param* get_param(Module_Param_Name& param_name) const;
void check_restriction(template_res t_res, const char* t_name=NULL, boolean legacy = FALSE) const;
boolean is_present(boolean legacy = FALSE) const;
boolean match_omit(boolean legacy = FALSE) const;
};


/* Global variable declarations */

extern const TTCN_Typedescriptor_t& ItsMapSpatSystem_descr_;
extern UpperTesterMapSpatPort ItsMapSpatSystem_component_utPort;
extern MapSpatPort ItsMapSpatSystem_component_mapSpatPort;
extern const TTCN_Typedescriptor_t& ItsMapSpat_descr_;
extern UpperTesterMapSpatPort ItsMapSpat_component_utPort;
extern MapSpatPort ItsMapSpat_component_mapSpatPort;
extern const XERdescriptor_t RawData_xer_;
extern const TTCN_Typedescriptor_t RawData_descr_;
extern const XERdescriptor_t MapMsg_rawData_xer_;
extern const TTCN_Typedescriptor_t MapMsg_rawData_descr_;
extern const TTCN_Typedescriptor_t MapMsg_descr_;
extern const TTCN_Typedescriptor_t MapInd_descr_;
extern const XERdescriptor_t MapInd_gnNextHeader_xer_;
extern const TTCN_Typedescriptor_t MapInd_gnNextHeader_descr_;
extern const XERdescriptor_t MapInd_gnHeaderType_xer_;
extern const TTCN_Typedescriptor_t MapInd_gnHeaderType_descr_;
extern const XERdescriptor_t MapInd_gnHeaderSubtype_xer_;
extern const TTCN_Typedescriptor_t MapInd_gnHeaderSubtype_descr_;
extern const XERdescriptor_t MapInd_gnLifetime_xer_;
extern const TTCN_Typedescriptor_t MapInd_gnLifetime_descr_;
extern const XERdescriptor_t MapInd_gnTrafficClass_xer_;
extern const TTCN_Typedescriptor_t MapInd_gnTrafficClass_descr_;
extern const XERdescriptor_t MapInd_btpDestinationPort_xer_;
extern const TTCN_Typedescriptor_t MapInd_btpDestinationPort_descr_;
extern const XERdescriptor_t MapInd_btpInfo_xer_;
extern const TTCN_Typedescriptor_t MapInd_btpInfo_descr_;
extern MapInd ItsMapSpat_component_vc__mapMsg;
extern const XERdescriptor_t SpatMsg_rawData_xer_;
extern const TTCN_Typedescriptor_t SpatMsg_rawData_descr_;
extern const TTCN_Typedescriptor_t SpatMsg_descr_;
extern const TTCN_Typedescriptor_t SpatInd_descr_;
extern const XERdescriptor_t SpatInd_gnNextHeader_xer_;
extern const TTCN_Typedescriptor_t SpatInd_gnNextHeader_descr_;
extern const XERdescriptor_t SpatInd_gnHeaderType_xer_;
extern const TTCN_Typedescriptor_t SpatInd_gnHeaderType_descr_;
extern const XERdescriptor_t SpatInd_gnHeaderSubtype_xer_;
extern const TTCN_Typedescriptor_t SpatInd_gnHeaderSubtype_descr_;
extern const XERdescriptor_t SpatInd_gnLifetime_xer_;
extern const TTCN_Typedescriptor_t SpatInd_gnLifetime_descr_;
extern const XERdescriptor_t SpatInd_gnTrafficClass_xer_;
extern const TTCN_Typedescriptor_t SpatInd_gnTrafficClass_descr_;
extern const XERdescriptor_t SpatInd_btpDestinationPort_xer_;
extern const TTCN_Typedescriptor_t SpatInd_btpDestinationPort_descr_;
extern const XERdescriptor_t SpatInd_btpInfo_xer_;
extern const TTCN_Typedescriptor_t SpatInd_btpInfo_descr_;
extern SpatInd ItsMapSpat_component_vc__spatMsg;
extern LibItsMapSpat__TypesAndValues::UtMapEventIndList ItsMapSpat_component_vc__utMapEvents;
extern LibItsMapSpat__TypesAndValues::UtSpatEventIndList ItsMapSpat_component_vc__utSpatEvents;
extern DEFAULT ItsMapSpat_component_vc__default;
extern BOOLEAN ItsMapSpat_component_vc__mapReceived;
extern BOOLEAN ItsMapSpat_component_vc__spatReceived;
extern const TTCN_Typedescriptor_t MapReq_descr_;
extern const TTCN_Typedescriptor_t SpatReq_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "UpperTesterMapSpatPort.hh"
#include "MapSpatPort.hh"

#endif
