// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "LibItsIpv6OverGeoNetworking_Functions.hh"

namespace LibItsIpv6OverGeoNetworking__Functions {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments);

/* Literal string constants */

static const unsigned char bs_0_bits[] = { 0, 0, 0 },
bs_2_bits[] = { 0, 0, 0, 0, 0, 0, 0, 0 },
bs_1_bits[] = { 64, 0, 0 },
bs_3_bits[] = { 191, 0, 0, 0, 0, 0, 0, 191 };
static const BITSTRING bs_0(24, bs_0_bits),
bs_2(64, bs_2_bits),
bs_1(24, bs_1_bits),
bs_3(64, bs_3_bits);
static const unsigned char os_0_octets[] = { 0, 0, 0 },
os_2_octets[] = { 0, 0, 0, 0, 0, 0, 0, 0 },
os_6_octets[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
os_5_octets[] = { 51, 51, 255 },
os_7_octets[] = { 253, 255, 255, 255, 255, 255, 255, 254 },
os_3_octets[] = { 254, 128, 0, 0, 0, 0, 0, 0 },
os_4_octets[] = { 255, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 255 },
os_8_octets[] = { 255, 62, 0 },
os_1_octets[] = { 255, 254 },
os_9_octets[] = { 255, 255 };
static const OCTETSTRING os_0(3, os_0_octets),
os_2(8, os_2_octets),
os_6(16, os_6_octets),
os_5(3, os_5_octets),
os_7(8, os_7_octets),
os_3(8, os_3_octets),
os_4(13, os_4_octets),
os_8(3, os_8_octets),
os_1(2, os_1_octets),
os_9(2, os_9_octets);
static const CHARSTRING cs_0(0, NULL),
cs_9(' '),
cs_11(10, " Lifetime="),
cs_1(4, "*** "),
cs_8('/'),
cs_4(43, ": ERROR: Received an unexpected message ***"),
cs_13(40, ": ERROR: Received unexpected message ***"),
cs_15(42, ": ERROR: Wrong prefixLen (max 64 bits) ***"),
cs_16(28, ": ERROR: Wrong prefixLen ***"),
cs_17(49, ": ERROR: Wrong prefixLen, max 64 bits allowed ***"),
cs_14(68, ": INCONC: Timeout while waiting for adapter control event result ***"),
cs_6(41, ": INFO: Ignoring Router Advertisement ***"),
cs_3(46, ": INFO: Ignoring rebroadcasted IPv6 packet ***"),
cs_2(44, ": INFO: Ignoring unsupported IPv6 packet ***"),
cs_18(44, ": INFO: calling fx_computeIPv6CheckSum() ***"),
cs_10(5, "Area="),
cs_12(33, "Please configure manual SGVLs: \r\n"),
cs_7(7, "Prefix="),
cs_5(5, "error");
static const unsigned char module_checksum[] = { 0x8c, 0x71, 0x73, 0xbd, 0x01, 0x10, 0xbe, 0x5d, 0xc6, 0xd7, 0x84, 0x87, 0xe4, 0x7a, 0x93, 0x1e };

/* Class definitions for internal use */

class a__ipv6Default_Default : public Default_Base {
public:
a__ipv6Default_Default();
alt_status call_altstep();
};


/* Global variable definitions */

static LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template template_f__prConfigureGVL_p__validLifetimes_defval;
const LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template& f__prConfigureGVL_p__validLifetimes_defval = template_f__prConfigureGVL_p__validLifetimes_defval;
static INTEGER const_f__sendGeoBroadcastWithRtAdv_p__validLifetime_defval;
const INTEGER& f__sendGeoBroadcastWithRtAdv_p__validLifetime_defval = const_f__sendGeoBroadcastWithRtAdv_p__validLifetime_defval;
static const size_t num_namespaces = 0;
TTCN_Module module_object("LibItsIpv6OverGeoNetworking_Functions", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, start_ptc_function, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

a__ipv6Default_Default::a__ipv6Default_Default()
 : Default_Base("a_ipv6Default")
{
}

alt_status a__ipv6Default_Default::call_altstep()
{
return a__ipv6Default_instance();
}


/* Bodies of functions, altsteps and testcases */

void f__cf01UpGn6()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 40, TTCN_Location::LOCATION_FUNCTION, "f_cf01UpGn6");
current_location.update_lineno(43);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 43 */
FLOAT v__distance;
current_location.update_lineno(46);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 46 */
TTCN_Runtime::map_port(self, LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_ipv6OverGeoNetworkingPort.get_name(), SYSTEM_COMPREF, "ipv6OverGeoNetworkingPort");
current_location.update_lineno(48);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 48 */
LibItsGeoNetworking__Functions::f__cf01Up();
current_location.update_lineno(49);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 49 */
v__distance = LibItsGeoNetworking__Functions::f__distance(LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compNodeB), LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compIut));
current_location.update_lineno(52);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 52 */
f__addAddresses(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__addressTable, LibItsGeoNetworking__TypesAndValues::c__compIut);
current_location.update_lineno(53);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 53 */
f__addAddresses(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__addressTable, LibItsGeoNetworking__TypesAndValues::c__compNodeA);
current_location.update_lineno(54);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 54 */
f__addAddresses(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__addressTable, LibItsGeoNetworking__TypesAndValues::c__compNodeB);
current_location.update_lineno(57);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 57 */
LibItsGeoNetworking__Functions::f__addArea(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable, LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvlArea1, LibItsGeoNetworking__Functions::f__computeSquareArea(LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compIut), float2int((2.1 * v__distance))));
current_location.update_lineno(59);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 59 */
LibItsGeoNetworking__Functions::f__addArea(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable, LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvlArea2, LibItsGeoNetworking__Functions::f__computeSquareArea(LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compIut), float2int((2.2 * v__distance))));
current_location.update_lineno(61);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 61 */
LibItsGeoNetworking__Functions::f__addArea(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__areaTable, LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvlArea3, LibItsGeoNetworking__Functions::f__computeSquareArea(LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compIut), float2int((2.3 * v__distance))));
current_location.update_lineno(65);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 65 */
f__addGvl(LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvl1__name, f__getPrefix(1), f__getPrefixLength(1), LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvlArea1, cs_0);
current_location.update_lineno(66);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 66 */
f__addGvl(LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvl2__name, f__getPrefix(2), f__getPrefixLength(2), LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvlArea2, cs_0);
current_location.update_lineno(67);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 67 */
f__addGvl(LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvl3__name, f__getPrefix(3), f__getPrefixLength(3), LibItsIpv6OverGeoNetworking__TypesAndValues::c__gvlArea3, cs_0);
}

void start_f__cf01UpGn6(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf01UpGn6(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_cf01UpGn6", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__cf01DownGn6()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 75, TTCN_Location::LOCATION_FUNCTION, "f_cf01DownGn6");
current_location.update_lineno(78);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 78 */
TTCN_Runtime::unmap_port(self, LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_ipv6OverGeoNetworkingPort.get_name(), SYSTEM_COMPREF, "ipv6OverGeoNetworkingPort");
current_location.update_lineno(80);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 80 */
LibItsGeoNetworking__Functions::f__cf01Down();
}

void start_f__cf01DownGn6(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_cf01DownGn6(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_cf01DownGn6", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

alt_status a__ipv6Default_instance()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 91, TTCN_Location::LOCATION_ALTSTEP, "a_ipv6Default");
current_location.update_lineno(92);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 92 */
LibItsGeoNetworking__TestSystem::GeoNetworkingInd v__geoNwInd;
alt_status ret_val = ALT_NO;
current_location.update_lineno(94);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 94 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwBroadcastPacketWithNextHeaderAndPayload(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(ANY_VALUE), INTEGER_template(ANY_VALUE), LibItsGeoNetworking__TypesAndValues::NextHeader_template(LibItsGeoNetworking__TypesAndValues::NextHeader::e__ipv6), LibItsIpv6OverGeoNetworking__Templates::mw__ipv6Payload(LibItsIpv6OverGeoNetworking__Templates::mw__ipv6Packet(OCTETSTRING_template(ANY_VALUE), OCTETSTRING_template(ANY_VALUE), INTEGER_template(ANY_VALUE), LibItsIpv6OverGeoNetworking__Templates::mw__octetstringPayload(OCTETSTRING_template(ANY_VALUE))))), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(113);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 113 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_2).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(114);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 114 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(116);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 116 */
switch (LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_geoNetworkingPort.receive(LibItsGeoNetworking__Templates::mw__geoNwInd(LibItsGeoNetworking__Templates::mw__geoNwPdu(LibItsGeoNetworking__Templates::mw__geoNwBroadcastPacketWithNextHeaderAndPayload(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(ANY_VALUE), INTEGER_template(ANY_VALUE), LibItsGeoNetworking__TypesAndValues::NextHeader_template(LibItsGeoNetworking__TypesAndValues::NextHeader::e__ipv6), LibItsIpv6OverGeoNetworking__Templates::mw__ipv6Payload(LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template(ANY_VALUE))), LibItsGeoNetworking__Templates::mw__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::mw__geoNwPdu_p__hopLimit_defval)), &(v__geoNwInd), any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(130);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 130 */
{
boolean tmp_2;
{
LibItsGeoNetworking__TypesAndValues::LongPosVector_template tmp_1;
tmp_1.set_type(VALUE_LIST, 2);
tmp_1.list_item(0) = LibItsGeoNetworking__Templates::mw__longPosVectorPosition__withDelta(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compNodeA)));
tmp_1.list_item(1) = LibItsGeoNetworking__Templates::mw__longPosVectorPosition__withDelta(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(LibItsGeoNetworking__Functions::f__getPosition(LibItsGeoNetworking__TypesAndValues::c__compNodeB)));
tmp_2 = tmp_1.match(const_cast< const LibItsGeoNetworking__TestSystem::GeoNetworkingInd&>(v__geoNwInd).msgIn().gnPacket().packet().extendedHeader()().geoBroadcastHeader().srcPosVector(), TRUE);
}
if (tmp_2) {
current_location.update_lineno(137);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 137 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_3).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(138);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 138 */
return ALT_REPEAT;
}
else {
current_location.update_lineno(141);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 141 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_4).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(142);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 142 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_5, LibCommon__VerdictControl::FncRetCode::e__error);
}
}
}
return ALT_YES;
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
current_location.update_lineno(145);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 145 */
switch (LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_ipv6OverGeoNetworkingPort.receive(LibItsIpv6OverGeoNetworking__Templates::mw__ipv6OverGeoNwInd(CHARSTRING_template(ANY_VALUE), OCTETSTRING_template(ANY_VALUE), OCTETSTRING_template(LibItsIpv6OverGeoNetworking__TypesAndValues::c__macBroadcastAddr), LibItsIpv6OverGeoNetworking__TypesAndValues::Ipv6Packet_template(ANY_VALUE)), NULL, any_compref, NULL)) {
case ALT_YES:
{
current_location.update_lineno(153);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 153 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_6).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(154);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 154 */
return ALT_REPEAT;
}
case ALT_MAYBE:
ret_val = ALT_MAYBE;
default:
break;
}
return ret_val;
}

void a__ipv6Default()
{
altstep_begin:
boolean block_flag = FALSE;
alt_status altstep_flag = ALT_UNCHECKED, default_flag = ALT_UNCHECKED;
for ( ; ; ) {
TTCN_Snapshot::take_new(block_flag);
if (altstep_flag != ALT_NO) {
altstep_flag = a__ipv6Default_instance();
if (altstep_flag == ALT_YES || altstep_flag == ALT_BREAK) return;
else if (altstep_flag == ALT_REPEAT) goto altstep_begin;
}
if (default_flag != ALT_NO) {
default_flag = TTCN_Default::try_altsteps();
if (default_flag == ALT_YES || default_flag == ALT_BREAK) return;
else if (default_flag == ALT_REPEAT) goto altstep_begin;
}
if (altstep_flag == ALT_NO && default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in altstep a_ipv6Default.");
else block_flag = TRUE;
}
}

Default_Base *activate_a__ipv6Default()
{
return new a__ipv6Default_Default();
}

void f__prIpv6Neighbour()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 166, TTCN_Location::LOCATION_FUNCTION, "f_prIpv6Neighbour");
current_location.update_lineno(167);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 167 */
LibItsGeoNetworking__Functions::f__prNeighbour();
current_location.update_lineno(168);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 168 */
activate_a__ipv6Default();
}

void start_f__prIpv6Neighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prIpv6Neighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_prIpv6Neighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibCommon__VerdictControl::FncRetCode f__prConfigureGVL(const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlIdxList& p__gvls, const LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template& p__validLifetimes)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 176, TTCN_Location::LOCATION_FUNCTION, "f_prConfigureGVL");
current_location.update_lineno(181);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 181 */
INTEGER i;
current_location.update_lineno(182);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 182 */
CHARSTRING v__str(cs_0);
current_location.update_lineno(183);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 183 */
INTEGER v__validLifetime(LibItsIpv6OverGeoNetworking__TypesAndValues::c__validLifetime30s);
current_location.update_lineno(185);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 185 */
if ((LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable.lengthof() < p__gvls.lengthof())) {
current_location.update_lineno(186);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 186 */
return LibCommon__VerdictControl::FncRetCode::e__error;
}
current_location.update_lineno(188);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 188 */
if (LibItsIpv6OverGeoNetworking__Pixits::PX__CONFIG__MANUAL__GVL) {
current_location.update_lineno(190);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 190 */
i = 0;
current_location.update_lineno(190);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 190 */
for ( ; ; ) {
current_location.update_lineno(190);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 190 */
if (!(i < p__gvls.lengthof())) break;
current_location.update_lineno(191);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 191 */
{
CHARSTRING tmp_4;
tmp_4 = ((((((((v__str + cs_7) + oct2str(const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[i].prefix())) + cs_8) + int2str(const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[i].prefixLength())) + cs_9) + cs_10) + const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[i].area()) + LibCommon__TextStrings::c__CRLF);
v__str = tmp_4;
}
current_location.update_lineno(193);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 193 */
{
boolean tmp_5;
tmp_5 = p__validLifetimes.is_value();
if (tmp_5) tmp_5 = (p__validLifetimes.lengthof() >= (i + 1));
if (tmp_5) {
current_location.update_lineno(194);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 194 */
{
CHARSTRING tmp_6;
tmp_6 = ((cs_11 + v__str) + int2str(p__validLifetimes[i].valueof()));
v__str = tmp_6;
}
}
}
current_location.update_lineno(196);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 196 */
{
CHARSTRING tmp_7;
tmp_7 = (v__str + LibCommon__TextStrings::c__CRLF);
v__str = tmp_7;
}
current_location.update_lineno(190);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 190 */
{
INTEGER tmp_8;
++i;
}
}
current_location.update_lineno(198);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 198 */
TTCN_Runtime::begin_action();
((cs_12 + v__str) + LibCommon__TextStrings::c__CRLF).log();
TTCN_Runtime::end_action();
current_location.update_lineno(199);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 199 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TWAIT);
}
else {
current_location.update_lineno(202);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 202 */
i = 0;
current_location.update_lineno(202);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 202 */
for ( ; ; ) {
current_location.update_lineno(202);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 202 */
if (!(i < p__gvls.lengthof())) break;
current_location.update_lineno(203);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 203 */
{
boolean tmp_10;
tmp_10 = p__validLifetimes.is_value();
if (tmp_10) tmp_10 = (p__validLifetimes.lengthof() >= (i + 1));
if (tmp_10) {
current_location.update_lineno(204);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 204 */
v__validLifetime = p__validLifetimes[i].valueof();
}
}
current_location.update_lineno(206);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 206 */
f__sendGeoBroadcastWithRtAdv(LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry_template(const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[i]), LibItsGeoNetworking__TypesAndValues::c__compNodeA, v__validLifetime);
current_location.update_lineno(202);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 202 */
{
INTEGER tmp_12;
++i;
}
}
current_location.update_lineno(208);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 208 */
LibCommon__Time::f__sleep(LibItsIpv6OverGeoNetworking__Pixits::PX__T__BUILD__CONFIG);
}
current_location.update_lineno(210);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 210 */
f__acUpdateInterfaces();
current_location.update_lineno(212);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 212 */
return LibCommon__VerdictControl::FncRetCode::e__success;
}

void start_f__prConfigureGVL(const COMPONENT& component_reference, const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlIdxList& p__gvls, const LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template& p__validLifetimes)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prConfigureGVL(");
p__gvls.log();
TTCN_Logger::log_event_str(", ");
p__validLifetimes.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_prConfigureGVL", text_buf);
p__gvls.encode_text(text_buf);
p__validLifetimes.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__poIpv6Neighbour()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 222, TTCN_Location::LOCATION_FUNCTION, "f_poIpv6Neighbour");
current_location.update_lineno(223);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 223 */
LibItsGeoNetworking__Functions::f__poNeighbour();
}

void start_f__poIpv6Neighbour(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_poIpv6Neighbour(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_poIpv6Neighbour", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__acUpdateInterfaces()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 232, TTCN_Location::LOCATION_FUNCTION, "f_acUpdateInterfaces");
current_location.update_lineno(234);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 234 */
LibItsIpv6OverGeoNetworking__TypesAndValues::AcGn6Response v__response;
current_location.update_lineno(235);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 235 */
LibItsIpv6OverGeoNetworking__TypesAndValues::AcGn6InterfaceInfoList v__interfaceInfoList;
current_location.update_lineno(236);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 236 */
INTEGER i;
current_location.update_lineno(236);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 236 */
INTEGER j;
current_location.update_lineno(236);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 236 */
INTEGER k;
current_location.update_lineno(238);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 238 */
LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.send(LibItsIpv6OverGeoNetworking__Templates::m__acGetInterfaceInfos);
current_location.update_lineno(239);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 239 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(240);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 240 */
{
tmp_13:
alt_status tmp_13_alt_flag_0 = ALT_MAYBE;
alt_status tmp_13_alt_flag_1 = ALT_MAYBE;
alt_status tmp_13_alt_flag_2 = ALT_MAYBE;
alt_status tmp_13_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_13_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(241);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 241 */
tmp_13_alt_flag_0 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.receive(LibItsIpv6OverGeoNetworking__Templates::mw__acInterfaceInfos, &(v__response), any_compref, NULL);
if (tmp_13_alt_flag_0 == ALT_YES) {
current_location.update_lineno(242);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 242 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(244);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 244 */
v__interfaceInfoList = const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AcGn6Response&>(v__response).interfaceInfoList();
current_location.update_lineno(246);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 246 */
i = 0;
current_location.update_lineno(246);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 246 */
for ( ; ; ) {
current_location.update_lineno(246);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 246 */
if (!(i < v__interfaceInfoList.size_of())) break;
current_location.update_lineno(248);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 248 */
j = 0;
current_location.update_lineno(248);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 248 */
for ( ; ; ) {
current_location.update_lineno(248);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 248 */
if (!(j < const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AcGn6InterfaceInfoList&>(v__interfaceInfoList)[i].ipv6AddressList().size_of())) break;
current_location.update_lineno(250);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 250 */
k = 0;
current_location.update_lineno(250);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 250 */
for ( ; ; ) {
current_location.update_lineno(250);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 250 */
if (!(k < LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable.size_of())) break;
current_location.update_lineno(251);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 251 */
if (f__isIpv6AddressCorrespondingToPrefix(const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AcGn6InterfaceInfoList&>(v__interfaceInfoList)[i].ipv6AddressList()[j], const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[k].prefix(), const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[k].prefixLength())) {
current_location.update_lineno(256);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 256 */
LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable[k].interface() = const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AcGn6InterfaceInfoList&>(v__interfaceInfoList)[i].interfaceName();
current_location.update_lineno(257);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 257 */
break;
}
current_location.update_lineno(250);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 250 */
{
INTEGER tmp_19;
++k;
}
}
current_location.update_lineno(260);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 260 */
if ((k >= LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable.size_of())) {
current_location.update_lineno(262);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 262 */
break;
}
current_location.update_lineno(248);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 248 */
{
INTEGER tmp_20;
++j;
}
}
current_location.update_lineno(246);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 246 */
{
INTEGER tmp_21;
++i;
}
}
break;
}
}
if (tmp_13_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(267);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 267 */
tmp_13_alt_flag_1 = LibItsGeoNetworking__TestSystem::ItsBaseGeoNetworking_component_acPort.receive(any_compref, NULL);
if (tmp_13_alt_flag_1 == ALT_YES) {
current_location.update_lineno(268);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 268 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(269);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 269 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_13).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(270);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 270 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_5, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_13_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(272);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 272 */
tmp_13_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_13_alt_flag_2 == ALT_YES) {
current_location.update_lineno(273);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 273 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_14).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(274);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 274 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(cs_5, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_13_default_flag == ALT_MAYBE) {
tmp_13_default_flag = TTCN_Default::try_altsteps();
if (tmp_13_default_flag == ALT_YES || tmp_13_default_flag == ALT_BREAK) break;
else if (tmp_13_default_flag == ALT_REPEAT) goto tmp_13;
}
current_location.update_lineno(240);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 240 */
if (tmp_13_alt_flag_0 == ALT_NO && tmp_13_alt_flag_1 == ALT_NO && tmp_13_alt_flag_2 == ALT_NO && tmp_13_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file LibItsIpv6OverGeoNetworking_Functions.ttcn between lines 240 and 276.");
TTCN_Snapshot::take_new(TRUE);
}
}
}

void start_f__acUpdateInterfaces(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_acUpdateInterfaces(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_acUpdateInterfaces", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__sendGeoBroadcastWithRtAdv(const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry_template& p__gvl, const CHARSTRING& p__compName, const INTEGER& p__validLifetime)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 288, TTCN_Location::LOCATION_FUNCTION, "f_sendGeoBroadcastWithRtAdv");
current_location.update_lineno(294);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 294 */
LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry v__nodeAddresses(f__getAddresses(p__compName));
current_location.update_lineno(295);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 295 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__nodeLongPosVector(LibItsGeoNetworking__Functions::f__getPosition(p__compName));
current_location.update_lineno(297);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 297 */
LibItsGeoNetworking__Functions::f__sendGeoNetMessageWithPayload(LibItsGeoNetworking__Templates::m__geoNwReq__linkLayerBroadcast(LibItsGeoNetworking__Templates::m__geoNwPdu(LibItsGeoNetworking__Templates::m__geoNwBroadcastPacket(LibItsGeoNetworking__TypesAndValues::LongPosVector_template(v__nodeLongPosVector), INTEGER_template(LibItsGeoNetworking__TestSystem::ItsGeoNetworking_component_vc__localSeqNumber), LibItsGeoNetworking__TypesAndValues::GeoBroadcastArea_template(LibItsGeoNetworking__Functions::f__getGeoBroadcastArea(p__gvl.area().valueof())), LibItsGeoNetworking__Templates::m__geoNwBroadcastPacket_p__hopLimit_defval, LibItsGeoNetworking__Templates::m__geoNwBroadcastPacket_p__trafficClass_defval), LibItsGeoNetworking__Templates::m__geoNwPdu_p__lifeTime_defval, LibItsGeoNetworking__Templates::m__geoNwPdu_p__hopLimit_defval)), LibItsIpv6OverGeoNetworking__Templates::m__ipv6Payload(LibItsIpv6OverGeoNetworking__Templates::m__ipv6Packet(OCTETSTRING_template(const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry&>(v__nodeAddresses).lla()), OCTETSTRING_template(LibItsIpv6OverGeoNetworking__TypesAndValues::c__allNodesMca), INTEGER_template(LibItsIpv6OverGeoNetworking__TypesAndValues::c__icmpHdr), LibItsIpv6OverGeoNetworking__Templates::m__rtAdvWithOptions(LibItsIpv6OverGeoNetworking__Templates::m__rtAdvOpt__prefixOpt(p__gvl.prefixLength(), INTEGER_template(LibItsIpv6OverGeoNetworking__TypesAndValues::c__lFlag1), INTEGER_template(LibItsIpv6OverGeoNetworking__TypesAndValues::c__aFlag1), INTEGER_template(p__validLifetime), INTEGER_template(LibItsIpv6OverGeoNetworking__TypesAndValues::c__preferredLifetime30s), p__gvl.prefix())))));
}

void start_f__sendGeoBroadcastWithRtAdv(const COMPONENT& component_reference, const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry_template& p__gvl, const CHARSTRING& p__compName, const INTEGER& p__validLifetime)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendGeoBroadcastWithRtAdv(");
p__gvl.log();
TTCN_Logger::log_event_str(", ");
p__compName.log();
TTCN_Logger::log_event_str(", ");
p__validLifetime.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_sendGeoBroadcastWithRtAdv", text_buf);
p__gvl.encode_text(text_buf);
p__compName.encode_text(text_buf);
p__validLifetime.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

void f__addGvl(const CHARSTRING& p__gvlKey, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLength, const CHARSTRING& p__area, const CHARSTRING& p__interface)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 339, TTCN_Location::LOCATION_FUNCTION, "f_addGvl");
current_location.update_lineno(346);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 346 */
{
LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry& tmp_23 = LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable[LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable.lengthof()]; /* 7388 */
tmp_23.key() = p__gvlKey;
tmp_23.prefix() = p__prefix;
tmp_23.prefixLength() = p__prefixLength;
tmp_23.area() = p__area;
tmp_23.interface() = p__interface;
}
}

void start_f__addGvl(const COMPONENT& component_reference, const CHARSTRING& p__gvlKey, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLength, const CHARSTRING& p__area, const CHARSTRING& p__interface)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_addGvl(");
p__gvlKey.log();
TTCN_Logger::log_event_str(", ");
p__prefix.log();
TTCN_Logger::log_event_str(", ");
p__prefixLength.log();
TTCN_Logger::log_event_str(", ");
p__area.log();
TTCN_Logger::log_event_str(", ");
p__interface.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_addGvl", text_buf);
p__gvlKey.encode_text(text_buf);
p__prefix.encode_text(text_buf);
p__prefixLength.encode_text(text_buf);
p__area.encode_text(text_buf);
p__interface.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry f__getGvl(const CHARSTRING& p__gvlName)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 359, TTCN_Location::LOCATION_FUNCTION, "f_getGvl");
current_location.update_lineno(360);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 360 */
LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry v__return;
current_location.update_lineno(361);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 361 */
INTEGER i(0);
current_location.update_lineno(363);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 363 */
i = 0;
current_location.update_lineno(363);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 363 */
for ( ; ; ) {
current_location.update_lineno(363);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 363 */
if (!(i < LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable.lengthof())) break;
current_location.update_lineno(364);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 364 */
if ((const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[i].key() == p__gvlName)) {
current_location.update_lineno(365);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 365 */
v__return = const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[i];
}
current_location.update_lineno(363);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 363 */
{
INTEGER tmp_26;
++i;
}
}
current_location.update_lineno(369);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 369 */
return v__return;
}

void start_f__getGvl(const COMPONENT& component_reference, const CHARSTRING& p__gvlName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGvl(");
p__gvlName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_getGvl", text_buf);
p__gvlName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

CHARSTRING f__getGvlInterface(const INTEGER& p__gvlIdx)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 378, TTCN_Location::LOCATION_FUNCTION, "f_getGvlInterface");
current_location.update_lineno(379);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 379 */
return const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__gvlTable)[p__gvlIdx].interface();
}

void start_f__getGvlInterface(const COMPONENT& component_reference, const INTEGER& p__gvlIdx)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGvlInterface(");
p__gvlIdx.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_getGvlInterface", text_buf);
p__gvlIdx.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

CHARSTRING f__getTvlInterface()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 387, TTCN_Location::LOCATION_FUNCTION, "f_getTvlInterface");
current_location.update_lineno(388);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 388 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__TVL__INTERFACE__NAME;
}

void start_f__getTvlInterface(const COMPONENT& component_reference)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getTvlInterface(");
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_getTvlInterface", text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OCTETSTRING f__gnAddr2MacAddr(const LibItsGeoNetworking__TypesAndValues::GN__Address& p__gnAddr)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 396, TTCN_Location::LOCATION_FUNCTION, "f_gnAddr2MacAddr");
current_location.update_lineno(397);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 397 */
return const_cast< const LibItsGeoNetworking__TypesAndValues::GN__Address&>(p__gnAddr).mid();
}

LibItsGeoNetworking__TypesAndValues::GN__Address f__macAddr2GnAddr(const OCTETSTRING& p__macAddr)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 405, TTCN_Location::LOCATION_FUNCTION, "f_macAddr2GnAddr");
current_location.update_lineno(406);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 406 */
LibItsGeoNetworking__TypesAndValues::GN__Address v__gnAddr(LibItsGeoNetworking__Templates::m__dummyGnAddr.valueof());
current_location.update_lineno(407);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 407 */
v__gnAddr.mid() = p__macAddr;
current_location.update_lineno(408);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 408 */
return v__gnAddr;
}

OCTETSTRING f__createUniqueInterfaceId(const OCTETSTRING& p__macAddr)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 416, TTCN_Location::LOCATION_FUNCTION, "f_createUniqueInterfaceId");
current_location.update_lineno(420);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 420 */
INTEGER i;
current_location.update_lineno(421);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 421 */
OCTETSTRING v__leftPartMac(os_0);
current_location.update_lineno(422);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 422 */
OCTETSTRING v__rightPartMac(os_0);
current_location.update_lineno(423);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 423 */
BITSTRING v__leftPartBits(bs_0);
current_location.update_lineno(424);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 424 */
BITSTRING v__leftPartBitMask(bs_1);
current_location.update_lineno(427);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 427 */
i = 0;
current_location.update_lineno(427);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 427 */
for ( ; ; ) {
current_location.update_lineno(427);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 427 */
if (!(i < (p__macAddr.lengthof() - 3))) break;
current_location.update_lineno(428);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 428 */
v__leftPartMac[i] = const_cast< const OCTETSTRING&>(p__macAddr)[i];
current_location.update_lineno(427);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 427 */
{
INTEGER tmp_30;
++i;
}
}
current_location.update_lineno(431);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 431 */
i = 3;
current_location.update_lineno(431);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 431 */
for ( ; ; ) {
current_location.update_lineno(431);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 431 */
if (!(i < p__macAddr.lengthof())) break;
current_location.update_lineno(432);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 432 */
v__rightPartMac[(i - 3)] = const_cast< const OCTETSTRING&>(p__macAddr)[i];
current_location.update_lineno(431);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 431 */
{
INTEGER tmp_33;
++i;
}
}
current_location.update_lineno(435);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 435 */
v__leftPartBits = oct2bit(v__leftPartMac);
current_location.update_lineno(436);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 436 */
{
BITSTRING tmp_35;
tmp_35 = (v__leftPartBits ^ v__leftPartBitMask);
v__leftPartBits = tmp_35;
}
current_location.update_lineno(437);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 437 */
v__leftPartMac = bit2oct(v__leftPartBits);
current_location.update_lineno(439);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 439 */
return ((v__leftPartMac + os_1) + v__rightPartMac);
}

void f__addAddresses(LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable& p__addressTable, const CHARSTRING& p__componentName)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 449, TTCN_Location::LOCATION_FUNCTION, "f_addAddresses");
current_location.update_lineno(453);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 453 */
INTEGER c__uniIdLen(64);
current_location.update_lineno(454);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 454 */
LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry v__addressTableEntry;
current_location.update_lineno(455);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 455 */
OCTETSTRING v__macAddr;
current_location.update_lineno(456);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 456 */
OCTETSTRING v__interfaceIdReady(os_2);
current_location.update_lineno(457);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 457 */
OCTETSTRING v__rightPartMac(os_0);
current_location.update_lineno(458);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 458 */
INTEGER i;
current_location.update_lineno(460);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 460 */
v__addressTableEntry.key() = p__componentName;
current_location.update_lineno(461);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 461 */
LibItsGeoNetworking__TypesAndValues::LongPosVector v__position(LibItsGeoNetworking__Functions::f__getPosition(p__componentName));
current_location.update_lineno(462);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 462 */
v__macAddr = f__gnAddr2MacAddr(const_cast< const LibItsGeoNetworking__TypesAndValues::LongPosVector&>(v__position).gnAddr());
current_location.update_lineno(464);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 464 */
v__addressTableEntry.macAddress() = v__macAddr;
current_location.update_lineno(467);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 467 */
v__interfaceIdReady = f__createUniqueInterfaceId(v__macAddr);
current_location.update_lineno(470);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 470 */
v__addressTableEntry.lla() = (os_3 + v__interfaceIdReady);
current_location.update_lineno(473);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 473 */
i = 3;
current_location.update_lineno(473);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 473 */
for ( ; ; ) {
current_location.update_lineno(473);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 473 */
if (!(i < v__macAddr.lengthof())) break;
current_location.update_lineno(474);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 474 */
v__rightPartMac[(i - 3)] = const_cast< const OCTETSTRING&>(v__macAddr)[i];
current_location.update_lineno(473);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 473 */
{
INTEGER tmp_44;
++i;
}
}
current_location.update_lineno(478);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 478 */
v__addressTableEntry.solNodeMca() = (os_4 + v__rightPartMac);
current_location.update_lineno(481);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 481 */
v__addressTableEntry.macSolNodeMca() = (os_5 + v__rightPartMac);
current_location.update_lineno(483);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 483 */
p__addressTable[p__addressTable.lengthof()] = v__addressTableEntry;
}

void start_f__addAddresses(const COMPONENT& component_reference, LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable& p__addressTable, const CHARSTRING& p__componentName)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_addAddresses(");
p__addressTable.log();
TTCN_Logger::log_event_str(", ");
p__componentName.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_addAddresses", text_buf);
p__addressTable.encode_text(text_buf);
p__componentName.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry f__getAddresses(const CHARSTRING& p__positionKey)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 492, TTCN_Location::LOCATION_FUNCTION, "f_getAddresses");
current_location.update_lineno(497);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 497 */
LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry v__return;
current_location.update_lineno(498);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 498 */
INTEGER i(0);
current_location.update_lineno(500);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 500 */
i = 0;
current_location.update_lineno(500);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 500 */
for ( ; ; ) {
current_location.update_lineno(500);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 500 */
if (!(i < LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__addressTable.lengthof())) break;
current_location.update_lineno(501);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 501 */
if ((const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__addressTable)[i].key() == p__positionKey)) {
current_location.update_lineno(502);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 502 */
v__return = const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable&>(LibItsIpv6OverGeoNetworking__TestSystem::ItsIpv6OverGeoNetworking_component_vc__addressTable)[i];
}
current_location.update_lineno(500);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 500 */
{
INTEGER tmp_50;
++i;
}
}
current_location.update_lineno(506);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 506 */
return v__return;
}

void start_f__getAddresses(const COMPONENT& component_reference, const CHARSTRING& p__positionKey)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getAddresses(");
p__positionKey.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_getAddresses", text_buf);
p__positionKey.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OCTETSTRING f__compute64BitsPrefix(const BITSTRING& p__prefixBits, const INTEGER& p__prefixLen)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 515, TTCN_Location::LOCATION_FUNCTION, "f_compute64BitsPrefix");
current_location.update_lineno(519);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 519 */
INTEGER i;
current_location.update_lineno(520);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 520 */
BITSTRING v__prefixReadyBits(bs_2);
current_location.update_lineno(522);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 522 */
if ((p__prefixLen > 64)) {
current_location.update_lineno(523);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 523 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_15).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(524);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 524 */
return os_2;
}
current_location.update_lineno(528);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 528 */
i = 0;
current_location.update_lineno(528);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 528 */
for ( ; ; ) {
current_location.update_lineno(528);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 528 */
if (!(i < p__prefixLen)) break;
current_location.update_lineno(529);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 529 */
v__prefixReadyBits[i] = const_cast< const BITSTRING&>(p__prefixBits)[i];
current_location.update_lineno(528);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 528 */
{
INTEGER tmp_53;
++i;
}
}
current_location.update_lineno(531);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 531 */
return bit2oct(v__prefixReadyBits);
}

OCTETSTRING f__computeGlobalAddress(const CHARSTRING& p__compName, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 541, TTCN_Location::LOCATION_FUNCTION, "f_computeGlobalAddress");
current_location.update_lineno(547);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 547 */
OCTETSTRING v__interfaceIdReady(os_2);
current_location.update_lineno(549);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 549 */
if ((p__prefixLen > 64)) {
current_location.update_lineno(550);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 550 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_16).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(551);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 551 */
return os_6;
}
current_location.update_lineno(555);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 555 */
LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry v__addresses(f__getAddresses(p__compName));
current_location.update_lineno(556);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 556 */
v__interfaceIdReady = f__createUniqueInterfaceId(const_cast< const LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTableEntry&>(v__addresses).macAddress());
current_location.update_lineno(558);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 558 */
return (f__compute64BitsPrefix(oct2bit(p__prefix), p__prefixLen) + v__interfaceIdReady);
}

void start_f__computeGlobalAddress(const COMPONENT& component_reference, const CHARSTRING& p__compName, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen)
{
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_computeGlobalAddress(");
p__compName.log();
TTCN_Logger::log_event_str(", ");
p__prefix.log();
TTCN_Logger::log_event_str(", ");
p__prefixLen.log();
TTCN_Logger::log_event_str(") on component ");
component_reference.log();
TTCN_Logger::log_char('.');
TTCN_Logger::end_event();
Text_Buf text_buf;
TTCN_Runtime::prepare_start_component(component_reference, "LibItsIpv6OverGeoNetworking_Functions", "f_computeGlobalAddress", text_buf);
p__compName.encode_text(text_buf);
p__prefix.encode_text(text_buf);
p__prefixLen.encode_text(text_buf);
TTCN_Runtime::send_start_component(text_buf);
}

OCTETSTRING f__computeHomeAgentAnycastAddress(const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 568, TTCN_Location::LOCATION_FUNCTION, "f_computeHomeAgentAnycastAddress");
current_location.update_lineno(572);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 572 */
OCTETSTRING v__haAnycast(os_7);
current_location.update_lineno(574);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 574 */
if ((p__prefixLen != 64)) {
current_location.update_lineno(575);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 575 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_16).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(576);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 576 */
return os_6;
}
current_location.update_lineno(579);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 579 */
return (f__compute64BitsPrefix(oct2bit(p__prefix), p__prefixLen) + v__haAnycast);
}

OCTETSTRING f__computeGlobalScopedUnicastPrefixBasedMulticastIpv6Address(const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen, const INTEGER& p__groupId)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 589, TTCN_Location::LOCATION_FUNCTION, "f_computeGlobalScopedUnicastPrefixBasedMulticastIpv6Address");
current_location.update_lineno(594);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 594 */
OCTETSTRING v__leftPart(os_8);
current_location.update_lineno(596);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 596 */
if ((p__prefixLen > 64)) {
current_location.update_lineno(597);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 597 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_17).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(598);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 598 */
return os_6;
}
current_location.update_lineno(601);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 601 */
return (((v__leftPart + int2oct(p__prefixLen, 1)) + f__compute64BitsPrefix(oct2bit(p__prefix), p__prefixLen)) + int2oct(p__groupId, 4));
}

OCTETSTRING f__computeGeographicAnycastIpv6Address(const OCTETSTRING& p__prefix, const INTEGER& p__prefixLen)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 610, TTCN_Location::LOCATION_FUNCTION, "f_computeGeographicAnycastIpv6Address");
current_location.update_lineno(614);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 614 */
BITSTRING v__interfaceIdentifierField(bs_3);
current_location.update_lineno(616);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 616 */
if ((p__prefixLen > 64)) {
current_location.update_lineno(617);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 617 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_17).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(618);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 618 */
return os_6;
}
current_location.update_lineno(621);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 621 */
return (f__compute64BitsPrefix(oct2bit(p__prefix), p__prefixLen) + bit2oct(v__interfaceIdentifierField));
}

OCTETSTRING f__getPrefix(const INTEGER& p__index)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 632, TTCN_Location::LOCATION_FUNCTION, "f_getPrefix");
current_location.update_lineno(635);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 635 */
if(p__index == 1) goto tmp_55_0;
current_location.update_lineno(638);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 638 */
if(p__index == 2) goto tmp_55_1;
current_location.update_lineno(641);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 641 */
if(p__index == 3) goto tmp_55_2;
goto tmp_55_end;
tmp_55_0:
{
current_location.update_lineno(636);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 636 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__PREFIX__1;
goto tmp_55_end;
}
tmp_55_1:
{
current_location.update_lineno(639);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 639 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__PREFIX__2;
goto tmp_55_end;
}
tmp_55_2:
{
current_location.update_lineno(642);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 642 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__PREFIX__3;
goto tmp_55_end;
}
tmp_55_end: /* empty */;
current_location.update_lineno(646);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 646 */
return os_6;
}

INTEGER f__getPrefixLength(const INTEGER& p__index)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 658, TTCN_Location::LOCATION_FUNCTION, "f_getPrefixLength");
current_location.update_lineno(661);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 661 */
if(p__index == 1) goto tmp_56_0;
current_location.update_lineno(664);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 664 */
if(p__index == 2) goto tmp_56_1;
current_location.update_lineno(667);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 667 */
if(p__index == 3) goto tmp_56_2;
goto tmp_56_end;
tmp_56_0:
{
current_location.update_lineno(662);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 662 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__PREFIX__LENGTH__1;
goto tmp_56_end;
}
tmp_56_1:
{
current_location.update_lineno(665);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 665 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__PREFIX__LENGTH__2;
goto tmp_56_end;
}
tmp_56_2:
{
current_location.update_lineno(668);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 668 */
return LibItsIpv6OverGeoNetworking__Pixits::PX__GN6__PREFIX__LENGTH__3;
goto tmp_56_end;
}
tmp_56_end: /* empty */;
current_location.update_lineno(672);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 672 */
return 64;
}

BOOLEAN f__isIpv6AddressCorrespondingToPrefix(const OCTETSTRING& p__ipv6Address, const OCTETSTRING& p__prefix, const INTEGER& p__prefixLength)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 683, TTCN_Location::LOCATION_FUNCTION, "f_isIpv6AddressCorrespondingToPrefix");
current_location.update_lineno(686);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 686 */
BITSTRING v__ipv6Address(oct2bit(p__ipv6Address));
current_location.update_lineno(687);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 687 */
BITSTRING v__prefix(oct2bit(p__prefix));
current_location.update_lineno(688);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 688 */
INTEGER i;
current_location.update_lineno(690);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 690 */
i = 0;
current_location.update_lineno(690);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 690 */
for ( ; ; ) {
current_location.update_lineno(690);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 690 */
if (!(i < p__prefixLength)) break;
current_location.update_lineno(691);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 691 */
if ((const_cast< const BITSTRING&>(v__ipv6Address)[i] != const_cast< const BITSTRING&>(v__prefix)[i])) {
current_location.update_lineno(692);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 692 */
return FALSE;
}
current_location.update_lineno(690);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 690 */
{
INTEGER tmp_58;
++i;
}
}
current_location.update_lineno(696);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 696 */
return TRUE;
}

OCTETSTRING f__computeIPv6CheckSum(const OCTETSTRING_template& p__sourceAddress, const OCTETSTRING_template& p__destinationAddress, const INTEGER_template& p__payloadLength, const OCTETSTRING_template& p__payload, const INTEGER_template& p__nextHdr)
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 707, TTCN_Location::LOCATION_FUNCTION, "f_computeIPv6CheckSum");
current_location.update_lineno(714);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 714 */
OCTETSTRING v__checksum(os_9);
current_location.update_lineno(716);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 716 */
try {
TTCN_Logger::begin_event(TTCN_USER);
((cs_1 + TTCN_Runtime::get_testcasename()) + cs_18).log();
TTCN_Logger::end_event();
} catch (...) {
TTCN_Logger::finish_event();
throw;
}
current_location.update_lineno(719);
/* LibItsIpv6OverGeoNetworking_Functions.ttcn, line 719 */
return v__checksum;
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsIpv6OverGeoNetworking_Functions");
LibCommon__TextStrings::module_object.pre_init_module();
LibItsGeoNetworking__Functions::module_object.pre_init_module();
LibItsIpv6OverGeoNetworking__Pixits::module_object.pre_init_module();
module_object.add_function("f_cf01UpGn6", (genericfunc_t)&f__cf01UpGn6, (genericfunc_t)&start_f__cf01UpGn6);
module_object.add_function("f_cf01DownGn6", (genericfunc_t)&f__cf01DownGn6, (genericfunc_t)&start_f__cf01DownGn6);
module_object.add_altstep("a_ipv6Default", (genericfunc_t)&a__ipv6Default_instance, (genericfunc_t )&activate_a__ipv6Default, (genericfunc_t )&a__ipv6Default);
module_object.add_function("f_prIpv6Neighbour", (genericfunc_t)&f__prIpv6Neighbour, (genericfunc_t)&start_f__prIpv6Neighbour);
module_object.add_function("f_prConfigureGVL", (genericfunc_t)&f__prConfigureGVL, (genericfunc_t)&start_f__prConfigureGVL);
module_object.add_function("f_poIpv6Neighbour", (genericfunc_t)&f__poIpv6Neighbour, (genericfunc_t)&start_f__poIpv6Neighbour);
module_object.add_function("f_acUpdateInterfaces", (genericfunc_t)&f__acUpdateInterfaces, (genericfunc_t)&start_f__acUpdateInterfaces);
module_object.add_function("f_sendGeoBroadcastWithRtAdv", (genericfunc_t)&f__sendGeoBroadcastWithRtAdv, (genericfunc_t)&start_f__sendGeoBroadcastWithRtAdv);
module_object.add_function("f_addGvl", (genericfunc_t)&f__addGvl, (genericfunc_t)&start_f__addGvl);
module_object.add_function("f_getGvl", (genericfunc_t)&f__getGvl, (genericfunc_t)&start_f__getGvl);
module_object.add_function("f_getGvlInterface", (genericfunc_t)&f__getGvlInterface, (genericfunc_t)&start_f__getGvlInterface);
module_object.add_function("f_getTvlInterface", (genericfunc_t)&f__getTvlInterface, (genericfunc_t)&start_f__getTvlInterface);
module_object.add_function("f_gnAddr2MacAddr", (genericfunc_t)&f__gnAddr2MacAddr, NULL);
module_object.add_function("f_macAddr2GnAddr", (genericfunc_t)&f__macAddr2GnAddr, NULL);
module_object.add_function("f_createUniqueInterfaceId", (genericfunc_t)&f__createUniqueInterfaceId, NULL);
module_object.add_function("f_addAddresses", (genericfunc_t)&f__addAddresses, (genericfunc_t)&start_f__addAddresses);
module_object.add_function("f_getAddresses", (genericfunc_t)&f__getAddresses, (genericfunc_t)&start_f__getAddresses);
module_object.add_function("f_compute64BitsPrefix", (genericfunc_t)&f__compute64BitsPrefix, NULL);
module_object.add_function("f_computeGlobalAddress", (genericfunc_t)&f__computeGlobalAddress, (genericfunc_t)&start_f__computeGlobalAddress);
module_object.add_function("f_computeHomeAgentAnycastAddress", (genericfunc_t)&f__computeHomeAgentAnycastAddress, NULL);
module_object.add_function("f_computeGlobalScopedUnicastPrefixBasedMulticastIpv6Address", (genericfunc_t)&f__computeGlobalScopedUnicastPrefixBasedMulticastIpv6Address, NULL);
module_object.add_function("f_computeGeographicAnycastIpv6Address", (genericfunc_t)&f__computeGeographicAnycastIpv6Address, NULL);
module_object.add_function("f_getPrefix", (genericfunc_t)&f__getPrefix, NULL);
module_object.add_function("f_getPrefixLength", (genericfunc_t)&f__getPrefixLength, NULL);
module_object.add_function("f_isIpv6AddressCorrespondingToPrefix", (genericfunc_t)&f__isIpv6AddressCorrespondingToPrefix, NULL);
module_object.add_function("f_computeIPv6CheckSum", (genericfunc_t)&f__computeIPv6CheckSum, NULL);
}

static void post_init_module()
{
TTCN_Location current_location("LibItsIpv6OverGeoNetworking_Functions.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "LibItsIpv6OverGeoNetworking_Functions");
LibCommon__TextStrings::module_object.post_init_module();
LibItsGeoNetworking__Functions::module_object.post_init_module();
LibItsIpv6OverGeoNetworking__Pixits::module_object.post_init_module();
template_f__prConfigureGVL_p__validLifetimes_defval = OMIT_VALUE;
const_f__sendGeoBroadcastWithRtAdv_p__validLifetime_defval = LibItsIpv6OverGeoNetworking__TypesAndValues::c__validLifetime30s;
}

static boolean start_ptc_function(const char *function_name, Text_Buf& function_arguments)
{
if (!strcmp(function_name, "f_cf01UpGn6")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf01UpGn6().");
TTCN_Runtime::function_started(function_arguments);
f__cf01UpGn6();
TTCN_Runtime::function_finished("f_cf01UpGn6");
return TRUE;
} else if (!strcmp(function_name, "f_cf01DownGn6")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_cf01DownGn6().");
TTCN_Runtime::function_started(function_arguments);
f__cf01DownGn6();
TTCN_Runtime::function_finished("f_cf01DownGn6");
return TRUE;
} else if (!strcmp(function_name, "f_prIpv6Neighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_prIpv6Neighbour().");
TTCN_Runtime::function_started(function_arguments);
f__prIpv6Neighbour();
TTCN_Runtime::function_finished("f_prIpv6Neighbour");
return TRUE;
} else if (!strcmp(function_name, "f_prConfigureGVL")) {
LibItsIpv6OverGeoNetworking__TypesAndValues::GvlIdxList p__gvls;
LibItsIpv6OverGeoNetworking__TypesAndValues::UInt32List_template p__validLifetimes;
p__gvls.decode_text(function_arguments);
p__validLifetimes.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_prConfigureGVL(");
p__gvls.log();
TTCN_Logger::log_event_str(", ");
p__validLifetimes.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__prConfigureGVL(p__gvls, p__validLifetimes);
TTCN_Runtime::function_finished("f_prConfigureGVL");
return TRUE;
} else if (!strcmp(function_name, "f_poIpv6Neighbour")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_poIpv6Neighbour().");
TTCN_Runtime::function_started(function_arguments);
f__poIpv6Neighbour();
TTCN_Runtime::function_finished("f_poIpv6Neighbour");
return TRUE;
} else if (!strcmp(function_name, "f_acUpdateInterfaces")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_acUpdateInterfaces().");
TTCN_Runtime::function_started(function_arguments);
f__acUpdateInterfaces();
TTCN_Runtime::function_finished("f_acUpdateInterfaces");
return TRUE;
} else if (!strcmp(function_name, "f_sendGeoBroadcastWithRtAdv")) {
LibItsIpv6OverGeoNetworking__TypesAndValues::GvlTableEntry_template p__gvl;
CHARSTRING p__compName;
INTEGER p__validLifetime;
p__gvl.decode_text(function_arguments);
p__compName.decode_text(function_arguments);
p__validLifetime.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_sendGeoBroadcastWithRtAdv(");
p__gvl.log();
TTCN_Logger::log_event_str(", ");
p__compName.log();
TTCN_Logger::log_event_str(", ");
p__validLifetime.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__sendGeoBroadcastWithRtAdv(p__gvl, p__compName, p__validLifetime);
TTCN_Runtime::function_finished("f_sendGeoBroadcastWithRtAdv");
return TRUE;
} else if (!strcmp(function_name, "f_addGvl")) {
CHARSTRING p__gvlKey;
OCTETSTRING p__prefix;
INTEGER p__prefixLength;
CHARSTRING p__area;
CHARSTRING p__interface;
p__gvlKey.decode_text(function_arguments);
p__prefix.decode_text(function_arguments);
p__prefixLength.decode_text(function_arguments);
p__area.decode_text(function_arguments);
p__interface.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_addGvl(");
p__gvlKey.log();
TTCN_Logger::log_event_str(", ");
p__prefix.log();
TTCN_Logger::log_event_str(", ");
p__prefixLength.log();
TTCN_Logger::log_event_str(", ");
p__area.log();
TTCN_Logger::log_event_str(", ");
p__interface.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__addGvl(p__gvlKey, p__prefix, p__prefixLength, p__area, p__interface);
TTCN_Runtime::function_finished("f_addGvl");
return TRUE;
} else if (!strcmp(function_name, "f_getGvl")) {
CHARSTRING p__gvlName;
p__gvlName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGvl(");
p__gvlName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getGvl(p__gvlName);
TTCN_Runtime::function_finished("f_getGvl");
return TRUE;
} else if (!strcmp(function_name, "f_getGvlInterface")) {
INTEGER p__gvlIdx;
p__gvlIdx.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getGvlInterface(");
p__gvlIdx.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getGvlInterface(p__gvlIdx);
TTCN_Runtime::function_finished("f_getGvlInterface");
return TRUE;
} else if (!strcmp(function_name, "f_getTvlInterface")) {
TTCN_Logger::log_str(TTCN_Logger::PARALLEL_PTC, "Starting function f_getTvlInterface().");
TTCN_Runtime::function_started(function_arguments);
f__getTvlInterface();
TTCN_Runtime::function_finished("f_getTvlInterface");
return TRUE;
} else if (!strcmp(function_name, "f_addAddresses")) {
LibItsIpv6OverGeoNetworking__TypesAndValues::AddressTable  p__addressTable;
CHARSTRING p__componentName;
p__addressTable.decode_text(function_arguments);
p__componentName.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_addAddresses(");
p__addressTable.log();
TTCN_Logger::log_event_str(", ");
p__componentName.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__addAddresses(p__addressTable, p__componentName);
TTCN_Runtime::function_finished("f_addAddresses");
return TRUE;
} else if (!strcmp(function_name, "f_getAddresses")) {
CHARSTRING p__positionKey;
p__positionKey.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_getAddresses(");
p__positionKey.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__getAddresses(p__positionKey);
TTCN_Runtime::function_finished("f_getAddresses");
return TRUE;
} else if (!strcmp(function_name, "f_computeGlobalAddress")) {
CHARSTRING p__compName;
OCTETSTRING p__prefix;
INTEGER p__prefixLen;
p__compName.decode_text(function_arguments);
p__prefix.decode_text(function_arguments);
p__prefixLen.decode_text(function_arguments);
TTCN_Logger::begin_event(TTCN_Logger::PARALLEL_PTC);
TTCN_Logger::log_event_str("Starting function f_computeGlobalAddress(");
p__compName.log();
TTCN_Logger::log_event_str(", ");
p__prefix.log();
TTCN_Logger::log_event_str(", ");
p__prefixLen.log();
TTCN_Logger::log_event_str(").");
TTCN_Logger::end_event();
TTCN_Runtime::function_started(function_arguments);
f__computeGlobalAddress(p__compName, p__prefix, p__prefixLen);
TTCN_Runtime::function_finished("f_computeGlobalAddress");
return TRUE;
} else return FALSE;
}


} /* end of namespace */
