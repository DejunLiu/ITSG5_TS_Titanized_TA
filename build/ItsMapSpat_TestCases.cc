// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R4A
// for Aitor (aitorkun@aitorkun-HP-EliteBook-2530p) on Tue Feb 16 10:46:43 2016

// Copyright (c) 2000-2015 Ericsson Telecom AB

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "ItsMapSpat_TestCases.hh"

namespace ItsMapSpat__TestCases {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x5e, 0x52, 0x34, 0x02, 0x98, 0x35, 0x6d, 0x47, 0x66, 0xe2, 0xf6, 0x03, 0x38, 0x64, 0xb0, 0xcf };

/* Global variable definitions */

static const size_t num_namespaces = 0;
TTCN_Module module_object("ItsMapSpat_TestCases", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 0LU, 0, post_init_module, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_4,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

verdicttype testcase_TC__MAP__SPAT__MSD__BV__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 62, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_01");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_01", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(67);
/* ItsMapSpat_TestCases.ttcn, line 67 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(70);
/* ItsMapSpat_TestCases.ttcn, line 70 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(73);
/* ItsMapSpat_TestCases.ttcn, line 73 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(74);
/* ItsMapSpat_TestCases.ttcn, line 74 */
{
tmp_0:
alt_status tmp_0_alt_flag_0 = ALT_MAYBE;
alt_status tmp_0_alt_flag_1 = ALT_MAYBE;
alt_status tmp_0_alt_flag_2 = ALT_MAYBE;
alt_status tmp_0_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_0_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(75);
/* ItsMapSpat_TestCases.ttcn, line 75 */
tmp_0_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__mapSubId1)), NULL, any_compref, NULL);
if (tmp_0_alt_flag_0 == ALT_YES) {
current_location.update_lineno(76);
/* ItsMapSpat_TestCases.ttcn, line 76 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(77);
/* ItsMapSpat_TestCases.ttcn, line 77 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_01: PASS: Successfully received MAP with DSRCmsgSubID == 1. ***");
current_location.update_lineno(78);
/* ItsMapSpat_TestCases.ttcn, line 78 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_0_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(80);
/* ItsMapSpat_TestCases.ttcn, line 80 */
tmp_0_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), NULL, any_compref, NULL);
if (tmp_0_alt_flag_1 == ALT_YES) {
current_location.update_lineno(81);
/* ItsMapSpat_TestCases.ttcn, line 81 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(82);
/* ItsMapSpat_TestCases.ttcn, line 82 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_01: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(83);
/* ItsMapSpat_TestCases.ttcn, line 83 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_0_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(85);
/* ItsMapSpat_TestCases.ttcn, line 85 */
tmp_0_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_0_alt_flag_2 == ALT_YES) {
current_location.update_lineno(86);
/* ItsMapSpat_TestCases.ttcn, line 86 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_01: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(87);
/* ItsMapSpat_TestCases.ttcn, line 87 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_0_default_flag == ALT_MAYBE) {
tmp_0_default_flag = TTCN_Default::try_altsteps();
if (tmp_0_default_flag == ALT_YES || tmp_0_default_flag == ALT_BREAK) break;
else if (tmp_0_default_flag == ALT_REPEAT) goto tmp_0;
}
current_location.update_lineno(74);
/* ItsMapSpat_TestCases.ttcn, line 74 */
if (tmp_0_alt_flag_0 == ALT_NO && tmp_0_alt_flag_1 == ALT_NO && tmp_0_alt_flag_2 == ALT_NO && tmp_0_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 74 and 89.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(92);
/* ItsMapSpat_TestCases.ttcn, line 92 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(93);
/* ItsMapSpat_TestCases.ttcn, line 93 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 122, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_02");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_02", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(127);
/* ItsMapSpat_TestCases.ttcn, line 127 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(130);
/* ItsMapSpat_TestCases.ttcn, line 130 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(134);
/* ItsMapSpat_TestCases.ttcn, line 134 */
LibItsMapSpat__Functions::f__utTriggerEvent(LibItsMapSpat__Templates::m__utTriggerEvent(LibItsMapSpat__TypesAndValues::Event::spatMsg));
current_location.update_lineno(136);
/* ItsMapSpat_TestCases.ttcn, line 136 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(137);
/* ItsMapSpat_TestCases.ttcn, line 137 */
{
tmp_1:
alt_status tmp_1_alt_flag_0 = ALT_MAYBE;
alt_status tmp_1_alt_flag_1 = ALT_MAYBE;
alt_status tmp_1_alt_flag_2 = ALT_MAYBE;
alt_status tmp_1_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_1_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(138);
/* ItsMapSpat_TestCases.ttcn, line 138 */
tmp_1_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__spatSubId1)), NULL, any_compref, NULL);
if (tmp_1_alt_flag_0 == ALT_YES) {
current_location.update_lineno(139);
/* ItsMapSpat_TestCases.ttcn, line 139 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(140);
/* ItsMapSpat_TestCases.ttcn, line 140 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_02: PASS: Successfully received SPAT with DSRCmsgSubID == 1. ***");
current_location.update_lineno(141);
/* ItsMapSpat_TestCases.ttcn, line 141 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_1_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(143);
/* ItsMapSpat_TestCases.ttcn, line 143 */
tmp_1_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__anySpat)), NULL, any_compref, NULL);
if (tmp_1_alt_flag_1 == ALT_YES) {
current_location.update_lineno(144);
/* ItsMapSpat_TestCases.ttcn, line 144 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(145);
/* ItsMapSpat_TestCases.ttcn, line 145 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_02: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(146);
/* ItsMapSpat_TestCases.ttcn, line 146 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_1_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(148);
/* ItsMapSpat_TestCases.ttcn, line 148 */
tmp_1_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_1_alt_flag_2 == ALT_YES) {
current_location.update_lineno(149);
/* ItsMapSpat_TestCases.ttcn, line 149 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_02: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(150);
/* ItsMapSpat_TestCases.ttcn, line 150 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_1_default_flag == ALT_MAYBE) {
tmp_1_default_flag = TTCN_Default::try_altsteps();
if (tmp_1_default_flag == ALT_YES || tmp_1_default_flag == ALT_BREAK) break;
else if (tmp_1_default_flag == ALT_REPEAT) goto tmp_1;
}
current_location.update_lineno(137);
/* ItsMapSpat_TestCases.ttcn, line 137 */
if (tmp_1_alt_flag_0 == ALT_NO && tmp_1_alt_flag_1 == ALT_NO && tmp_1_alt_flag_2 == ALT_NO && tmp_1_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 137 and 152.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(155);
/* ItsMapSpat_TestCases.ttcn, line 155 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(156);
/* ItsMapSpat_TestCases.ttcn, line 156 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__05(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 190, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_05");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_05", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(193);
/* ItsMapSpat_TestCases.ttcn, line 193 */
INTEGER v__msgCount;
current_location.update_lineno(194);
/* ItsMapSpat_TestCases.ttcn, line 194 */
LibItsMapSpat__TestSystem::MapInd v__message;
current_location.update_lineno(197);
/* ItsMapSpat_TestCases.ttcn, line 197 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(201);
/* ItsMapSpat_TestCases.ttcn, line 201 */
v__msgCount = LibItsMapSpat__Functions::f__utTriggerEvent(LibItsMapSpat__Templates::m__utTriggerEvent(LibItsMapSpat__TypesAndValues::Event::mapRepL10s));
current_location.update_lineno(203);
/* ItsMapSpat_TestCases.ttcn, line 203 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(204);
/* ItsMapSpat_TestCases.ttcn, line 204 */
{
tmp_3:
alt_status tmp_3_alt_flag_0 = ALT_MAYBE;
alt_status tmp_3_alt_flag_1 = ALT_MAYBE;
alt_status tmp_3_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_3_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(205);
/* ItsMapSpat_TestCases.ttcn, line 205 */
tmp_3_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), &(v__message), any_compref, NULL);
if (tmp_3_alt_flag_0 == ALT_YES) {
current_location.update_lineno(206);
/* ItsMapSpat_TestCases.ttcn, line 206 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(207);
/* ItsMapSpat_TestCases.ttcn, line 207 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_05: PASS: Successfully received first MAP message. ***");
current_location.update_lineno(208);
/* ItsMapSpat_TestCases.ttcn, line 208 */
v__msgCount = const_cast< const LibItsMapSpat__TestSystem::MapInd&>(v__message).msgIn().msgMap().mapData().msgIssueRevision();
break;
}
}
if (tmp_3_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(210);
/* ItsMapSpat_TestCases.ttcn, line 210 */
tmp_3_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_3_alt_flag_1 == ALT_YES) {
current_location.update_lineno(211);
/* ItsMapSpat_TestCases.ttcn, line 211 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_05: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(212);
/* ItsMapSpat_TestCases.ttcn, line 212 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_3_default_flag == ALT_MAYBE) {
tmp_3_default_flag = TTCN_Default::try_altsteps();
if (tmp_3_default_flag == ALT_YES || tmp_3_default_flag == ALT_BREAK) break;
else if (tmp_3_default_flag == ALT_REPEAT) goto tmp_3;
}
current_location.update_lineno(204);
/* ItsMapSpat_TestCases.ttcn, line 204 */
if (tmp_3_alt_flag_0 == ALT_NO && tmp_3_alt_flag_1 == ALT_NO && tmp_3_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 204 and 214.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(215);
/* ItsMapSpat_TestCases.ttcn, line 215 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(219);
/* ItsMapSpat_TestCases.ttcn, line 219 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start(1.0e1);
current_location.update_lineno(220);
/* ItsMapSpat_TestCases.ttcn, line 220 */
{
tmp_5:
alt_status tmp_5_alt_flag_0 = ALT_MAYBE;
alt_status tmp_5_alt_flag_1 = ALT_MAYBE;
alt_status tmp_5_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_5_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(221);
/* ItsMapSpat_TestCases.ttcn, line 221 */
tmp_5_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), &(v__message), any_compref, NULL);
if (tmp_5_alt_flag_0 == ALT_YES) {
current_location.update_lineno(222);
/* ItsMapSpat_TestCases.ttcn, line 222 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(223);
/* ItsMapSpat_TestCases.ttcn, line 223 */
if ((const_cast< const LibItsMapSpat__TestSystem::MapInd&>(v__message).msgIn().msgMap().mapData().msgIssueRevision() == v__msgCount)) {
current_location.update_lineno(224);
/* ItsMapSpat_TestCases.ttcn, line 224 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_05: PASS: Successfully received Second MAP message with correct Count. ***");
current_location.update_lineno(225);
/* ItsMapSpat_TestCases.ttcn, line 225 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(228);
/* ItsMapSpat_TestCases.ttcn, line 228 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_05: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(229);
/* ItsMapSpat_TestCases.ttcn, line 229 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_5_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(232);
/* ItsMapSpat_TestCases.ttcn, line 232 */
tmp_5_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_5_alt_flag_1 == ALT_YES) {
current_location.update_lineno(233);
/* ItsMapSpat_TestCases.ttcn, line 233 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_05: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(234);
/* ItsMapSpat_TestCases.ttcn, line 234 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_5_default_flag == ALT_MAYBE) {
tmp_5_default_flag = TTCN_Default::try_altsteps();
if (tmp_5_default_flag == ALT_YES || tmp_5_default_flag == ALT_BREAK) break;
else if (tmp_5_default_flag == ALT_REPEAT) goto tmp_5;
}
current_location.update_lineno(220);
/* ItsMapSpat_TestCases.ttcn, line 220 */
if (tmp_5_alt_flag_0 == ALT_NO && tmp_5_alt_flag_1 == ALT_NO && tmp_5_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 220 and 236.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(239);
/* ItsMapSpat_TestCases.ttcn, line 239 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(240);
/* ItsMapSpat_TestCases.ttcn, line 240 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_05 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__06(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 274, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_06");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_06", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(277);
/* ItsMapSpat_TestCases.ttcn, line 277 */
INTEGER v__msgCount;
current_location.update_lineno(278);
/* ItsMapSpat_TestCases.ttcn, line 278 */
LibItsMapSpat__TestSystem::MapInd v__message;
current_location.update_lineno(281);
/* ItsMapSpat_TestCases.ttcn, line 281 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(285);
/* ItsMapSpat_TestCases.ttcn, line 285 */
v__msgCount = LibItsMapSpat__Functions::f__utTriggerEvent(LibItsMapSpat__Templates::m__utTriggerEvent(LibItsMapSpat__TypesAndValues::Event::mapRepG10s));
current_location.update_lineno(287);
/* ItsMapSpat_TestCases.ttcn, line 287 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(288);
/* ItsMapSpat_TestCases.ttcn, line 288 */
{
tmp_7:
alt_status tmp_7_alt_flag_0 = ALT_MAYBE;
alt_status tmp_7_alt_flag_1 = ALT_MAYBE;
alt_status tmp_7_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_7_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(289);
/* ItsMapSpat_TestCases.ttcn, line 289 */
tmp_7_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), &(v__message), any_compref, NULL);
if (tmp_7_alt_flag_0 == ALT_YES) {
current_location.update_lineno(290);
/* ItsMapSpat_TestCases.ttcn, line 290 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(291);
/* ItsMapSpat_TestCases.ttcn, line 291 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_06: PASS: Successfully received first MAP message. ***");
current_location.update_lineno(292);
/* ItsMapSpat_TestCases.ttcn, line 292 */
v__msgCount = const_cast< const LibItsMapSpat__TestSystem::MapInd&>(v__message).msgIn().msgMap().mapData().msgIssueRevision();
break;
}
}
if (tmp_7_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(294);
/* ItsMapSpat_TestCases.ttcn, line 294 */
tmp_7_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_7_alt_flag_1 == ALT_YES) {
current_location.update_lineno(295);
/* ItsMapSpat_TestCases.ttcn, line 295 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_06: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(296);
/* ItsMapSpat_TestCases.ttcn, line 296 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_7_default_flag == ALT_MAYBE) {
tmp_7_default_flag = TTCN_Default::try_altsteps();
if (tmp_7_default_flag == ALT_YES || tmp_7_default_flag == ALT_BREAK) break;
else if (tmp_7_default_flag == ALT_REPEAT) goto tmp_7;
}
current_location.update_lineno(288);
/* ItsMapSpat_TestCases.ttcn, line 288 */
if (tmp_7_alt_flag_0 == ALT_NO && tmp_7_alt_flag_1 == ALT_NO && tmp_7_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 288 and 298.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(299);
/* ItsMapSpat_TestCases.ttcn, line 299 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(303);
/* ItsMapSpat_TestCases.ttcn, line 303 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start(2.0e1);
current_location.update_lineno(304);
/* ItsMapSpat_TestCases.ttcn, line 304 */
{
tmp_9:
alt_status tmp_9_alt_flag_0 = ALT_MAYBE;
alt_status tmp_9_alt_flag_1 = ALT_MAYBE;
alt_status tmp_9_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_9_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(305);
/* ItsMapSpat_TestCases.ttcn, line 305 */
tmp_9_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), &(v__message), any_compref, NULL);
if (tmp_9_alt_flag_0 == ALT_YES) {
current_location.update_lineno(306);
/* ItsMapSpat_TestCases.ttcn, line 306 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(307);
/* ItsMapSpat_TestCases.ttcn, line 307 */
if ((const_cast< const LibItsMapSpat__TestSystem::MapInd&>(v__message).msgIn().msgMap().mapData().msgIssueRevision() != v__msgCount)) {
current_location.update_lineno(308);
/* ItsMapSpat_TestCases.ttcn, line 308 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_06: PASS: Successfully received Second MAP message with correct Count. ***");
current_location.update_lineno(309);
/* ItsMapSpat_TestCases.ttcn, line 309 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(312);
/* ItsMapSpat_TestCases.ttcn, line 312 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_06: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(313);
/* ItsMapSpat_TestCases.ttcn, line 313 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_9_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(316);
/* ItsMapSpat_TestCases.ttcn, line 316 */
tmp_9_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_9_alt_flag_1 == ALT_YES) {
current_location.update_lineno(317);
/* ItsMapSpat_TestCases.ttcn, line 317 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_06: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(318);
/* ItsMapSpat_TestCases.ttcn, line 318 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_9_default_flag == ALT_MAYBE) {
tmp_9_default_flag = TTCN_Default::try_altsteps();
if (tmp_9_default_flag == ALT_YES || tmp_9_default_flag == ALT_BREAK) break;
else if (tmp_9_default_flag == ALT_REPEAT) goto tmp_9;
}
current_location.update_lineno(304);
/* ItsMapSpat_TestCases.ttcn, line 304 */
if (tmp_9_alt_flag_0 == ALT_NO && tmp_9_alt_flag_1 == ALT_NO && tmp_9_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 304 and 320.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(323);
/* ItsMapSpat_TestCases.ttcn, line 323 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(324);
/* ItsMapSpat_TestCases.ttcn, line 324 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_06 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__08(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 355, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_08");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_08", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(360);
/* ItsMapSpat_TestCases.ttcn, line 360 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(363);
/* ItsMapSpat_TestCases.ttcn, line 363 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(366);
/* ItsMapSpat_TestCases.ttcn, line 366 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(367);
/* ItsMapSpat_TestCases.ttcn, line 367 */
{
tmp_10:
alt_status tmp_10_alt_flag_0 = ALT_MAYBE;
alt_status tmp_10_alt_flag_1 = ALT_MAYBE;
alt_status tmp_10_alt_flag_2 = ALT_MAYBE;
alt_status tmp_10_alt_flag_3 = ALT_MAYBE;
alt_status tmp_10_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_10_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(368);
/* ItsMapSpat_TestCases.ttcn, line 368 */
tmp_10_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__mapNoMsgCrc)), NULL, any_compref, NULL);
if (tmp_10_alt_flag_0 == ALT_YES) {
current_location.update_lineno(369);
/* ItsMapSpat_TestCases.ttcn, line 369 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(370);
/* ItsMapSpat_TestCases.ttcn, line 370 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_08: PASS: Successfully received MAP with no MsgCRC. ***");
current_location.update_lineno(371);
/* ItsMapSpat_TestCases.ttcn, line 371 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_10_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(373);
/* ItsMapSpat_TestCases.ttcn, line 373 */
tmp_10_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__mapMsgCrcLast)), NULL, any_compref, NULL);
if (tmp_10_alt_flag_1 == ALT_YES) {
current_location.update_lineno(374);
/* ItsMapSpat_TestCases.ttcn, line 374 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(375);
/* ItsMapSpat_TestCases.ttcn, line 375 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_08: PASS: Successfully received MAP with MsgCRC as the last data element of the message. ***");
current_location.update_lineno(376);
/* ItsMapSpat_TestCases.ttcn, line 376 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_10_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(378);
/* ItsMapSpat_TestCases.ttcn, line 378 */
tmp_10_alt_flag_2 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), NULL, any_compref, NULL);
if (tmp_10_alt_flag_2 == ALT_YES) {
current_location.update_lineno(379);
/* ItsMapSpat_TestCases.ttcn, line 379 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(380);
/* ItsMapSpat_TestCases.ttcn, line 380 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_08: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(381);
/* ItsMapSpat_TestCases.ttcn, line 381 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_10_alt_flag_3 == ALT_MAYBE) {
current_location.update_lineno(383);
/* ItsMapSpat_TestCases.ttcn, line 383 */
tmp_10_alt_flag_3 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_10_alt_flag_3 == ALT_YES) {
current_location.update_lineno(384);
/* ItsMapSpat_TestCases.ttcn, line 384 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_08: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(385);
/* ItsMapSpat_TestCases.ttcn, line 385 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_10_default_flag == ALT_MAYBE) {
tmp_10_default_flag = TTCN_Default::try_altsteps();
if (tmp_10_default_flag == ALT_YES || tmp_10_default_flag == ALT_BREAK) break;
else if (tmp_10_default_flag == ALT_REPEAT) goto tmp_10;
}
current_location.update_lineno(367);
/* ItsMapSpat_TestCases.ttcn, line 367 */
if (tmp_10_alt_flag_0 == ALT_NO && tmp_10_alt_flag_1 == ALT_NO && tmp_10_alt_flag_2 == ALT_NO && tmp_10_alt_flag_3 == ALT_NO && tmp_10_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 367 and 387.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(390);
/* ItsMapSpat_TestCases.ttcn, line 390 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(391);
/* ItsMapSpat_TestCases.ttcn, line 391 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_08 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__09(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 419, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_09");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_09", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(424);
/* ItsMapSpat_TestCases.ttcn, line 424 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(427);
/* ItsMapSpat_TestCases.ttcn, line 427 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(430);
/* ItsMapSpat_TestCases.ttcn, line 430 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(431);
/* ItsMapSpat_TestCases.ttcn, line 431 */
{
tmp_11:
alt_status tmp_11_alt_flag_0 = ALT_MAYBE;
alt_status tmp_11_alt_flag_1 = ALT_MAYBE;
alt_status tmp_11_alt_flag_2 = ALT_MAYBE;
alt_status tmp_11_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_11_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(432);
/* ItsMapSpat_TestCases.ttcn, line 432 */
tmp_11_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__mapNoLayerType)), NULL, any_compref, NULL);
if (tmp_11_alt_flag_0 == ALT_YES) {
current_location.update_lineno(433);
/* ItsMapSpat_TestCases.ttcn, line 433 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(434);
/* ItsMapSpat_TestCases.ttcn, line 434 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_09: PASS: Successfully received MAP with no LayerType. ***");
current_location.update_lineno(435);
/* ItsMapSpat_TestCases.ttcn, line 435 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_11_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(437);
/* ItsMapSpat_TestCases.ttcn, line 437 */
tmp_11_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), NULL, any_compref, NULL);
if (tmp_11_alt_flag_1 == ALT_YES) {
current_location.update_lineno(438);
/* ItsMapSpat_TestCases.ttcn, line 438 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(439);
/* ItsMapSpat_TestCases.ttcn, line 439 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_09: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(440);
/* ItsMapSpat_TestCases.ttcn, line 440 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_11_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(442);
/* ItsMapSpat_TestCases.ttcn, line 442 */
tmp_11_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_11_alt_flag_2 == ALT_YES) {
current_location.update_lineno(443);
/* ItsMapSpat_TestCases.ttcn, line 443 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_09: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(444);
/* ItsMapSpat_TestCases.ttcn, line 444 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_11_default_flag == ALT_MAYBE) {
tmp_11_default_flag = TTCN_Default::try_altsteps();
if (tmp_11_default_flag == ALT_YES || tmp_11_default_flag == ALT_BREAK) break;
else if (tmp_11_default_flag == ALT_REPEAT) goto tmp_11;
}
current_location.update_lineno(431);
/* ItsMapSpat_TestCases.ttcn, line 431 */
if (tmp_11_alt_flag_0 == ALT_NO && tmp_11_alt_flag_1 == ALT_NO && tmp_11_alt_flag_2 == ALT_NO && tmp_11_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 431 and 446.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(449);
/* ItsMapSpat_TestCases.ttcn, line 449 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(450);
/* ItsMapSpat_TestCases.ttcn, line 450 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_09 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__10(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 482, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_10");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_10", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(485);
/* ItsMapSpat_TestCases.ttcn, line 485 */
LibItsMapSpat__TestSystem::MapInd v__message;
current_location.update_lineno(486);
/* ItsMapSpat_TestCases.ttcn, line 486 */
LibItsMapSpat__TestSystem::SpatInd v__spat;
current_location.update_lineno(487);
/* ItsMapSpat_TestCases.ttcn, line 487 */
DSRC::IntersectionGeometryList v__intersections;
current_location.update_lineno(488);
/* ItsMapSpat_TestCases.ttcn, line 488 */
INTEGER i;
current_location.update_lineno(488);
/* ItsMapSpat_TestCases.ttcn, line 488 */
INTEGER j;
current_location.update_lineno(489);
/* ItsMapSpat_TestCases.ttcn, line 489 */
BOOLEAN v__result(FALSE);
current_location.update_lineno(492);
/* ItsMapSpat_TestCases.ttcn, line 492 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(496);
/* ItsMapSpat_TestCases.ttcn, line 496 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(497);
/* ItsMapSpat_TestCases.ttcn, line 497 */
{
tmp_12:
alt_status tmp_12_alt_flag_0 = ALT_MAYBE;
alt_status tmp_12_alt_flag_1 = ALT_MAYBE;
alt_status tmp_12_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_12_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(498);
/* ItsMapSpat_TestCases.ttcn, line 498 */
tmp_12_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), &(v__message), any_compref, NULL);
if (tmp_12_alt_flag_0 == ALT_YES) {
current_location.update_lineno(499);
/* ItsMapSpat_TestCases.ttcn, line 499 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(500);
/* ItsMapSpat_TestCases.ttcn, line 500 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_10: PASS: Successfully received MAP message. ***");
current_location.update_lineno(501);
/* ItsMapSpat_TestCases.ttcn, line 501 */
v__intersections = const_cast< const LibItsMapSpat__TestSystem::MapInd&>(v__message).msgIn().msgMap().mapData().intersections();
break;
}
}
if (tmp_12_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(503);
/* ItsMapSpat_TestCases.ttcn, line 503 */
tmp_12_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_12_alt_flag_1 == ALT_YES) {
current_location.update_lineno(504);
/* ItsMapSpat_TestCases.ttcn, line 504 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_10: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(505);
/* ItsMapSpat_TestCases.ttcn, line 505 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_12_default_flag == ALT_MAYBE) {
tmp_12_default_flag = TTCN_Default::try_altsteps();
if (tmp_12_default_flag == ALT_YES || tmp_12_default_flag == ALT_BREAK) break;
else if (tmp_12_default_flag == ALT_REPEAT) goto tmp_12;
}
current_location.update_lineno(497);
/* ItsMapSpat_TestCases.ttcn, line 497 */
if (tmp_12_alt_flag_0 == ALT_NO && tmp_12_alt_flag_1 == ALT_NO && tmp_12_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 497 and 507.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(508);
/* ItsMapSpat_TestCases.ttcn, line 508 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(511);
/* ItsMapSpat_TestCases.ttcn, line 511 */
LibItsMapSpat__Functions::f__utTriggerEvent(LibItsMapSpat__Templates::m__utTriggerEvent(LibItsMapSpat__TypesAndValues::Event::spatMsg));
current_location.update_lineno(513);
/* ItsMapSpat_TestCases.ttcn, line 513 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(514);
/* ItsMapSpat_TestCases.ttcn, line 514 */
{
tmp_14:
alt_status tmp_14_alt_flag_0 = ALT_MAYBE;
alt_status tmp_14_alt_flag_1 = ALT_MAYBE;
alt_status tmp_14_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_14_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(515);
/* ItsMapSpat_TestCases.ttcn, line 515 */
tmp_14_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__anySpat)), &(v__spat), any_compref, NULL);
if (tmp_14_alt_flag_0 == ALT_YES) {
current_location.update_lineno(516);
/* ItsMapSpat_TestCases.ttcn, line 516 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(517);
/* ItsMapSpat_TestCases.ttcn, line 517 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_10: Successfully received SPAT message. ***");
current_location.update_lineno(518);
/* ItsMapSpat_TestCases.ttcn, line 518 */
i = 0;
current_location.update_lineno(518);
/* ItsMapSpat_TestCases.ttcn, line 518 */
for ( ; ; ) {
current_location.update_lineno(518);
/* ItsMapSpat_TestCases.ttcn, line 518 */
{
boolean tmp_16;
tmp_16 = (i < v__intersections.lengthof());
if (tmp_16) tmp_16 = (!(v__result));
if (!tmp_16) break;
}
current_location.update_lineno(519);
/* ItsMapSpat_TestCases.ttcn, line 519 */
j = 0;
current_location.update_lineno(519);
/* ItsMapSpat_TestCases.ttcn, line 519 */
for ( ; ; ) {
current_location.update_lineno(519);
/* ItsMapSpat_TestCases.ttcn, line 519 */
if (!(j < const_cast< const LibItsMapSpat__TestSystem::SpatInd&>(v__spat).msgIn().msgSpat().spatData().intersections().lengthof())) break;
current_location.update_lineno(520);
/* ItsMapSpat_TestCases.ttcn, line 520 */
if ((const_cast< const DSRC::IntersectionGeometryList&>(v__intersections)[i].id() == const_cast< const LibItsMapSpat__TestSystem::SpatInd&>(v__spat).msgIn().msgSpat().spatData().intersections()[j].id())) {
current_location.update_lineno(521);
/* ItsMapSpat_TestCases.ttcn, line 521 */
v__result = TRUE;
}
current_location.update_lineno(519);
/* ItsMapSpat_TestCases.ttcn, line 519 */
{
INTEGER tmp_19;
++j;
}
}
current_location.update_lineno(518);
/* ItsMapSpat_TestCases.ttcn, line 518 */
{
INTEGER tmp_20;
++i;
}
}
current_location.update_lineno(525);
/* ItsMapSpat_TestCases.ttcn, line 525 */
if (v__result) {
current_location.update_lineno(526);
/* ItsMapSpat_TestCases.ttcn, line 526 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_10: PASS: concordance of intersection ID. ***");
current_location.update_lineno(527);
/* ItsMapSpat_TestCases.ttcn, line 527 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(530);
/* ItsMapSpat_TestCases.ttcn, line 530 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_10: FAIL: non concordance of intersection ID. ***");
current_location.update_lineno(531);
/* ItsMapSpat_TestCases.ttcn, line 531 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
break;
}
}
if (tmp_14_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(534);
/* ItsMapSpat_TestCases.ttcn, line 534 */
tmp_14_alt_flag_1 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_14_alt_flag_1 == ALT_YES) {
current_location.update_lineno(535);
/* ItsMapSpat_TestCases.ttcn, line 535 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_10: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(536);
/* ItsMapSpat_TestCases.ttcn, line 536 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_14_default_flag == ALT_MAYBE) {
tmp_14_default_flag = TTCN_Default::try_altsteps();
if (tmp_14_default_flag == ALT_YES || tmp_14_default_flag == ALT_BREAK) break;
else if (tmp_14_default_flag == ALT_REPEAT) goto tmp_14;
}
current_location.update_lineno(514);
/* ItsMapSpat_TestCases.ttcn, line 514 */
if (tmp_14_alt_flag_0 == ALT_NO && tmp_14_alt_flag_1 == ALT_NO && tmp_14_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 514 and 538.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(541);
/* ItsMapSpat_TestCases.ttcn, line 541 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(542);
/* ItsMapSpat_TestCases.ttcn, line 542 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_10 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__11(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 573, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_11");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_11", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(578);
/* ItsMapSpat_TestCases.ttcn, line 578 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(581);
/* ItsMapSpat_TestCases.ttcn, line 581 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(584);
/* ItsMapSpat_TestCases.ttcn, line 584 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(585);
/* ItsMapSpat_TestCases.ttcn, line 585 */
{
tmp_21:
alt_status tmp_21_alt_flag_0 = ALT_MAYBE;
alt_status tmp_21_alt_flag_1 = ALT_MAYBE;
alt_status tmp_21_alt_flag_2 = ALT_MAYBE;
alt_status tmp_21_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_21_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(586);
/* ItsMapSpat_TestCases.ttcn, line 586 */
tmp_21_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__mapWellFormatted)), NULL, any_compref, NULL);
if (tmp_21_alt_flag_0 == ALT_YES) {
current_location.update_lineno(587);
/* ItsMapSpat_TestCases.ttcn, line 587 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(588);
/* ItsMapSpat_TestCases.ttcn, line 588 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_11: PASS: Successfully received a well formatted MAP. ***");
current_location.update_lineno(589);
/* ItsMapSpat_TestCases.ttcn, line 589 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_21_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(591);
/* ItsMapSpat_TestCases.ttcn, line 591 */
tmp_21_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), NULL, any_compref, NULL);
if (tmp_21_alt_flag_1 == ALT_YES) {
current_location.update_lineno(592);
/* ItsMapSpat_TestCases.ttcn, line 592 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(593);
/* ItsMapSpat_TestCases.ttcn, line 593 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_11: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(594);
/* ItsMapSpat_TestCases.ttcn, line 594 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_21_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(596);
/* ItsMapSpat_TestCases.ttcn, line 596 */
tmp_21_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_21_alt_flag_2 == ALT_YES) {
current_location.update_lineno(597);
/* ItsMapSpat_TestCases.ttcn, line 597 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_11: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(598);
/* ItsMapSpat_TestCases.ttcn, line 598 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_21_default_flag == ALT_MAYBE) {
tmp_21_default_flag = TTCN_Default::try_altsteps();
if (tmp_21_default_flag == ALT_YES || tmp_21_default_flag == ALT_BREAK) break;
else if (tmp_21_default_flag == ALT_REPEAT) goto tmp_21;
}
current_location.update_lineno(585);
/* ItsMapSpat_TestCases.ttcn, line 585 */
if (tmp_21_alt_flag_0 == ALT_NO && tmp_21_alt_flag_1 == ALT_NO && tmp_21_alt_flag_2 == ALT_NO && tmp_21_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 585 and 600.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(603);
/* ItsMapSpat_TestCases.ttcn, line 603 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(604);
/* ItsMapSpat_TestCases.ttcn, line 604 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_11 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__12(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 631, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_12");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_12", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(636);
/* ItsMapSpat_TestCases.ttcn, line 636 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(639);
/* ItsMapSpat_TestCases.ttcn, line 639 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(643);
/* ItsMapSpat_TestCases.ttcn, line 643 */
LibItsMapSpat__Functions::f__utTriggerEvent(LibItsMapSpat__Templates::m__utTriggerEvent(LibItsMapSpat__TypesAndValues::Event::spatMsg));
current_location.update_lineno(645);
/* ItsMapSpat_TestCases.ttcn, line 645 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(646);
/* ItsMapSpat_TestCases.ttcn, line 646 */
{
tmp_22:
alt_status tmp_22_alt_flag_0 = ALT_MAYBE;
alt_status tmp_22_alt_flag_1 = ALT_MAYBE;
alt_status tmp_22_alt_flag_2 = ALT_MAYBE;
alt_status tmp_22_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_22_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(647);
/* ItsMapSpat_TestCases.ttcn, line 647 */
tmp_22_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__spatSubId1)), NULL, any_compref, NULL);
if (tmp_22_alt_flag_0 == ALT_YES) {
current_location.update_lineno(648);
/* ItsMapSpat_TestCases.ttcn, line 648 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(649);
/* ItsMapSpat_TestCases.ttcn, line 649 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_12: PASS: Successfully received SPAT with DSRCmsgSubID == 1. ***");
current_location.update_lineno(650);
/* ItsMapSpat_TestCases.ttcn, line 650 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_22_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(652);
/* ItsMapSpat_TestCases.ttcn, line 652 */
tmp_22_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__anySpat)), NULL, any_compref, NULL);
if (tmp_22_alt_flag_1 == ALT_YES) {
current_location.update_lineno(653);
/* ItsMapSpat_TestCases.ttcn, line 653 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(654);
/* ItsMapSpat_TestCases.ttcn, line 654 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_12: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(655);
/* ItsMapSpat_TestCases.ttcn, line 655 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_22_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(657);
/* ItsMapSpat_TestCases.ttcn, line 657 */
tmp_22_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_22_alt_flag_2 == ALT_YES) {
current_location.update_lineno(658);
/* ItsMapSpat_TestCases.ttcn, line 658 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_12: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(659);
/* ItsMapSpat_TestCases.ttcn, line 659 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_22_default_flag == ALT_MAYBE) {
tmp_22_default_flag = TTCN_Default::try_altsteps();
if (tmp_22_default_flag == ALT_YES || tmp_22_default_flag == ALT_BREAK) break;
else if (tmp_22_default_flag == ALT_REPEAT) goto tmp_22;
}
current_location.update_lineno(646);
/* ItsMapSpat_TestCases.ttcn, line 646 */
if (tmp_22_alt_flag_0 == ALT_NO && tmp_22_alt_flag_1 == ALT_NO && tmp_22_alt_flag_2 == ALT_NO && tmp_22_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 646 and 661.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(664);
/* ItsMapSpat_TestCases.ttcn, line 664 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(665);
/* ItsMapSpat_TestCases.ttcn, line 665 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_12 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__15(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 692, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_15");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_15", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(695);
/* ItsMapSpat_TestCases.ttcn, line 695 */
LibItsMapSpat__TestSystem::MapInd v__message;
current_location.update_lineno(696);
/* ItsMapSpat_TestCases.ttcn, line 696 */
INTEGER c__gnHtTsb(5);
current_location.update_lineno(697);
/* ItsMapSpat_TestCases.ttcn, line 697 */
INTEGER c__gnHstShb(0);
current_location.update_lineno(700);
/* ItsMapSpat_TestCases.ttcn, line 700 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(703);
/* ItsMapSpat_TestCases.ttcn, line 703 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(706);
/* ItsMapSpat_TestCases.ttcn, line 706 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(707);
/* ItsMapSpat_TestCases.ttcn, line 707 */
{
tmp_23:
alt_status tmp_23_alt_flag_0 = ALT_MAYBE;
alt_status tmp_23_alt_flag_1 = ALT_MAYBE;
alt_status tmp_23_alt_flag_2 = ALT_MAYBE;
alt_status tmp_23_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_23_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(708);
/* ItsMapSpat_TestCases.ttcn, line 708 */
tmp_23_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapIndWithGnParameters(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__mapWellFormatted), LibItsMapSpat__Templates::mw__mapIndWithGnParameters_p__gnNextHeader_defval, INTEGER_template(5), INTEGER_template(0), LibItsMapSpat__Templates::mw__mapIndWithGnParameters_p__gnLifetime_defval, LibItsMapSpat__Templates::mw__mapIndWithGnParameters_p__gnTrafficClass_defval), &(v__message), any_compref, NULL);
if (tmp_23_alt_flag_0 == ALT_YES) {
current_location.update_lineno(709);
/* ItsMapSpat_TestCases.ttcn, line 709 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(710);
/* ItsMapSpat_TestCases.ttcn, line 710 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_15: PASS: Successfully received MAP. ***");
current_location.update_lineno(711);
/* ItsMapSpat_TestCases.ttcn, line 711 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_23_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(713);
/* ItsMapSpat_TestCases.ttcn, line 713 */
tmp_23_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__mapInd(LibItsMapSpat__Templates::mw__mapPdu(LibItsMapSpat__Templates::mw__itsPduHeaderMap(LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderMap_p__messageID_defval), LibItsMapSpat__Templates::mw__anyMap)), NULL, any_compref, NULL);
if (tmp_23_alt_flag_1 == ALT_YES) {
current_location.update_lineno(714);
/* ItsMapSpat_TestCases.ttcn, line 714 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(715);
/* ItsMapSpat_TestCases.ttcn, line 715 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_15: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(716);
/* ItsMapSpat_TestCases.ttcn, line 716 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_23_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(718);
/* ItsMapSpat_TestCases.ttcn, line 718 */
tmp_23_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_23_alt_flag_2 == ALT_YES) {
current_location.update_lineno(719);
/* ItsMapSpat_TestCases.ttcn, line 719 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_15: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(720);
/* ItsMapSpat_TestCases.ttcn, line 720 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_23_default_flag == ALT_MAYBE) {
tmp_23_default_flag = TTCN_Default::try_altsteps();
if (tmp_23_default_flag == ALT_YES || tmp_23_default_flag == ALT_BREAK) break;
else if (tmp_23_default_flag == ALT_REPEAT) goto tmp_23;
}
current_location.update_lineno(707);
/* ItsMapSpat_TestCases.ttcn, line 707 */
if (tmp_23_alt_flag_0 == ALT_NO && tmp_23_alt_flag_1 == ALT_NO && tmp_23_alt_flag_2 == ALT_NO && tmp_23_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 707 and 722.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(725);
/* ItsMapSpat_TestCases.ttcn, line 725 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(726);
/* ItsMapSpat_TestCases.ttcn, line 726 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_15 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSD__BV__16(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 753, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSD_BV_16");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSD_BV_16", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(756);
/* ItsMapSpat_TestCases.ttcn, line 756 */
LibItsMapSpat__TestSystem::SpatInd v__message;
current_location.update_lineno(757);
/* ItsMapSpat_TestCases.ttcn, line 757 */
INTEGER c__gnHtTsb(5);
current_location.update_lineno(758);
/* ItsMapSpat_TestCases.ttcn, line 758 */
INTEGER c__gnHstShb(0);
current_location.update_lineno(761);
/* ItsMapSpat_TestCases.ttcn, line 761 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(764);
/* ItsMapSpat_TestCases.ttcn, line 764 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(767);
/* ItsMapSpat_TestCases.ttcn, line 767 */
LibItsMapSpat__Functions::f__utTriggerEvent(LibItsMapSpat__Templates::m__utTriggerEvent(LibItsMapSpat__TypesAndValues::Event::spatMsg));
current_location.update_lineno(769);
/* ItsMapSpat_TestCases.ttcn, line 769 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.start();
current_location.update_lineno(770);
/* ItsMapSpat_TestCases.ttcn, line 770 */
{
tmp_24:
alt_status tmp_24_alt_flag_0 = ALT_MAYBE;
alt_status tmp_24_alt_flag_1 = ALT_MAYBE;
alt_status tmp_24_alt_flag_2 = ALT_MAYBE;
alt_status tmp_24_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_24_alt_flag_0 == ALT_MAYBE) {
current_location.update_lineno(771);
/* ItsMapSpat_TestCases.ttcn, line 771 */
tmp_24_alt_flag_0 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatIndWithGnParameters(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__spatSubId1), LibItsMapSpat__Templates::mw__spatIndWithGnParameters_p__gnNextHeader_defval, INTEGER_template(5), INTEGER_template(0), LibItsMapSpat__Templates::mw__spatIndWithGnParameters_p__gnLifetime_defval, LibItsMapSpat__Templates::mw__spatIndWithGnParameters_p__gnTrafficClass_defval), &(v__message), any_compref, NULL);
if (tmp_24_alt_flag_0 == ALT_YES) {
current_location.update_lineno(772);
/* ItsMapSpat_TestCases.ttcn, line 772 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(773);
/* ItsMapSpat_TestCases.ttcn, line 773 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_16: PASS: Successfully received SPAT. ***");
current_location.update_lineno(774);
/* ItsMapSpat_TestCases.ttcn, line 774 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
break;
}
}
if (tmp_24_alt_flag_1 == ALT_MAYBE) {
current_location.update_lineno(776);
/* ItsMapSpat_TestCases.ttcn, line 776 */
tmp_24_alt_flag_1 = LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.receive(LibItsMapSpat__Templates::mw__spatInd(LibItsMapSpat__Templates::mw__spatPdu(LibItsMapSpat__Templates::mw__itsPduHeaderSpat(LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__stationID_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__protocolVersion_defval, LibItsMapSpat__Templates::mw__itsPduHeaderSpat_p__messageID_defval), LibItsMapSpat__Templates::mw__anySpat)), NULL, any_compref, NULL);
if (tmp_24_alt_flag_1 == ALT_YES) {
current_location.update_lineno(777);
/* ItsMapSpat_TestCases.ttcn, line 777 */
LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.stop();
current_location.update_lineno(778);
/* ItsMapSpat_TestCases.ttcn, line 778 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_16: FAIL: Received an incorrect MAP message. ***");
current_location.update_lineno(779);
/* ItsMapSpat_TestCases.ttcn, line 779 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
break;
}
}
if (tmp_24_alt_flag_2 == ALT_MAYBE) {
current_location.update_lineno(781);
/* ItsMapSpat_TestCases.ttcn, line 781 */
tmp_24_alt_flag_2 = LibItsCommon__TestSystem::ItsBaseComponent_component_tc__ac.timeout();
if (tmp_24_alt_flag_2 == ALT_YES) {
current_location.update_lineno(782);
/* ItsMapSpat_TestCases.ttcn, line 782 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSD_BV_16: INCONC: Timeout while awaiting the reception of a message. ***");
current_location.update_lineno(783);
/* ItsMapSpat_TestCases.ttcn, line 783 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__timeout);
break;
}
}
if (tmp_24_default_flag == ALT_MAYBE) {
tmp_24_default_flag = TTCN_Default::try_altsteps();
if (tmp_24_default_flag == ALT_YES || tmp_24_default_flag == ALT_BREAK) break;
else if (tmp_24_default_flag == ALT_REPEAT) goto tmp_24;
}
current_location.update_lineno(770);
/* ItsMapSpat_TestCases.ttcn, line 770 */
if (tmp_24_alt_flag_0 == ALT_NO && tmp_24_alt_flag_1 == ALT_NO && tmp_24_alt_flag_2 == ALT_NO && tmp_24_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file ItsMapSpat_TestCases.ttcn between lines 770 and 785.");
TTCN_Snapshot::take_new(TRUE);
}
}
current_location.update_lineno(788);
/* ItsMapSpat_TestCases.ttcn, line 788 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(789);
/* ItsMapSpat_TestCases.ttcn, line 789 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSD_BV_16 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSP__BV__01(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 820, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSP_BV_01");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSP_BV_01", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(823);
/* ItsMapSpat_TestCases.ttcn, line 823 */
LibItsMapSpat__TestSystem::MapReq v__mapReq;
current_location.update_lineno(824);
/* ItsMapSpat_TestCases.ttcn, line 824 */
INTEGER i;
current_location.update_lineno(827);
/* ItsMapSpat_TestCases.ttcn, line 827 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(830);
/* ItsMapSpat_TestCases.ttcn, line 830 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(833);
/* ItsMapSpat_TestCases.ttcn, line 833 */
v__mapReq = LibItsMapSpat__Templates::m__mapReq(LibItsMapSpat__Templates::m__mapPdu(LibItsMapSpat__Templates::m__map)).valueof();
current_location.update_lineno(834);
/* ItsMapSpat_TestCases.ttcn, line 834 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.send(v__mapReq);
current_location.update_lineno(836);
/* ItsMapSpat_TestCases.ttcn, line 836 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TAC);
current_location.update_lineno(837);
/* ItsMapSpat_TestCases.ttcn, line 837 */
i = 0;
current_location.update_lineno(837);
/* ItsMapSpat_TestCases.ttcn, line 837 */
for ( ; ; ) {
current_location.update_lineno(837);
/* ItsMapSpat_TestCases.ttcn, line 837 */
{
boolean tmp_27;
tmp_27 = (i < LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utMapEvents.lengthof());
if (tmp_27) tmp_27 = (!(MAP__SPAT__ETSI::MAP__PDU_template(const_cast< const LibItsMapSpat__TypesAndValues::UtMapEventIndList&>(LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utMapEvents)[i].mapMsg()).match(const_cast< const LibItsMapSpat__TestSystem::MapReq&>(v__mapReq).msgOut(), TRUE)));
if (!tmp_27) break;
}
current_location.update_lineno(837);
/* ItsMapSpat_TestCases.ttcn, line 837 */
{
INTEGER tmp_28;
++i;
}
}
current_location.update_lineno(840);
/* ItsMapSpat_TestCases.ttcn, line 840 */
if ((i < LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utMapEvents.lengthof())) {
current_location.update_lineno(841);
/* ItsMapSpat_TestCases.ttcn, line 841 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSP_BV_01: PASS: MAP was transmitted to upper layer ***");
current_location.update_lineno(842);
/* ItsMapSpat_TestCases.ttcn, line 842 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(845);
/* ItsMapSpat_TestCases.ttcn, line 845 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSP_BV_01: FAIL: MAP was not transmitted to upper layer ***");
current_location.update_lineno(846);
/* ItsMapSpat_TestCases.ttcn, line 846 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(850);
/* ItsMapSpat_TestCases.ttcn, line 850 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(851);
/* ItsMapSpat_TestCases.ttcn, line 851 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSP_BV_01 was stopped.");
}
return TTCN_Runtime::end_testcase();
}

verdicttype testcase_TC__MAP__SPAT__MSP__BV__02(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 878, TTCN_Location::LOCATION_TESTCASE, "TC_MAP_SPAT_MSP_BV_02");
try {
TTCN_Runtime::begin_testcase("ItsMapSpat_TestCases", "TC_MAP_SPAT_MSP_BV_02", "LibItsMapSpat_TestSystem", "ItsMapSpat", "LibItsMapSpat_TestSystem", "ItsMapSpatSystem", has_timer, timer_value);
current_location.update_lineno(881);
/* ItsMapSpat_TestCases.ttcn, line 881 */
LibItsMapSpat__TestSystem::SpatReq v__spatReq;
current_location.update_lineno(882);
/* ItsMapSpat_TestCases.ttcn, line 882 */
INTEGER i;
current_location.update_lineno(885);
/* ItsMapSpat_TestCases.ttcn, line 885 */
LibItsMapSpat__Functions::f__cfUp();
current_location.update_lineno(888);
/* ItsMapSpat_TestCases.ttcn, line 888 */
LibCommon__Sync::f__selfOrClientSyncAndVerdictPreamble(LibCommon__Sync::c__prDone, LibCommon__VerdictControl::FncRetCode::e__success);
current_location.update_lineno(891);
/* ItsMapSpat_TestCases.ttcn, line 891 */
v__spatReq = LibItsMapSpat__Templates::m__spatReq(LibItsMapSpat__Templates::m__spatPdu(LibItsMapSpat__Templates::m__spat)).valueof();
current_location.update_lineno(892);
/* ItsMapSpat_TestCases.ttcn, line 892 */
LibItsMapSpat__TestSystem::ItsMapSpat_component_mapSpatPort.send(v__spatReq);
current_location.update_lineno(894);
/* ItsMapSpat_TestCases.ttcn, line 894 */
LibCommon__Time::f__sleep(LibCommon__Time::PX__TAC);
current_location.update_lineno(895);
/* ItsMapSpat_TestCases.ttcn, line 895 */
i = 0;
current_location.update_lineno(895);
/* ItsMapSpat_TestCases.ttcn, line 895 */
for ( ; ; ) {
current_location.update_lineno(895);
/* ItsMapSpat_TestCases.ttcn, line 895 */
{
boolean tmp_31;
tmp_31 = (i < LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utSpatEvents.lengthof());
if (tmp_31) tmp_31 = (!(MAP__SPAT__ETSI::SPAT__PDU_template(const_cast< const LibItsMapSpat__TypesAndValues::UtSpatEventIndList&>(LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utSpatEvents)[i].spatMsg()).match(const_cast< const LibItsMapSpat__TestSystem::SpatReq&>(v__spatReq).msgOut(), TRUE)));
if (!tmp_31) break;
}
current_location.update_lineno(895);
/* ItsMapSpat_TestCases.ttcn, line 895 */
{
INTEGER tmp_32;
++i;
}
}
current_location.update_lineno(898);
/* ItsMapSpat_TestCases.ttcn, line 898 */
if ((i < LibItsMapSpat__TestSystem::ItsMapSpat_component_vc__utSpatEvents.lengthof())) {
current_location.update_lineno(899);
/* ItsMapSpat_TestCases.ttcn, line 899 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSP_BV_02: PASS: SPAT was transmitted to upper layer ***");
current_location.update_lineno(900);
/* ItsMapSpat_TestCases.ttcn, line 900 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__success);
}
else {
current_location.update_lineno(903);
/* ItsMapSpat_TestCases.ttcn, line 903 */
TTCN_Logger::log_str(TTCN_USER, "*** TC_MAP_SPAT_MSP_BV_02: FAIL: SPAT was not transmitted to upper layer ***");
current_location.update_lineno(904);
/* ItsMapSpat_TestCases.ttcn, line 904 */
LibCommon__Sync::f__selfOrClientSyncAndVerdict(LibCommon__Sync::c__tbDone, LibCommon__VerdictControl::FncRetCode::e__error);
}
current_location.update_lineno(908);
/* ItsMapSpat_TestCases.ttcn, line 908 */
LibItsMapSpat__Functions::f__poDefault();
current_location.update_lineno(909);
/* ItsMapSpat_TestCases.ttcn, line 909 */
LibItsMapSpat__Functions::f__cfDown();
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case TC_MAP_SPAT_MSP_BV_02 was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "ItsMapSpat_TestCases");
LibItsMapSpat__Functions::module_object.pre_init_module();
LibItsMapSpat__Pics::module_object.pre_init_module();
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_01", testcase_TC__MAP__SPAT__MSD__BV__01);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_02", testcase_TC__MAP__SPAT__MSD__BV__02);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_05", testcase_TC__MAP__SPAT__MSD__BV__05);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_06", testcase_TC__MAP__SPAT__MSD__BV__06);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_08", testcase_TC__MAP__SPAT__MSD__BV__08);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_09", testcase_TC__MAP__SPAT__MSD__BV__09);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_10", testcase_TC__MAP__SPAT__MSD__BV__10);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_11", testcase_TC__MAP__SPAT__MSD__BV__11);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_12", testcase_TC__MAP__SPAT__MSD__BV__12);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_15", testcase_TC__MAP__SPAT__MSD__BV__15);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSD_BV_16", testcase_TC__MAP__SPAT__MSD__BV__16);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSP_BV_01", testcase_TC__MAP__SPAT__MSP__BV__01);
module_object.add_testcase_nonpard("TC_MAP_SPAT_MSP_BV_02", testcase_TC__MAP__SPAT__MSP__BV__02);
}

static void post_init_module()
{
TTCN_Location current_location("ItsMapSpat_TestCases.ttcn", 0, TTCN_Location::LOCATION_UNKNOWN, "ItsMapSpat_TestCases");
LibItsMapSpat__Functions::module_object.post_init_module();
LibItsMapSpat__Pics::module_object.post_init_module();
}


} /* end of namespace */
