/**
 *    @author   ETSI / STF484
 *    @version  $URL: file:///D:/RepositoriesNew/LibIts/trunk/ttcn/MapSpat/LibItsMapSpat_Functions.ttcn $
 *              $Id: LibItsMapSpat_Functions.ttcn 1201 2015-06-03 08:50:31Z mullers $
 *    @desc     Module containing common functions for ITS MAP SPAT
 *
 *            This file is compatible with the Titan compiler R4C
 *
 *
 */
module LibItsMapSpat_Functions {
    
    // LibCommon
    import from LibCommon_Sync all;
    import from LibCommon_Time all;
    import from LibCommon_VerdictControl all;
    
    // LibIts
    import from LibItsMapSpat_TestSystem all;
    import from LibItsMapSpat_Templates all;
    import from LibItsMapSpat_TypesAndValues all;
    import from LibItsCommon_Functions all;
    import from LibItsCommon_TypesAndValues all;
    import from ITS_Container language "ASN.1:1997" all;
    import from DSRC language "ASN.1:1997" all;
    import from REG_D language "ASN.1:1997" all;

    group utFuntions { 
            
        /**
         * @desc    Requests to bring the IUT in an initial state
         * @param   p_init The initialisation to trigger.
         */
        function f_utInitializeIut(template (value) UtInitialize p_init) runs on ItsMapSpat {

                        var UtInitializeResult v_UtInitializeResult; //FIXME!!!
			v_UtInitializeResult.utInitializeResult := true; //FIXME!!!
            
            utPort.send(p_init);
            tc_wait.start;
            alt {
                [] utPort.receive(UtInitializeResult:v_UtInitializeResult) {  //FIXME!!!
                    tc_wait.stop;
                    log("*** " & testcasename() & ": INFO: IUT initialized ***");
                }
                [] tc_wait.timeout {
	                log("*** " & testcasename() & ": INFO: Could not receive expected UT message from IUT in time ***");
	                f_selfOrClientSyncAndVerdict("error", e_timeout);
	            }
	            [else] { // Shortcut defaults
                    //f_sleep(0.050); // 50 ms
	                repeat; 
	            }
            }            
        }
        
        /**
         * @desc    Triggers an event from the application layer
         * @param   p_event The event to trigger.
         */
        function f_utTriggerEvent (template (value) UtMapSpatTrigger p_event) runs on ItsMapSpat return MsgCount {
            var MsgCount v_msgCount;
            var UtMapSpatTriggerResult v_result;
            
            utPort.send ( p_event );
            tc_wait.start;
            alt {
                [] utPort.receive ( UtMapSpatTriggerResult:? ) -> value v_result {
                    tc_wait.stop;
                    v_msgCount := v_result.msgCount;
                    if ( not v_result.result ) {
                    	f_selfOrClientSyncAndVerdict("MapSpat Trigger failed", e_error);
                    }
                        
                }
	            [] tc_wait.timeout {
	                log("*** " & testcasename() & ": INFO: Could not receive expected UT message from IUT in time ***");
	                f_selfOrClientSyncAndVerdict("error", e_timeout);
	            }
	            [else] { // Shortcut defaults
                    //f_sleep(0.050); // 50 ms
	                repeat; 
	            }
            }
            
            return v_msgCount;
        }
    } // end group utFuntions
    
    group altsteps {
        
        /**
         * @desc Default handling cf01 de-initialisation.
         */
        altstep a_cf01Down() runs on ItsMapSpat {
            [] a_shutdown() {
                f_poDefault();
                f_cfDown();
                log("*** a_cf01Down: INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
                stop;
            }
        }
        
        /**
         * @desc The base default.
         */
        altstep a_default() runs on ItsMapSpat {
            [] mapSpatPort.receive ( mw_mapInd ( mw_mapPdu ( ? , mw_anyMap ) ) ) { 
                log("*** " & testcasename() & ": INFO: MAP message received in default ***");
                vc_mapReceived := true;
                repeat;
            }
            [] mapSpatPort.receive ( mw_spatInd ( mw_spatPdu ( ? , mw_anySpat ) ) ) { 
                log("*** " & testcasename() & ": INFO: MAP message received in default ***");
                vc_spatReceived := true;
                repeat;
            }
            [] mapSpatPort.receive {
                log("*** " & testcasename() & ": ERROR: Received an unexpected message ***");
                f_selfOrClientSyncAndVerdict("error", e_error);
            }
            [] any timer.timeout {
                log("*** " & testcasename() & ": INCONC: Timeout while awaiting the reception of a message ***");
                f_selfOrClientSyncAndVerdict("error", e_timeout);
            }
            [] a_shutdown() {
                f_poDefault();
                f_cfDown();
                log("*** " & testcasename() & ": INFO: TEST COMPONENT NOW STOPPING ITSELF! ***");
                stop;   
            }
        }
        
        /**
         * @desc The default for handling upper tester messages.
         */
        altstep a_utDefault() runs on ItsMapSpat {
            var UtMapEventInd v_mapevent;
            var UtSpatEventInd v_spatevent;
            [] utPort.receive(UtMapEventInd:?) -> value v_mapevent {
                //store every upper tester indication received
                vc_utMapEvents[lengthof(vc_utMapEvents)] := v_mapevent;
                repeat;
            }
            [] utPort.receive(UtSpatEventInd:?) -> value v_spatevent {
                //store every upper tester indication received
                vc_utSpatEvents[lengthof(vc_utSpatEvents)] := v_spatevent;
                repeat;
            }
            [] utPort.receive {
                log("*** " & testcasename() & ": INFO: Received unhandled/unknown UT message from IUT ***");
                repeat;
            }
        }
        
    } // end group altsteps

    group mapSpatConfigurationFunctions {
        
        /**
         * @desc    Setups default configuration   
         */
        function f_cfUp() runs on ItsMapSpat {
            
            map(self:utPort, system:utPort);
            map(self:mapSpatPort, system:mapSpatPort);
            
            // Connect
            f_connect4SelfOrClientSync();
            
            //Initialze the IUT
            f_prInitialState();
            
        } // end f_cfUp
        
        /**
         * @desc    Deletes default configuration 
         */
        function f_cfDown() runs on ItsMapSpat {
            
            unmap(self:utPort, system:utPort);
            unmap(self:mapSpatPort, system:mapSpatPort);
            
            f_disconnect4SelfOrClientSync();
        } // end f_cfDown
        
    } // end of mapSpatConfigurationFunctions
    
    group preambles {
        
        /**
         * @desc The default preamble.
         */
        function f_prDefault() runs on ItsMapSpat {
            vc_default := activate(a_default());
            activate(a_utDefault());
        }
        
        /**
         * @desc Brings the IUT into an initial state.
         * @return FncRetCode 
         */
        function f_prInitialState() runs on ItsMapSpat return FncRetCode {
            var FncRetCode v_ret := e_success;
            
            f_utInitializeIut(m_mapSpatInitialize);
            f_prDefault();
            return v_ret;
        }
        
    } // end group preambles

    group postambles {
        
        /**
         * @desc The default postamble.
         */
        function f_poDefault() runs on ItsMapSpat {
            //empty
        }
        
    } // end group postambles
        
    group extFunctions {

        /**
         * @desc    External function to compute distance between two points
         * @param   p_rawData   Octetstring to analyse
         * @return  true or false according to the check
         */
      //  external function fx_checkUperEncoding ( in RawData p_rawData ) return boolean;   //FIXME!!!

    } // end group extFunctions

} // end LibItsMapSpat_Functions
